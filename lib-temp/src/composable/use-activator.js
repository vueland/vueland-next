import { ref } from 'vue';
export function activatorProps() {
    return {
        activator: {
            type: [Object, String],
            default: null,
        },
        internalActivator: Boolean,
    };
}
export const useActivator = (props) => {
    const activatorRef = ref(null);
    const activatorSizes = {};
    const listeners = {};
    const getActivator = (e) => {
        if (activatorRef.value)
            return activatorRef.value;
        const target = props.internalActivator ? props.activator.$el : document;
        if (props.inputActivator) {
            return (activatorRef.value = target.querySelector(props.inputActivator));
        }
        if (props.activator) {
            console.log(props.activator, 'props suka');
            if (typeof props.activator === 'string') {
                return (activatorRef.value = target.querySelector(props.activator));
            }
            if (props.activator.$el) {
                return (activatorRef.value = props.activator.$el);
            }
            return (activatorRef.value = props.activator);
        }
        if (e) {
            return (activatorRef.value = (e.target || e.currentTarget));
        }
        return null;
    };
    const getActivatorSizes = () => {
        const el = activatorRef.value.$el || activatorRef.value;
        activatorSizes.left = el.offsetLeft;
        activatorSizes.top = el.offsetTop;
        activatorSizes.height = el.offsetHeight;
        activatorSizes.width = el.offsetWidth;
        return activatorSizes;
    };
    const genActivatorListeners = (props, handlers) => {
        if (props.openOnHover) {
            listeners.mouseenter = (e) => handlers.mouseenter(e);
            listeners.mouseleave = (e) => handlers.mouseleave(e);
        }
        if (props.openOnClick) {
            listeners.click = (e) => handlers.click(e);
        }
        if (props.openOnContextmenu) {
            listeners.contextmenu = (e) => handlers.contextmenu(e);
        }
        return listeners;
    };
    const addActivatorEvents = () => {
        const events = Object.keys(listeners);
        if (activatorRef.value) {
            events.forEach((key) => {
                activatorRef.value.addEventListener(key, listeners[key]);
            });
        }
    };
    const removeActivatorEvents = () => {
        const events = Object.keys(listeners);
        if (activatorRef.value) {
            events.forEach((key) => {
                activatorRef.value.removeEventListener(key, listeners[key]);
            });
        }
    };
    return {
        activatorRef,
        getActivator,
        getActivatorSizes,
        addActivatorEvents,
        removeActivatorEvents,
        genActivatorListeners,
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWFjdGl2YXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb3NhYmxlL3VzZS1hY3RpdmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEdBQUcsRUFBMkIsTUFBTSxLQUFLLENBQUE7QUFJbEQsTUFBTSxVQUFVLGNBQWM7SUFDNUIsT0FBTztRQUNMLFNBQVMsRUFBRTtZQUNULElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7WUFDdEIsT0FBTyxFQUFFLElBQUk7U0FDZDtRQUNELGlCQUFpQixFQUFFLE9BQU87S0FDM0IsQ0FBQTtBQUNILENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRTtJQUNwQyxNQUFNLFlBQVksR0FDaEIsR0FBRyxDQUFvRCxJQUFJLENBQUMsQ0FBQTtJQUM5RCxNQUFNLGNBQWMsR0FBd0IsRUFBRSxDQUFBO0lBQzlDLE1BQU0sU0FBUyxHQUFnQyxFQUFFLENBQUE7SUFFakQsTUFBTSxZQUFZLEdBQUcsQ0FBQyxDQUFTLEVBQXNCLEVBQUU7UUFDckQsSUFBSSxZQUFZLENBQUMsS0FBSztZQUFFLE9BQU8sWUFBWSxDQUFDLEtBQUssQ0FBQTtRQUVqRCxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUE7UUFFdkUsSUFBSSxLQUFLLENBQUMsY0FBYyxFQUFFO1lBQ3hCLE9BQU8sQ0FBQyxZQUFZLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUE7U0FDekU7UUFFRCxJQUFJLEtBQUssQ0FBQyxTQUFTLEVBQUU7WUFDbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFBO1lBQzFDLElBQUksT0FBTyxLQUFLLENBQUMsU0FBUyxLQUFLLFFBQVEsRUFBRTtnQkFDdkMsT0FBTyxDQUFDLFlBQVksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQTthQUNwRTtZQUVELElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3ZCLE9BQU8sQ0FBQyxZQUFZLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUE7YUFDbEQ7WUFFRCxPQUFPLENBQUMsWUFBWSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUE7U0FDOUM7UUFFRCxJQUFJLENBQUMsRUFBRTtZQUNMLE9BQU8sQ0FBQyxZQUFZLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsYUFBYSxDQUFnQixDQUFDLENBQUE7U0FDM0U7UUFFRCxPQUFPLElBQUksQ0FBQTtJQUNiLENBQUMsQ0FBQTtJQUVELE1BQU0saUJBQWlCLEdBQUcsR0FBRyxFQUFFO1FBQzdCLE1BQU0sRUFBRSxHQUFHLFlBQVksQ0FBQyxLQUFNLENBQUMsR0FBRyxJQUFJLFlBQVksQ0FBQyxLQUFNLENBQUE7UUFFekQsY0FBYyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFBO1FBQ25DLGNBQWMsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQTtRQUNqQyxjQUFjLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUE7UUFDdkMsY0FBYyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFBO1FBRXJDLE9BQU8sY0FBYyxDQUFBO0lBQ3ZCLENBQUMsQ0FBQTtJQUVELE1BQU0scUJBQXFCLEdBQUcsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLEVBQUU7UUFDaEQsSUFBSSxLQUFLLENBQUMsV0FBVyxFQUFFO1lBQ3JCLFNBQVMsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDcEQsU0FBUyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUNyRDtRQUVELElBQUksS0FBSyxDQUFDLFdBQVcsRUFBRTtZQUNyQixTQUFTLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQzNDO1FBRUQsSUFBSSxLQUFLLENBQUMsaUJBQWlCLEVBQUU7WUFDM0IsU0FBUyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUN2RDtRQUVELE9BQU8sU0FBUyxDQUFBO0lBQ2xCLENBQUMsQ0FBQTtJQUVELE1BQU0sa0JBQWtCLEdBQUcsR0FBRyxFQUFFO1FBQzlCLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7UUFFckMsSUFBSSxZQUFZLENBQUMsS0FBSyxFQUFFO1lBQ3RCLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDckIsWUFBWSxDQUFDLEtBQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7WUFDM0QsQ0FBQyxDQUFDLENBQUE7U0FDSDtJQUNILENBQUMsQ0FBQTtJQUVELE1BQU0scUJBQXFCLEdBQUcsR0FBRyxFQUFFO1FBQ2pDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7UUFFckMsSUFBSSxZQUFZLENBQUMsS0FBSyxFQUFFO1lBQ3RCLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDckIsWUFBWSxDQUFDLEtBQU0sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7WUFDOUQsQ0FBQyxDQUFDLENBQUE7U0FDSDtJQUNILENBQUMsQ0FBQTtJQUVELE9BQU87UUFDTCxZQUFZO1FBQ1osWUFBWTtRQUNaLGlCQUFpQjtRQUNqQixrQkFBa0I7UUFDbEIscUJBQXFCO1FBQ3JCLHFCQUFxQjtLQUN0QixDQUFBO0FBQ0gsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVmLCBDb21wb25lbnRQdWJsaWNJbnN0YW5jZSB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IEFjdGl2YXRvckxpc3RlbmVycywgRGltZW5zaW9ucyB9IGZyb20gJy4uLy4uL3R5cGVzL2NvbXBvc2FibGVzJ1xuaW1wb3J0IHsgTWF5YmUgfSBmcm9tICcuLi8uLi90eXBlcy9iYXNlJ1xuXG5leHBvcnQgZnVuY3Rpb24gYWN0aXZhdG9yUHJvcHMoKSB7XG4gIHJldHVybiB7XG4gICAgYWN0aXZhdG9yOiB7XG4gICAgICB0eXBlOiBbT2JqZWN0LCBTdHJpbmddLFxuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICB9LFxuICAgIGludGVybmFsQWN0aXZhdG9yOiBCb29sZWFuLFxuICB9XG59XG5cbmV4cG9ydCBjb25zdCB1c2VBY3RpdmF0b3IgPSAocHJvcHMpID0+IHtcbiAgY29uc3QgYWN0aXZhdG9yUmVmID1cbiAgICByZWY8TWF5YmU8SFRNTEVsZW1lbnQgfCBDb21wb25lbnRQdWJsaWNJbnN0YW5jZTxhbnk+Pj4obnVsbClcbiAgY29uc3QgYWN0aXZhdG9yU2l6ZXM6IFBhcnRpYWw8RGltZW5zaW9ucz4gPSB7fVxuICBjb25zdCBsaXN0ZW5lcnM6IFBhcnRpYWw8QWN0aXZhdG9yTGlzdGVuZXJzPiA9IHt9XG5cbiAgY29uc3QgZ2V0QWN0aXZhdG9yID0gKGU/OiBFdmVudCk6IE1heWJlPEhUTUxFbGVtZW50PiA9PiB7XG4gICAgaWYgKGFjdGl2YXRvclJlZi52YWx1ZSkgcmV0dXJuIGFjdGl2YXRvclJlZi52YWx1ZVxuXG4gICAgY29uc3QgdGFyZ2V0ID0gcHJvcHMuaW50ZXJuYWxBY3RpdmF0b3IgPyBwcm9wcy5hY3RpdmF0b3IuJGVsIDogZG9jdW1lbnRcblxuICAgIGlmIChwcm9wcy5pbnB1dEFjdGl2YXRvcikge1xuICAgICAgcmV0dXJuIChhY3RpdmF0b3JSZWYudmFsdWUgPSB0YXJnZXQucXVlcnlTZWxlY3Rvcihwcm9wcy5pbnB1dEFjdGl2YXRvcikpXG4gICAgfVxuXG4gICAgaWYgKHByb3BzLmFjdGl2YXRvcikge1xuICAgICAgY29uc29sZS5sb2cocHJvcHMuYWN0aXZhdG9yLCAncHJvcHMgc3VrYScpXG4gICAgICBpZiAodHlwZW9mIHByb3BzLmFjdGl2YXRvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIChhY3RpdmF0b3JSZWYudmFsdWUgPSB0YXJnZXQucXVlcnlTZWxlY3Rvcihwcm9wcy5hY3RpdmF0b3IpKVxuICAgICAgfVxuXG4gICAgICBpZiAocHJvcHMuYWN0aXZhdG9yLiRlbCkge1xuICAgICAgICByZXR1cm4gKGFjdGl2YXRvclJlZi52YWx1ZSA9IHByb3BzLmFjdGl2YXRvci4kZWwpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoYWN0aXZhdG9yUmVmLnZhbHVlID0gcHJvcHMuYWN0aXZhdG9yKVxuICAgIH1cblxuICAgIGlmIChlKSB7XG4gICAgICByZXR1cm4gKGFjdGl2YXRvclJlZi52YWx1ZSA9IChlLnRhcmdldCB8fCBlLmN1cnJlbnRUYXJnZXQpIGFzIEhUTUxFbGVtZW50KVxuICAgIH1cblxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBjb25zdCBnZXRBY3RpdmF0b3JTaXplcyA9ICgpID0+IHtcbiAgICBjb25zdCBlbCA9IGFjdGl2YXRvclJlZi52YWx1ZSEuJGVsIHx8IGFjdGl2YXRvclJlZi52YWx1ZSFcblxuICAgIGFjdGl2YXRvclNpemVzLmxlZnQgPSBlbC5vZmZzZXRMZWZ0XG4gICAgYWN0aXZhdG9yU2l6ZXMudG9wID0gZWwub2Zmc2V0VG9wXG4gICAgYWN0aXZhdG9yU2l6ZXMuaGVpZ2h0ID0gZWwub2Zmc2V0SGVpZ2h0XG4gICAgYWN0aXZhdG9yU2l6ZXMud2lkdGggPSBlbC5vZmZzZXRXaWR0aFxuXG4gICAgcmV0dXJuIGFjdGl2YXRvclNpemVzXG4gIH1cblxuICBjb25zdCBnZW5BY3RpdmF0b3JMaXN0ZW5lcnMgPSAocHJvcHMsIGhhbmRsZXJzKSA9PiB7XG4gICAgaWYgKHByb3BzLm9wZW5PbkhvdmVyKSB7XG4gICAgICBsaXN0ZW5lcnMubW91c2VlbnRlciA9IChlKSA9PiBoYW5kbGVycy5tb3VzZWVudGVyKGUpXG4gICAgICBsaXN0ZW5lcnMubW91c2VsZWF2ZSA9IChlKSA9PiBoYW5kbGVycy5tb3VzZWxlYXZlKGUpXG4gICAgfVxuXG4gICAgaWYgKHByb3BzLm9wZW5PbkNsaWNrKSB7XG4gICAgICBsaXN0ZW5lcnMuY2xpY2sgPSAoZSkgPT4gaGFuZGxlcnMuY2xpY2soZSlcbiAgICB9XG5cbiAgICBpZiAocHJvcHMub3Blbk9uQ29udGV4dG1lbnUpIHtcbiAgICAgIGxpc3RlbmVycy5jb250ZXh0bWVudSA9IChlKSA9PiBoYW5kbGVycy5jb250ZXh0bWVudShlKVxuICAgIH1cblxuICAgIHJldHVybiBsaXN0ZW5lcnNcbiAgfVxuXG4gIGNvbnN0IGFkZEFjdGl2YXRvckV2ZW50cyA9ICgpID0+IHtcbiAgICBjb25zdCBldmVudHMgPSBPYmplY3Qua2V5cyhsaXN0ZW5lcnMpXG5cbiAgICBpZiAoYWN0aXZhdG9yUmVmLnZhbHVlKSB7XG4gICAgICBldmVudHMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGFjdGl2YXRvclJlZi52YWx1ZSEuYWRkRXZlbnRMaXN0ZW5lcihrZXksIGxpc3RlbmVyc1trZXldKVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBjb25zdCByZW1vdmVBY3RpdmF0b3JFdmVudHMgPSAoKSA9PiB7XG4gICAgY29uc3QgZXZlbnRzID0gT2JqZWN0LmtleXMobGlzdGVuZXJzKVxuXG4gICAgaWYgKGFjdGl2YXRvclJlZi52YWx1ZSkge1xuICAgICAgZXZlbnRzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBhY3RpdmF0b3JSZWYudmFsdWUhLnJlbW92ZUV2ZW50TGlzdGVuZXIoa2V5LCBsaXN0ZW5lcnNba2V5XSlcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBhY3RpdmF0b3JSZWYsXG4gICAgZ2V0QWN0aXZhdG9yLFxuICAgIGdldEFjdGl2YXRvclNpemVzLFxuICAgIGFkZEFjdGl2YXRvckV2ZW50cyxcbiAgICByZW1vdmVBY3RpdmF0b3JFdmVudHMsXG4gICAgZ2VuQWN0aXZhdG9yTGlzdGVuZXJzLFxuICB9XG59XG4iXX0=