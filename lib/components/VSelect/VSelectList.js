import { defineComponent, h, computed } from 'vue';
import { VList, VListItem, VListItemTitle } from '../VList';
import { getStringKeysValue } from '../../helpers';
export const VSelectList = defineComponent({
    name: 'v-select-list',
    props: {
        items: {
            type: Array,
            default: null,
        },
        color: {
            type: String,
            default: '#ffffff',
        },
        textColor: {
            type: String,
            default: '',
        },
        valueKey: {
            type: String,
            default: '',
        },
        selected: {
            type: [String, Number, Object],
            default: null,
        },
        activeClass: {
            type: String,
            default: '',
        }
    },
    emits: ['select'],
    setup(props, { emit }) {
        const computedSelect = computed({
            get() {
                const key = props.valueKey;
                const selectedValue = key ? props.selected ? getStringKeysValue(key, props.selected) : null : props.selected;
                return props.selected ? props.items.findIndex((it) => {
                    const itemValue = key ? getStringKeysValue(key, it) : it;
                    return itemValue === selectedValue;
                }) : null;
            },
            set(val) {
                emit('select', props.items[val]);
            },
        });
        const genItems = () => {
            return props.items.reduce((acc, it, i) => {
                const content = props.valueKey ?
                    getStringKeysValue(props.valueKey, it) : it;
                acc.push(h(VListItem, { key: i }, {
                    default: () => h(VListItemTitle, {}, {
                        default: () => content,
                    }),
                }));
                return acc;
            }, []);
        };
        const genItemsList = () => {
            return h(VList, {
                value: computedSelect.value,
                active: true,
                activeClass: props.activeClass,
                ['onUpdate:value']: val => computedSelect.value = val,
            }, {
                default: () => genItems(),
            });
        };
        return () => h('div', {
            class: 'v-select-list',
        }, [props.items ? genItemsList() : null]);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVlNlbGVjdExpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WU2VsZWN0L1ZTZWxlY3RMaXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxNQUFNLEtBQUssQ0FBQTtBQUVsRCxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFFM0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZUFBZSxDQUFBO0FBRWxELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxlQUFlLENBQUM7SUFDekMsSUFBSSxFQUFFLGVBQWU7SUFDckIsS0FBSyxFQUFFO1FBQ0wsS0FBSyxFQUFFO1lBQ0wsSUFBSSxFQUFFLEtBQUs7WUFDWCxPQUFPLEVBQUUsSUFBSTtTQUNkO1FBQ0QsS0FBSyxFQUFFO1lBQ0wsSUFBSSxFQUFFLE1BQU07WUFDWixPQUFPLEVBQUUsU0FBUztTQUNuQjtRQUNELFNBQVMsRUFBRTtZQUNULElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLEVBQUU7U0FDWjtRQUNELFFBQVEsRUFBRTtZQUNSLElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLEVBQUU7U0FDWjtRQUNELFFBQVEsRUFBRTtZQUNSLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDO1lBQzlCLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7UUFDRCxXQUFXLEVBQUU7WUFDWCxJQUFJLEVBQUUsTUFBTTtZQUNaLE9BQU8sRUFBRSxFQUFFO1NBQ1o7S0FDRjtJQUNELEtBQUssRUFBRSxDQUFDLFFBQVEsQ0FBQztJQUNqQixLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFO1FBQ25CLE1BQU0sY0FBYyxHQUFHLFFBQVEsQ0FBZ0I7WUFDN0MsR0FBRztnQkFDRCxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFBO2dCQUUxQixNQUFNLGFBQWEsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUM3RCxHQUFHLEVBQ0gsS0FBSyxDQUFDLFFBQVEsQ0FDZixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUE7Z0JBRXpCLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRTtvQkFDbkQsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtvQkFFeEQsT0FBTyxTQUFTLEtBQUssYUFBYSxDQUFBO2dCQUNwQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFBO1lBQ1gsQ0FBQztZQUVELEdBQUcsQ0FBQyxHQUFXO2dCQUNiLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO1lBQ2xDLENBQUM7U0FDRixDQUFDLENBQUE7UUFFRixNQUFNLFFBQVEsR0FBRyxHQUFHLEVBQUU7WUFDcEIsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZDLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDOUIsa0JBQWtCLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBUyxDQUFBO2dCQUVuRCxHQUFhLENBQUMsSUFBSSxDQUNqQixDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUN2QixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxFQUFFLEVBQUU7d0JBQ25DLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPO3FCQUN2QixDQUFDO2lCQUNILENBQUMsQ0FBQyxDQUFBO2dCQUVMLE9BQU8sR0FBRyxDQUFBO1lBQ1osQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO1FBQ1IsQ0FBQyxDQUFBO1FBRUQsTUFBTSxZQUFZLEdBQUcsR0FBRyxFQUFFO1lBQ3hCLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRTtnQkFDZCxLQUFLLEVBQUUsY0FBYyxDQUFDLEtBQWU7Z0JBQ3JDLE1BQU0sRUFBRSxJQUFJO2dCQUNaLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztnQkFDOUIsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLEtBQUssR0FBRyxHQUFHO2FBQ3RELEVBQUU7Z0JBQ0QsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRTthQUMxQixDQUFDLENBQUE7UUFDSixDQUFDLENBQUE7UUFFRCxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUU7WUFDcEIsS0FBSyxFQUFFLGVBQWU7U0FDdkIsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0lBQzNDLENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGgsIGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkxpc3QsIFZMaXN0SXRlbSwgVkxpc3RJdGVtVGl0bGUgfSBmcm9tICcuLi9WTGlzdCdcbi8vIEhlbHBlcnNcbmltcG9ydCB7IGdldFN0cmluZ0tleXNWYWx1ZSB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5cbmV4cG9ydCBjb25zdCBWU2VsZWN0TGlzdCA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LXNlbGVjdC1saXN0JyxcbiAgcHJvcHM6IHtcbiAgICBpdGVtczoge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gICAgY29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcjZmZmZmZmJyxcbiAgICB9LFxuICAgIHRleHRDb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJycsXG4gICAgfSxcbiAgICB2YWx1ZUtleToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJycsXG4gICAgfSxcbiAgICBzZWxlY3RlZDoge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyLCBPYmplY3RdLFxuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICB9LFxuICAgIGFjdGl2ZUNsYXNzOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJyxcbiAgICB9XG4gIH0sXG4gIGVtaXRzOiBbJ3NlbGVjdCddLFxuICBzZXR1cChwcm9wcywgeyBlbWl0IH0pIHtcbiAgICBjb25zdCBjb21wdXRlZFNlbGVjdCA9IGNvbXB1dGVkPE1heWJlPG51bWJlcj4+KHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gcHJvcHMudmFsdWVLZXlcblxuICAgICAgICBjb25zdCBzZWxlY3RlZFZhbHVlID0ga2V5ID8gcHJvcHMuc2VsZWN0ZWQgPyBnZXRTdHJpbmdLZXlzVmFsdWUoXG4gICAgICAgICAga2V5LFxuICAgICAgICAgIHByb3BzLnNlbGVjdGVkLFxuICAgICAgICApIDogbnVsbCA6IHByb3BzLnNlbGVjdGVkXG5cbiAgICAgICAgcmV0dXJuIHByb3BzLnNlbGVjdGVkID8gcHJvcHMuaXRlbXMuZmluZEluZGV4KChpdCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGl0ZW1WYWx1ZSA9IGtleSA/IGdldFN0cmluZ0tleXNWYWx1ZShrZXksIGl0KSA6IGl0XG5cbiAgICAgICAgICByZXR1cm4gaXRlbVZhbHVlID09PSBzZWxlY3RlZFZhbHVlXG4gICAgICAgIH0pIDogbnVsbFxuICAgICAgfSxcblxuICAgICAgc2V0KHZhbDogbnVtYmVyKSB7XG4gICAgICAgIGVtaXQoJ3NlbGVjdCcsIHByb3BzLml0ZW1zW3ZhbF0pXG4gICAgICB9LFxuICAgIH0pXG5cbiAgICBjb25zdCBnZW5JdGVtcyA9ICgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5pdGVtcy5yZWR1Y2UoKGFjYywgaXQsIGkpID0+IHtcbiAgICAgICAgY29uc3QgY29udGVudCA9IHByb3BzLnZhbHVlS2V5ID9cbiAgICAgICAgICBnZXRTdHJpbmdLZXlzVmFsdWUocHJvcHMudmFsdWVLZXksIGl0KSA6IGl0IGFzIGFueVxuXG4gICAgICAgIChhY2MgYXMgYW55W10pLnB1c2goXG4gICAgICAgICAgaChWTGlzdEl0ZW0sIHsga2V5OiBpIH0sIHtcbiAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IGgoVkxpc3RJdGVtVGl0bGUsIHt9LCB7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IGNvbnRlbnQsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9KSlcblxuICAgICAgICByZXR1cm4gYWNjXG4gICAgICB9LCBbXSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5JdGVtc0xpc3QgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gaChWTGlzdCwge1xuICAgICAgICB2YWx1ZTogY29tcHV0ZWRTZWxlY3QudmFsdWUgYXMgbnVtYmVyLFxuICAgICAgICBhY3RpdmU6IHRydWUsXG4gICAgICAgIGFjdGl2ZUNsYXNzOiBwcm9wcy5hY3RpdmVDbGFzcyxcbiAgICAgICAgWydvblVwZGF0ZTp2YWx1ZSddOiB2YWwgPT4gY29tcHV0ZWRTZWxlY3QudmFsdWUgPSB2YWwsXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IGdlbkl0ZW1zKCksXG4gICAgICB9KVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiBoKCdkaXYnLCB7XG4gICAgICBjbGFzczogJ3Ytc2VsZWN0LWxpc3QnLFxuICAgIH0sIFtwcm9wcy5pdGVtcyA/IGdlbkl0ZW1zTGlzdCgpIDogbnVsbF0pXG4gIH0sXG59KVxuXG4iXX0=