{"version":3,"sources":["../../../../../src/components/VModal/__tests__/VModal.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { h, defineComponent } from 'vue'\nimport { mount, VueWrapper } from '@vue/test-utils'\nimport { VModal } from '../VModal'\nimport 'regenerator-runtime/runtime'\n\nconst OVERLAY_TIMEOUT = 100\n\nconst delay = () => new Promise(res => setTimeout(res, OVERLAY_TIMEOUT))\n\nconst WrapComponentFunction = props =>\n  defineComponent({\n    setup() {\n      return () =>\n        h('div', {},\n          h(VModal, props, {\n            default: () => 'slot content',\n          }),\n        )\n    },\n  })\n\ndescribe('VModal', () => {\n  let mountFunction: (options?: object) => VueWrapper<any>\n\n  beforeEach(() => {\n    mountFunction = (options = {}) => mount(VModal, { ...options })\n  })\n\n  it('should mount component and match snapshot', () => {\n    const cmp = mountFunction()\n    expect(cmp.html()).toMatchSnapshot()\n  })\n\n  it('should set scaleIn transition and match snapshot', () => {\n    const props = {\n      transition: 'scaleIn',\n    }\n    const cmp = mountFunction({ props })\n\n    expect(cmp.props().transition).toBe('scaleIn')\n    expect(cmp.html()).toMatchSnapshot()\n  })\n\n  it('should set overlay to true', () => {\n    const props = {\n      overlay: true,\n    }\n    const wrap = mountFunction({ props })\n\n    expect(wrap.props().overlay).toBe(true)\n  })\n\n  it('should set overlay color and match snapshot', async () => {\n    const props = {\n      overlay: true,\n      overlayColor: '#ffffff',\n      modelValue: true,\n    }\n    const wrap = mount(WrapComponentFunction(props))\n    await delay()\n\n    expect(wrap.find('.v-overlay').exists()).toBe(true)\n    expect(wrap.find('.v-overlay').attributes().style).toContain(\n      'background-color: rgb(255, 255, 255); border-color: #ffffff;',\n    )\n    expect(wrap.html()).toMatchSnapshot()\n  })\n\n  it('should open modal and match snapshot', async () => {\n    const props = {\n      overlay: true,\n      modelValue: true,\n    }\n    const wrap = mount(WrapComponentFunction(props))\n    await delay()\n\n    expect(wrap.find('.v-overlay').exists()).toBe(true)\n    expect(wrap.html()).toMatchSnapshot()\n  })\n\n  it('should close modal and match snapshot', async () => {\n    const props = {\n      overlay: true,\n      modelValue: false,\n    }\n    const wrap = mount(WrapComponentFunction(props))\n    await delay()\n\n    expect(wrap.find('.v-overlay').exists()).toBe(false)\n    expect(wrap.find('.v-modal').attributes().style).toContain('display: none;')\n    expect(wrap.html()).toMatchSnapshot()\n  })\n})\n"],"sourceRoot":"","file":"VModal.spec.js"}