import { ref } from 'vue';
export function activatorProps() {
    return {
        activator: {
            type: [Object, String]
        },
        internalActivator: Boolean
    };
}
export const useActivator = (props) => {
    const activatorRef = ref(null);
    const activatorSizes = {};
    const listeners = {};
    const getActivator = (event) => {
        if (activatorRef.value)
            return activatorRef.value?.$el || activatorRef.value;
        const target = props.internalActivator ? props.activator.$el : document;
        if (props.inputActivator) {
            return (activatorRef.value = target.querySelector(props.inputActivator));
        }
        if (props.activator) {
            if (typeof props.activator === 'string') {
                return (activatorRef.value = target.querySelector(props.activator));
            }
            return (activatorRef.value = props.activator);
        }
        if (event) {
            return (activatorRef.value = (event.target || event.currentTarget));
        }
        return null;
    };
    const getActivatorSizes = () => {
        const el = activatorRef.value.$el || activatorRef.value;
        activatorSizes.left = el.offsetLeft;
        activatorSizes.top = el.offsetTop;
        activatorSizes.height = el.offsetHeight;
        activatorSizes.width = el.offsetWidth;
        return activatorSizes;
    };
    const genActivatorListeners = (props, handlers) => {
        if (props.openOnHover) {
            listeners.mouseenter = (e) => handlers.mouseenter(e);
            listeners.mouseleave = (e) => handlers.mouseleave(e);
        }
        if (props.openOnClick) {
            listeners.click = (e) => handlers.click(e);
        }
        if (props.openOnContextmenu) {
            listeners.contextmenu = (e) => handlers.contextmenu(e);
        }
        return listeners;
    };
    const addActivatorEvents = () => {
        const events = Object.keys(listeners);
        if (activatorRef.value) {
            events.forEach((key) => {
                const el = activatorRef.value.$el || activatorRef.value;
                el.addEventListener(key, listeners[key]);
            });
        }
    };
    const removeActivatorEvents = () => {
        const events = Object.keys(listeners);
        if (activatorRef.value) {
            events.forEach((key) => {
                const el = activatorRef.value.$el || activatorRef.value;
                el.removeEventListener(key, listeners[key]);
            });
        }
    };
    return {
        activatorRef,
        getActivator,
        getActivatorSizes,
        addActivatorEvents,
        removeActivatorEvents,
        genActivatorListeners
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWFjdGl2YXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3Z1ZWxhbmQvc3JjL2NvbXBvc2FibGVzL3VzZS1hY3RpdmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEdBQUcsRUFBMkIsTUFBTSxLQUFLLENBQUE7QUFHbEQsTUFBTSxVQUFVLGNBQWM7SUFDNUIsT0FBTztRQUNMLFNBQVMsRUFBRTtZQUNULElBQUksRUFBRSxDQUFFLE1BQU0sRUFBRSxNQUFNLENBQUU7U0FDekI7UUFDRCxpQkFBaUIsRUFBRSxPQUFPO0tBQzNCLENBQUE7QUFDSCxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBQUMsS0FBSyxFQUFFLEVBQUU7SUFDcEMsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFvRCxJQUFJLENBQUMsQ0FBQTtJQUNqRixNQUFNLGNBQWMsR0FBd0IsRUFBRSxDQUFBO0lBQzlDLE1BQU0sU0FBUyxHQUFnQyxFQUFFLENBQUE7SUFFakQsTUFBTSxZQUFZLEdBQUcsQ0FBQyxLQUFhLEVBQXNCLEVBQUU7UUFDekQsSUFBSSxZQUFZLENBQUMsS0FBSztZQUFFLE9BQU8sWUFBWSxDQUFDLEtBQUssRUFBRSxHQUFHLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQTtRQUU1RSxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUE7UUFFdkUsSUFBSSxLQUFLLENBQUMsY0FBYyxFQUFFO1lBQ3hCLE9BQU8sQ0FBQyxZQUFZLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUE7U0FDekU7UUFFRCxJQUFJLEtBQUssQ0FBQyxTQUFTLEVBQUU7WUFDbkIsSUFBSSxPQUFPLEtBQUss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QUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtZQUM5QyxDQUFDLENBQUMsQ0FBQTtTQUNIO0lBQ0gsQ0FBQyxDQUFBO0lBRUQsT0FBTztRQUNMLFlBQVk7UUFDWixZQUFZO1FBQ1osaUJBQWlCO1FBQ2pCLGtCQUFrQjtRQUNsQixxQkFBcUI7UUFDckIscUJBQXFCO0tBQ3RCLENBQUE7QUFDSCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZWYsIENvbXBvbmVudFB1YmxpY0luc3RhbmNlIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgQWN0aXZhdG9yTGlzdGVuZXJzLCBEaW1lbnNpb25zIH0gZnJvbSAnLi4vdHlwZXMvY29tcG9zYWJsZXMnXG5cbmV4cG9ydCBmdW5jdGlvbiBhY3RpdmF0b3JQcm9wcygpe1xuICByZXR1cm4ge1xuICAgIGFjdGl2YXRvcjoge1xuICAgICAgdHlwZTogWyBPYmplY3QsIFN0cmluZyBdXG4gICAgfSxcbiAgICBpbnRlcm5hbEFjdGl2YXRvcjogQm9vbGVhblxuICB9XG59XG5cbmV4cG9ydCBjb25zdCB1c2VBY3RpdmF0b3IgPSAocHJvcHMpID0+IHtcbiAgY29uc3QgYWN0aXZhdG9yUmVmID0gcmVmPE1heWJlPEhUTUxFbGVtZW50IHwgQ29tcG9uZW50UHVibGljSW5zdGFuY2U8YW55Pj4+KG51bGwpXG4gIGNvbnN0IGFjdGl2YXRvclNpemVzOiBQYXJ0aWFsPERpbWVuc2lvbnM+ID0ge31cbiAgY29uc3QgbGlzdGVuZXJzOiBQYXJ0aWFsPEFjdGl2YXRvckxpc3RlbmVycz4gPSB7fVxuXG4gIGNvbnN0IGdldEFjdGl2YXRvciA9IChldmVudD86IEV2ZW50KTogTWF5YmU8SFRNTEVsZW1lbnQ+ID0+IHtcbiAgICBpZiAoYWN0aXZhdG9yUmVmLnZhbHVlKSByZXR1cm4gYWN0aXZhdG9yUmVmLnZhbHVlPy4kZWwgfHwgYWN0aXZhdG9yUmVmLnZhbHVlXG5cbiAgICBjb25zdCB0YXJnZXQgPSBwcm9wcy5pbnRlcm5hbEFjdGl2YXRvciA/IHByb3BzLmFjdGl2YXRvci4kZWwgOiBkb2N1bWVudFxuXG4gICAgaWYgKHByb3BzLmlucHV0QWN0aXZhdG9yKSB7XG4gICAgICByZXR1cm4gKGFjdGl2YXRvclJlZi52YWx1ZSA9IHRhcmdldC5xdWVyeVNlbGVjdG9yKHByb3BzLmlucHV0QWN0aXZhdG9yKSlcbiAgICB9XG5cbiAgICBpZiAocHJvcHMuYWN0aXZhdG9yKSB7XG4gICAgICBpZiAodHlwZW9mIHByb3BzLmFjdGl2YXRvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIChhY3RpdmF0b3JSZWYudmFsdWUgPSB0YXJnZXQucXVlcnlTZWxlY3Rvcihwcm9wcy5hY3RpdmF0b3IpKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gKGFjdGl2YXRvclJlZi52YWx1ZSA9IHByb3BzLmFjdGl2YXRvcilcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQpIHtcbiAgICAgIHJldHVybiAoYWN0aXZhdG9yUmVmLnZhbHVlID0gKGV2ZW50LnRhcmdldCB8fCBldmVudC5jdXJyZW50VGFyZ2V0KSBhcyBIVE1MRWxlbWVudClcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgY29uc3QgZ2V0QWN0aXZhdG9yU2l6ZXMgPSAoKSA9PiB7XG4gICAgY29uc3QgZWwgPSBhY3RpdmF0b3JSZWYudmFsdWUhLiRlbCB8fCBhY3RpdmF0b3JSZWYudmFsdWUhXG5cbiAgICBhY3RpdmF0b3JTaXplcy5sZWZ0ID0gZWwub2Zmc2V0TGVmdFxuICAgIGFjdGl2YXRvclNpemVzLnRvcCA9IGVsLm9mZnNldFRvcFxuICAgIGFjdGl2YXRvclNpemVzLmhlaWdodCA9IGVsLm9mZnNldEhlaWdodFxuICAgIGFjdGl2YXRvclNpemVzLndpZHRoID0gZWwub2Zmc2V0V2lkdGhcblxuICAgIHJldHVybiBhY3RpdmF0b3JTaXplc1xuICB9XG5cbiAgY29uc3QgZ2VuQWN0aXZhdG9yTGlzdGVuZXJzID0gKHByb3BzLCBoYW5kbGVycykgPT4ge1xuICAgIGlmIChwcm9wcy5vcGVuT25Ib3Zlcikge1xuICAgICAgbGlzdGVuZXJzLm1vdXNlZW50ZXIgPSAoZSkgPT4gaGFuZGxlcnMubW91c2VlbnRlcihlKVxuICAgICAgbGlzdGVuZXJzLm1vdXNlbGVhdmUgPSAoZSkgPT4gaGFuZGxlcnMubW91c2VsZWF2ZShlKVxuICAgIH1cblxuICAgIGlmIChwcm9wcy5vcGVuT25DbGljaykge1xuICAgICAgbGlzdGVuZXJzLmNsaWNrID0gKGUpID0+IGhhbmRsZXJzLmNsaWNrKGUpXG4gICAgfVxuXG4gICAgaWYgKHByb3BzLm9wZW5PbkNvbnRleHRtZW51KSB7XG4gICAgICBsaXN0ZW5lcnMuY29udGV4dG1lbnUgPSAoZSkgPT4gaGFuZGxlcnMuY29udGV4dG1lbnUoZSlcbiAgICB9XG5cbiAgICByZXR1cm4gbGlzdGVuZXJzXG4gIH1cblxuICBjb25zdCBhZGRBY3RpdmF0b3JFdmVudHMgPSAoKSA9PiB7XG4gICAgY29uc3QgZXZlbnRzID0gT2JqZWN0LmtleXMobGlzdGVuZXJzKVxuXG4gICAgaWYgKGFjdGl2YXRvclJlZi52YWx1ZSkge1xuICAgICAgZXZlbnRzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBjb25zdCBlbCA9IGFjdGl2YXRvclJlZi52YWx1ZS4kZWwgfHwgYWN0aXZhdG9yUmVmLnZhbHVlXG4gICAgICAgIGVsIS5hZGRFdmVudExpc3RlbmVyKGtleSwgbGlzdGVuZXJzW2tleV0pXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHJlbW92ZUFjdGl2YXRvckV2ZW50cyA9ICgpID0+IHtcbiAgICBjb25zdCBldmVudHMgPSBPYmplY3Qua2V5cyhsaXN0ZW5lcnMpXG5cbiAgICBpZiAoYWN0aXZhdG9yUmVmLnZhbHVlKSB7XG4gICAgICBldmVudHMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IGVsID0gYWN0aXZhdG9yUmVmLnZhbHVlLiRlbCB8fCBhY3RpdmF0b3JSZWYudmFsdWVcbiAgICAgICAgZWwhLnJlbW92ZUV2ZW50TGlzdGVuZXIoa2V5LCBsaXN0ZW5lcnNba2V5XSlcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBhY3RpdmF0b3JSZWYsXG4gICAgZ2V0QWN0aXZhdG9yLFxuICAgIGdldEFjdGl2YXRvclNpemVzLFxuICAgIGFkZEFjdGl2YXRvckV2ZW50cyxcbiAgICByZW1vdmVBY3RpdmF0b3JFdmVudHMsXG4gICAgZ2VuQWN0aXZhdG9yTGlzdGVuZXJzXG4gIH1cbn1cbiJdfQ==