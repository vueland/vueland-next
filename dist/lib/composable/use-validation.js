import { reactive, computed } from 'vue';
export const validationProps = () => ({
    rules: {
        type: Array,
        default: null,
    },
    value: [String, Number, Date, Object],
});
export const useValidation = (props) => {
    const errorState = reactive({
        innerError: null,
        innerErrorMessage: null,
        isDirty: false,
    });
    const validationClasses = () => ({
        'e-validatable': true,
    });
    const computedColor = computed(() => {
        return props.disabled ? 'disabled' : 'primary';
    });
    const hasRules = computed(() => {
        return !!props.rules && props.rules.length > 0;
    });
    const dirty = () => (errorState.isDirty = true);
    const update = (err, msg = null) => {
        if (errorState.innerError !== err) {
            errorState.innerError = err;
        }
        if (msg && errorState.innerErrorMessage !== msg) {
            errorState.innerErrorMessage = msg;
        }
        if (!msg)
            errorState.innerErrorMessage = msg;
        return errorState.innerError;
    };
    const validate = (val = props.value) => {
        if (!hasRules.value)
            return true;
        dirty();
        for (let i = 0, len = props.rules.length; i < len; i += 1) {
            const rule = props.rules[i];
            let result;
            if (typeof rule === 'function')
                result = rule(val);
            if (result === false || typeof result === 'string') {
                update(true, result);
                return false;
            }
            if (result === true && i === len - 1) {
                update(false);
                return true;
            }
        }
    };
    return {
        errorState,
        computedColor,
        validationClasses,
        validate,
        dirty,
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXZhbGlkYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9zYWJsZS91c2UtdmFsaWRhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLEtBQUssQ0FBQTtBQVd4QyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNwQyxLQUFLLEVBQUU7UUFDTCxJQUFJLEVBQUUsS0FBK0M7UUFDckQsT0FBTyxFQUFFLElBQUk7S0FDZDtJQUNELEtBQUssRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQztDQUN0QyxDQUFDLENBQUE7QUFFRixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRTtJQUNyQyxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQWM7UUFDdkMsVUFBVSxFQUFFLElBQUk7UUFDaEIsaUJBQWlCLEVBQUUsSUFBSTtRQUN2QixPQUFPLEVBQUUsS0FBSztLQUNmLENBQUMsQ0FBQTtJQUVGLE1BQU0saUJBQWlCLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMvQixlQUFlLEVBQUUsSUFBSTtLQUN0QixDQUFDLENBQUE7SUFFRixNQUFNLGFBQWEsR0FBRyxRQUFRLENBQWdCLEdBQUcsRUFBRTtRQUNqRCxPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFBO0lBQ2hELENBQUMsQ0FBQyxDQUFBO0lBRUYsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFVLEdBQUcsRUFBRTtRQUN0QyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQTtJQUNoRCxDQUFDLENBQUMsQ0FBQTtJQUVGLE1BQU0sS0FBSyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQTtJQUUvQyxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsSUFBSSxFQUFFLEVBQUU7UUFDakMsSUFBSSxVQUFVLENBQUMsVUFBVSxLQUFLLEdBQUcsRUFBRTtZQUNqQyxVQUFVLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQTtTQUM1QjtRQUVELElBQUksR0FBRyxJQUFJLFVBQVUsQ0FBQyxpQkFBaUIsS0FBSyxHQUFHLEVBQUU7WUFDL0MsVUFBVSxDQUFDLGlCQUFpQixHQUFHLEdBQUcsQ0FBQTtTQUNuQztRQUVELElBQUksQ0FBQyxHQUFHO1lBQUUsVUFBVSxDQUFDLGlCQUFpQixHQUFHLEdBQUcsQ0FBQTtRQUU1QyxPQUFPLFVBQVUsQ0FBQyxVQUFVLENBQUE7SUFDOUIsQ0FBQyxDQUFBO0lBRUQsTUFBTSxRQUFRLEdBQUcsQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBa0IsRUFBRTtRQUNyRCxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUs7WUFBRSxPQUFPLElBQUksQ0FBQTtRQUVoQyxLQUFLLEVBQUUsQ0FBQTtRQUVQLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDekQsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUUzQixJQUFJLE1BQU0sQ0FBQTtZQUVWLElBQUksT0FBTyxJQUFJLEtBQUssVUFBVTtnQkFBRSxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBRWxELElBQUksTUFBTSxLQUFLLEtBQUssSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7Z0JBQ2xELE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7Z0JBQ3BCLE9BQU8sS0FBSyxDQUFBO2FBQ2I7WUFDRCxJQUFJLE1BQU0sS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEVBQUU7Z0JBQ3BDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtnQkFDYixPQUFPLElBQUksQ0FBQTthQUNaO1NBQ0Y7SUFDSCxDQUFDLENBQUE7SUFFRCxPQUFPO1FBQ0wsVUFBVTtRQUNWLGFBQWE7UUFDYixpQkFBaUI7UUFDakIsUUFBUTtRQUNSLEtBQUs7S0FDTixDQUFBO0FBQ0gsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVhY3RpdmUsIGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuLy8gVHlwZXNcbmltcG9ydCB7IFByb3BUeXBlIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgTWF5YmUgfSBmcm9tICcuLi8uLi90eXBlcy9iYXNlJ1xuXG50eXBlIEVycm9yc1N0YXRlID0ge1xuICBpbm5lckVycm9yOiBNYXliZTxvYmplY3Q+XG4gIGlubmVyRXJyb3JNZXNzYWdlOiBNYXliZTxzdHJpbmc+XG4gIGlzRGlydHk6IGJvb2xlYW5cbn1cblxuZXhwb3J0IGNvbnN0IHZhbGlkYXRpb25Qcm9wcyA9ICgpID0+ICh7XG4gIHJ1bGVzOiB7XG4gICAgdHlwZTogQXJyYXkgYXMgUHJvcFR5cGU8QXJyYXk8KHZhbDogYW55KSA9PiBib29sZWFuPj4sXG4gICAgZGVmYXVsdDogbnVsbCxcbiAgfSxcbiAgdmFsdWU6IFtTdHJpbmcsIE51bWJlciwgRGF0ZSwgT2JqZWN0XSxcbn0pXG5cbmV4cG9ydCBjb25zdCB1c2VWYWxpZGF0aW9uID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IGVycm9yU3RhdGUgPSByZWFjdGl2ZTxFcnJvcnNTdGF0ZT4oe1xuICAgIGlubmVyRXJyb3I6IG51bGwsXG4gICAgaW5uZXJFcnJvck1lc3NhZ2U6IG51bGwsXG4gICAgaXNEaXJ0eTogZmFsc2UsXG4gIH0pXG5cbiAgY29uc3QgdmFsaWRhdGlvbkNsYXNzZXMgPSAoKSA9PiAoe1xuICAgICdlLXZhbGlkYXRhYmxlJzogdHJ1ZSxcbiAgfSlcblxuICBjb25zdCBjb21wdXRlZENvbG9yID0gY29tcHV0ZWQ8TWF5YmU8c3RyaW5nPj4oKCkgPT4ge1xuICAgIHJldHVybiBwcm9wcy5kaXNhYmxlZCA/ICdkaXNhYmxlZCcgOiAncHJpbWFyeSdcbiAgfSlcblxuICBjb25zdCBoYXNSdWxlcyA9IGNvbXB1dGVkPGJvb2xlYW4+KCgpID0+IHtcbiAgICByZXR1cm4gISFwcm9wcy5ydWxlcyAmJiBwcm9wcy5ydWxlcy5sZW5ndGggPiAwXG4gIH0pXG5cbiAgY29uc3QgZGlydHkgPSAoKSA9PiAoZXJyb3JTdGF0ZS5pc0RpcnR5ID0gdHJ1ZSlcblxuICBjb25zdCB1cGRhdGUgPSAoZXJyLCBtc2cgPSBudWxsKSA9PiB7XG4gICAgaWYgKGVycm9yU3RhdGUuaW5uZXJFcnJvciAhPT0gZXJyKSB7XG4gICAgICBlcnJvclN0YXRlLmlubmVyRXJyb3IgPSBlcnJcbiAgICB9XG5cbiAgICBpZiAobXNnICYmIGVycm9yU3RhdGUuaW5uZXJFcnJvck1lc3NhZ2UgIT09IG1zZykge1xuICAgICAgZXJyb3JTdGF0ZS5pbm5lckVycm9yTWVzc2FnZSA9IG1zZ1xuICAgIH1cblxuICAgIGlmICghbXNnKSBlcnJvclN0YXRlLmlubmVyRXJyb3JNZXNzYWdlID0gbXNnXG5cbiAgICByZXR1cm4gZXJyb3JTdGF0ZS5pbm5lckVycm9yXG4gIH1cblxuICBjb25zdCB2YWxpZGF0ZSA9ICh2YWwgPSBwcm9wcy52YWx1ZSk6IGJvb2xlYW4gfCB2b2lkID0+IHtcbiAgICBpZiAoIWhhc1J1bGVzLnZhbHVlKSByZXR1cm4gdHJ1ZVxuXG4gICAgZGlydHkoKVxuXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHByb3BzLnJ1bGVzLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBjb25zdCBydWxlID0gcHJvcHMucnVsZXNbaV1cblxuICAgICAgbGV0IHJlc3VsdFxuXG4gICAgICBpZiAodHlwZW9mIHJ1bGUgPT09ICdmdW5jdGlvbicpIHJlc3VsdCA9IHJ1bGUodmFsKVxuXG4gICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSB8fCB0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICB1cGRhdGUodHJ1ZSwgcmVzdWx0KVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgPT09IHRydWUgJiYgaSA9PT0gbGVuIC0gMSkge1xuICAgICAgICB1cGRhdGUoZmFsc2UpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBlcnJvclN0YXRlLFxuICAgIGNvbXB1dGVkQ29sb3IsXG4gICAgdmFsaWRhdGlvbkNsYXNzZXMsXG4gICAgdmFsaWRhdGUsXG4gICAgZGlydHksXG4gIH1cbn1cbiJdfQ==