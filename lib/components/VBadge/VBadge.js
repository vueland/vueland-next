import { vShow, h, computed, withDirectives, defineComponent } from 'vue';
import { positionProps } from '../../composables/use-position';
import { useColors } from '../../composables/use-colors';
import { useToggle } from '../../composables/use-toggle';
import { useElevation, elevationProps } from '../../composables/use-elevation';
import { useTransition } from '../../composables/use-transition';
export default defineComponent({
    name: 'v-badge',
    props: {
        dot: Boolean,
        avatar: Boolean,
        border: Boolean,
        toggle: Boolean,
        content: {
            required: false,
        },
        color: {
            type: String,
            default: 'primary',
        },
        transition: {
            type: String,
            default: 'scaleIn',
        },
        offsetY: {
            type: [String, Number],
            default: 0
        },
        offsetX: {
            type: [String, Number],
            default: 0
        },
        ...positionProps(),
        ...elevationProps(),
    },
    setup(props, { slots }) {
        const { elevationClasses } = useElevation(props);
        const { setBackgroundClassNameColor, setBackgroundCssColor } = useColors();
        const offset = computed(() => {
            return props.dot ? 4 : 12;
        });
        const calcPosition = (offsetVal = 0) => {
            const value = offset.value - Number(offsetVal);
            return `${value}px`;
        };
        const computedLeft = computed(() => {
            return props.left && calcPosition(props.offsetX);
        });
        const computedRight = computed(() => {
            return props.right && calcPosition(props.offsetX);
        });
        const computedTop = computed(() => {
            return props.top && calcPosition(props.offsetY);
        });
        const computedBottom = computed(() => {
            return props.bottom && calcPosition(props.offsetY);
        });
        const classes = computed(() => ({
            'v-badge': true,
            'v-badge--border': props.border,
            'v-badge--dot': props.dot,
            'v-badge--avatar': props.avatar,
        }));
        const badgeClasses = computed(() => ({
            'v-badge__badge': true,
            ...elevationClasses.value,
            ...(props.color ? setBackgroundClassNameColor(props.color) : {}),
        }));
        const styles = computed(() => ({
            top: computedTop.value,
            right: computedRight.value,
            bottom: computedBottom.value,
            left: computedLeft.value,
            ...(props.color ? setBackgroundCssColor(props.color) : {}),
        }));
        const addContent = () => {
            if (props.dot)
                return undefined;
            if (props.content)
                return String(props.content);
            return undefined;
        };
        const genBadgeSlot = () => {
            const propsData = {
                class: {
                    'v-badge__badge-slot': true,
                },
            };
            return slots.badge ? h('div', propsData, slots.badge()) : null;
        };
        const genContent = () => {
            const propsData = {
                class: {
                    'v-badge__content': true,
                },
            };
            return h('div', propsData, [addContent(), genBadgeSlot()]);
        };
        const genBadge = () => {
            return h('div', {
                class: badgeClasses.value,
                style: styles.value,
            }, genContent());
        };
        return () => {
            let badge = genBadge();
            if (props.toggle && !slots.badge) {
                const { isActive } = useToggle(props, 'content');
                badge = withDirectives(badge, [[vShow, isActive.value]]);
            }
            const propsData = {
                class: classes.value,
            };
            const children = [
                useTransition(badge, props.transition),
                slots.default && slots.default(),
            ];
            return h('div', propsData, children);
        };
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkJhZGdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvdnVlbGFuZC9zcmMvY29tcG9uZW50cy9WQmFkZ2UvVkJhZGdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUUsZUFBZSxFQUFFLE1BQU0sS0FBSyxDQUFBO0FBR3pFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUM5RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sOEJBQThCLENBQUE7QUFDeEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDhCQUE4QixDQUFBO0FBQ3hELE9BQU8sRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLE1BQU0saUNBQWlDLENBQUE7QUFDOUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtDQUFrQyxDQUFBO0FBS2hFLGVBQWUsZUFBZSxDQUFDO0lBQzdCLElBQUksRUFBRSxTQUFTO0lBRWYsS0FBSyxFQUFFO1FBQ0wsR0FBRyxFQUFFLE9BQU87UUFDWixNQUFNLEVBQUUsT0FBTztRQUNmLE1BQU0sRUFBRSxPQUFPO1FBQ2YsTUFBTSxFQUFFLE9BQU87UUFDZixPQUFPLEVBQUU7WUFDUCxRQUFRLEVBQUUsS0FBSztTQUNoQjtRQUNELEtBQUssRUFBRTtZQUNMLElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLFNBQVM7U0FDbkI7UUFDRCxVQUFVLEVBQUU7WUFDVixJQUFJLEVBQUUsTUFBTTtZQUNaLE9BQU8sRUFBRSxTQUFTO1NBQ25CO1FBQ0QsT0FBTyxFQUFFO1lBQ1AsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztZQUN0QixPQUFPLEVBQUUsQ0FBQztTQUNYO1FBQ0QsT0FBTyxFQUFFO1lBQ1AsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztZQUN0QixP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Q0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUE7Z0JBQ2hELEtBQUssR0FBRyxjQUFjLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTthQUN6RDtZQUVELE1BQU0sU0FBUyxHQUFHO2dCQUNoQixLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7YUFDckIsQ0FBQTtZQUVELE1BQU0sUUFBUSxHQUFHO2dCQUNmLGFBQWEsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQztnQkFDdEMsS0FBSyxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFO2FBQ2pDLENBQUE7WUFFRCxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQ3RDLENBQUMsQ0FBQTtJQUNILENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBWdWUgQVBJXG5pbXBvcnQgeyB2U2hvdywgaCwgY29tcHV0ZWQsIHdpdGhEaXJlY3RpdmVzLCBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnXG5cbi8vIEVmZmVjdHNcbmltcG9ydCB7IHBvc2l0aW9uUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy91c2UtcG9zaXRpb24nXG5pbXBvcnQgeyB1c2VDb2xvcnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy91c2UtY29sb3JzJ1xuaW1wb3J0IHsgdXNlVG9nZ2xlIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvdXNlLXRvZ2dsZSdcbmltcG9ydCB7IHVzZUVsZXZhdGlvbiwgZWxldmF0aW9uUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy91c2UtZWxldmF0aW9uJ1xuaW1wb3J0IHsgdXNlVHJhbnNpdGlvbiB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3VzZS10cmFuc2l0aW9uJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tICd2dWUnXG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWJhZGdlJyxcblxuICBwcm9wczoge1xuICAgIGRvdDogQm9vbGVhbixcbiAgICBhdmF0YXI6IEJvb2xlYW4sXG4gICAgYm9yZGVyOiBCb29sZWFuLFxuICAgIHRvZ2dsZTogQm9vbGVhbixcbiAgICBjb250ZW50OiB7XG4gICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgfSxcbiAgICBjb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3ByaW1hcnknLFxuICAgIH0sXG4gICAgdHJhbnNpdGlvbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3NjYWxlSW4nLFxuICAgIH0sXG4gICAgb2Zmc2V0WToge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IDBcbiAgICB9LFxuICAgIG9mZnNldFg6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiAwXG4gICAgfSxcbiAgICAuLi5wb3NpdGlvblByb3BzKCksXG4gICAgLi4uZWxldmF0aW9uUHJvcHMoKSxcbiAgfSBhcyBhbnksXG5cbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSk6ICgpID0+IFZOb2RlIHtcbiAgICBjb25zdCB7IGVsZXZhdGlvbkNsYXNzZXMgfSA9IHVzZUVsZXZhdGlvbihwcm9wcylcbiAgICBjb25zdCB7IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvciwgc2V0QmFja2dyb3VuZENzc0NvbG9yIH0gPSB1c2VDb2xvcnMoKVxuXG4gICAgY29uc3Qgb2Zmc2V0ID0gY29tcHV0ZWQ8bnVtYmVyPigoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMuZG90ID8gNCA6IDEyXG4gICAgfSlcblxuICAgIGNvbnN0IGNhbGNQb3NpdGlvbiA9IChvZmZzZXRWYWw6IHN0cmluZyB8IG51bWJlciA9IDApOiBzdHJpbmcgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBvZmZzZXQudmFsdWUgLSBOdW1iZXIob2Zmc2V0VmFsKVxuICAgICAgcmV0dXJuIGAke3ZhbHVlfXB4YFxuICAgIH1cblxuICAgIGNvbnN0IGNvbXB1dGVkTGVmdCA9IGNvbXB1dGVkPHN0cmluZyB8IGJvb2xlYW4+KCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5sZWZ0ICYmIGNhbGNQb3NpdGlvbihwcm9wcy5vZmZzZXRYKVxuICAgIH0pXG5cbiAgICBjb25zdCBjb21wdXRlZFJpZ2h0ID0gY29tcHV0ZWQ8c3RyaW5nIHwgYm9vbGVhbj4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLnJpZ2h0ICYmIGNhbGNQb3NpdGlvbihwcm9wcy5vZmZzZXRYKVxuICAgIH0pXG5cbiAgICBjb25zdCBjb21wdXRlZFRvcCA9IGNvbXB1dGVkPHN0cmluZyB8IGJvb2xlYW4+KCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy50b3AgJiYgY2FsY1Bvc2l0aW9uKHByb3BzLm9mZnNldFkpXG4gICAgfSlcblxuICAgIGNvbnN0IGNvbXB1dGVkQm90dG9tID0gY29tcHV0ZWQ8c3RyaW5nIHwgYm9vbGVhbj4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLmJvdHRvbSAmJiBjYWxjUG9zaXRpb24ocHJvcHMub2Zmc2V0WSlcbiAgICB9KVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtYmFkZ2UnOiB0cnVlLFxuICAgICAgJ3YtYmFkZ2UtLWJvcmRlcic6IHByb3BzLmJvcmRlcixcbiAgICAgICd2LWJhZGdlLS1kb3QnOiBwcm9wcy5kb3QsXG4gICAgICAndi1iYWRnZS0tYXZhdGFyJzogcHJvcHMuYXZhdGFyLFxuICAgIH0pKVxuXG4gICAgY29uc3QgYmFkZ2VDbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1iYWRnZV9fYmFkZ2UnOiB0cnVlLFxuICAgICAgLi4uZWxldmF0aW9uQ2xhc3Nlcy52YWx1ZSxcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgIHRvcDogY29tcHV0ZWRUb3AudmFsdWUsXG4gICAgICByaWdodDogY29tcHV0ZWRSaWdodC52YWx1ZSxcbiAgICAgIGJvdHRvbTogY29tcHV0ZWRCb3R0b20udmFsdWUsXG4gICAgICBsZWZ0OiBjb21wdXRlZExlZnQudmFsdWUsXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3QgYWRkQ29udGVudCA9ICgpOiBzdHJpbmcgfCB1bmRlZmluZWQgPT4ge1xuICAgICAgaWYgKHByb3BzLmRvdCkgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgaWYgKHByb3BzLmNvbnRlbnQpIHJldHVybiBTdHJpbmcocHJvcHMuY29udGVudClcblxuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cblxuICAgIGNvbnN0IGdlbkJhZGdlU2xvdCA9ICgpOiBNYXliZTxWTm9kZT4gPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LWJhZGdlX19iYWRnZS1zbG90JzogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNsb3RzLmJhZGdlID8gaCgnZGl2JywgcHJvcHNEYXRhLCBzbG90cy5iYWRnZSgpKSA6IG51bGxcbiAgICB9XG5cbiAgICBjb25zdCBnZW5Db250ZW50ID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1iYWRnZV9fY29udGVudCc6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIFthZGRDb250ZW50KCksIGdlbkJhZGdlU2xvdCgpXSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5CYWRnZSA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzczogYmFkZ2VDbGFzc2VzLnZhbHVlLFxuICAgICAgICAgIHN0eWxlOiBzdHlsZXMudmFsdWUsXG4gICAgICAgIH0sXG4gICAgICAgIGdlbkNvbnRlbnQoKVxuICAgICAgKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBsZXQgYmFkZ2UgPSBnZW5CYWRnZSgpXG5cbiAgICAgIGlmIChwcm9wcy50b2dnbGUgJiYgIXNsb3RzLmJhZGdlKSB7XG4gICAgICAgIGNvbnN0IHsgaXNBY3RpdmUgfSA9IHVzZVRvZ2dsZShwcm9wcywgJ2NvbnRlbnQnKVxuICAgICAgICBiYWRnZSA9IHdpdGhEaXJlY3RpdmVzKGJhZGdlLCBbW3ZTaG93LCBpc0FjdGl2ZS52YWx1ZV1dKVxuICAgICAgfVxuXG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgfVxuXG4gICAgICBjb25zdCBjaGlsZHJlbiA9IFtcbiAgICAgICAgdXNlVHJhbnNpdGlvbihiYWRnZSwgcHJvcHMudHJhbnNpdGlvbiksXG4gICAgICAgIHNsb3RzLmRlZmF1bHQgJiYgc2xvdHMuZGVmYXVsdCgpLFxuICAgICAgXVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBjaGlsZHJlbilcbiAgICB9XG4gIH0sXG59KVxuIl19