const init = {
    transition: null,
    propSize: '',
    height: 0,
    width: 0
};
const PRIMARY_TRANSITION = 'cubic-bezier(.25, .8, .5, 1)';
const resetStyles = (el) => {
    el.style[init.propSize] = '';
    el.style.transition = '';
};
const getChildrenSizes = (el) => {
    return Array.prototype.reduce.call(el.children, (acc, it) => {
        const size = getComputedStyle(it)[init.propSize];
        return (acc += parseFloat(size));
    }, 0);
};
const setInitStyles = (el, x) => {
    init.propSize = x ? 'width' : 'height';
    init.transition = getComputedStyle(el).transition;
    init[init.propSize] = getChildrenSizes(el);
};
export const expandHooks = (expandedParentClass, x = false) => {
    return {
        onBeforeEnter(el) {
            el.style.transition = '';
        },
        onEnter(el) {
            setInitStyles(el, x);
            el.style[init.propSize] = '0';
            el.style.transition = `.2s ${init.propSize} ${PRIMARY_TRANSITION}`;
            requestAnimationFrame(() => {
                el.style[init.propSize] = `${init[init.propSize]}px`;
            });
            if (expandedParentClass) {
                el.parentNode.classList.add(expandedParentClass);
            }
        },
        onAfterEnter(el) {
            el.parentNode.classList.remove(expandedParentClass);
            resetStyles(el);
        },
        onBeforeLeave(el) {
            setInitStyles(el, x);
        },
        onLeave(el) {
            setInitStyles(el, x);
            el.style.transition = `.2s ${init.propSize} ${PRIMARY_TRANSITION}`;
            el.style[init.propSize] = `${init[init.propSize]}px`;
            requestAnimationFrame(() => (el.style[init.propSize] = '0'));
        },
        onAfterLeave(el) {
            requestAnimationFrame(() => resetStyles(el));
        }
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5kLXRyYW5zaXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy92dWVsYW5kL3NyYy9jb21wb25lbnRzL3RyYW5zaXRpb25zL2V4cGFuZC10cmFuc2l0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLE1BQU0sSUFBSSxHQUFrQjtJQUMxQixVQUFVLEVBQUUsSUFBSTtJQUNoQixRQUFRLEVBQUUsRUFBRTtJQUNaLE1BQU0sRUFBRSxDQUFDO0lBQ1QsS0FBSyxFQUFFLENBQUM7Q0FDVCxDQUFBO0FBRUQsTUFBTSxrQkFBa0IsR0FBRyw4QkFBOEIsQ0FBQTtBQUV6RCxNQUFNLFdBQVcsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFO0lBQ3pCLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtJQUM1QixFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUE7QUFDMUIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFO0lBQzlCLE9BQU8sS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNoQyxFQUFFLENBQUMsUUFBUSxFQUNYLENBQUMsR0FBVyxFQUFFLEVBQWUsRUFBRSxFQUFFO1FBQy9CLE1BQU0sSUFBSSxHQUFHLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUVoRCxPQUFPLENBQUMsR0FBRyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0lBQ2xDLENBQUMsRUFBRSxDQUFDLENBQVcsQ0FBQTtBQUNuQixDQUFDLENBQUE7QUFFRCxNQUFNLGFBQWEsR0FBRyxDQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUUsRUFBRTtJQUM3QixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUE7SUFDdEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUE7SUFDakQsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUM1QyxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FDekIsbUJBQTJCLEVBQzNCLElBQWEsS0FBSyxFQUNsQixFQUFFO0lBQ0YsT0FBTztRQUNMLGFBQWEsQ0FBQyxFQUFFO1lBQ2QsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFBO1FBQzFCLENBQUM7UUFFRCxPQUFPLENBQUMsRUFBRTtZQUNSLGFBQWEsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFDcEIsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFBO1lBQzdCLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLE9BQVEsSUFBSSxDQUFDLFFBQVMsSUFBSyxrQkFBbUIsRUFBRSxDQUFBO1lBRXRFLHFCQUFxQixDQUFDLEdBQUcsRUFBRTtnQkFDekIsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBRSxJQUFJLENBQUE7WUFDeEQsQ0FBQyxDQUFDLENBQUE7WUFFRixJQUFJLG1CQUFtQixFQUFFO2dCQUN2QixFQUFFLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQTthQUNqRDtRQUNILENBQUM7UUFFRCxZQUFZLENBQUMsRUFBRTtZQUNiLEVBQUUsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1lBQ25ELFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUNqQixDQUFDO1FBRUQsYUFBYSxDQUFDLEVBQUU7WUFDZCxhQUFhLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQ3RCLENBQUM7UUFFRCxPQUFPLENBQUMsRUFBRTtZQUNSLGFBQWEsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFFcEIsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsT0FBUSxJQUFJLENBQUMsUUFBUyxJQUFLLGtCQUFtQixFQUFFLENBQUE7WUFDdEUsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBRSxJQUFJLENBQUE7WUFDdEQscUJBQXFCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFBO1FBQzlELENBQUM7UUFFRCxZQUFZLENBQUMsRUFBRTtZQUNiLHFCQUFxQixDQUFDLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQzlDLENBQUM7S0FDRixDQUFBO0FBQ0gsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW50ZXJmYWNlIEluaXRpYWxTdHlsZXMge1xuICB0cmFuc2l0aW9uOiBzdHJpbmcgfCBudWxsO1xuICBwcm9wU2l6ZTogc3RyaW5nO1xuICBoZWlnaHQ/OiBudW1iZXI7XG4gIHdpZHRoPzogbnVtYmVyO1xufVxuXG5jb25zdCBpbml0OiBJbml0aWFsU3R5bGVzID0ge1xuICB0cmFuc2l0aW9uOiBudWxsLFxuICBwcm9wU2l6ZTogJycsXG4gIGhlaWdodDogMCxcbiAgd2lkdGg6IDBcbn1cblxuY29uc3QgUFJJTUFSWV9UUkFOU0lUSU9OID0gJ2N1YmljLWJlemllciguMjUsIC44LCAuNSwgMSknXG5cbmNvbnN0IHJlc2V0U3R5bGVzID0gKGVsKSA9PiB7XG4gIGVsLnN0eWxlW2luaXQucHJvcFNpemVdID0gJydcbiAgZWwuc3R5bGUudHJhbnNpdGlvbiA9ICcnXG59XG5cbmNvbnN0IGdldENoaWxkcmVuU2l6ZXMgPSAoZWwpID0+IHtcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UuY2FsbChcbiAgICBlbC5jaGlsZHJlbixcbiAgICAoYWNjOiBudW1iZXIsIGl0OiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgY29uc3Qgc2l6ZSA9IGdldENvbXB1dGVkU3R5bGUoaXQpW2luaXQucHJvcFNpemVdXG5cbiAgICAgIHJldHVybiAoYWNjICs9IHBhcnNlRmxvYXQoc2l6ZSkpXG4gICAgfSwgMCkgYXMgbnVtYmVyXG59XG5cbmNvbnN0IHNldEluaXRTdHlsZXMgPSAoZWwseCkgPT4ge1xuICBpbml0LnByb3BTaXplID0geCA/ICd3aWR0aCcgOiAnaGVpZ2h0J1xuICBpbml0LnRyYW5zaXRpb24gPSBnZXRDb21wdXRlZFN0eWxlKGVsKS50cmFuc2l0aW9uXG4gIGluaXRbaW5pdC5wcm9wU2l6ZV0gPSBnZXRDaGlsZHJlblNpemVzKGVsKVxufVxuXG5leHBvcnQgY29uc3QgZXhwYW5kSG9va3MgPSAoXG4gIGV4cGFuZGVkUGFyZW50Q2xhc3M6IHN0cmluZyxcbiAgeDogYm9vbGVhbiA9IGZhbHNlXG4pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBvbkJlZm9yZUVudGVyKGVsKSB7XG4gICAgICBlbC5zdHlsZS50cmFuc2l0aW9uID0gJydcbiAgICB9LFxuXG4gICAgb25FbnRlcihlbCkge1xuICAgICAgc2V0SW5pdFN0eWxlcyhlbCwgeClcbiAgICAgIGVsLnN0eWxlW2luaXQucHJvcFNpemVdID0gJzAnXG4gICAgICBlbC5zdHlsZS50cmFuc2l0aW9uID0gYC4ycyAkeyBpbml0LnByb3BTaXplIH0gJHsgUFJJTUFSWV9UUkFOU0lUSU9OIH1gXG5cbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIGVsLnN0eWxlW2luaXQucHJvcFNpemVdID0gYCR7IGluaXRbaW5pdC5wcm9wU2l6ZV0gfXB4YFxuICAgICAgfSlcblxuICAgICAgaWYgKGV4cGFuZGVkUGFyZW50Q2xhc3MpIHtcbiAgICAgICAgZWwucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKGV4cGFuZGVkUGFyZW50Q2xhc3MpXG4gICAgICB9XG4gICAgfSxcblxuICAgIG9uQWZ0ZXJFbnRlcihlbCkge1xuICAgICAgZWwucGFyZW50Tm9kZS5jbGFzc0xpc3QucmVtb3ZlKGV4cGFuZGVkUGFyZW50Q2xhc3MpXG4gICAgICByZXNldFN0eWxlcyhlbClcbiAgICB9LFxuXG4gICAgb25CZWZvcmVMZWF2ZShlbCkge1xuICAgICAgc2V0SW5pdFN0eWxlcyhlbCwgeClcbiAgICB9LFxuXG4gICAgb25MZWF2ZShlbCkge1xuICAgICAgc2V0SW5pdFN0eWxlcyhlbCwgeClcblxuICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbiA9IGAuMnMgJHsgaW5pdC5wcm9wU2l6ZSB9ICR7IFBSSU1BUllfVFJBTlNJVElPTiB9YFxuICAgICAgZWwuc3R5bGVbaW5pdC5wcm9wU2l6ZV0gPSBgJHsgaW5pdFtpbml0LnByb3BTaXplXSB9cHhgXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gKGVsLnN0eWxlW2luaXQucHJvcFNpemVdID0gJzAnKSlcbiAgICB9LFxuXG4gICAgb25BZnRlckxlYXZlKGVsKSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gcmVzZXRTdHlsZXMoZWwpKVxuICAgIH1cbiAgfVxufVxuIl19