import { defineComponent, h, computed } from 'vue';
import { VInput } from '../VInput';
import { useInputStates } from '../../composable/use-input-states';
export default defineComponent({
    name: 'v-text-field',
    components: {
        VInput,
    },
    inheritAttrs: true,
    props: {
        modelValue: {
            type: [String, Number],
            default: '',
        },
    },
    emits: ['update:modelValue', 'input', 'blur', 'focus', 'change'],
    setup(props, { emit, attrs }) {
        const { isReadonly, isDisabled, state, onFocus, onBlur, onChange } = useInputStates(props, { emit, attrs });
        const classes = computed(() => ({
            'v-text-field': true,
            'v-text-field--disabled': isDisabled.value,
            'v-text-field--readonly': isReadonly.value,
        }));
        const computedValue = computed({
            get: () => props.modelValue,
            set: (val) => {
                emit('input', val);
                emit('update:modelValue', val);
            },
        });
        const onInput = (e) => {
            computedValue.value = e.target.value;
        };
        const genInputField = (textClassColor, textCssColor) => {
            return h('input', {
                class: {
                    'v-text-field__input': true,
                    ...(!attrs.disabled && textClassColor),
                },
                style: {
                    ...(!attrs.disabled ? textCssColor : {}),
                },
                disabled: attrs.disabled,
                type: attrs.type ? attrs.type : 'text',
                placeholder: attrs.placeholder,
                readonly: attrs.readonly,
                value: computedValue.value,
                onInput,
                onFocus,
                onBlur,
                onChange,
            });
        };
        const genTextFieldWrapper = (clsColor, cssColor) => {
            return h('div', {
                class: classes.value,
            }, genInputField(clsColor, cssColor));
        };
        return () => h(VInput, {
            focused: state.focused,
            value: computedValue.value,
        }, {
            ['text-field']: ({ textClassColor, textCssColor }) => {
                return genTextFieldWrapper(textClassColor, textCssColor);
            },
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVlRleHRGaWVsZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZUZXh0RmllbGQvVlRleHRGaWVsZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxLQUFLLENBQUE7QUFFbEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUVsQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUNBQW1DLENBQUE7QUFFbEUsZUFBZSxlQUFlLENBQUM7SUFDN0IsSUFBSSxFQUFFLGNBQWM7SUFDcEIsVUFBVSxFQUFFO1FBQ1YsTUFBTTtLQUNQO0lBQ0QsWUFBWSxFQUFFLElBQUk7SUFDbEIsS0FBSyxFQUFFO1FBQ0wsVUFBVSxFQUFFO1lBQ1YsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztZQUN0QixPQUFPLEVBQUUsRUFBRTtTQUNaO0tBQ0Y7SUFDRCxLQUFLLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUM7SUFDaEUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUU7UUFDMUIsTUFBTSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQ2hFLGNBQWMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtRQUV4QyxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQTBCLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDdkQsY0FBYyxFQUFFLElBQUk7WUFDcEIsd0JBQXdCLEVBQUUsVUFBVSxDQUFDLEtBQUs7WUFDMUMsd0JBQXdCLEVBQUUsVUFBVSxDQUFDLEtBQUs7U0FDM0MsQ0FBQyxDQUFDLENBQUE7UUFFSCxNQUFNLGFBQWEsR0FBRyxRQUFRLENBQUM7WUFDN0IsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVO1lBRTNCLEdBQUcsRUFBRSxDQUFDLEdBQVcsRUFBRSxFQUFFO2dCQUNuQixJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFBO2dCQUNsQixJQUFJLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxDQUFDLENBQUE7WUFDaEMsQ0FBQztTQUNGLENBQUMsQ0FBQTtRQUVGLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDcEIsYUFBYSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQTtRQUN0QyxDQUFDLENBQUE7UUFFRCxNQUFNLGFBQWEsR0FBRyxDQUFDLGNBQWMsRUFBRSxZQUFZLEVBQUUsRUFBRTtZQUNyRCxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUU7Z0JBQ2hCLEtBQUssRUFBRTtvQkFDTCxxQkFBcUIsRUFBRSxJQUFJO29CQUMzQixHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxJQUFJLGNBQWMsQ0FBQztpQkFDdkM7Z0JBQ0QsS0FBSyxFQUFFO29CQUNMLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2lCQUN6QztnQkFDRCxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7Z0JBQ3hCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNO2dCQUN0QyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7Z0JBQzlCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtnQkFDeEIsS0FBSyxFQUFFLGFBQWEsQ0FBQyxLQUFLO2dCQUMxQixPQUFPO2dCQUNQLE9BQU87Z0JBQ1AsTUFBTTtnQkFDTixRQUFRO2FBQ1QsQ0FBQyxDQUFBO1FBQ0osQ0FBQyxDQUFBO1FBRUQsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsRUFBRTtZQUNqRCxPQUFPLENBQUMsQ0FDTixLQUFLLEVBQ0w7Z0JBQ0UsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO2FBQ3JCLEVBQ0QsYUFBYSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FDbEMsQ0FBQTtRQUNILENBQUMsQ0FBQTtRQUVELE9BQU8sR0FBRyxFQUFFLENBQ1YsQ0FBQyxDQUNDLE1BQU0sRUFDTjtZQUNFLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztZQUN0QixLQUFLLEVBQUUsYUFBYSxDQUFDLEtBQUs7U0FDM0IsRUFDRDtZQUNFLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxFQUFFLGNBQWMsRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFO2dCQUNuRCxPQUFPLG1CQUFtQixDQUFDLGNBQWMsRUFBRSxZQUFZLENBQUMsQ0FBQTtZQUMxRCxDQUFDO1NBQ0YsQ0FDRixDQUFBO0lBQ0wsQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaCwgY29tcHV0ZWQgfSBmcm9tICd2dWUnXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWSW5wdXQgfSBmcm9tICcuLi9WSW5wdXQnXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlSW5wdXRTdGF0ZXMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1pbnB1dC1zdGF0ZXMnXG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LXRleHQtZmllbGQnLFxuICBjb21wb25lbnRzOiB7XG4gICAgVklucHV0LFxuICB9LFxuICBpbmhlcml0QXR0cnM6IHRydWUsXG4gIHByb3BzOiB7XG4gICAgbW9kZWxWYWx1ZToge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6ICcnLFxuICAgIH0sXG4gIH0sXG4gIGVtaXRzOiBbJ3VwZGF0ZTptb2RlbFZhbHVlJywgJ2lucHV0JywgJ2JsdXInLCAnZm9jdXMnLCAnY2hhbmdlJ10sXG4gIHNldHVwKHByb3BzLCB7IGVtaXQsIGF0dHJzIH0pIHtcbiAgICBjb25zdCB7IGlzUmVhZG9ubHksIGlzRGlzYWJsZWQsIHN0YXRlLCBvbkZvY3VzLCBvbkJsdXIsIG9uQ2hhbmdlIH0gPVxuICAgICAgdXNlSW5wdXRTdGF0ZXMocHJvcHMsIHsgZW1pdCwgYXR0cnMgfSlcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LXRleHQtZmllbGQnOiB0cnVlLFxuICAgICAgJ3YtdGV4dC1maWVsZC0tZGlzYWJsZWQnOiBpc0Rpc2FibGVkLnZhbHVlLFxuICAgICAgJ3YtdGV4dC1maWVsZC0tcmVhZG9ubHknOiBpc1JlYWRvbmx5LnZhbHVlLFxuICAgIH0pKVxuXG4gICAgY29uc3QgY29tcHV0ZWRWYWx1ZSA9IGNvbXB1dGVkKHtcbiAgICAgIGdldDogKCkgPT4gcHJvcHMubW9kZWxWYWx1ZSxcblxuICAgICAgc2V0OiAodmFsOiBzdHJpbmcpID0+IHtcbiAgICAgICAgZW1pdCgnaW5wdXQnLCB2YWwpXG4gICAgICAgIGVtaXQoJ3VwZGF0ZTptb2RlbFZhbHVlJywgdmFsKVxuICAgICAgfSxcbiAgICB9KVxuXG4gICAgY29uc3Qgb25JbnB1dCA9IChlKSA9PiB7XG4gICAgICBjb21wdXRlZFZhbHVlLnZhbHVlID0gZS50YXJnZXQudmFsdWVcbiAgICB9XG5cbiAgICBjb25zdCBnZW5JbnB1dEZpZWxkID0gKHRleHRDbGFzc0NvbG9yLCB0ZXh0Q3NzQ29sb3IpID0+IHtcbiAgICAgIHJldHVybiBoKCdpbnB1dCcsIHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi10ZXh0LWZpZWxkX19pbnB1dCc6IHRydWUsXG4gICAgICAgICAgLi4uKCFhdHRycy5kaXNhYmxlZCAmJiB0ZXh0Q2xhc3NDb2xvciksXG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgLi4uKCFhdHRycy5kaXNhYmxlZCA/IHRleHRDc3NDb2xvciA6IHt9KSxcbiAgICAgICAgfSxcbiAgICAgICAgZGlzYWJsZWQ6IGF0dHJzLmRpc2FibGVkLFxuICAgICAgICB0eXBlOiBhdHRycy50eXBlID8gYXR0cnMudHlwZSA6ICd0ZXh0JyxcbiAgICAgICAgcGxhY2Vob2xkZXI6IGF0dHJzLnBsYWNlaG9sZGVyLFxuICAgICAgICByZWFkb25seTogYXR0cnMucmVhZG9ubHksXG4gICAgICAgIHZhbHVlOiBjb21wdXRlZFZhbHVlLnZhbHVlLFxuICAgICAgICBvbklucHV0LFxuICAgICAgICBvbkZvY3VzLFxuICAgICAgICBvbkJsdXIsXG4gICAgICAgIG9uQ2hhbmdlLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5UZXh0RmllbGRXcmFwcGVyID0gKGNsc0NvbG9yLCBjc3NDb2xvcikgPT4ge1xuICAgICAgcmV0dXJuIGgoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgIH0sXG4gICAgICAgIGdlbklucHV0RmllbGQoY2xzQ29sb3IsIGNzc0NvbG9yKVxuICAgICAgKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PlxuICAgICAgaChcbiAgICAgICAgVklucHV0LFxuICAgICAgICB7XG4gICAgICAgICAgZm9jdXNlZDogc3RhdGUuZm9jdXNlZCxcbiAgICAgICAgICB2YWx1ZTogY29tcHV0ZWRWYWx1ZS52YWx1ZSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFsndGV4dC1maWVsZCddOiAoeyB0ZXh0Q2xhc3NDb2xvciwgdGV4dENzc0NvbG9yIH0pID0+IHtcbiAgICAgICAgICAgIHJldHVybiBnZW5UZXh0RmllbGRXcmFwcGVyKHRleHRDbGFzc0NvbG9yLCB0ZXh0Q3NzQ29sb3IpXG4gICAgICAgICAgfSxcbiAgICAgICAgfVxuICAgICAgKVxuICB9LFxufSlcbiJdfQ==