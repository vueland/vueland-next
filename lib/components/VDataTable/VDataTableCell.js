import { h, computed, defineComponent } from 'vue';
import { colorProps, useColors } from '../../composables/use-colors';
import { convertToUnit } from '../../helpers';
import { VResize } from '../VResize';
export const VDataTableCell = defineComponent({
    name: 'v-data-table-cell',
    props: {
        resizeable: Boolean,
        align: {
            type: String,
            default: 'start',
        },
        width: {
            type: [String, Number],
            default: 75,
        },
        resizerColor: {
            type: String,
            default: 'primary',
        },
        contentColor: String,
        ...colorProps(),
    },
    emits: ['resize'],
    setup(props, { slots, emit }) {
        const { setTextClassNameColor, setTextCssColor, setBackgroundCssColor, setBackgroundClassNameColor, } = useColors();
        const classes = computed(() => ({
            'v-data-table__cell': true,
            'v-data-table__cell--themeable': !props.color,
            ...(props.contentColor ? setTextClassNameColor(props.contentColor) : {}),
            ...(props.color ? setBackgroundClassNameColor(props.color) : {}),
        }));
        const styles = computed(() => ({
            width: convertToUnit(+props.width),
            ...(props.contentColor ? setTextCssColor(props.contentColor) : {}),
            ...(props.color ? setBackgroundCssColor(props.color) : {}),
        }));
        const genResize = () => {
            const propsData = {
                right: true,
                emit: true,
                color: props.resizerColor,
                onResize: ($size) => emit('resize', $size),
            };
            return h(VResize, propsData);
        };
        const genCellContent = () => {
            const propsData = {
                class: {
                    'v-data-table__cell-content': true,
                    [`text-align--${props.align}`]: !!props.align,
                },
            };
            return h('div', propsData, slots.default?.());
        };
        return () => {
            const propsData = {
                class: classes.value,
                style: styles.value,
            };
            return h('div', propsData, [
                genCellContent(),
                props.resizeable && genResize(),
            ]);
        };
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkRhdGFUYWJsZUNlbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy92dWVsYW5kL3NyYy9jb21wb25lbnRzL1ZEYXRhVGFibGUvVkRhdGFUYWJsZUNlbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLE1BQU0sS0FBSyxDQUFBO0FBR2xELE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sOEJBQThCLENBQUE7QUFHcEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUc3QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBS3BDLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxlQUFlLENBQUM7SUFDNUMsSUFBSSxFQUFFLG1CQUFtQjtJQUN6QixLQUFLLEVBQUU7UUFDTCxVQUFVLEVBQUUsT0FBTztRQUNuQixLQUFLLEVBQUU7WUFDTCxJQUFJLEVBQUUsTUFBTTtZQUNaLE9BQU8sRUFBRSxPQUFPO1NBQ2pCO1FBQ0QsS0FBSyxFQUFFO1lBQ0wsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztZQUN0QixPQUFPLEVBQUUsRUFBRTtTQUNaO1FBQ0QsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFLE1BQU07WUFDWixPQUFPLEVBQUUsU0FBUztTQUNuQjtRQUNELFlBQVksRUFBRSxNQUFNO1FBQ3BCLEdBQUcsVUFBVSxFQUFFO0tBQ1Q7SUFFUixLQUFLLEVBQUUsQ0FBQyxRQUFRLENBQUM7SUFFakIsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7UUFDMUIsTUFBTSxFQUNKLHFCQUFxQixFQUNyQixlQUFlLEVBQ2YscUJBQXFCLEVBQ3JCLDJCQUEyQixHQUM1QixHQUFHLFNBQVMsRUFBRSxDQUFBO1FBRWYsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUEwQixHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZELG9CQUFvQixFQUFFLElBQUk7WUFDMUIsK0JBQStCLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSztZQUM3QyxHQUFHLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDeEUsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLDJCQUEyQixDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1NBQ2pFLENBQUMsQ0FBQyxDQUFBO1FBRUgsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDN0IsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7WUFDbEMsR0FBRyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNsRSxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7U0FDM0QsQ0FBQyxDQUFDLENBQUE7UUFFSCxNQUFNLFNBQVMsR0FBRyxHQUFVLEVBQUU7WUFDNUIsTUFBTSxTQUFTLEdBQUc7Z0JBQ2hCLEtBQUssRUFBRSxJQUFJO2dCQUNYLElBQUksRUFBRSxJQUFJO2dCQUNWLEtBQUssRUFBRSxLQUFLLENBQUMsWUFBWTtnQkFDekIsUUFBUSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQzthQUMzQyxDQUFBO1lBRUQsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFBO1FBQzlCLENBQUMsQ0FBQTtRQUVELE1BQU0sY0FBYyxHQUFHLEdBQVUsRUFBRTtZQUNqQyxNQUFNLFNBQVMsR0FBRztnQkFDaEIsS0FBSyxFQUFFO29CQUNMLDRCQUE0QixFQUFFLElBQUk7b0JBQ2xDLENBQUMsZUFBZ0IsS0FBSyxDQUFDLEtBQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLO2lCQUNoRDthQUNGLENBQUE7WUFFRCxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUE7UUFDL0MsQ0FBQyxDQUFBO1FBRUQsT0FBTyxHQUFHLEVBQUU7WUFDVixNQUFNLFNBQVMsR0FBRztnQkFDaEIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO2dCQUNwQixLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUs7YUFDcEIsQ0FBQTtZQUVELE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7Z0JBQ3pCLGNBQWMsRUFBRTtnQkFDaEIsS0FBSyxDQUFDLFVBQVUsSUFBSSxTQUFTLEVBQUU7YUFDaEMsQ0FBQyxDQUFBO1FBQ0osQ0FBQyxDQUFBO0lBQ0gsQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGgsIGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnXG5cbi8vIEVmZmVjdHNcbmltcG9ydCB7IGNvbG9yUHJvcHMsIHVzZUNvbG9ycyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3VzZS1jb2xvcnMnXG5cbi8vIEhlbHBlcnNcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWUmVzaXplIH0gZnJvbSAnLi4vVlJlc2l6ZSdcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuXG5leHBvcnQgY29uc3QgVkRhdGFUYWJsZUNlbGwgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1kYXRhLXRhYmxlLWNlbGwnLFxuICBwcm9wczoge1xuICAgIHJlc2l6ZWFibGU6IEJvb2xlYW4sXG4gICAgYWxpZ246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdzdGFydCcsXG4gICAgfSxcbiAgICB3aWR0aDoge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IDc1LFxuICAgIH0sXG4gICAgcmVzaXplckNvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAncHJpbWFyeScsXG4gICAgfSxcbiAgICBjb250ZW50Q29sb3I6IFN0cmluZyxcbiAgICAuLi5jb2xvclByb3BzKCksXG4gIH0gYXMgYW55LFxuXG4gIGVtaXRzOiBbJ3Jlc2l6ZSddLFxuXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzLCBlbWl0IH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3Qge1xuICAgICAgc2V0VGV4dENsYXNzTmFtZUNvbG9yLFxuICAgICAgc2V0VGV4dENzc0NvbG9yLFxuICAgICAgc2V0QmFja2dyb3VuZENzc0NvbG9yLFxuICAgICAgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yLFxuICAgIH0gPSB1c2VDb2xvcnMoKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtZGF0YS10YWJsZV9fY2VsbCc6IHRydWUsXG4gICAgICAndi1kYXRhLXRhYmxlX19jZWxsLS10aGVtZWFibGUnOiAhcHJvcHMuY29sb3IsXG4gICAgICAuLi4ocHJvcHMuY29udGVudENvbG9yID8gc2V0VGV4dENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbnRlbnRDb2xvcikgOiB7fSksXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgIHdpZHRoOiBjb252ZXJ0VG9Vbml0KCtwcm9wcy53aWR0aCksXG4gICAgICAuLi4ocHJvcHMuY29udGVudENvbG9yID8gc2V0VGV4dENzc0NvbG9yKHByb3BzLmNvbnRlbnRDb2xvcikgOiB7fSksXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3QgZ2VuUmVzaXplID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgcmlnaHQ6IHRydWUsXG4gICAgICAgIGVtaXQ6IHRydWUsXG4gICAgICAgIGNvbG9yOiBwcm9wcy5yZXNpemVyQ29sb3IsXG4gICAgICAgIG9uUmVzaXplOiAoJHNpemUpID0+IGVtaXQoJ3Jlc2l6ZScsICRzaXplKSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoVlJlc2l6ZSwgcHJvcHNEYXRhKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkNlbGxDb250ZW50ID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1kYXRhLXRhYmxlX19jZWxsLWNvbnRlbnQnOiB0cnVlLFxuICAgICAgICAgIFtgdGV4dC1hbGlnbi0tJHsgcHJvcHMuYWxpZ24gfWBdOiAhIXByb3BzLmFsaWduLFxuICAgICAgICB9LFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBzbG90cy5kZWZhdWx0Py4oKSlcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgc3R5bGU6IHN0eWxlcy52YWx1ZSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgW1xuICAgICAgICBnZW5DZWxsQ29udGVudCgpLFxuICAgICAgICBwcm9wcy5yZXNpemVhYmxlICYmIGdlblJlc2l6ZSgpLFxuICAgICAgXSlcbiAgICB9XG4gIH0sXG59KVxuIl19