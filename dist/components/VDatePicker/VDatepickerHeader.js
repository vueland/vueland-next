import { h, defineComponent } from 'vue';
import { useColors } from '../../composable/use-colors';
import { useIcons } from '../../composable/use-icons';
import { VIcon } from '../VIcon';
export const VDatepickerHeader = defineComponent({
    name: 'v-date-picker-header',
    props: {
        onNext: Function,
        onPrev: Function,
        color: String,
    },
    emits: ['table'],
    setup(props, { slots, emit }) {
        const { setTextClassNameColor, setTextCssColor } = useColors();
        const { icons } = useIcons();
        const genHeaderButton = (isRight) => {
            const icon = isRight ? icons.$arrowRight : icons.$arrowLeft;
            const propsData = {
                class: 'v-date-picker__header-button',
            };
            const iconPropsData = {
                icon,
                clickable: true,
                class: {
                    ...(props.color ? setTextClassNameColor(props.color) : {}),
                },
                style: {
                    ...(props.color ? setTextCssColor(props.color) : {}),
                },
                onClick: () => (isRight ? props.onNext() : props.onPrev()),
            };
            const arrowBtn = h(VIcon, iconPropsData);
            return h('div', propsData, arrowBtn);
        };
        const genHeaderDisplay = () => {
            const propsData = {
                class: {
                    'v-date-picker__header-display': true,
                    ...(props.color ? setTextClassNameColor(props.color) : {}),
                },
                style: {
                    ...(props.color ? setTextCssColor(props.color) : {}),
                },
                onClick: () => emit('table'),
            };
            return h('div', propsData, slots.default && slots.default());
        };
        return () => h('div', {
            class: 'v-date-picker__header',
        }, [genHeaderButton(false), genHeaderDisplay(), genHeaderButton(true)]);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkRhdGVwaWNrZXJIZWFkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WRGF0ZVBpY2tlci9WRGF0ZXBpY2tlckhlYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsQ0FBQyxFQUFFLGVBQWUsRUFBRSxNQUFNLEtBQUssQ0FBQTtBQUd4QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sNkJBQTZCLENBQUE7QUFDdkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDRCQUE0QixDQUFBO0FBR3JELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFFaEMsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsZUFBZSxDQUFDO0lBQy9DLElBQUksRUFBRSxzQkFBc0I7SUFFNUIsS0FBSyxFQUFFO1FBQ0wsTUFBTSxFQUFFLFFBQVE7UUFDaEIsTUFBTSxFQUFFLFFBQVE7UUFDaEIsS0FBSyxFQUFFLE1BQU07S0FDUDtJQUVSLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQztJQUVoQixLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtRQUMxQixNQUFNLEVBQUUscUJBQXFCLEVBQUUsZUFBZSxFQUFFLEdBQUcsU0FBUyxFQUFFLENBQUE7UUFDOUQsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLFFBQVEsRUFBRSxDQUFBO1FBRTVCLE1BQU0sZUFBZSxHQUFHLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDbEMsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFBO1lBRTNELE1BQU0sU0FBUyxHQUFHO2dCQUNoQixLQUFLLEVBQUUsOEJBQThCO2FBQ3RDLENBQUE7WUFFRCxNQUFNLGFBQWEsR0FBRztnQkFDcEIsSUFBSTtnQkFDSixTQUFTLEVBQUUsSUFBSTtnQkFDZixLQUFLLEVBQUU7b0JBQ0wsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2lCQUMzRDtnQkFDRCxLQUFLLEVBQUU7b0JBQ0wsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztpQkFDckQ7Z0JBQ0QsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUMzRCxDQUFBO1lBRUQsTUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQTtZQUV4QyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQ3RDLENBQUMsQ0FBQTtRQUVELE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxFQUFFO1lBQzVCLE1BQU0sU0FBUyxHQUFHO2dCQUNoQixLQUFLLEVBQUU7b0JBQ0wsK0JBQStCLEVBQUUsSUFBSTtvQkFDckMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2lCQUMzRDtnQkFDRCxLQUFLLEVBQUU7b0JBQ0wsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztpQkFDckQ7Z0JBQ0QsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7YUFDN0IsQ0FBQTtZQUVELE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtRQUM5RCxDQUFDLENBQUE7UUFFRCxPQUFPLEdBQUcsRUFBRSxDQUNWLENBQUMsQ0FDQyxLQUFLLEVBQ0w7WUFDRSxLQUFLLEVBQUUsdUJBQXVCO1NBQy9CLEVBQ0QsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRSxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FDcEUsQ0FBQTtJQUNMLENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBWdWUgQVBJXG5pbXBvcnQgeyBoLCBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnXG5cbi8vIEVmZmVjdHNcbmltcG9ydCB7IHVzZUNvbG9ycyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcbmltcG9ydCB7IHVzZUljb25zIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtaWNvbnMnXG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZJY29uIH0gZnJvbSAnLi4vVkljb24nXG5cbmV4cG9ydCBjb25zdCBWRGF0ZXBpY2tlckhlYWRlciA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWRhdGUtcGlja2VyLWhlYWRlcicsXG5cbiAgcHJvcHM6IHtcbiAgICBvbk5leHQ6IEZ1bmN0aW9uLFxuICAgIG9uUHJldjogRnVuY3Rpb24sXG4gICAgY29sb3I6IFN0cmluZyxcbiAgfSBhcyBhbnksXG5cbiAgZW1pdHM6IFsndGFibGUnXSxcblxuICBzZXR1cChwcm9wcywgeyBzbG90cywgZW1pdCB9KSB7XG4gICAgY29uc3QgeyBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IsIHNldFRleHRDc3NDb2xvciB9ID0gdXNlQ29sb3JzKClcbiAgICBjb25zdCB7IGljb25zIH0gPSB1c2VJY29ucygpXG5cbiAgICBjb25zdCBnZW5IZWFkZXJCdXR0b24gPSAoaXNSaWdodCkgPT4ge1xuICAgICAgY29uc3QgaWNvbiA9IGlzUmlnaHQgPyBpY29ucy4kYXJyb3dSaWdodCA6IGljb25zLiRhcnJvd0xlZnRcblxuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogJ3YtZGF0ZS1waWNrZXJfX2hlYWRlci1idXR0b24nLFxuICAgICAgfVxuXG4gICAgICBjb25zdCBpY29uUHJvcHNEYXRhID0ge1xuICAgICAgICBpY29uLFxuICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0VGV4dENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRUZXh0Q3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgICAgICB9LFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiAoaXNSaWdodCA/IHByb3BzLm9uTmV4dCgpIDogcHJvcHMub25QcmV2KCkpLFxuICAgICAgfVxuXG4gICAgICBjb25zdCBhcnJvd0J0biA9IGgoVkljb24sIGljb25Qcm9wc0RhdGEpXG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIGFycm93QnRuKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkhlYWRlckRpc3BsYXkgPSAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgJ3YtZGF0ZS1waWNrZXJfX2hlYWRlci1kaXNwbGF5JzogdHJ1ZSxcbiAgICAgICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgICAgICB9LFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldFRleHRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IGVtaXQoJ3RhYmxlJyksXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIHNsb3RzLmRlZmF1bHQgJiYgc2xvdHMuZGVmYXVsdCgpKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PlxuICAgICAgaChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzczogJ3YtZGF0ZS1waWNrZXJfX2hlYWRlcicsXG4gICAgICAgIH0sXG4gICAgICAgIFtnZW5IZWFkZXJCdXR0b24oZmFsc2UpLCBnZW5IZWFkZXJEaXNwbGF5KCksIGdlbkhlYWRlckJ1dHRvbih0cnVlKV1cbiAgICAgIClcbiAgfSxcbn0pXG4iXX0=