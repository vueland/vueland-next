import { h, ref, watch, withDirectives, defineComponent, vShow, onMounted, } from 'vue';
import { overlayProps, useOverlay } from '../../composable/use-overlay';
import { transitionProps, useTransition } from '../../composable/use-transition';
import { useToggle } from '../../composable/use-toggle';
export const VModal = defineComponent({
    name: 'v-modal',
    props: {
        modelValue: Boolean,
        ...overlayProps(),
        ...transitionProps(),
    },
    emits: ['update:modelValue'],
    setup(props, { slots, emit }) {
        const { isActive } = useToggle(props);
        const modalRef = ref(null);
        onMounted(() => {
            if (props.overlay) {
                const { createOverlay, removeOverlay } = useOverlay(props, modalRef.value);
                isActive.value && createOverlay();
                watch(() => isActive.value, (to) => {
                    to && createOverlay();
                    !to && removeOverlay();
                });
            }
        });
        function genContent() {
            const propsData = {
                class: 'v-modal__content',
            };
            return h('div', propsData, slots.default && slots.default());
        }
        function genModal() {
            const propsData = {
                class: 'v-modal',
                ref: modalRef,
                ['onUpdate:modelValue']: (val) => emit('update:modelValue', val),
            };
            return withDirectives(h('div', propsData, genContent()), [
                [vShow, isActive.value],
            ]);
        }
        return () => useTransition(genModal(), props.transition);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVk1vZGFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVk1vZGFsL1ZNb2RhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0wsQ0FBQyxFQUNELEdBQUcsRUFDSCxLQUFLLEVBQ0wsY0FBYyxFQUNkLGVBQWUsRUFDZixLQUFLLEVBQ0wsU0FBUyxHQUNWLE1BQU0sS0FBSyxDQUFBO0FBR1osT0FBTyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQTtBQUN2RSxPQUFPLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxNQUFNLGlDQUFpQyxDQUFBO0FBQ2hGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQTtBQUt2RCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsZUFBZSxDQUFDO0lBQ3BDLElBQUksRUFBRSxTQUFTO0lBRWYsS0FBSyxFQUFFO1FBQ0wsVUFBVSxFQUFFLE9BQU87UUFDbkIsR0FBRyxZQUFZLEVBQUU7UUFDakIsR0FBRyxlQUFlLEVBQUU7S0FDZDtJQUVSLEtBQUssRUFBRSxDQUFDLG1CQUFtQixDQUFDO0lBRTVCLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO1FBQzFCLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUE7UUFFckMsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRTFCLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDYixJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7Z0JBQ2pCLE1BQU0sRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLEdBQUcsVUFBVSxDQUNqRCxLQUFLLEVBQ0wsUUFBUSxDQUFDLEtBQU0sQ0FDaEIsQ0FBQTtnQkFFRCxRQUFRLENBQUMsS0FBSyxJQUFJLGFBQWEsRUFBRSxDQUFBO2dCQUVqQyxLQUFLLENBQ0gsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssRUFDcEIsQ0FBQyxFQUFFLEVBQUUsRUFBRTtvQkFDTCxFQUFFLElBQUksYUFBYSxFQUFFLENBQUE7b0JBQ3JCLENBQUMsRUFBRSxJQUFJLGFBQWEsRUFBRSxDQUFBO2dCQUN4QixDQUFDLENBQ0YsQ0FBQTthQUNGO1FBQ0gsQ0FBQyxDQUFDLENBQUE7UUFFRixTQUFTLFVBQVU7WUFDakIsTUFBTSxTQUFTLEdBQUc7Z0JBQ2hCLEtBQUssRUFBRSxrQkFBa0I7YUFDMUIsQ0FBQTtZQUNELE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtRQUM5RCxDQUFDO1FBRUQsU0FBUyxRQUFRO1lBQ2YsTUFBTSxTQUFTLEdBQUc7Z0JBQ2hCLEtBQUssRUFBRSxTQUFTO2dCQUNoQixHQUFHLEVBQUUsUUFBUTtnQkFDYixDQUFDLHFCQUFxQixDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLENBQUM7YUFDakUsQ0FBQTtZQUVELE9BQU8sY0FBYyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUU7Z0JBQ3ZELENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUM7YUFDeEIsQ0FBQyxDQUFBO1FBQ0osQ0FBQztRQUVELE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUMxRCxDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVnVlIEFQSVxuaW1wb3J0IHtcbiAgaCxcbiAgcmVmLFxuICB3YXRjaCxcbiAgd2l0aERpcmVjdGl2ZXMsXG4gIGRlZmluZUNvbXBvbmVudCxcbiAgdlNob3csXG4gIG9uTW91bnRlZCxcbn0gZnJvbSAndnVlJ1xuXG4vLyBFZmZlY3RzXG5pbXBvcnQgeyBvdmVybGF5UHJvcHMsIHVzZU92ZXJsYXkgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1vdmVybGF5J1xuaW1wb3J0IHsgdHJhbnNpdGlvblByb3BzLCB1c2VUcmFuc2l0aW9uIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtdHJhbnNpdGlvbidcbmltcG9ydCB7IHVzZVRvZ2dsZSB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXRvZ2dsZSdcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuXG5leHBvcnQgY29uc3QgVk1vZGFsID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtbW9kYWwnLFxuXG4gIHByb3BzOiB7XG4gICAgbW9kZWxWYWx1ZTogQm9vbGVhbixcbiAgICAuLi5vdmVybGF5UHJvcHMoKSxcbiAgICAuLi50cmFuc2l0aW9uUHJvcHMoKSxcbiAgfSBhcyBhbnksXG5cbiAgZW1pdHM6IFsndXBkYXRlOm1vZGVsVmFsdWUnXSxcblxuICBzZXR1cChwcm9wcywgeyBzbG90cywgZW1pdCB9KSB7XG4gICAgY29uc3QgeyBpc0FjdGl2ZSB9ID0gdXNlVG9nZ2xlKHByb3BzKVxuXG4gICAgY29uc3QgbW9kYWxSZWYgPSByZWYobnVsbClcblxuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICBpZiAocHJvcHMub3ZlcmxheSkge1xuICAgICAgICBjb25zdCB7IGNyZWF0ZU92ZXJsYXksIHJlbW92ZU92ZXJsYXkgfSA9IHVzZU92ZXJsYXkoXG4gICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgbW9kYWxSZWYudmFsdWUhXG4gICAgICAgIClcblxuICAgICAgICBpc0FjdGl2ZS52YWx1ZSAmJiBjcmVhdGVPdmVybGF5KClcblxuICAgICAgICB3YXRjaChcbiAgICAgICAgICAoKSA9PiBpc0FjdGl2ZS52YWx1ZSxcbiAgICAgICAgICAodG8pID0+IHtcbiAgICAgICAgICAgIHRvICYmIGNyZWF0ZU92ZXJsYXkoKVxuICAgICAgICAgICAgIXRvICYmIHJlbW92ZU92ZXJsYXkoKVxuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBmdW5jdGlvbiBnZW5Db250ZW50KCk6IFZOb2RlIHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6ICd2LW1vZGFsX19jb250ZW50JyxcbiAgICAgIH1cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIHNsb3RzLmRlZmF1bHQgJiYgc2xvdHMuZGVmYXVsdCgpKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbk1vZGFsKCkge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogJ3YtbW9kYWwnLFxuICAgICAgICByZWY6IG1vZGFsUmVmLFxuICAgICAgICBbJ29uVXBkYXRlOm1vZGVsVmFsdWUnXTogKHZhbCkgPT4gZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCB2YWwpLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gd2l0aERpcmVjdGl2ZXMoaCgnZGl2JywgcHJvcHNEYXRhLCBnZW5Db250ZW50KCkpLCBbXG4gICAgICAgIFt2U2hvdywgaXNBY3RpdmUudmFsdWVdLFxuICAgICAgXSlcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4gdXNlVHJhbnNpdGlvbihnZW5Nb2RhbCgpLCBwcm9wcy50cmFuc2l0aW9uKVxuICB9LFxufSlcbiJdfQ==