import { defineAsyncComponent } from 'vue';
import * as directives from './directives';
import components from './components';
import paths from './paths.json';
export class Vueland {
    static installed = false;
    static options;
    constructor(options) {
        Vueland.options = options;
    }
    static install(app, args = {}) {
        if (Vueland.installed)
            return;
        Vueland.installed = true;
        Object.keys(paths).forEach((key) => {
            if (key && paths[key]) {
                if (args.ssr) {
                    app.component(key, components[key]);
                }
                else {
                    app.component(key, defineAsyncComponent(() => import(`${paths[key]}`)));
                }
            }
        });
        Object.keys(directives).forEach((key) => {
            if (key && directives[key]) {
                app.directive(key, directives[key]);
            }
        });
        app.provide('$options', Vueland.options);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlicmFyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWJyYXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBTyxvQkFBb0IsRUFBRSxNQUFNLEtBQUssQ0FBQTtBQUMvQyxPQUFPLEtBQUssVUFBVSxNQUFNLGNBQWMsQ0FBQTtBQUMxQyxPQUFPLFVBQVUsTUFBTSxjQUFjLENBQUE7QUFFckMsT0FBTyxLQUFLLE1BQU0sY0FBYyxDQUFBO0FBSWhDLE1BQU0sT0FBTyxPQUFPO0lBQ2xCLE1BQU0sQ0FBQyxTQUFTLEdBQVksS0FBSyxDQUFBO0lBQ2pDLE1BQU0sQ0FBQyxPQUFPLENBQWE7SUFFM0IsWUFBWSxPQUFxQjtRQUMvQixPQUFPLENBQUMsT0FBTyxHQUFHLE9BQVEsQ0FBQTtJQUM1QixDQUFDO0lBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFRLEVBQUUsT0FBWSxFQUFFO1FBQ3JDLElBQUksT0FBTyxDQUFDLFNBQVM7WUFBRSxPQUFNO1FBRTdCLE9BQU8sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFBO1FBRXhCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDakMsSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNyQixJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7b0JBQ1osR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7aUJBQ3BDO3FCQUFNO29CQUNMLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLG9CQUFvQixDQUNyQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQXNCLEdBQUksS0FBSyxDQUFDLEdBQUcsQ0FBRSxFQUFFLENBQUMsQ0FBQyxDQUN0RCxDQUFBO2lCQUNGO2FBQ0Y7UUFDSCxDQUFDLENBQUMsQ0FBQTtRQUVGLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDdEMsSUFBSSxHQUFHLElBQUssVUFBa0IsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDbkMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUcsVUFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO2FBQzdDO1FBQ0gsQ0FBQyxDQUFDLENBQUE7UUFFRixHQUFHLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDMUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcCwgZGVmaW5lQXN5bmNDb21wb25lbnQgfSBmcm9tICd2dWUnXG5pbXBvcnQgKiBhcyBkaXJlY3RpdmVzIGZyb20gJy4vZGlyZWN0aXZlcydcbmltcG9ydCBjb21wb25lbnRzIGZyb20gJy4vY29tcG9uZW50cydcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBwYXRocyBmcm9tICcuL3BhdGhzLmpzb24nXG4vLyBUeXBlc1xuaW1wb3J0IHsgVXNlck9wdGlvbnMgfSBmcm9tICcuLi90eXBlcydcblxuZXhwb3J0IGNsYXNzIFZ1ZWxhbmQge1xuICBzdGF0aWMgaW5zdGFsbGVkOiBib29sZWFuID0gZmFsc2VcbiAgc3RhdGljIG9wdGlvbnM6IFVzZXJPcHRpb25zXG5cbiAgY29uc3RydWN0b3Iob3B0aW9ucz86IFVzZXJPcHRpb25zKSB7XG4gICAgVnVlbGFuZC5vcHRpb25zID0gb3B0aW9ucyFcbiAgfVxuXG4gIHN0YXRpYyBpbnN0YWxsKGFwcDogQXBwLCBhcmdzOiBhbnkgPSB7fSkge1xuICAgIGlmIChWdWVsYW5kLmluc3RhbGxlZCkgcmV0dXJuXG5cbiAgICBWdWVsYW5kLmluc3RhbGxlZCA9IHRydWVcblxuICAgIE9iamVjdC5rZXlzKHBhdGhzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkgJiYgcGF0aHNba2V5XSkge1xuICAgICAgICBpZiAoYXJncy5zc3IpIHtcbiAgICAgICAgICBhcHAuY29tcG9uZW50KGtleSwgY29tcG9uZW50c1trZXldKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFwcC5jb21wb25lbnQoa2V5LCBkZWZpbmVBc3luY0NvbXBvbmVudChcbiAgICAgICAgICAgICgpID0+IGltcG9ydCgvKlZ1ZWxhbmRfY29tcG9uZW50Ki9gJHsgcGF0aHNba2V5XSB9YCkpXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcblxuICAgIE9iamVjdC5rZXlzKGRpcmVjdGl2ZXMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleSAmJiAoZGlyZWN0aXZlcyBhcyBhbnkpW2tleV0pIHtcbiAgICAgICAgYXBwLmRpcmVjdGl2ZShrZXksIChkaXJlY3RpdmVzIGFzIGFueSlba2V5XSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgYXBwLnByb3ZpZGUoJyRvcHRpb25zJywgVnVlbGFuZC5vcHRpb25zKVxuICB9XG59XG4iXX0=