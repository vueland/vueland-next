import { computed, defineComponent, h, ref } from 'vue';
import { useInputStates } from '../../composable/use-input-states';
import { getStringKeysValue } from '../../helpers';
import { VInput } from '../VInput';
import { VMenu } from '../VMenu';
import { VIcon } from '../VIcon';
import { VSelectList } from './VSelectList';
import { FaIcons } from '../../services/icons';
export const VSelect = defineComponent({
    name: 'v-select',
    props: {
        modelValue: {
            type: [String, Number, Object],
            default: null
        },
        items: {
            type: Array,
            default: null
        },
        valueKey: {
            type: String,
            default: ''
        },
        activeClass: {
            type: String,
            default: 'primary white--text text--base'
        },
    },
    emits: ['click', 'focus', 'select', 'blur', 'change', 'update:modelValue'],
    setup(props, { attrs, emit }) {
        const { isDisabled, isReadonly, state, onBlur, onSelect, onFocus } = useInputStates(props, { attrs, emit });
        const activator = ref(null);
        const computedValue = computed(() => {
            return props.modelValue
                ? props.valueKey
                    ? getStringKeysValue(props.valueKey, props.modelValue)
                    : props.modelValue
                : '';
        });
        const classes = computed(() => ({
            'v-select': true,
            'v-select--expanded': state.focused,
            'v-select--readonly': isReadonly.value,
            'v-select--disabled': isDisabled.value
        }));
        const genInput = ({ textCssColor, textClassColor, disabled }) => {
            return h('input', {
                class: {
                    'v-select__input': true,
                    ...(disabled ? textClassColor : {})
                },
                style: {
                    ...(!disabled ? textCssColor : {})
                },
                disabled: isDisabled.value,
                type: attrs.type || 'text',
                placeholder: attrs.placeholder,
                value: computedValue.value,
                readonly: true
            });
        };
        const genSelectList = () => {
            return h(VMenu, {
                internalActivator: true,
                activator: activator.value,
                inputActivator: '.v-input__text-field',
                openOnClick: !isDisabled.value && !isReadonly.value,
                maxHeight: 240,
                zIndex: 12,
                onShow: onFocus,
                onHide: onBlur
            }, {
                default: () => h(VSelectList, {
                    items: props.items,
                    selected: props.modelValue,
                    valueKey: props.valueKey,
                    activeClass: props.activeClass,
                    onSelect
                })
            });
        };
        const genExpandIcon = () => {
            return h(VIcon, {
                icon: FaIcons.$chevronDown,
                color: attrs.color,
                size: 16
            });
        };
        const genSelect = ({ textCssColor, textClassColor, disabled }) => {
            return h('div', {
                class: classes.value
            }, genInput({ textCssColor, textClassColor, disabled }));
        };
        return () => h(VInput, {
            ref: activator,
            value: computedValue.value,
            focused: state.focused
        }, {
            ['text-field']: ({ textCssColor, textClassColor, disabled }) => {
                return genSelect({ textCssColor, textClassColor, disabled });
            },
            ['append-icon']: () => genExpandIcon(),
            select: () => activator.value ? genSelectList() : null
        });
    }
});
//# sourceMappingURL=data:application/json;base64,