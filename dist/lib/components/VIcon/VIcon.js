import { defineComponent, h, computed } from 'vue';
import { useColors, colorProps } from '../../composable/use-colors';
import { sizeProps } from '../../composable/use-size';
import { convertToUnit } from '../../helpers';
import { sizes } from '../../services/sizes';
export default defineComponent({
    name: 'v-icon',
    props: {
        disabled: Boolean,
        clickable: Boolean,
        size: [String, Number],
        icon: String,
        tag: {
            type: String,
            default: 'i',
        },
        ...colorProps(),
        ...sizeProps('sm'),
    },
    emits: ['click'],
    setup(props, { slots, emit }) {
        const { setTextCssColor, setTextClassNameColor } = useColors();
        const iconTag = props.clickable ? 'button' : props.tag;
        const computedIcon = computed(() => {
            return (props.icon ||
                (slots.default && slots.default()[0].children))?.trim();
        });
        const classes = computed(() => ({
            'v-icon': true,
            'v-icon--disabled': props.disabled,
            'v-icon--clickable': props.clickable,
            [computedIcon.value]: !!computedIcon.value,
            ...(props.color ? setTextClassNameColor(props.color) : {}),
        }));
        const styles = computed(() => ({
            fontSize: getSizes(),
            ...(props.color ? setTextCssColor(props.color) : {}),
        }));
        const getSizes = () => {
            const sizeProps = {
                sm: props.sm,
                md: props.md,
                lg: props.lg,
                xl: props.xl,
            };
            const explicitSize = Object.keys(sizeProps).find((key) => sizeProps[key]);
            return convertToUnit(props.size || (explicitSize && sizes[explicitSize]));
        };
        const onClick = () => {
            if (!props.disabled && props.clickable)
                emit('click');
        };
        return () => h(iconTag, {
            class: classes.value,
            style: styles.value,
            onClick,
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkljb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WSWNvbi9WSWNvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxLQUFLLENBQUE7QUFHbEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQTtBQUNuRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMkJBQTJCLENBQUE7QUFHckQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQU03QyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFFNUMsZUFBZSxlQUFlLENBQUM7SUFDN0IsSUFBSSxFQUFFLFFBQVE7SUFFZCxLQUFLLEVBQUU7UUFDTCxRQUFRLEVBQUUsT0FBTztRQUNqQixTQUFTLEVBQUUsT0FBTztRQUNsQixJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO1FBQ3RCLElBQUksRUFBRSxNQUFNO1FBQ1osR0FBRyxFQUFFO1lBQ0gsSUFBSSxFQUFFLE1BQU07WUFDWixPQUFPLEVBQUUsR0FBRztTQUNiO1FBQ0QsR0FBRyxVQUFVLEVBQUU7UUFDZixHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUM7S0FDWjtJQUVSLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQztJQUVoQixLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtRQUMxQixNQUFNLEVBQUUsZUFBZSxFQUFFLHFCQUFxQixFQUFFLEdBQUcsU0FBUyxFQUFFLENBQUE7UUFDOUQsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFBO1FBRXRELE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBUyxHQUFHLEVBQUU7WUFDekMsT0FBTyxDQUNMLEtBQUssQ0FBQyxJQUFJO2dCQUNWLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQy9DLEVBQUUsSUFBSSxFQUFFLENBQUE7UUFDWCxDQUFDLENBQUMsQ0FBQTtRQUVGLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBMEIsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUN2RCxRQUFRLEVBQUUsSUFBSTtZQUNkLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ2xDLG1CQUFtQixFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQ3BDLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSztZQUMxQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7U0FDM0QsQ0FBQyxDQUFDLENBQUE7UUFFSCxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQXlCLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDckQsUUFBUSxFQUFFLFFBQVEsRUFBRTtZQUNwQixHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1NBQ3JELENBQUMsQ0FBQyxDQUFBO1FBRUgsTUFBTSxRQUFRLEdBQUcsR0FBVyxFQUFFO1lBQzVCLE1BQU0sU0FBUyxHQUFHO2dCQUNoQixFQUFFLEVBQUUsS0FBSyxDQUFDLEVBQUU7Z0JBQ1osRUFBRSxFQUFFLEtBQUssQ0FBQyxFQUFFO2dCQUNaLEVBQUUsRUFBRSxLQUFLLENBQUMsRUFBRTtnQkFDWixFQUFFLEVBQUUsS0FBSyxDQUFDLEVBQUU7YUFDYixDQUFBO1lBQ0QsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBRSxDQUFBO1lBRTFFLE9BQU8sYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUUsQ0FBQTtRQUM1RSxDQUFDLENBQUE7UUFFRCxNQUFNLE9BQU8sR0FBRyxHQUFHLEVBQUU7WUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLElBQUksS0FBSyxDQUFDLFNBQVM7Z0JBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ3ZELENBQUMsQ0FBQTtRQUVELE9BQU8sR0FBRyxFQUFFLENBQ1YsQ0FBQyxDQUFDLE9BQU8sRUFBRTtZQUNULEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSztZQUNwQixLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUs7WUFDbkIsT0FBTztTQUNSLENBQUMsQ0FBQTtJQUNOLENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBWdWUgQVBJXG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGgsIGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuXG4vLyBDb21wb3NhYmxlXG5pbXBvcnQgeyB1c2VDb2xvcnMsIGNvbG9yUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG5pbXBvcnQgeyBzaXplUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1zaXplJ1xuXG4vLyBIZWxwZXJzXG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0IH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuXG4vLyBTZXJ2aWNlc1xuaW1wb3J0IHsgc2l6ZXMgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9zaXplcydcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtaWNvbicsXG5cbiAgcHJvcHM6IHtcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICBjbGlja2FibGU6IEJvb2xlYW4sXG4gICAgc2l6ZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICBpY29uOiBTdHJpbmcsXG4gICAgdGFnOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnaScsXG4gICAgfSxcbiAgICAuLi5jb2xvclByb3BzKCksXG4gICAgLi4uc2l6ZVByb3BzKCdzbScpLFxuICB9IGFzIGFueSxcblxuICBlbWl0czogWydjbGljayddLFxuXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzLCBlbWl0IH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3QgeyBzZXRUZXh0Q3NzQ29sb3IsIHNldFRleHRDbGFzc05hbWVDb2xvciB9ID0gdXNlQ29sb3JzKClcbiAgICBjb25zdCBpY29uVGFnID0gcHJvcHMuY2xpY2thYmxlID8gJ2J1dHRvbicgOiBwcm9wcy50YWdcblxuICAgIGNvbnN0IGNvbXB1dGVkSWNvbiA9IGNvbXB1dGVkPHN0cmluZz4oKCkgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgcHJvcHMuaWNvbiB8fFxuICAgICAgICAoc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KClbMF0uY2hpbGRyZW4pXG4gICAgICApPy50cmltKClcbiAgICB9KVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtaWNvbic6IHRydWUsXG4gICAgICAndi1pY29uLS1kaXNhYmxlZCc6IHByb3BzLmRpc2FibGVkLFxuICAgICAgJ3YtaWNvbi0tY2xpY2thYmxlJzogcHJvcHMuY2xpY2thYmxlLFxuICAgICAgW2NvbXB1dGVkSWNvbi52YWx1ZV06ICEhY29tcHV0ZWRJY29uLnZhbHVlLFxuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0VGV4dENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IHN0eWxlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIHN0cmluZz4+KCgpID0+ICh7XG4gICAgICBmb250U2l6ZTogZ2V0U2l6ZXMoKSxcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldFRleHRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBnZXRTaXplcyA9ICgpOiBzdHJpbmcgPT4ge1xuICAgICAgY29uc3Qgc2l6ZVByb3BzID0ge1xuICAgICAgICBzbTogcHJvcHMuc20sXG4gICAgICAgIG1kOiBwcm9wcy5tZCxcbiAgICAgICAgbGc6IHByb3BzLmxnLFxuICAgICAgICB4bDogcHJvcHMueGwsXG4gICAgICB9XG4gICAgICBjb25zdCBleHBsaWNpdFNpemUgPSBPYmplY3Qua2V5cyhzaXplUHJvcHMpLmZpbmQoKGtleSkgPT4gc2l6ZVByb3BzW2tleV0pIVxuXG4gICAgICByZXR1cm4gY29udmVydFRvVW5pdChwcm9wcy5zaXplIHx8IChleHBsaWNpdFNpemUgJiYgc2l6ZXNbZXhwbGljaXRTaXplXSkpIVxuICAgIH1cblxuICAgIGNvbnN0IG9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICBpZiAoIXByb3BzLmRpc2FibGVkICYmIHByb3BzLmNsaWNrYWJsZSkgZW1pdCgnY2xpY2snKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PlxuICAgICAgaChpY29uVGFnLCB7XG4gICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgICBzdHlsZTogc3R5bGVzLnZhbHVlLFxuICAgICAgICBvbkNsaWNrLFxuICAgICAgfSlcbiAgfSxcbn0pXG4iXX0=