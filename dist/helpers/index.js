import { defineComponent, h } from 'vue';
export const createSimpleFunctional = (c, el = 'div', name = '') => {
    return defineComponent({
        name: name || c.replace(/__/g, '-'),
        setup(_, { slots }) {
            const propsData = {
                class: {
                    [c.trim()]: true,
                },
            };
            return () => h(el, propsData, slots.default && slots.default());
        },
    });
};
export const addOnceListener = (el, eventName, cb, options = false) => {
    const once = (event) => {
        cb(event);
        el.removeEventListener(eventName, once, options);
    };
    el.addEventListener(eventName, once, options);
};
export const convertToUnit = (str, unit = 'px') => {
    if (isNaN(+str)) {
        return String(str);
    }
    else {
        return `${Number(str)}${unit}`;
    }
};
export const warning = (warningText) => {
    console.warn(warningText);
};
export const copyWithoutLink = (obj) => {
    return JSON.parse(JSON.stringify(obj));
};
export const addScopedSlot = (slotName, slots) => {
    return (scoped) => {
        const arg = { ...scoped };
        return slots[slotName] && slots[slotName](arg);
    };
};
export const getKeyValueFromTarget = (valueKey, target) => {
    return valueKey.split('.').reduce((acc, it) => acc[it], target);
};
export const mapToValArray = (map) => Array.from(map.values());
export const uniqueArray = (arr) => {
    return Object.values(arr.reduce((map, it) => {
        if (!map[it.name])
            map[it.name] = it;
        return map;
    }, {}));
};
export const getStringKeysValue = (str, value) => {
    return str.split('.').reduce((acc, it) => acc[it], value);
};
export const toCamelCase = (...args) => {
    return args.reduce((res, s, i) => {
        if (i === 0)
            res += s;
        else
            res += s[0].toUpperCase() + s.slice(1);
        return res;
    }, '');
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaGVscGVycy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFBUyxNQUFNLEtBQUssQ0FBQTtBQUUvQyxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxDQUNwQyxDQUFTLEVBQ1QsRUFBRSxHQUFHLEtBQUssRUFDVixPQUFlLEVBQUUsRUFDakIsRUFBRTtJQUNGLE9BQU8sZUFBZSxDQUFDO1FBQ3JCLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDO1FBRW5DLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUU7WUFDaEIsTUFBTSxTQUFTLEdBQUc7Z0JBQ2hCLEtBQUssRUFBRTtvQkFDTCxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUk7aUJBQ2pCO2FBQ0YsQ0FBQTtZQUVELE9BQU8sR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtRQUNqRSxDQUFDO0tBQ0YsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQzdCLEVBQWUsRUFDZixTQUFpQixFQUNqQixFQUEwQixFQUMxQixVQUE2QyxLQUFLLEVBQzVDLEVBQUU7SUFDUixNQUFNLElBQUksR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO1FBQzVCLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUNULEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQ2xELENBQUMsQ0FBQTtJQUVELEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFT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Q0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUMzQyxPQUFPLEdBQUcsQ0FBQTtJQUNaLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtBQUNSLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaCwgU2xvdHMgfSBmcm9tICd2dWUnXG5cbmV4cG9ydCBjb25zdCBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsID0gKFxuICBjOiBzdHJpbmcsXG4gIGVsID0gJ2RpdicsXG4gIG5hbWU6IHN0cmluZyA9ICcnLFxuKSA9PiB7XG4gIHJldHVybiBkZWZpbmVDb21wb25lbnQoe1xuICAgIG5hbWU6IG5hbWUgfHwgYy5yZXBsYWNlKC9fXy9nLCAnLScpLFxuXG4gICAgc2V0dXAoXywgeyBzbG90cyB9KSB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgW2MudHJpbSgpXTogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICgpID0+IGgoZWwsIHByb3BzRGF0YSwgc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCkpXG4gICAgfSxcbiAgfSlcbn1cblxuZXhwb3J0IGNvbnN0IGFkZE9uY2VMaXN0ZW5lciA9IChcbiAgZWw6IEV2ZW50VGFyZ2V0LFxuICBldmVudE5hbWU6IHN0cmluZyxcbiAgY2I6IChldmVudDogRXZlbnQpID0+IHZvaWQsXG4gIG9wdGlvbnM6IGJvb2xlYW4gfCBBZGRFdmVudExpc3RlbmVyT3B0aW9ucyA9IGZhbHNlLFxuKTogdm9pZCA9PiB7XG4gIGNvbnN0IG9uY2UgPSAoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgY2IoZXZlbnQpXG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIG9uY2UsIG9wdGlvbnMpXG4gIH1cblxuICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgb25jZSwgb3B0aW9ucylcbn1cblxuZXhwb3J0IGNvbnN0IGNvbnZlcnRUb1VuaXQgPSAoXG4gIHN0cjogc3RyaW5nIHwgbnVtYmVyLFxuICB1bml0ID0gJ3B4Jyxcbik6IHN0cmluZyA9PiB7XG4gIGlmIChpc05hTigrc3RyISkpIHtcbiAgICByZXR1cm4gU3RyaW5nKHN0cilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYCR7IE51bWJlcihzdHIpIH0keyB1bml0IH1gXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHdhcm5pbmcgPSAod2FybmluZ1RleHQpID0+IHtcbiAgY29uc29sZS53YXJuKHdhcm5pbmdUZXh0KVxufVxuXG5leHBvcnQgY29uc3QgY29weVdpdGhvdXRMaW5rID0gKG9iaikgPT4ge1xuICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKVxufVxuXG5leHBvcnQgY29uc3QgYWRkU2NvcGVkU2xvdCA9IChzbG90TmFtZTogc3RyaW5nLCBzbG90czogU2xvdHMpID0+IHtcbiAgcmV0dXJuIChzY29wZWQpID0+IHtcbiAgICBjb25zdCBhcmc6IGFueSA9IHsgLi4uc2NvcGVkIH1cblxuICAgIHJldHVybiBzbG90c1tzbG90TmFtZV0gJiYgc2xvdHNbc2xvdE5hbWVdIShhcmcpXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGdldEtleVZhbHVlRnJvbVRhcmdldCA9IDxUPihcbiAgdmFsdWVLZXk6IHN0cmluZyxcbiAgdGFyZ2V0OiBULFxuKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIHZhbHVlS2V5LnNwbGl0KCcuJykucmVkdWNlKChhY2MsIGl0KSA9PiBhY2NbaXRdLCB0YXJnZXQpXG59XG5cbmV4cG9ydCBjb25zdCBtYXBUb1ZhbEFycmF5ID0gKG1hcCk6IGFueVtdID0+IEFycmF5LmZyb20obWFwLnZhbHVlcygpKVxuXG5leHBvcnQgY29uc3QgdW5pcXVlQXJyYXkgPSA8VD4oYXJyKTogQXJyYXk8VD4gPT4ge1xuICByZXR1cm4gT2JqZWN0LnZhbHVlcyhhcnIucmVkdWNlKChtYXAsIGl0KSA9PiB7XG4gICAgaWYgKCFtYXBbaXQubmFtZV0pIG1hcFtpdC5uYW1lXSA9IGl0XG4gICAgcmV0dXJuIG1hcFxuICB9LCB7fSkpXG59XG5cbmV4cG9ydCBjb25zdCBnZXRTdHJpbmdLZXlzVmFsdWUgPSAoc3RyOiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+IHtcbiAgcmV0dXJuIHN0ci5zcGxpdCgnLicpLnJlZHVjZSgoYWNjLCBpdCkgPT4gYWNjW2l0XSwgdmFsdWUpXG59XG5cbmV4cG9ydCBjb25zdCB0b0NhbWVsQ2FzZSA9ICguLi5hcmdzOiBzdHJpbmdbXSk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBhcmdzLnJlZHVjZSgocmVzLCBzLCBpKSA9PiB7XG4gICAgaWYgKGkgPT09IDApIHJlcyArPSBzXG4gICAgZWxzZSByZXMgKz0gc1swXS50b1VwcGVyQ2FzZSgpICsgcy5zbGljZSgxKVxuICAgIHJldHVybiByZXNcbiAgfSwgJycpXG59XG4iXX0=