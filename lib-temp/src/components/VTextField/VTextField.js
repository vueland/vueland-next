import { defineComponent, h, computed } from 'vue';
import { VInput } from '../VInput';
import { useInputStates } from '../../composable/use-input-states';
export const VTextField = defineComponent({
    name: 'e-text-field',
    components: {
        VInput,
    },
    inheritAttrs: true,
    props: {
        modelValue: {
            type: [String, Number],
            default: '',
        },
    },
    emits: ['update:modelValue', 'input', 'blur', 'focus', 'change'],
    setup(props, { emit, attrs }) {
        const { isReadonly, isDisabled, state, onFocus, onBlur, onChange } = useInputStates(props, { emit, attrs });
        const classes = computed(() => ({
            'v-text-field': true,
            'v-text-field--disabled': isDisabled.value,
            'v-text-field--readonly': isReadonly.value,
        }));
        const computedValue = computed({
            get: () => props.modelValue,
            set: (val) => {
                emit('input', val);
                emit('update:modelValue', val);
            },
        });
        const onInput = (e) => {
            computedValue.value = e.target.value;
        };
        const genInputField = (textClassColor, textCssColor) => {
            return h('input', {
                class: {
                    'v-text-field__input': true,
                    ...(!attrs.disabled && textClassColor),
                },
                style: {
                    ...(!attrs.disabled ? textCssColor : {}),
                },
                disabled: attrs.disabled,
                type: attrs.type ? attrs.type : 'text',
                placeholder: attrs.placeholder,
                readonly: attrs.readonly,
                value: computedValue.value,
                onInput,
                onFocus,
                onBlur,
                onChange,
            });
        };
        const genTextFieldWrapper = (clsColor, cssColor) => {
            return h('div', {
                class: classes.value,
            }, genInputField(clsColor, cssColor));
        };
        return () => h(VInput, {
            focused: state.focused,
            value: computedValue.value,
        }, {
            ['text-field']: ({ textClassColor, textCssColor }) => {
                return genTextFieldWrapper(textClassColor, textCssColor);
            },
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVlRleHRGaWVsZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZUZXh0RmllbGQvVlRleHRGaWVsZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxLQUFLLENBQUE7QUFDbEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUNsQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUNBQW1DLENBQUE7QUFFbEUsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLGVBQWUsQ0FBQztJQUN4QyxJQUFJLEVBQUUsY0FBYztJQUNwQixVQUFVLEVBQUU7UUFDVixNQUFNO0tBQ1A7SUFDRCxZQUFZLEVBQUUsSUFBSTtJQUNsQixLQUFLLEVBQUU7UUFDTCxVQUFVLEVBQUU7WUFDVixJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO1lBQ3RCLE9BQU8sRUFBRSxFQUFFO1NBQ1o7S0FDRjtJQUNELEtBQUssRUFBRSxDQUFDLG1CQUFtQixFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQztJQUNoRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRTtRQUMxQixNQUFNLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FDaEUsY0FBYyxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO1FBRXhDLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBMEIsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUN2RCxjQUFjLEVBQUUsSUFBSTtZQUNwQix3QkFBd0IsRUFBRSxVQUFVLENBQUMsS0FBSztZQUMxQyx3QkFBd0IsRUFBRSxVQUFVLENBQUMsS0FBSztTQUMzQyxDQUFDLENBQUMsQ0FBQTtRQUVILE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQztZQUM3QixHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVU7WUFFM0IsR0FBRyxFQUFFLENBQUMsR0FBVyxFQUFFLEVBQUU7Z0JBQ25CLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUE7Z0JBQ2xCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLENBQUMsQ0FBQTtZQUNoQyxDQUFDO1NBQ0YsQ0FBQyxDQUFBO1FBRUYsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUNwQixhQUFhLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFBO1FBQ3RDLENBQUMsQ0FBQTtRQUVELE1BQU0sYUFBYSxHQUFHLENBQUMsY0FBYyxFQUFFLFlBQVksRUFBRSxFQUFFO1lBQ3JELE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRTtnQkFDaEIsS0FBSyxFQUFFO29CQUNMLHFCQUFxQixFQUFFLElBQUk7b0JBQzNCLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLElBQUksY0FBYyxDQUFDO2lCQUN2QztnQkFDRCxLQUFLLEVBQUU7b0JBQ0wsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7aUJBQ3pDO2dCQUNELFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtnQkFDeEIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU07Z0JBQ3RDLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztnQkFDOUIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO2dCQUN4QixLQUFLLEVBQUUsYUFBYSxDQUFDLEtBQUs7Z0JBQzFCLE9BQU87Z0JBQ1AsT0FBTztnQkFDUCxNQUFNO2dCQUNOLFFBQVE7YUFDVCxDQUFDLENBQUE7UUFDSixDQUFDLENBQUE7UUFFRCxNQUFNLG1CQUFtQixHQUFHLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxFQUFFO1lBQ2pELE9BQU8sQ0FBQyxDQUNOLEtBQUssRUFDTDtnQkFDRSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7YUFDckIsRUFDRCxhQUFhLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUNsQyxDQUFBO1FBQ0gsQ0FBQyxDQUFBO1FBRUQsT0FBTyxHQUFHLEVBQUUsQ0FDVixDQUFDLENBQ0MsTUFBTSxFQUNOO1lBQ0UsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLEtBQUssRUFBRSxhQUFhLENBQUMsS0FBSztTQUMzQixFQUNEO1lBQ0UsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLEVBQUUsY0FBYyxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUU7Z0JBQ25ELE9BQU8sbUJBQW1CLENBQUMsY0FBYyxFQUFFLFlBQVksQ0FBQyxDQUFBO1lBQzFELENBQUM7U0FDRixDQUNGLENBQUE7SUFDTCxDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IFZJbnB1dCB9IGZyb20gJy4uL1ZJbnB1dCdcbmltcG9ydCB7IHVzZUlucHV0U3RhdGVzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtaW5wdXQtc3RhdGVzJ1xuXG5leHBvcnQgY29uc3QgVlRleHRGaWVsZCA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdlLXRleHQtZmllbGQnLFxuICBjb21wb25lbnRzOiB7XG4gICAgVklucHV0LFxuICB9LFxuICBpbmhlcml0QXR0cnM6IHRydWUsXG4gIHByb3BzOiB7XG4gICAgbW9kZWxWYWx1ZToge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6ICcnLFxuICAgIH0sXG4gIH0sXG4gIGVtaXRzOiBbJ3VwZGF0ZTptb2RlbFZhbHVlJywgJ2lucHV0JywgJ2JsdXInLCAnZm9jdXMnLCAnY2hhbmdlJ10sXG4gIHNldHVwKHByb3BzLCB7IGVtaXQsIGF0dHJzIH0pIHtcbiAgICBjb25zdCB7IGlzUmVhZG9ubHksIGlzRGlzYWJsZWQsIHN0YXRlLCBvbkZvY3VzLCBvbkJsdXIsIG9uQ2hhbmdlIH0gPVxuICAgICAgdXNlSW5wdXRTdGF0ZXMocHJvcHMsIHsgZW1pdCwgYXR0cnMgfSlcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LXRleHQtZmllbGQnOiB0cnVlLFxuICAgICAgJ3YtdGV4dC1maWVsZC0tZGlzYWJsZWQnOiBpc0Rpc2FibGVkLnZhbHVlLFxuICAgICAgJ3YtdGV4dC1maWVsZC0tcmVhZG9ubHknOiBpc1JlYWRvbmx5LnZhbHVlLFxuICAgIH0pKVxuXG4gICAgY29uc3QgY29tcHV0ZWRWYWx1ZSA9IGNvbXB1dGVkKHtcbiAgICAgIGdldDogKCkgPT4gcHJvcHMubW9kZWxWYWx1ZSxcblxuICAgICAgc2V0OiAodmFsOiBzdHJpbmcpID0+IHtcbiAgICAgICAgZW1pdCgnaW5wdXQnLCB2YWwpXG4gICAgICAgIGVtaXQoJ3VwZGF0ZTptb2RlbFZhbHVlJywgdmFsKVxuICAgICAgfSxcbiAgICB9KVxuXG4gICAgY29uc3Qgb25JbnB1dCA9IChlKSA9PiB7XG4gICAgICBjb21wdXRlZFZhbHVlLnZhbHVlID0gZS50YXJnZXQudmFsdWVcbiAgICB9XG5cbiAgICBjb25zdCBnZW5JbnB1dEZpZWxkID0gKHRleHRDbGFzc0NvbG9yLCB0ZXh0Q3NzQ29sb3IpID0+IHtcbiAgICAgIHJldHVybiBoKCdpbnB1dCcsIHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi10ZXh0LWZpZWxkX19pbnB1dCc6IHRydWUsXG4gICAgICAgICAgLi4uKCFhdHRycy5kaXNhYmxlZCAmJiB0ZXh0Q2xhc3NDb2xvciksXG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgLi4uKCFhdHRycy5kaXNhYmxlZCA/IHRleHRDc3NDb2xvciA6IHt9KSxcbiAgICAgICAgfSxcbiAgICAgICAgZGlzYWJsZWQ6IGF0dHJzLmRpc2FibGVkLFxuICAgICAgICB0eXBlOiBhdHRycy50eXBlID8gYXR0cnMudHlwZSA6ICd0ZXh0JyxcbiAgICAgICAgcGxhY2Vob2xkZXI6IGF0dHJzLnBsYWNlaG9sZGVyLFxuICAgICAgICByZWFkb25seTogYXR0cnMucmVhZG9ubHksXG4gICAgICAgIHZhbHVlOiBjb21wdXRlZFZhbHVlLnZhbHVlLFxuICAgICAgICBvbklucHV0LFxuICAgICAgICBvbkZvY3VzLFxuICAgICAgICBvbkJsdXIsXG4gICAgICAgIG9uQ2hhbmdlLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5UZXh0RmllbGRXcmFwcGVyID0gKGNsc0NvbG9yLCBjc3NDb2xvcikgPT4ge1xuICAgICAgcmV0dXJuIGgoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgIH0sXG4gICAgICAgIGdlbklucHV0RmllbGQoY2xzQ29sb3IsIGNzc0NvbG9yKVxuICAgICAgKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PlxuICAgICAgaChcbiAgICAgICAgVklucHV0LFxuICAgICAgICB7XG4gICAgICAgICAgZm9jdXNlZDogc3RhdGUuZm9jdXNlZCxcbiAgICAgICAgICB2YWx1ZTogY29tcHV0ZWRWYWx1ZS52YWx1ZSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFsndGV4dC1maWVsZCddOiAoeyB0ZXh0Q2xhc3NDb2xvciwgdGV4dENzc0NvbG9yIH0pID0+IHtcbiAgICAgICAgICAgIHJldHVybiBnZW5UZXh0RmllbGRXcmFwcGVyKHRleHRDbGFzc0NvbG9yLCB0ZXh0Q3NzQ29sb3IpXG4gICAgICAgICAgfSxcbiAgICAgICAgfVxuICAgICAgKVxuICB9LFxufSlcbiJdfQ==