import { computed, reactive, watch } from 'vue';
import { useValidation } from './use-validation';
export const useInputStates = (props, { attrs, emit }) => {
    const inputState = reactive({
        value: '',
        focused: false,
    });
    const { errorState, validate } = useValidation(props);
    const isDisabled = computed(() => {
        if (props.disabled)
            return true;
        if (typeof attrs.disabled === 'boolean')
            return attrs.disabled;
        return attrs.disabled !== undefined;
    });
    const isReadonly = computed(() => {
        if (props.readonly)
            return true;
        if (typeof attrs.readonly === 'boolean')
            return attrs.readonly;
        return attrs.readonly !== undefined;
    });
    const stateClasses = computed(() => ({
        'primary--text': inputState.focused && !errorState.innerError,
        'error--text': !!errorState.innerError,
    }));
    watch(() => inputState.focused, (focused) => {
        if (!focused && props.rules)
            return validate(inputState.value);
    });
    watch(() => inputState.value, (val) => {
        if (props.rules)
            return validate(val);
    });
    const onFocus = (e) => {
        if (isReadonly.value)
            return;
        inputState.focused = true;
        emit('focus', e);
    };
    const onChange = () => {
        if (isReadonly.value)
            return;
        emit('change');
    };
    const onBlur = (e) => {
        if (isReadonly.value)
            return;
        inputState.focused = false;
        emit('blur', e);
    };
    const onSelect = (val) => {
        inputState.focused = false;
        emit('update:modelValue', val);
        emit('select', val);
        onChange();
    };
    return {
        inputState,
        errorState,
        isReadonly,
        isDisabled,
        stateClasses,
        onFocus,
        onBlur,
        onChange,
        onSelect,
        validate
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWlucHV0LXN0YXRlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3Z1ZWxhbmQvc3JjL2NvbXBvc2FibGVzL3VzZS1pbnB1dC1zdGF0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLE1BQU0sS0FBSyxDQUFBO0FBQy9DLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQU9oRCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRTtJQUN2RCxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQVE7UUFDakMsS0FBSyxFQUFFLEVBQUU7UUFDVCxPQUFPLEVBQUUsS0FBSztLQUNmLENBQUMsQ0FBQTtJQUVGLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBRXJELE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBVSxHQUFHLEVBQUU7UUFDeEMsSUFBSSxLQUFLLENBQUMsUUFBUTtZQUFFLE9BQU8sSUFBSSxDQUFBO1FBRS9CLElBQUksT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLFNBQVM7WUFBRSxPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUE7UUFFOUQsT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLFNBQVMsQ0FBQTtJQUNyQyxDQUFDLENBQUMsQ0FBQTtJQUVGLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBVSxHQUFHLEVBQUU7UUFDeEMsSUFBSSxLQUFLLENBQUMsUUFBUTtZQUFFLE9BQU8sSUFBSSxDQUFBO1FBRS9CLElBQUksT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLFNBQVM7WUFBRSxPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUE7UUFFOUQsT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLFNBQVMsQ0FBQTtJQUNyQyxDQUFDLENBQUMsQ0FBQTtJQUVGLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBMEIsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUM1RCxlQUFlLEVBQUUsVUFBVSxDQUFDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVO1FBQzdELGFBQWEsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLFVBQVU7S0FDdkMsQ0FBQyxDQUFDLENBQUE7SUFFSCxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFO1FBQzFDLElBQUksQ0FBQyxPQUFPLElBQUksS0FBSyxDQUFDLEtBQUs7WUFBRSxPQUFPLFFBQVEsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDaEUsQ0FBQyxDQUFDLENBQUE7SUFFRixLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFO1FBQ3BDLElBQUksS0FBSyxDQUFDLEtBQUs7WUFBRSxPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUN2QyxDQUFDLENBQUMsQ0FBQTtJQUVGLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUU7UUFDcEIsSUFBSSxVQUFVLENBQUMsS0FBSztZQUFFLE9BQU07UUFFNUIsVUFBVSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUE7UUFDekIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUNsQixDQUFDLENBQUE7SUFFRCxNQUFNLFFBQVEsR0FBRyxHQUFHLEVBQUU7UUFDcEIsSUFBSSxVQUFVLENBQUMsS0FBSztZQUFFLE9BQU07UUFFNUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ2hCLENBQUMsQ0FBQTtJQUVELE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUU7UUFDbkIsSUFBSSxVQUFVLENBQUMsS0FBSztZQUFFLE9BQU07UUFFNUIsVUFBVSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUE7UUFDMUIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUNqQixDQUFDLENBQUE7SUFFRCxNQUFNLFFBQVEsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFO1FBQ3ZCLFVBQVUsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFBO1FBRTFCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUM5QixJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBRW5CLFFBQVEsRUFBRSxDQUFBO0lBQ1osQ0FBQyxDQUFBO0lBRUQsT0FBTztRQUNMLFVBQVU7UUFDVixVQUFVO1FBQ1YsVUFBVTtRQUNWLFVBQVU7UUFDVixZQUFZO1FBQ1osT0FBTztRQUNQLE1BQU07UUFDTixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7S0FDVCxDQUFBO0FBQ0gsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29tcHV0ZWQsIHJlYWN0aXZlLCB3YXRjaCB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IHVzZVZhbGlkYXRpb24gfSBmcm9tICcuL3VzZS12YWxpZGF0aW9uJ1xuXG50eXBlIFN0YXRlID0ge1xuICB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyXG4gIGZvY3VzZWQ6IGJvb2xlYW5cbn1cblxuZXhwb3J0IGNvbnN0IHVzZUlucHV0U3RhdGVzID0gKHByb3BzLCB7IGF0dHJzLCBlbWl0IH0pID0+IHtcbiAgY29uc3QgaW5wdXRTdGF0ZSA9IHJlYWN0aXZlPFN0YXRlPih7XG4gICAgdmFsdWU6ICcnLFxuICAgIGZvY3VzZWQ6IGZhbHNlLFxuICB9KVxuXG4gIGNvbnN0IHsgZXJyb3JTdGF0ZSwgdmFsaWRhdGUgfSA9IHVzZVZhbGlkYXRpb24ocHJvcHMpXG5cbiAgY29uc3QgaXNEaXNhYmxlZCA9IGNvbXB1dGVkPGJvb2xlYW4+KCgpID0+IHtcbiAgICBpZiAocHJvcHMuZGlzYWJsZWQpIHJldHVybiB0cnVlXG5cbiAgICBpZiAodHlwZW9mIGF0dHJzLmRpc2FibGVkID09PSAnYm9vbGVhbicpIHJldHVybiBhdHRycy5kaXNhYmxlZFxuXG4gICAgcmV0dXJuIGF0dHJzLmRpc2FibGVkICE9PSB1bmRlZmluZWRcbiAgfSlcblxuICBjb25zdCBpc1JlYWRvbmx5ID0gY29tcHV0ZWQ8Ym9vbGVhbj4oKCkgPT4ge1xuICAgIGlmIChwcm9wcy5yZWFkb25seSkgcmV0dXJuIHRydWVcblxuICAgIGlmICh0eXBlb2YgYXR0cnMucmVhZG9ubHkgPT09ICdib29sZWFuJykgcmV0dXJuIGF0dHJzLnJlYWRvbmx5XG5cbiAgICByZXR1cm4gYXR0cnMucmVhZG9ubHkgIT09IHVuZGVmaW5lZFxuICB9KVxuXG4gIGNvbnN0IHN0YXRlQ2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICdwcmltYXJ5LS10ZXh0JzogaW5wdXRTdGF0ZS5mb2N1c2VkICYmICFlcnJvclN0YXRlLmlubmVyRXJyb3IsXG4gICAgJ2Vycm9yLS10ZXh0JzogISFlcnJvclN0YXRlLmlubmVyRXJyb3IsXG4gIH0pKVxuXG4gIHdhdGNoKCgpID0+IGlucHV0U3RhdGUuZm9jdXNlZCwgKGZvY3VzZWQpID0+IHtcbiAgICBpZiAoIWZvY3VzZWQgJiYgcHJvcHMucnVsZXMpIHJldHVybiB2YWxpZGF0ZShpbnB1dFN0YXRlLnZhbHVlKVxuICB9KVxuXG4gIHdhdGNoKCgpID0+IGlucHV0U3RhdGUudmFsdWUsICh2YWwpID0+IHtcbiAgICBpZiAocHJvcHMucnVsZXMpIHJldHVybiB2YWxpZGF0ZSh2YWwpXG4gIH0pXG5cbiAgY29uc3Qgb25Gb2N1cyA9IChlKSA9PiB7XG4gICAgaWYgKGlzUmVhZG9ubHkudmFsdWUpIHJldHVyblxuXG4gICAgaW5wdXRTdGF0ZS5mb2N1c2VkID0gdHJ1ZVxuICAgIGVtaXQoJ2ZvY3VzJywgZSlcbiAgfVxuXG4gIGNvbnN0IG9uQ2hhbmdlID0gKCkgPT4ge1xuICAgIGlmIChpc1JlYWRvbmx5LnZhbHVlKSByZXR1cm5cblxuICAgIGVtaXQoJ2NoYW5nZScpXG4gIH1cblxuICBjb25zdCBvbkJsdXIgPSAoZSkgPT4ge1xuICAgIGlmIChpc1JlYWRvbmx5LnZhbHVlKSByZXR1cm5cblxuICAgIGlucHV0U3RhdGUuZm9jdXNlZCA9IGZhbHNlXG4gICAgZW1pdCgnYmx1cicsIGUpXG4gIH1cblxuICBjb25zdCBvblNlbGVjdCA9ICh2YWwpID0+IHtcbiAgICBpbnB1dFN0YXRlLmZvY3VzZWQgPSBmYWxzZVxuXG4gICAgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCB2YWwpXG4gICAgZW1pdCgnc2VsZWN0JywgdmFsKVxuXG4gICAgb25DaGFuZ2UoKVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpbnB1dFN0YXRlLFxuICAgIGVycm9yU3RhdGUsXG4gICAgaXNSZWFkb25seSxcbiAgICBpc0Rpc2FibGVkLFxuICAgIHN0YXRlQ2xhc3NlcyxcbiAgICBvbkZvY3VzLFxuICAgIG9uQmx1cixcbiAgICBvbkNoYW5nZSxcbiAgICBvblNlbGVjdCxcbiAgICB2YWxpZGF0ZVxuICB9XG59XG4iXX0=