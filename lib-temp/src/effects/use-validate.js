import { reactive, computed } from 'vue';
export const validateProps = () => {
    return {
        rules: {
            type: Array,
            default: null,
        },
        value: [String, Number, Date],
    };
};
export function useValidate(props) {
    const errorState = reactive({
        innerError: null,
        innerErrorMessage: null,
        isDirty: false,
    });
    const validateClasses = computed(() => {
        return {
            'v-validatable': true,
        };
    });
    const computedColor = computed(() => {
        if (props.disabled)
            return undefined;
        if (props.color)
            return props.color;
        if (props.dark)
            return 'white';
    });
    const validationState = computed(() => {
        if (errorState.innerError)
            return 'danger';
        if (!errorState.innerError && errorState.innerError !== null)
            return computedColor.value;
        return computedColor.value || 'primary';
    });
    const hasRules = computed(() => {
        return (props.rules !== void 0 && props.rules !== null && props.rules.length > 0);
    });
    const validatable = computed(() => {
        return props.validate;
    });
    const dirty = () => {
        errorState.isDirty = true;
    };
    const update = (err, msg = null) => {
        if (errorState.innerError !== err) {
            errorState.innerError = err;
        }
        if (msg && errorState.innerErrorMessage !== msg) {
            errorState.innerErrorMessage = msg;
        }
        if (!msg)
            errorState.innerErrorMessage = msg;
        return errorState.innerError;
    };
    const validate = (val = props.value) => {
        if (validatable.value)
            return !update(!val);
        if (!hasRules.value)
            return true;
        dirty();
        for (let i = 0, len = props.rules.length; i < len; i += 1) {
            const rule = props.rules[i];
            let result;
            if (typeof rule === 'function') {
                result = rule(val);
            }
            if (result === false || typeof result === 'string') {
                update(true, result);
                return false;
            }
            if (result === true && i === len - 1) {
                update(false);
                return true;
            }
        }
    };
    return {
        validate,
        dirty,
        update,
        validateClasses,
        computedColor,
        validationState,
        errorState,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXZhbGlkYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2VmZmVjdHMvdXNlLXZhbGlkYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sS0FBSyxDQUFBO0FBRXhDLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxHQUFHLEVBQUU7SUFDaEMsT0FBTztRQUNMLEtBQUssRUFBRTtZQUNMLElBQUksRUFBRSxLQUFLO1lBQ1gsT0FBTyxFQUFFLElBQUk7U0FDZDtRQUNELEtBQUssRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDO0tBQzlCLENBQUE7QUFDSCxDQUFDLENBQUE7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLEtBQUs7SUFDL0IsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDO1FBQzFCLFVBQVUsRUFBRSxJQUFJO1FBQ2hCLGlCQUFpQixFQUFFLElBQUk7UUFDdkIsT0FBTyxFQUFFLEtBQUs7S0FDZixDQUFDLENBQUE7SUFFRixNQUFNLGVBQWUsR0FBRyxRQUFRLENBQTBCLEdBQUcsRUFBRTtRQUM3RCxPQUFPO1lBQ0wsZUFBZSxFQUFFLElBQUk7U0FDdEIsQ0FBQTtJQUNILENBQUMsQ0FBQyxDQUFBO0lBRUYsTUFBTSxhQUFhLEdBQUcsUUFBUSxDQUFxQixHQUFHLEVBQUU7UUFDdEQsSUFBSSxLQUFLLENBQUMsUUFBUTtZQUFFLE9BQU8sU0FBUyxDQUFBO1FBQ3BDLElBQUksS0FBSyxDQUFDLEtBQUs7WUFBRSxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUE7UUFDbkMsSUFBSSxLQUFLLENBQUMsSUFBSTtZQUFFLE9BQU8sT0FBTyxDQUFBO0lBQ2hDLENBQUMsQ0FBQyxDQUFBO0lBRUYsTUFBTSxlQUFlLEdBQUcsUUFBUSxDQUFxQixHQUFHLEVBQUU7UUFDeEQsSUFBSSxVQUFVLENBQUMsVUFBVTtZQUFFLE9BQU8sUUFBUSxDQUFBO1FBQzFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxJQUFJLFVBQVUsQ0FBQyxVQUFVLEtBQUssSUFBSTtZQUMxRCxPQUFPLGFBQWEsQ0FBQyxLQUFLLENBQUE7UUFDNUIsT0FBTyxhQUFhLENBQUMsS0FBSyxJQUFJLFNBQVMsQ0FBQTtJQUN6QyxDQUFDLENBQUMsQ0FBQTtJQUVGLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBVSxHQUFHLEVBQUU7UUFDdEMsT0FBTyxDQUNMLEtBQUssQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUN6RSxDQUFBO0lBQ0gsQ0FBQyxDQUFDLENBQUE7SUFFRixNQUFNLFdBQVcsR0FBRyxRQUFRLENBQVUsR0FBRyxFQUFFO1FBQ3pDLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQTtJQUN2QixDQUFDLENBQUMsQ0FBQTtJQUVGLE1BQU0sS0FBSyxHQUFHLEdBQUcsRUFBRTtRQUNqQixVQUFVLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQTtJQUMzQixDQUFDLENBQUE7SUFFRCxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsSUFBSSxFQUFFLEVBQUU7UUFDakMsSUFBSSxVQUFVLENBQUMsVUFBVSxLQUFLLEdBQUcsRUFBRTtZQUNqQyxVQUFVLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQTtTQUM1QjtRQUVELElBQUksR0FBRyxJQUFJLFVBQVUsQ0FBQyxpQkFBaUIsS0FBSyxHQUFHLEVBQUU7WUFDL0MsVUFBVSxDQUFDLGlCQUFpQixHQUFHLEdBQUcsQ0FBQTtTQUNuQztRQUVELElBQUksQ0FBQyxHQUFHO1lBQUUsVUFBVSxDQUFDLGlCQUFpQixHQUFHLEdBQUcsQ0FBQTtRQUU1QyxPQUFPLFVBQVUsQ0FBQyxVQUFVLENBQUE7SUFDOUIsQ0FBQyxDQUFBO0lBRUQsTUFBTSxRQUFRLEdBQUcsQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBa0IsRUFBRTtRQUNyRCxJQUFJLFdBQVcsQ0FBQyxLQUFLO1lBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBRTNDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSztZQUFFLE9BQU8sSUFBSSxDQUFBO1FBRWhDLEtBQUssRUFBRSxDQUFBO1FBRVAsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN6RCxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBRTNCLElBQUksTUFBTSxDQUFBO1lBRVYsSUFBSSxPQUFPLElBQUksS0FBSyxVQUFVLEVBQUU7Z0JBQzlCLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7YUFDbkI7WUFFRCxJQUFJLE1BQU0sS0FBSyxLQUFLLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO2dCQUNsRCxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFBO2dCQUNwQixPQUFPLEtBQUssQ0FBQTthQUNiO1lBRUQsSUFBSSxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxFQUFFO2dCQUNwQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7Z0JBQ2IsT0FBTyxJQUFJLENBQUE7YUFDWjtTQUNGO0lBQ0gsQ0FBQyxDQUFBO0lBRUQsT0FBTztRQUNMLFFBQVE7UUFDUixLQUFLO1FBQ0wsTUFBTTtRQUNOLGVBQWU7UUFDZixhQUFhO1FBQ2IsZUFBZTtRQUNmLFVBQVU7S0FDWCxDQUFBO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFZ1ZSBBUElcbmltcG9ydCB7IHJlYWN0aXZlLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcblxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlUHJvcHMgPSAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgcnVsZXM6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICB9LFxuICAgIHZhbHVlOiBbU3RyaW5nLCBOdW1iZXIsIERhdGVdLFxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VWYWxpZGF0ZShwcm9wcykge1xuICBjb25zdCBlcnJvclN0YXRlID0gcmVhY3RpdmUoe1xuICAgIGlubmVyRXJyb3I6IG51bGwsXG4gICAgaW5uZXJFcnJvck1lc3NhZ2U6IG51bGwsXG4gICAgaXNEaXJ0eTogZmFsc2UsXG4gIH0pXG5cbiAgY29uc3QgdmFsaWRhdGVDbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgJ3YtdmFsaWRhdGFibGUnOiB0cnVlLFxuICAgIH1cbiAgfSlcblxuICBjb25zdCBjb21wdXRlZENvbG9yID0gY29tcHV0ZWQ8c3RyaW5nIHwgdW5kZWZpbmVkPigoKSA9PiB7XG4gICAgaWYgKHByb3BzLmRpc2FibGVkKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgaWYgKHByb3BzLmNvbG9yKSByZXR1cm4gcHJvcHMuY29sb3JcbiAgICBpZiAocHJvcHMuZGFyaykgcmV0dXJuICd3aGl0ZSdcbiAgfSlcblxuICBjb25zdCB2YWxpZGF0aW9uU3RhdGUgPSBjb21wdXRlZDxzdHJpbmcgfCB1bmRlZmluZWQ+KCgpID0+IHtcbiAgICBpZiAoZXJyb3JTdGF0ZS5pbm5lckVycm9yKSByZXR1cm4gJ2RhbmdlcidcbiAgICBpZiAoIWVycm9yU3RhdGUuaW5uZXJFcnJvciAmJiBlcnJvclN0YXRlLmlubmVyRXJyb3IgIT09IG51bGwpXG4gICAgICByZXR1cm4gY29tcHV0ZWRDb2xvci52YWx1ZVxuICAgIHJldHVybiBjb21wdXRlZENvbG9yLnZhbHVlIHx8ICdwcmltYXJ5J1xuICB9KVxuXG4gIGNvbnN0IGhhc1J1bGVzID0gY29tcHV0ZWQ8Ym9vbGVhbj4oKCkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICBwcm9wcy5ydWxlcyAhPT0gdm9pZCAwICYmIHByb3BzLnJ1bGVzICE9PSBudWxsICYmIHByb3BzLnJ1bGVzLmxlbmd0aCA+IDBcbiAgICApXG4gIH0pXG5cbiAgY29uc3QgdmFsaWRhdGFibGUgPSBjb21wdXRlZDxib29sZWFuPigoKSA9PiB7XG4gICAgcmV0dXJuIHByb3BzLnZhbGlkYXRlXG4gIH0pXG5cbiAgY29uc3QgZGlydHkgPSAoKSA9PiB7XG4gICAgZXJyb3JTdGF0ZS5pc0RpcnR5ID0gdHJ1ZVxuICB9XG5cbiAgY29uc3QgdXBkYXRlID0gKGVyciwgbXNnID0gbnVsbCkgPT4ge1xuICAgIGlmIChlcnJvclN0YXRlLmlubmVyRXJyb3IgIT09IGVycikge1xuICAgICAgZXJyb3JTdGF0ZS5pbm5lckVycm9yID0gZXJyXG4gICAgfVxuXG4gICAgaWYgKG1zZyAmJiBlcnJvclN0YXRlLmlubmVyRXJyb3JNZXNzYWdlICE9PSBtc2cpIHtcbiAgICAgIGVycm9yU3RhdGUuaW5uZXJFcnJvck1lc3NhZ2UgPSBtc2dcbiAgICB9XG5cbiAgICBpZiAoIW1zZykgZXJyb3JTdGF0ZS5pbm5lckVycm9yTWVzc2FnZSA9IG1zZ1xuXG4gICAgcmV0dXJuIGVycm9yU3RhdGUuaW5uZXJFcnJvclxuICB9XG5cbiAgY29uc3QgdmFsaWRhdGUgPSAodmFsID0gcHJvcHMudmFsdWUpOiBib29sZWFuIHwgdm9pZCA9PiB7XG4gICAgaWYgKHZhbGlkYXRhYmxlLnZhbHVlKSByZXR1cm4gIXVwZGF0ZSghdmFsKVxuXG4gICAgaWYgKCFoYXNSdWxlcy52YWx1ZSkgcmV0dXJuIHRydWVcblxuICAgIGRpcnR5KClcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwcm9wcy5ydWxlcy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgY29uc3QgcnVsZSA9IHByb3BzLnJ1bGVzW2ldXG5cbiAgICAgIGxldCByZXN1bHRcblxuICAgICAgaWYgKHR5cGVvZiBydWxlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJlc3VsdCA9IHJ1bGUodmFsKVxuICAgICAgfVxuXG4gICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSB8fCB0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICB1cGRhdGUodHJ1ZSwgcmVzdWx0KVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cblxuICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSAmJiBpID09PSBsZW4gLSAxKSB7XG4gICAgICAgIHVwZGF0ZShmYWxzZSlcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHZhbGlkYXRlLFxuICAgIGRpcnR5LFxuICAgIHVwZGF0ZSxcbiAgICB2YWxpZGF0ZUNsYXNzZXMsXG4gICAgY29tcHV0ZWRDb2xvcixcbiAgICB2YWxpZGF0aW9uU3RhdGUsXG4gICAgZXJyb3JTdGF0ZSxcbiAgfVxufVxuIl19