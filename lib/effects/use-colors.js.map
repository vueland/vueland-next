{"version":3,"sources":["../../../src/effects/use-colors.ts"],"names":[],"mappings":"AACA,SAAS,UAAT,QAA2B,uBAA3B;AAcA,OAAM,SAAU,UAAV,GAAoB;AACxB,SAAO;AACL,IAAA,KAAK,EAAE;AADF,GAAP;AAGD;AAED,OAAO,MAAM,SAAS,GAAG,MAAgB;AACvC,QAAM,aAAa,GAAG,CAAC,KAAD,EAAgB,IAAhB,KAAqC;AACzD,QAAI,CAAC,UAAU,CAAC,KAAD,CAAf,EAAwB;AACtB,MAAA,IAAI,CAAC,KAAL,CAAW,KAAX,IAAoB,IAApB;AACD,KAFD,MAEO;AACL,MAAA,IAAI,CAAC,KAAL,GAAa,EACX,GAAG,IAAI,CAAC,KADG;AAEX,4BAAoB,KAFT;AAGX,wBAAgB;AAHL,OAAb;AAKD;;AAED,WAAO,IAAP;AACD,GAZD;;AAcA,QAAM,YAAY,GAAG,CAAC,KAAD,EAAgB,IAAA,GAAY,EAA5B,KAA0C;AAC7D,QAAI,UAAU,CAAC,KAAD,CAAd,EAAuB;AACrB,MAAA,IAAI,CAAC,KAAL,GAAa,EACX,GAAI,IAAI,CAAC,KADE;AAEX,QAAA,KAAK,EAAE,GAAI,KAAM,EAFN;AAGX,uBAAe,GAAI,KAAM;AAHd,OAAb;AAKD,KAND,MAMO,IAAI,KAAJ,EAAW;AAChB,YAAM,CAAC,SAAD,EAAY,aAAZ,IAA6B,KAAK,CAAC,IAAN,GAAa,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAnC;AAEA,MAAA,IAAI,CAAC,KAAL,GAAa,EACX,GAAG,IAAI,CAAC,KADG;AAEX,SAAC,GAAI,SAAU,QAAf,GAA0B;AAFf,OAAb;;AAKA,UAAI,aAAJ,EAAmB;AACjB,QAAA,IAAI,CAAC,KAAL,CAAW,SAAU,aAAc,EAAnC,IAAyC,IAAzC;AACD;AACF;;AAED,WAAO,IAAP;AACD,GArBD;;AAuBA,SAAO;AACL,IAAA,aADK;AAEL,IAAA;AAFK,GAAP;AAID,CA1CM","sourcesContent":["// Utils\nimport { isCssColor } from '../utils/color-parser'\n\n// Types\nimport { PropType } from 'vue'\n\ntype Colorable = {\n  setBackground: (color: string, data: any) => object\n  setTextColor: (color: string, data: any) => object\n}\n\ninterface ColorProps {\n  color: PropType<string>\n}\n\nexport function colorProps(): ColorProps {\n  return {\n    color: String,\n  }\n}\n\nexport const useColors = (): Colorable => {\n  const setBackground = (color: string, data: any): object => {\n    if (!isCssColor(color)) {\n      data.class[color] = true\n    } else {\n      data.style = {\n        ...data.style,\n        'background-color': color,\n        'border-color': color,\n      }\n    }\n\n    return data\n  }\n\n  const setTextColor = (color: string, data: any = {}): object => {\n    if (isCssColor(color)) {\n      data.style = {\n        ...(data.style as object),\n        color: `${ color }`,\n        'caret-color': `${ color }`,\n      }\n    } else if (color) {\n      const [colorName, colorModifier] = color.trim().split(' ', 2)\n\n      data.class = {\n        ...data.class,\n        [`${ colorName }--text`]: true,\n      }\n\n      if (colorModifier) {\n        data.class[`text--${ colorModifier }`] = true\n      }\n    }\n\n    return data\n  }\n\n  return {\n    setBackground,\n    setTextColor,\n  }\n}\n"],"sourceRoot":"","file":"use-colors.js"}