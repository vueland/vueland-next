import { isCssColor } from '../utils/color-parser';
export const colorProps = (defaultColor = '') => ({
    color: {
        type: String,
        default: defaultColor,
    },
});
export const useColors = () => {
    const setTextClassNameColor = (color) => {
        const classes = {};
        if (!isCssColor(color)) {
            const [colorName, colorModifier] = color.trim().split(' ', 2);
            colorName && (classes[`${colorName}--text`] = true);
            colorModifier && (classes[`text--${colorModifier}`] = true);
        }
        return classes;
    };
    const setTextCssColor = (color) => {
        const styles = {};
        if (isCssColor(color)) {
            styles.color = color;
        }
        return styles;
    };
    const setBackgroundCssColor = (color) => {
        const styles = {};
        if (isCssColor(color)) {
            styles['background-color'] = color;
            styles['border-color'] = color;
        }
        return styles;
    };
    const setBackgroundClassNameColor = (color) => {
        const classes = {};
        if (!isCssColor(color)) {
            const [colorName, colorModifier] = color.trim().split(' ', 2);
            colorName && (classes[colorName] = true);
            colorModifier && (classes[colorModifier] = true);
        }
        return classes;
    };
    return {
        setTextCssColor,
        setTextClassNameColor,
        setBackgroundCssColor,
        setBackgroundClassNameColor,
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWNvbG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb3NhYmxlcy91c2UtY29sb3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQTtBQUVsRCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxlQUF1QixFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDeEQsS0FBSyxFQUFFO1FBQ0wsSUFBSSxFQUFFLE1BQU07UUFDWixPQUFPLEVBQUUsWUFBWTtLQUN0QjtDQUNGLENBQUMsQ0FBQTtBQUVGLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxHQUFHLEVBQUU7SUFDNUIsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLEtBQWEsRUFBRSxFQUFFO1FBQzlDLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQTtRQUVsQixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3RCLE1BQU0sQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFDN0QsU0FBUyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsU0FBUyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQTtZQUNuRCxhQUFhLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxhQUFhLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFBO1NBQzVEO1FBRUQsT0FBTyxPQUFPLENBQUE7SUFDaEIsQ0FBQyxDQUFBO0lBRUQsTUFBTSxlQUFlLEdBQUcsQ0FBQyxLQUFhLEVBQTBCLEVBQUU7UUFDaEUsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFBO1FBRXRCLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3JCLE1BQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO1NBQ3JCO1FBRUQsT0FBTyxNQUFNLENBQUE7SUFDZixDQUFDLENBQUE7SUFFRCxNQUFNLHFCQUFxQixHQUFHLENBQUMsS0FBYSxFQUFFLEVBQUU7UUFDOUMsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFBO1FBRWpCLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3JCLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEtBQUssQ0FBQTtZQUNsQyxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsS0FBSyxDQUFBO1NBQy9CO1FBRUQsT0FBTyxNQUFNLENBQUE7SUFDZixDQUFDLENBQUE7SUFFRCxNQUFNLDJCQUEyQixHQUFHLENBQUMsS0FBYSxFQUFFLEVBQUU7UUFDcEQsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFBO1FBRWxCLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDdEIsTUFBTSxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQTtZQUM3RCxTQUFTLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUE7WUFDeEMsYUFBYSxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFBO1NBQ2pEO1FBRUQsT0FBTyxPQUFPLENBQUE7SUFDaEIsQ0FBQyxDQUFBO0lBRUQsT0FBTztRQUNMLGVBQWU7UUFDZixxQkFBcUI7UUFDckIscUJBQXFCO1FBQ3JCLDJCQUEyQjtLQUM1QixDQUFBO0FBQ0gsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNDc3NDb2xvciB9IGZyb20gJy4uL3V0aWxzL2NvbG9yLXBhcnNlcidcblxuZXhwb3J0IGNvbnN0IGNvbG9yUHJvcHMgPSAoZGVmYXVsdENvbG9yOiBzdHJpbmcgPSAnJykgPT4gKHtcbiAgY29sb3I6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogZGVmYXVsdENvbG9yLFxuICB9LFxufSlcblxuZXhwb3J0IGNvbnN0IHVzZUNvbG9ycyA9ICgpID0+IHtcbiAgY29uc3Qgc2V0VGV4dENsYXNzTmFtZUNvbG9yID0gKGNvbG9yOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBjbGFzc2VzID0ge31cblxuICAgIGlmICghaXNDc3NDb2xvcihjb2xvcikpIHtcbiAgICAgIGNvbnN0IFtjb2xvck5hbWUsIGNvbG9yTW9kaWZpZXJdID0gY29sb3IudHJpbSgpLnNwbGl0KCcgJywgMilcbiAgICAgIGNvbG9yTmFtZSAmJiAoY2xhc3Nlc1tgJHtjb2xvck5hbWV9LS10ZXh0YF0gPSB0cnVlKVxuICAgICAgY29sb3JNb2RpZmllciAmJiAoY2xhc3Nlc1tgdGV4dC0tJHtjb2xvck1vZGlmaWVyfWBdID0gdHJ1ZSlcbiAgICB9XG5cbiAgICByZXR1cm4gY2xhc3Nlc1xuICB9XG5cbiAgY29uc3Qgc2V0VGV4dENzc0NvbG9yID0gKGNvbG9yOiBzdHJpbmcpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0+IHtcbiAgICBjb25zdCBzdHlsZXM6IGFueSA9IHt9XG5cbiAgICBpZiAoaXNDc3NDb2xvcihjb2xvcikpIHtcbiAgICAgIHN0eWxlcy5jb2xvciA9IGNvbG9yXG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlc1xuICB9XG5cbiAgY29uc3Qgc2V0QmFja2dyb3VuZENzc0NvbG9yID0gKGNvbG9yOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBzdHlsZXMgPSB7fVxuXG4gICAgaWYgKGlzQ3NzQ29sb3IoY29sb3IpKSB7XG4gICAgICBzdHlsZXNbJ2JhY2tncm91bmQtY29sb3InXSA9IGNvbG9yXG4gICAgICBzdHlsZXNbJ2JvcmRlci1jb2xvciddID0gY29sb3JcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGVzXG4gIH1cblxuICBjb25zdCBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IgPSAoY29sb3I6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IGNsYXNzZXMgPSB7fVxuXG4gICAgaWYgKCFpc0Nzc0NvbG9yKGNvbG9yKSkge1xuICAgICAgY29uc3QgW2NvbG9yTmFtZSwgY29sb3JNb2RpZmllcl0gPSBjb2xvci50cmltKCkuc3BsaXQoJyAnLCAyKVxuICAgICAgY29sb3JOYW1lICYmIChjbGFzc2VzW2NvbG9yTmFtZV0gPSB0cnVlKVxuICAgICAgY29sb3JNb2RpZmllciAmJiAoY2xhc3Nlc1tjb2xvck1vZGlmaWVyXSA9IHRydWUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGNsYXNzZXNcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2V0VGV4dENzc0NvbG9yLFxuICAgIHNldFRleHRDbGFzc05hbWVDb2xvcixcbiAgICBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IsXG4gICAgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yLFxuICB9XG59XG4iXX0=