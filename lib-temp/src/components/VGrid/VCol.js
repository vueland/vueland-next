import { defineComponent, computed, h } from 'vue';
import { toCamelCase } from '../../helpers';
const breakpoints = ['sm', 'md', 'lg', 'xl'];
const colProps = breakpoints.reduce((props, p) => {
    props[p] = {
        type: [String, Number],
        default: null,
    };
    return props;
}, {});
const orderProps = breakpoints.reduce((props, p) => {
    props[`order-${p}`] = {
        type: [String, Number],
        default: null,
    };
    return props;
}, {});
const offsetProps = breakpoints.reduce((props, p) => {
    props[`offset-${p}`] = {
        type: [String, Number],
        default: null,
    };
    return props;
}, {});
export const VCol = defineComponent({
    name: 'v-col',
    props: {
        order: {
            type: [String, Number],
            default: null,
        },
        cols: {
            type: [String, Number],
            default: null,
        },
        offset: {
            type: [String, Number],
            default: null,
        },
        ...colProps,
        ...orderProps,
        ...offsetProps,
    },
    setup(props, { slots }) {
        const classes = computed(() => ({
            'v-col': true,
            [`v-col-${props.cols}`]: !!props.cols,
            ...breakpoints.reduce((cols, p) => {
                cols[`${p}-${props[p]}`] = !!props[p];
                return cols;
            }, {}),
            [`order-${props.order}`]: props.order !== null,
            ...breakpoints.reduce((orders, p) => {
                const propValue = props[toCamelCase('order', p)];
                orders[`order-${p}-${propValue}`] = !!propValue;
                return orders;
            }, {}),
            [`offset-${props.offset}`]: props.offset !== null,
            ...breakpoints.reduce((offsets, p) => {
                const propValue = props[toCamelCase('offset', p)];
                offsets[`offset-${p}-${propValue}`] = !!propValue;
                return offsets;
            }, {}),
        }));
        return () => h('div', {
            class: classes.value,
        }, {
            default: () => slots.default && slots.default(),
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkNvbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZHcmlkL1ZDb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFTLE1BQU0sS0FBSyxDQUFBO0FBQ3pELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFFM0MsTUFBTSxXQUFXLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQTtBQUU1QyxNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQy9DLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRztRQUNULElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7UUFDdEIsT0FBTyxFQUFFLElBQUk7S0FDZCxDQUFBO0lBRUQsT0FBTyxLQUFLLENBQUE7QUFDZCxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7QUFFTixNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ2pELEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEdBQUc7UUFDcEIsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztRQUN0QixPQUFPLEVBQUUsSUFBSTtLQUNkLENBQUE7SUFFRCxPQUFPLEtBQUssQ0FBQTtBQUNkLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtBQUVOLE1BQU0sV0FBVyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDbEQsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsR0FBRztRQUNyQixJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO1FBQ3RCLE9BQU8sRUFBRSxJQUFJO0tBQ2QsQ0FBQTtJQUVELE9BQU8sS0FBSyxDQUFBO0FBQ2QsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBRU4sTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLGVBQWUsQ0FBQztJQUNsQyxJQUFJLEVBQUUsT0FBTztJQUNiLEtBQUssRUFBRTtRQUNMLEtBQUssRUFBRTtZQUNMLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7WUFDdEIsT0FBTyxFQUFFLElBQUk7U0FDZDtRQUNELElBQUksRUFBRTtZQUNKLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7WUFDdEIsT0FBTyxFQUFFLElBQUk7U0FDZDtRQUNELE1BQU0sRUFBRTtZQUNOLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7WUFDdEIsT0FBTyxFQUFFLElBQUk7U0FDZDtRQUNELEdBQUcsUUFBUTtRQUNYLEdBQUcsVUFBVTtRQUNiLEdBQUcsV0FBVztLQUNmO0lBQ0QsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRTtRQUNwQixNQUFNLE9BQU8sR0FBRyxRQUFRLENBQTBCLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDdkQsT0FBTyxFQUFFLElBQUk7WUFDYixDQUFDLFNBQVMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJO1lBQ3JDLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDaEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDckMsT0FBTyxJQUFJLENBQUE7WUFDYixDQUFDLEVBQUUsRUFBRSxDQUFDO1lBRU4sQ0FBQyxTQUFTLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLEtBQUssSUFBSTtZQUU5QyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2xDLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7Z0JBQ2hELE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxTQUFTLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUE7Z0JBQy9DLE9BQU8sTUFBTSxDQUFBO1lBQ2YsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUNOLENBQUMsVUFBVSxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsTUFBTSxLQUFLLElBQUk7WUFDakQsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNuQyxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUNqRCxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksU0FBUyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFBO2dCQUNqRCxPQUFPLE9BQU8sQ0FBQTtZQUNoQixDQUFDLEVBQUUsRUFBRSxDQUFDO1NBQ1AsQ0FBQyxDQUFDLENBQUE7UUFFSCxPQUFPLEdBQUcsRUFBRSxDQUNWLENBQUMsQ0FDQyxLQUFLLEVBQ0w7WUFDRSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7U0FDckIsRUFDRDtZQUNFLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7U0FDaEQsQ0FDRixDQUFBO0lBQ0wsQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgY29tcHV0ZWQsIGgsIFZOb2RlIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgdG9DYW1lbENhc2UgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG5jb25zdCBicmVha3BvaW50cyA9IFsnc20nLCAnbWQnLCAnbGcnLCAneGwnXVxuXG5jb25zdCBjb2xQcm9wcyA9IGJyZWFrcG9pbnRzLnJlZHVjZSgocHJvcHMsIHApID0+IHtcbiAgcHJvcHNbcF0gPSB7XG4gICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICBkZWZhdWx0OiBudWxsLFxuICB9XG5cbiAgcmV0dXJuIHByb3BzXG59LCB7fSlcblxuY29uc3Qgb3JkZXJQcm9wcyA9IGJyZWFrcG9pbnRzLnJlZHVjZSgocHJvcHMsIHApID0+IHtcbiAgcHJvcHNbYG9yZGVyLSR7cH1gXSA9IHtcbiAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgIGRlZmF1bHQ6IG51bGwsXG4gIH1cblxuICByZXR1cm4gcHJvcHNcbn0sIHt9KVxuXG5jb25zdCBvZmZzZXRQcm9wcyA9IGJyZWFrcG9pbnRzLnJlZHVjZSgocHJvcHMsIHApID0+IHtcbiAgcHJvcHNbYG9mZnNldC0ke3B9YF0gPSB7XG4gICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICBkZWZhdWx0OiBudWxsLFxuICB9XG5cbiAgcmV0dXJuIHByb3BzXG59LCB7fSlcblxuZXhwb3J0IGNvbnN0IFZDb2wgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1jb2wnLFxuICBwcm9wczoge1xuICAgIG9yZGVyOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICB9LFxuICAgIGNvbHM6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gICAgb2Zmc2V0OiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICB9LFxuICAgIC4uLmNvbFByb3BzLFxuICAgIC4uLm9yZGVyUHJvcHMsXG4gICAgLi4ub2Zmc2V0UHJvcHMsXG4gIH0sXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtY29sJzogdHJ1ZSxcbiAgICAgIFtgdi1jb2wtJHtwcm9wcy5jb2xzfWBdOiAhIXByb3BzLmNvbHMsXG4gICAgICAuLi5icmVha3BvaW50cy5yZWR1Y2UoKGNvbHMsIHApID0+IHtcbiAgICAgICAgY29sc1tgJHtwfS0ke3Byb3BzW3BdfWBdID0gISFwcm9wc1twXVxuICAgICAgICByZXR1cm4gY29sc1xuICAgICAgfSwge30pLFxuXG4gICAgICBbYG9yZGVyLSR7cHJvcHMub3JkZXJ9YF06IHByb3BzLm9yZGVyICE9PSBudWxsLFxuXG4gICAgICAuLi5icmVha3BvaW50cy5yZWR1Y2UoKG9yZGVycywgcCkgPT4ge1xuICAgICAgICBjb25zdCBwcm9wVmFsdWUgPSBwcm9wc1t0b0NhbWVsQ2FzZSgnb3JkZXInLCBwKV1cbiAgICAgICAgb3JkZXJzW2BvcmRlci0ke3B9LSR7cHJvcFZhbHVlfWBdID0gISFwcm9wVmFsdWVcbiAgICAgICAgcmV0dXJuIG9yZGVyc1xuICAgICAgfSwge30pLFxuICAgICAgW2BvZmZzZXQtJHtwcm9wcy5vZmZzZXR9YF06IHByb3BzLm9mZnNldCAhPT0gbnVsbCxcbiAgICAgIC4uLmJyZWFrcG9pbnRzLnJlZHVjZSgob2Zmc2V0cywgcCkgPT4ge1xuICAgICAgICBjb25zdCBwcm9wVmFsdWUgPSBwcm9wc1t0b0NhbWVsQ2FzZSgnb2Zmc2V0JywgcCldXG4gICAgICAgIG9mZnNldHNbYG9mZnNldC0ke3B9LSR7cHJvcFZhbHVlfWBdID0gISFwcm9wVmFsdWVcbiAgICAgICAgcmV0dXJuIG9mZnNldHNcbiAgICAgIH0sIHt9KSxcbiAgICB9KSlcblxuICAgIHJldHVybiAoKSA9PlxuICAgICAgaChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IHNsb3RzLmRlZmF1bHQgJiYgc2xvdHMuZGVmYXVsdCgpLFxuICAgICAgICB9XG4gICAgICApXG4gIH0sXG59KVxuIl19