import { ref, unref } from 'vue';
import lightTheme from './styles/scss/modules/_theme.module.scss';
export class Vueland {
    theme;
    icons;
    constructor() {
        this.icons = null;
        this.theme = ref(lightTheme);
    }
    install(app, args = {}) {
        if (this.install.installed)
            return;
        this.install.installed = true;
        const { components, directives } = args;
        for (const key in components) {
            if (components[key]) {
                app.component(key, components[key]);
            }
        }
        for (const key in directives) {
            if (directives[key]) {
                app.directive(key, directives[key]);
            }
        }
        app.provide('$v', this);
        app.provide('$v_theme', this.theme);
        app.provide('$v_icons', this.icons);
    }
    setTheme(theme) {
        if (typeof document === 'undefined') {
            return;
        }
        const root = document.documentElement;
        this.theme.value = Object.assign(unref(this.theme) || {}, theme);
        Object.keys(unref(this.theme)).forEach(key => {
            root.style.setProperty(`--${key}`, unref(this.theme)[key]);
        });
    }
    setIcons(icons) {
        this.icons = icons;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlicmFyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL3Z1ZWxhbmQvc3JjL2xpYnJhcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFPLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxLQUFLLENBQUE7QUFLckMsT0FBTyxVQUFVLE1BQU0sMENBQTBDLENBQUE7QUFFakUsTUFBTSxPQUFPLE9BQU87SUFDbEIsS0FBSyxDQUFrQztJQUN2QyxLQUFLLENBQTZCO0lBRWxDO1FBQ0UsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUE7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDOUIsQ0FBQztJQUVELE9BQU8sQ0FBQyxHQUFRLEVBQUUsT0FBWSxFQUFFO1FBQzlCLElBQUssSUFBSSxDQUFDLE9BQWUsQ0FBQyxTQUFTO1lBQUUsT0FBTTtRQUUxQyxJQUFJLENBQUMsT0FBZSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUE7UUFFdEMsTUFBTSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsR0FBRyxJQUFJLENBQUE7UUFFdkMsS0FBSyxNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUU7WUFDNUIsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ25CLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO2FBQ3BDO1NBQ0Y7UUFFRCxLQUFLLE1BQU0sR0FBRyxJQUFJLFVBQVUsRUFBRTtZQUM1QixJQUFJLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDbkIsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7YUFDcEM7U0FDRjtRQUVELEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQ3ZCLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUNuQyxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDckMsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUEyQjtRQUNsQyxJQUFJLE9BQU8sUUFBUSxLQUFLLFdBQVcsRUFBRTtZQUNuQyxPQUFNO1NBQ1A7UUFFRCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFBO1FBRXJDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFFaEUsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzVDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQU0sR0FBSSxFQUFFLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO1FBQy9ELENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUEyQjtRQUNsQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtJQUNwQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUeXBlc1xuaW1wb3J0IHsgUmVmLCByZWYsIHVucmVmIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgTGlicmFyeSwgVXNlck9wdGlvbnMgfSBmcm9tICcuLi90eXBlcydcbmltcG9ydCB7IEFwcCB9IGZyb20gJ3Z1ZSdcblxuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IGxpZ2h0VGhlbWUgZnJvbSAnLi9zdHlsZXMvc2Nzcy9tb2R1bGVzL190aGVtZS5tb2R1bGUuc2NzcydcblxuZXhwb3J0IGNsYXNzIFZ1ZWxhbmQgaW1wbGVtZW50cyBMaWJyYXJ5IHtcbiAgdGhlbWU6IFJlZjxNYXliZTxVc2VyT3B0aW9uc1sndGhlbWUnXT4+XG4gIGljb25zOiBNYXliZTxVc2VyT3B0aW9uc1snaWNvbnMnXT5cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmljb25zID0gbnVsbFxuICAgIHRoaXMudGhlbWUgPSByZWYobGlnaHRUaGVtZSlcbiAgfVxuXG4gIGluc3RhbGwoYXBwOiBBcHAsIGFyZ3M6IGFueSA9IHt9KSB7XG4gICAgaWYgKCh0aGlzLmluc3RhbGwgYXMgYW55KS5pbnN0YWxsZWQpIHJldHVyblxuXG4gICAgKHRoaXMuaW5zdGFsbCBhcyBhbnkpLmluc3RhbGxlZCA9IHRydWVcblxuICAgIGNvbnN0IHsgY29tcG9uZW50cywgZGlyZWN0aXZlcyB9ID0gYXJnc1xuXG4gICAgZm9yIChjb25zdCBrZXkgaW4gY29tcG9uZW50cykge1xuICAgICAgaWYgKGNvbXBvbmVudHNba2V5XSkge1xuICAgICAgICBhcHAuY29tcG9uZW50KGtleSwgY29tcG9uZW50c1trZXldKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoY29uc3Qga2V5IGluIGRpcmVjdGl2ZXMpIHtcbiAgICAgIGlmIChkaXJlY3RpdmVzW2tleV0pIHtcbiAgICAgICAgYXBwLmRpcmVjdGl2ZShrZXksIGRpcmVjdGl2ZXNba2V5XSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhcHAucHJvdmlkZSgnJHYnLCB0aGlzKVxuICAgIGFwcC5wcm92aWRlKCckdl90aGVtZScsIHRoaXMudGhlbWUpXG4gICAgYXBwLnByb3ZpZGUoJyR2X2ljb25zJywgdGhpcy5pY29ucylcbiAgfVxuXG4gIHNldFRoZW1lKHRoZW1lOiBVc2VyT3B0aW9uc1sndGhlbWUnXSkge1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCByb290ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XG5cbiAgICB0aGlzLnRoZW1lLnZhbHVlID0gT2JqZWN0LmFzc2lnbih1bnJlZih0aGlzLnRoZW1lKSB8fCB7fSwgdGhlbWUpXG5cbiAgICBPYmplY3Qua2V5cyh1bnJlZih0aGlzLnRoZW1lKSEpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIHJvb3Quc3R5bGUuc2V0UHJvcGVydHkoYC0tJHsga2V5IH1gLCB1bnJlZih0aGlzLnRoZW1lKSFba2V5XSlcbiAgICB9KVxuICB9XG5cbiAgc2V0SWNvbnMoaWNvbnM6IFVzZXJPcHRpb25zWydpY29ucyddKSB7XG4gICAgdGhpcy5pY29ucyA9IGljb25zXG4gIH1cbn1cbiJdfQ==