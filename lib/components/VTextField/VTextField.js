import { defineComponent, h, computed, ref } from 'vue';
import { VInput } from '../VInput';
import { useInputStates } from '../../composable/use-input-states';
import { validationProps } from '../../composable/use-validation';
export default defineComponent({
    name: 'v-text-field',
    components: {
        VInput,
    },
    inheritAttrs: true,
    props: {
        modelValue: {
            type: [String, Number],
            default: '',
        },
        ...validationProps(),
    },
    emits: ['update:modelValue', 'input', 'blur', 'focus', 'change'],
    setup(props, { emit, attrs }) {
        const inputRef = ref(null);
        const { isReadonly, isDisabled, onChange } = useInputStates(props, { emit, attrs });
        const classes = computed(() => ({
            'v-text-field': true,
            'v-text-field--disabled': isDisabled.value,
            'v-text-field--readonly': isReadonly.value,
        }));
        const computedValue = computed({
            get: () => props.modelValue,
            set: (val) => {
                emit('input', val);
                emit('update:modelValue', val);
            },
        });
        const onFocus = () => {
            inputRef.value.onFocus();
        };
        const onBlur = () => {
            inputRef.value.onBlur();
        };
        const onInput = (e) => {
            computedValue.value = e.target.value;
        };
        const genInputField = (textClassColor, textCssColor) => {
            return h('input', {
                class: {
                    'v-text-field__input': true,
                    ...(!attrs.disabled && textClassColor),
                },
                style: {
                    ...(!attrs.disabled ? textCssColor : {}),
                },
                disabled: attrs.disabled,
                type: attrs.type ? attrs.type : 'text',
                placeholder: attrs.placeholder,
                readonly: attrs.readonly,
                value: computedValue.value,
                onInput,
                onFocus,
                onBlur,
                onChange,
            });
        };
        const genTextFieldWrapper = (clsColor, cssColor) => {
            return h('div', {
                class: classes.value,
            }, genInputField(clsColor, cssColor));
        };
        return () => h(VInput, {
            value: computedValue.value,
            rules: props.rules,
            ref: inputRef
        }, {
            ['text-field']: ({ textClassColor, textCssColor }) => {
                return genTextFieldWrapper(textClassColor, textCssColor);
            },
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVlRleHRGaWVsZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZUZXh0RmllbGQvVlRleHRGaWVsZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLE1BQU0sS0FBSyxDQUFBO0FBRXZELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFFbEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1DQUFtQyxDQUFBO0FBQ2xFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQTtBQUVqRSxlQUFlLGVBQWUsQ0FBQztJQUM3QixJQUFJLEVBQUUsY0FBYztJQUNwQixVQUFVLEVBQUU7UUFDVixNQUFNO0tBQ1A7SUFDRCxZQUFZLEVBQUUsSUFBSTtJQUNsQixLQUFLLEVBQUU7UUFDTCxVQUFVLEVBQUU7WUFDVixJQUFJLEVBQUUsQ0FBRSxNQUFNLEVBQUUsTUFBTSxDQUFFO1lBQ3hCLE9BQU8sRUFBRSxFQUFFO1NBQ1o7UUFDRCxHQUFHLGVBQWUsRUFBRTtLQUNyQjtJQUNELEtBQUssRUFBRSxDQUFFLG1CQUFtQixFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBRTtJQUVsRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRTtRQUMxQixNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDMUIsTUFBTSxFQUNKLFVBQVUsRUFDVixVQUFVLEVBQ1YsUUFBUSxFQUNULEdBQUcsY0FBYyxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO1FBRTFDLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBMEIsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUN2RCxjQUFjLEVBQUUsSUFBSTtZQUNwQix3QkFBd0IsRUFBRSxVQUFVLENBQUMsS0FBSztZQUMxQyx3QkFBd0IsRUFBRSxVQUFVLENBQUMsS0FBSztTQUMzQyxDQUFDLENBQUMsQ0FBQTtRQUVILE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQztZQUM3QixHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVU7WUFFM0IsR0FBRyxFQUFFLENBQUMsR0FBVyxFQUFFLEVBQUU7Z0JBQ25CLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUE7Z0JBQ2xCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLENBQUMsQ0FBQTtZQUNoQyxDQUFDO1NBQ0YsQ0FBQyxDQUFBO1FBRUYsTUFBTSxPQUFPLEdBQUcsR0FBRyxFQUFFO1lBQ2xCLFFBQVEsQ0FBQyxLQUFjLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDcEMsQ0FBQyxDQUFBO1FBRUQsTUFBTSxNQUFNLEdBQUcsR0FBRyxFQUFFO1lBQ2pCLFFBQVEsQ0FBQyxLQUFjLENBQUMsTUFBTSxFQUFFLENBQUE7UUFDbkMsQ0FBQyxDQUFBO1FBRUQsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUNwQixhQUFhLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFBO1FBQ3RDLENBQUMsQ0FBQTtRQUVELE1BQU0sYUFBYSxHQUFHLENBQUMsY0FBYyxFQUFFLFlBQVksRUFBRSxFQUFFO1lBQ3JELE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRTtnQkFDaEIsS0FBSyxFQUFFO29CQUNMLHFCQUFxQixFQUFFLElBQUk7b0JBQzNCLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLElBQUksY0FBYyxDQUFDO2lCQUN2QztnQkFDRCxLQUFLLEVBQUU7b0JBQ0wsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7aUJBQ3pDO2dCQUNELFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtnQkFDeEIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU07Z0JBQ3RDLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztnQkFDOUIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO2dCQUN4QixLQUFLLEVBQUUsYUFBYSxDQUFDLEtBQUs7Z0JBQzFCLE9BQU87Z0JBQ1AsT0FBTztnQkFDUCxNQUFNO2dCQUNOLFFBQVE7YUFDVCxDQUFDLENBQUE7UUFDSixDQUFDLENBQUE7UUFFRCxNQUFNLG1CQUFtQixHQUFHLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxFQUFFO1lBQ2pELE9BQU8sQ0FBQyxDQUNOLEtBQUssRUFDTDtnQkFDRSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7YUFDckIsRUFDRCxhQUFhLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUNsQyxDQUFBO1FBQ0gsQ0FBQyxDQUFBO1FBRUQsT0FBTyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFO1lBQ3JCLEtBQUssRUFBRSxhQUFhLENBQUMsS0FBSztZQUMxQixLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDbEIsR0FBRyxFQUFFLFFBQVE7U0FDZCxFQUFFO1lBQ0QsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLEVBQUUsY0FBYyxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUU7Z0JBQ25ELE9BQU8sbUJBQW1CLENBQUMsY0FBYyxFQUFFLFlBQVksQ0FBQyxDQUFBO1lBQzFELENBQUM7U0FDRixDQUFDLENBQUE7SUFDSixDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVnVlIEFQSVxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoLCBjb21wdXRlZCwgcmVmIH0gZnJvbSAndnVlJ1xuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVklucHV0IH0gZnJvbSAnLi4vVklucHV0J1xuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZUlucHV0U3RhdGVzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtaW5wdXQtc3RhdGVzJ1xuaW1wb3J0IHsgdmFsaWRhdGlvblByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtdmFsaWRhdGlvbidcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtdGV4dC1maWVsZCcsXG4gIGNvbXBvbmVudHM6IHtcbiAgICBWSW5wdXQsXG4gIH0sXG4gIGluaGVyaXRBdHRyczogdHJ1ZSxcbiAgcHJvcHM6IHtcbiAgICBtb2RlbFZhbHVlOiB7XG4gICAgICB0eXBlOiBbIFN0cmluZywgTnVtYmVyIF0sXG4gICAgICBkZWZhdWx0OiAnJyxcbiAgICB9LFxuICAgIC4uLnZhbGlkYXRpb25Qcm9wcygpLFxuICB9LFxuICBlbWl0czogWyAndXBkYXRlOm1vZGVsVmFsdWUnLCAnaW5wdXQnLCAnYmx1cicsICdmb2N1cycsICdjaGFuZ2UnIF0sXG5cbiAgc2V0dXAocHJvcHMsIHsgZW1pdCwgYXR0cnMgfSkge1xuICAgIGNvbnN0IGlucHV0UmVmID0gcmVmKG51bGwpXG4gICAgY29uc3Qge1xuICAgICAgaXNSZWFkb25seSxcbiAgICAgIGlzRGlzYWJsZWQsXG4gICAgICBvbkNoYW5nZVxuICAgIH0gPSB1c2VJbnB1dFN0YXRlcyhwcm9wcywgeyBlbWl0LCBhdHRycyB9KVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtdGV4dC1maWVsZCc6IHRydWUsXG4gICAgICAndi10ZXh0LWZpZWxkLS1kaXNhYmxlZCc6IGlzRGlzYWJsZWQudmFsdWUsXG4gICAgICAndi10ZXh0LWZpZWxkLS1yZWFkb25seSc6IGlzUmVhZG9ubHkudmFsdWUsXG4gICAgfSkpXG5cbiAgICBjb25zdCBjb21wdXRlZFZhbHVlID0gY29tcHV0ZWQoe1xuICAgICAgZ2V0OiAoKSA9PiBwcm9wcy5tb2RlbFZhbHVlLFxuXG4gICAgICBzZXQ6ICh2YWw6IHN0cmluZykgPT4ge1xuICAgICAgICBlbWl0KCdpbnB1dCcsIHZhbClcbiAgICAgICAgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCB2YWwpXG4gICAgICB9LFxuICAgIH0pXG5cbiAgICBjb25zdCBvbkZvY3VzID0gKCkgPT4ge1xuICAgICAgKGlucHV0UmVmLnZhbHVlIGFzIGFueSkhLm9uRm9jdXMoKVxuICAgIH1cblxuICAgIGNvbnN0IG9uQmx1ciA9ICgpID0+IHtcbiAgICAgIChpbnB1dFJlZi52YWx1ZSBhcyBhbnkpIS5vbkJsdXIoKVxuICAgIH1cblxuICAgIGNvbnN0IG9uSW5wdXQgPSAoZSkgPT4ge1xuICAgICAgY29tcHV0ZWRWYWx1ZS52YWx1ZSA9IGUudGFyZ2V0LnZhbHVlXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuSW5wdXRGaWVsZCA9ICh0ZXh0Q2xhc3NDb2xvciwgdGV4dENzc0NvbG9yKSA9PiB7XG4gICAgICByZXR1cm4gaCgnaW5wdXQnLCB7XG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgJ3YtdGV4dC1maWVsZF9faW5wdXQnOiB0cnVlLFxuICAgICAgICAgIC4uLighYXR0cnMuZGlzYWJsZWQgJiYgdGV4dENsYXNzQ29sb3IpLFxuICAgICAgICB9LFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIC4uLighYXR0cnMuZGlzYWJsZWQgPyB0ZXh0Q3NzQ29sb3IgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICAgIGRpc2FibGVkOiBhdHRycy5kaXNhYmxlZCxcbiAgICAgICAgdHlwZTogYXR0cnMudHlwZSA/IGF0dHJzLnR5cGUgOiAndGV4dCcsXG4gICAgICAgIHBsYWNlaG9sZGVyOiBhdHRycy5wbGFjZWhvbGRlcixcbiAgICAgICAgcmVhZG9ubHk6IGF0dHJzLnJlYWRvbmx5LFxuICAgICAgICB2YWx1ZTogY29tcHV0ZWRWYWx1ZS52YWx1ZSxcbiAgICAgICAgb25JbnB1dCxcbiAgICAgICAgb25Gb2N1cyxcbiAgICAgICAgb25CbHVyLFxuICAgICAgICBvbkNoYW5nZSxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuVGV4dEZpZWxkV3JhcHBlciA9IChjbHNDb2xvciwgY3NzQ29sb3IpID0+IHtcbiAgICAgIHJldHVybiBoKFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgICB9LFxuICAgICAgICBnZW5JbnB1dEZpZWxkKGNsc0NvbG9yLCBjc3NDb2xvcilcbiAgICAgIClcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4gaChWSW5wdXQsIHtcbiAgICAgIHZhbHVlOiBjb21wdXRlZFZhbHVlLnZhbHVlLFxuICAgICAgcnVsZXM6IHByb3BzLnJ1bGVzLFxuICAgICAgcmVmOiBpbnB1dFJlZlxuICAgIH0sIHtcbiAgICAgIFsndGV4dC1maWVsZCddOiAoeyB0ZXh0Q2xhc3NDb2xvciwgdGV4dENzc0NvbG9yIH0pID0+IHtcbiAgICAgICAgcmV0dXJuIGdlblRleHRGaWVsZFdyYXBwZXIodGV4dENsYXNzQ29sb3IsIHRleHRDc3NDb2xvcilcbiAgICAgIH0sXG4gICAgfSlcbiAgfSxcbn0pXG4iXX0=