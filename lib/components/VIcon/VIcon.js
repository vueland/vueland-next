import { defineComponent, h, computed } from 'vue';
import { useColors, colorProps } from '../../composables/use-colors';
import { sizeProps, useSize } from '../../composables/use-size';
import { convertToUnit } from '../../helpers';
import { useIcons } from '@/composables/use-icons';
export default defineComponent({
    name: 'v-icon',
    props: {
        disabled: Boolean,
        clickable: Boolean,
        size: [String, Number],
        icon: String,
        tag: {
            type: String,
            default: 'i',
        },
        ...colorProps(),
        ...sizeProps('sm'),
    },
    emits: ['click'],
    setup(props, { slots, emit }) {
        const { setTextCssColor, setTextClassNameColor } = useColors();
        const { isMaterial } = useIcons();
        const { size } = useSize(props);
        const iconTag = props.clickable ? 'button' : props.tag;
        const classes = computed(() => ({
            'v-icon': true,
            'v-icon--disabled': props.disabled,
            'v-icon--clickable': props.clickable,
            'material-icons': isMaterial,
            [props.icon]: !!props.icon && !isMaterial,
            [size.value]: !props.size,
            ...(props.color ? setTextClassNameColor(props.color) : {}),
        }));
        const styles = computed(() => ({
            fontSize: props.size && convertToUnit(props.size),
            ...(props.color ? setTextCssColor(props.color) : {}),
        }));
        const onClick = () => {
            if (!props.disabled && props.clickable)
                emit('click');
        };
        return () => h(iconTag, {
            class: classes.value,
            style: styles.value,
            onClick,
        }, {
            default: () => isMaterial ? slots.default?.() : null,
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkljb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WSWNvbi9WSWNvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxLQUFLLENBQUE7QUFHbEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQTtBQUNwRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxNQUFNLDRCQUE0QixDQUFBO0FBRy9ELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFNN0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBRWxELGVBQWUsZUFBZSxDQUFDO0lBQzdCLElBQUksRUFBRSxRQUFRO0lBRWQsS0FBSyxFQUFFO1FBQ0wsUUFBUSxFQUFFLE9BQU87UUFDakIsU0FBUyxFQUFFLE9BQU87UUFDbEIsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztRQUN0QixJQUFJLEVBQUUsTUFBTTtRQUNaLEdBQUcsRUFBRTtZQUNILElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLEdBQUc7U0FDYjtRQUNELEdBQUcsVUFBVSxFQUFFO1FBQ2YsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDO0tBQ1o7SUFFUixLQUFLLEVBQUUsQ0FBQyxPQUFPLENBQUM7SUFFaEIsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7UUFDMUIsTUFBTSxFQUFFLGVBQWUsRUFBRSxxQkFBcUIsRUFBRSxHQUFHLFNBQVMsRUFBRSxDQUFBO1FBQzlELE1BQU0sRUFBRSxVQUFVLEVBQUUsR0FBRyxRQUFRLEVBQUUsQ0FBQTtRQUNqQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQy9CLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQTtRQUV0RCxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQTBCLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDdkQsUUFBUSxFQUFFLElBQUk7WUFDZCxrQkFBa0IsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUNsQyxtQkFBbUIsRUFBRSxLQUFLLENBQUMsU0FBUztZQUNwQyxnQkFBZ0IsRUFBRSxVQUFVO1lBQzVCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVTtZQUN6QyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJO1lBQ3pCLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUMzRCxDQUFDLENBQUMsQ0FBQTtRQUVILE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBeUIsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUNyRCxRQUFRLEVBQUUsS0FBSyxDQUFDLElBQUksSUFBSSxhQUFhLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztZQUNqRCxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1NBQ3JELENBQUMsQ0FBQyxDQUFBO1FBRUgsTUFBTSxPQUFPLEdBQUcsR0FBRyxFQUFFO1lBQ25CLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQyxTQUFTO2dCQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUN2RCxDQUFDLENBQUE7UUFFRCxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUU7WUFDdEIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO1lBQ3BCLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSztZQUNuQixPQUFPO1NBQ1IsRUFBRTtZQUNELE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJO1NBQ3JELENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBWdWUgQVBJXG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGgsIGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuXG4vLyBDb21wb3NhYmxlXG5pbXBvcnQgeyB1c2VDb2xvcnMsIGNvbG9yUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy91c2UtY29sb3JzJ1xuaW1wb3J0IHsgc2l6ZVByb3BzLCB1c2VTaXplIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvdXNlLXNpemUnXG5cbi8vIEhlbHBlcnNcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tICd2dWUnXG5cbi8vIFNlcnZpY2VzXG5pbXBvcnQgeyB1c2VJY29ucyB9IGZyb20gJ0AvY29tcG9zYWJsZXMvdXNlLWljb25zJ1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1pY29uJyxcblxuICBwcm9wczoge1xuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIGNsaWNrYWJsZTogQm9vbGVhbixcbiAgICBzaXplOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgIGljb246IFN0cmluZyxcbiAgICB0YWc6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdpJyxcbiAgICB9LFxuICAgIC4uLmNvbG9yUHJvcHMoKSxcbiAgICAuLi5zaXplUHJvcHMoJ3NtJyksXG4gIH0gYXMgYW55LFxuXG4gIGVtaXRzOiBbJ2NsaWNrJ10sXG5cbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMsIGVtaXQgfSk6ICgpID0+IFZOb2RlIHtcbiAgICBjb25zdCB7IHNldFRleHRDc3NDb2xvciwgc2V0VGV4dENsYXNzTmFtZUNvbG9yIH0gPSB1c2VDb2xvcnMoKVxuICAgIGNvbnN0IHsgaXNNYXRlcmlhbCB9ID0gdXNlSWNvbnMoKVxuICAgIGNvbnN0IHsgc2l6ZSB9ID0gdXNlU2l6ZShwcm9wcylcbiAgICBjb25zdCBpY29uVGFnID0gcHJvcHMuY2xpY2thYmxlID8gJ2J1dHRvbicgOiBwcm9wcy50YWdcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LWljb24nOiB0cnVlLFxuICAgICAgJ3YtaWNvbi0tZGlzYWJsZWQnOiBwcm9wcy5kaXNhYmxlZCxcbiAgICAgICd2LWljb24tLWNsaWNrYWJsZSc6IHByb3BzLmNsaWNrYWJsZSxcbiAgICAgICdtYXRlcmlhbC1pY29ucyc6IGlzTWF0ZXJpYWwsXG4gICAgICBbcHJvcHMuaWNvbl06ICEhcHJvcHMuaWNvbiAmJiAhaXNNYXRlcmlhbCxcbiAgICAgIFtzaXplLnZhbHVlXTogIXByb3BzLnNpemUsXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgc3RyaW5nPj4oKCkgPT4gKHtcbiAgICAgIGZvbnRTaXplOiBwcm9wcy5zaXplICYmIGNvbnZlcnRUb1VuaXQocHJvcHMuc2l6ZSksXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRUZXh0Q3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3Qgb25DbGljayA9ICgpID0+IHtcbiAgICAgIGlmICghcHJvcHMuZGlzYWJsZWQgJiYgcHJvcHMuY2xpY2thYmxlKSBlbWl0KCdjbGljaycpXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IGgoaWNvblRhZywge1xuICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICBzdHlsZTogc3R5bGVzLnZhbHVlLFxuICAgICAgb25DbGljayxcbiAgICB9LCB7XG4gICAgICBkZWZhdWx0OiAoKSA9PiBpc01hdGVyaWFsID8gc2xvdHMuZGVmYXVsdD8uKCkgOiBudWxsLFxuICAgIH0pXG4gIH0sXG59KVxuIl19