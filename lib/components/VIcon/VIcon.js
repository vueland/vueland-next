import { defineComponent, h, computed } from 'vue';
import { useColors, colorProps } from '../../composables/use-colors';
import { sizeProps, useSize } from '../../composables/use-size';
import { convertToUnit } from '../../helpers';
import { useIcons } from '../../composables/use-icons';
export default defineComponent({
    name: 'v-icon',
    props: {
        disabled: Boolean,
        clickable: Boolean,
        size: [String, Number],
        icon: String,
        tag: {
            type: String,
            default: 'i',
        },
        ...colorProps(),
        ...sizeProps('sm'),
    },
    emits: ['click'],
    setup(props, { slots, emit }) {
        const { setTextCssColor, setTextClassNameColor } = useColors();
        const { isMaterial, iconsBaseClass } = useIcons();
        const { size } = useSize(props);
        const iconTag = props.clickable ? 'button' : props.tag;
        const computedIcon = computed(() => {
            return props.icon || slots.default?.()[0].children;
        });
        const classes = computed(() => ({
            'v-icon': true,
            'v-icon--disabled': props.disabled,
            'v-icon--clickable': props.clickable,
            [iconsBaseClass]: isMaterial,
            [computedIcon.value]: !isMaterial,
            [size.value]: !props.size,
            ...(props.color ? setTextClassNameColor(props.color) : {}),
        }));
        const styles = computed(() => ({
            fontSize: props.size && convertToUnit(props.size),
            ...(props.color ? setTextCssColor(props.color) : {}),
        }));
        const onClick = () => {
            if (!props.disabled && props.clickable)
                emit('click');
        };
        return () => h(iconTag, {
            class: classes.value,
            style: styles.value,
            onClick,
        }, {
            default: () => isMaterial ? computedIcon.value : null,
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkljb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WSWNvbi9WSWNvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxLQUFLLENBQUE7QUFHbEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQTtBQUNwRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxNQUFNLDRCQUE0QixDQUFBO0FBRy9ELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFNN0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDZCQUE2QixDQUFBO0FBRXRELGVBQWUsZUFBZSxDQUFDO0lBQzdCLElBQUksRUFBRSxRQUFRO0lBRWQsS0FBSyxFQUFFO1FBQ0wsUUFBUSxFQUFFLE9BQU87UUFDakIsU0FBUyxFQUFFLE9BQU87UUFDbEIsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztRQUN0QixJQUFJLEVBQUUsTUFBTTtRQUNaLEdBQUcsRUFBRTtZQUNILElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLEdBQUc7U0FDYjtRQUNELEdBQUcsVUFBVSxFQUFFO1FBQ2YsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDO0tBQ1o7SUFFUixLQUFLLEVBQUUsQ0FBQyxPQUFPLENBQUM7SUFFaEIsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7UUFDMUIsTUFBTSxFQUFFLGVBQWUsRUFBRSxxQkFBcUIsRUFBRSxHQUFHLFNBQVMsRUFBRSxDQUFBO1FBQzlELE1BQU0sRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLEdBQUcsUUFBUSxFQUFFLENBQUE7UUFDakQsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUMvQixNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUE7UUFFdEQsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFTLEdBQUcsRUFBRTtZQUN6QyxPQUFPLEtBQUssQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFBO1FBQ3BELENBQUMsQ0FBQyxDQUFBO1FBRUYsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUEwQixHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZELFFBQVEsRUFBRSxJQUFJO1lBQ2Qsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDbEMsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDcEMsQ0FBQyxjQUFjLENBQUMsRUFBRSxVQUFVO1lBQzVCLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsVUFBVTtZQUNqQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJO1lBQ3pCLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUMzRCxDQUFDLENBQUMsQ0FBQTtRQUVILE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBeUIsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUNyRCxRQUFRLEVBQUUsS0FBSyxDQUFDLElBQUksSUFBSSxhQUFhLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztZQUNqRCxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1NBQ3JELENBQUMsQ0FBQyxDQUFBO1FBRUgsTUFBTSxPQUFPLEdBQUcsR0FBRyxFQUFFO1lBQ25CLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQyxTQUFTO2dCQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUN2RCxDQUFDLENBQUE7UUFFRCxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUU7WUFDdEIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO1lBQ3BCLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSztZQUNuQixPQUFPO1NBQ1IsRUFBRTtZQUNELE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUk7U0FDdEQsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaCwgY29tcHV0ZWQgfSBmcm9tICd2dWUnXG5cbi8vIENvbXBvc2FibGVcbmltcG9ydCB7IHVzZUNvbG9ycywgY29sb3JQcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3VzZS1jb2xvcnMnXG5pbXBvcnQgeyBzaXplUHJvcHMsIHVzZVNpemUgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy91c2Utc2l6ZSdcblxuLy8gSGVscGVyc1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gJ3Z1ZSdcblxuLy8gU2VydmljZXNcbmltcG9ydCB7IHVzZUljb25zIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvdXNlLWljb25zJ1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1pY29uJyxcblxuICBwcm9wczoge1xuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIGNsaWNrYWJsZTogQm9vbGVhbixcbiAgICBzaXplOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgIGljb246IFN0cmluZyxcbiAgICB0YWc6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdpJyxcbiAgICB9LFxuICAgIC4uLmNvbG9yUHJvcHMoKSxcbiAgICAuLi5zaXplUHJvcHMoJ3NtJyksXG4gIH0gYXMgYW55LFxuXG4gIGVtaXRzOiBbJ2NsaWNrJ10sXG5cbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMsIGVtaXQgfSk6ICgpID0+IFZOb2RlIHtcbiAgICBjb25zdCB7IHNldFRleHRDc3NDb2xvciwgc2V0VGV4dENsYXNzTmFtZUNvbG9yIH0gPSB1c2VDb2xvcnMoKVxuICAgIGNvbnN0IHsgaXNNYXRlcmlhbCwgaWNvbnNCYXNlQ2xhc3MgfSA9IHVzZUljb25zKClcbiAgICBjb25zdCB7IHNpemUgfSA9IHVzZVNpemUocHJvcHMpXG4gICAgY29uc3QgaWNvblRhZyA9IHByb3BzLmNsaWNrYWJsZSA/ICdidXR0b24nIDogcHJvcHMudGFnXG5cbiAgICBjb25zdCBjb21wdXRlZEljb24gPSBjb21wdXRlZDxzdHJpbmc+KCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5pY29uIHx8IHNsb3RzLmRlZmF1bHQ/LigpWzBdLmNoaWxkcmVuXG4gICAgfSlcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LWljb24nOiB0cnVlLFxuICAgICAgJ3YtaWNvbi0tZGlzYWJsZWQnOiBwcm9wcy5kaXNhYmxlZCxcbiAgICAgICd2LWljb24tLWNsaWNrYWJsZSc6IHByb3BzLmNsaWNrYWJsZSxcbiAgICAgIFtpY29uc0Jhc2VDbGFzc106IGlzTWF0ZXJpYWwsXG4gICAgICBbY29tcHV0ZWRJY29uLnZhbHVlXTogIWlzTWF0ZXJpYWwsXG4gICAgICBbc2l6ZS52YWx1ZV06ICFwcm9wcy5zaXplLFxuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0VGV4dENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IHN0eWxlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIHN0cmluZz4+KCgpID0+ICh7XG4gICAgICBmb250U2l6ZTogcHJvcHMuc2l6ZSAmJiBjb252ZXJ0VG9Vbml0KHByb3BzLnNpemUpLFxuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0VGV4dENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IG9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICBpZiAoIXByb3BzLmRpc2FibGVkICYmIHByb3BzLmNsaWNrYWJsZSkgZW1pdCgnY2xpY2snKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiBoKGljb25UYWcsIHtcbiAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgc3R5bGU6IHN0eWxlcy52YWx1ZSxcbiAgICAgIG9uQ2xpY2ssXG4gICAgfSwge1xuICAgICAgZGVmYXVsdDogKCkgPT4gaXNNYXRlcmlhbCA/IGNvbXB1dGVkSWNvbi52YWx1ZSA6IG51bGwsXG4gICAgfSlcbiAgfSxcbn0pXG4iXX0=