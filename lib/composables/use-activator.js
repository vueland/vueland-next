import { ref } from 'vue';
export function activatorProps() {
    return {
        activator: {
            type: [Object, String]
        },
        internalActivator: Boolean
    };
}
export const useActivator = (props) => {
    const activatorRef = ref(null);
    const activatorSizes = {};
    const listeners = {};
    const getActivator = (event) => {
        if (activatorRef.value)
            return activatorRef.value?.$el || activatorRef.value;
        const target = props.internalActivator ? props.activator.$el : document;
        if (props.inputActivator) {
            return (activatorRef.value = target.querySelector(props.inputActivator));
        }
        if (props.activator) {
            if (typeof props.activator === 'string') {
                return (activatorRef.value = target.querySelector(props.activator));
            }
            return (activatorRef.value = props.activator);
        }
        if (event) {
            return (activatorRef.value = (event.target || event.currentTarget));
        }
        return null;
    };
    const getActivatorSizes = () => {
        const el = activatorRef.value.$el || activatorRef.value;
        activatorSizes.left = el.offsetLeft;
        activatorSizes.top = el.offsetTop;
        activatorSizes.height = el.offsetHeight;
        activatorSizes.width = el.offsetWidth;
        return activatorSizes;
    };
    const genActivatorListeners = (props, handlers) => {
        if (props.openOnHover) {
            listeners.mouseenter = (e) => handlers.mouseenter(e);
            listeners.mouseleave = (e) => handlers.mouseleave(e);
        }
        if (props.openOnClick) {
            listeners.click = (e) => handlers.click(e);
        }
        if (props.openOnContextmenu) {
            listeners.contextmenu = (e) => handlers.contextmenu(e);
        }
        return listeners;
    };
    const addActivatorEvents = () => {
        const events = Object.keys(listeners);
        if (activatorRef.value) {
            events.forEach((key) => {
                const el = activatorRef.value.$el || activatorRef.value;
                el.addEventListener(key, listeners[key]);
            });
        }
    };
    const removeActivatorEvents = () => {
        const events = Object.keys(listeners);
        if (activatorRef.value) {
            events.forEach((key) => {
                const el = activatorRef.value.$el || activatorRef.value;
                el.removeEventListener(key, listeners[key]);
            });
        }
    };
    return {
        activatorRef,
        getActivator,
        getActivatorSizes,
        addActivatorEvents,
        removeActivatorEvents,
        genActivatorListeners
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWFjdGl2YXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb3NhYmxlcy91c2UtYWN0aXZhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxHQUFHLEVBQTJCLE1BQU0sS0FBSyxDQUFBO0FBSWxELE1BQU0sVUFBVSxjQUFjO0lBQzVCLE9BQU87UUFDTCxTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsQ0FBRSxNQUFNLEVBQUUsTUFBTSxDQUFFO1NBQ3pCO1FBQ0QsaUJBQWlCLEVBQUUsT0FBTztLQUMzQixDQUFBO0FBQ0gsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxDQUFDLEtBQUssRUFBRSxFQUFFO0lBQ3BDLE1BQU0sWUFBWSxHQUFHLEdBQUcsQ0FBb0QsSUFBSSxDQUFDLENBQUE7SUFDakYsTUFBTSxjQUFjLEdBQXdCLEVBQUUsQ0FBQTtJQUM5QyxNQUFNLFNBQVMsR0FBZ0MsRUFBRSxDQUFBO0lBRWpELE1BQU0sWUFBWSxHQUFHLENBQUMsS0FBYSxFQUFzQixFQUFFO1FBQ3pELElBQUksWUFBWSxDQUFDLEtBQUs7WUFBRSxPQUFPLFlBQVksQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLFlBQVksQ0FBQyxLQUFLLENBQUE7UUFFNUUsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFBO1FBRXZFLElBQUksS0FBSyxDQUFDLGNBQWMsRUFBRTtZQUN4QixPQUFPLENBQUMsWUFBWSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFBO1NBQ3pFO1FBRUQsSUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFO1lBQ25CLElBQUksT0FBTyxLQUFLLENBQUMsU0FBUyxLQUFLLFFBQVEsRUFB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QUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7WUFDOUMsQ0FBQyxDQUFDLENBQUE7U0FDSDtJQUNILENBQUMsQ0FBQTtJQUVELE9BQU87UUFDTCxZQUFZO1FBQ1osWUFBWTtRQUNaLGlCQUFpQjtRQUNqQixrQkFBa0I7UUFDbEIscUJBQXFCO1FBQ3JCLHFCQUFxQjtLQUN0QixDQUFBO0FBQ0gsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVmLCBDb21wb25lbnRQdWJsaWNJbnN0YW5jZSB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IEFjdGl2YXRvckxpc3RlbmVycywgRGltZW5zaW9ucyB9IGZyb20gJy4uLy4uL3R5cGVzL2NvbXBvc2FibGVzJ1xuaW1wb3J0IHsgTWF5YmUgfSBmcm9tICcuLi8uLi90eXBlcy9iYXNlJ1xuXG5leHBvcnQgZnVuY3Rpb24gYWN0aXZhdG9yUHJvcHMoKXtcbiAgcmV0dXJuIHtcbiAgICBhY3RpdmF0b3I6IHtcbiAgICAgIHR5cGU6IFsgT2JqZWN0LCBTdHJpbmcgXVxuICAgIH0sXG4gICAgaW50ZXJuYWxBY3RpdmF0b3I6IEJvb2xlYW5cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgdXNlQWN0aXZhdG9yID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IGFjdGl2YXRvclJlZiA9IHJlZjxNYXliZTxIVE1MRWxlbWVudCB8IENvbXBvbmVudFB1YmxpY0luc3RhbmNlPGFueT4+PihudWxsKVxuICBjb25zdCBhY3RpdmF0b3JTaXplczogUGFydGlhbDxEaW1lbnNpb25zPiA9IHt9XG4gIGNvbnN0IGxpc3RlbmVyczogUGFydGlhbDxBY3RpdmF0b3JMaXN0ZW5lcnM+ID0ge31cblxuICBjb25zdCBnZXRBY3RpdmF0b3IgPSAoZXZlbnQ/OiBFdmVudCk6IE1heWJlPEhUTUxFbGVtZW50PiA9PiB7XG4gICAgaWYgKGFjdGl2YXRvclJlZi52YWx1ZSkgcmV0dXJuIGFjdGl2YXRvclJlZi52YWx1ZT8uJGVsIHx8IGFjdGl2YXRvclJlZi52YWx1ZVxuXG4gICAgY29uc3QgdGFyZ2V0ID0gcHJvcHMuaW50ZXJuYWxBY3RpdmF0b3IgPyBwcm9wcy5hY3RpdmF0b3IuJGVsIDogZG9jdW1lbnRcblxuICAgIGlmIChwcm9wcy5pbnB1dEFjdGl2YXRvcikge1xuICAgICAgcmV0dXJuIChhY3RpdmF0b3JSZWYudmFsdWUgPSB0YXJnZXQucXVlcnlTZWxlY3Rvcihwcm9wcy5pbnB1dEFjdGl2YXRvcikpXG4gICAgfVxuXG4gICAgaWYgKHByb3BzLmFjdGl2YXRvcikge1xuICAgICAgaWYgKHR5cGVvZiBwcm9wcy5hY3RpdmF0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiAoYWN0aXZhdG9yUmVmLnZhbHVlID0gdGFyZ2V0LnF1ZXJ5U2VsZWN0b3IocHJvcHMuYWN0aXZhdG9yKSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIChhY3RpdmF0b3JSZWYudmFsdWUgPSBwcm9wcy5hY3RpdmF0b3IpXG4gICAgfVxuXG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICByZXR1cm4gKGFjdGl2YXRvclJlZi52YWx1ZSA9IChldmVudC50YXJnZXQgfHwgZXZlbnQuY3VycmVudFRhcmdldCkgYXMgSFRNTEVsZW1lbnQpXG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGNvbnN0IGdldEFjdGl2YXRvclNpemVzID0gKCkgPT4ge1xuICAgIGNvbnN0IGVsID0gYWN0aXZhdG9yUmVmLnZhbHVlIS4kZWwgfHwgYWN0aXZhdG9yUmVmLnZhbHVlIVxuXG4gICAgYWN0aXZhdG9yU2l6ZXMubGVmdCA9IGVsLm9mZnNldExlZnRcbiAgICBhY3RpdmF0b3JTaXplcy50b3AgPSBlbC5vZmZzZXRUb3BcbiAgICBhY3RpdmF0b3JTaXplcy5oZWlnaHQgPSBlbC5vZmZzZXRIZWlnaHRcbiAgICBhY3RpdmF0b3JTaXplcy53aWR0aCA9IGVsLm9mZnNldFdpZHRoXG5cbiAgICByZXR1cm4gYWN0aXZhdG9yU2l6ZXNcbiAgfVxuXG4gIGNvbnN0IGdlbkFjdGl2YXRvckxpc3RlbmVycyA9IChwcm9wcywgaGFuZGxlcnMpID0+IHtcbiAgICBpZiAocHJvcHMub3Blbk9uSG92ZXIpIHtcbiAgICAgIGxpc3RlbmVycy5tb3VzZWVudGVyID0gKGUpID0+IGhhbmRsZXJzLm1vdXNlZW50ZXIoZSlcbiAgICAgIGxpc3RlbmVycy5tb3VzZWxlYXZlID0gKGUpID0+IGhhbmRsZXJzLm1vdXNlbGVhdmUoZSlcbiAgICB9XG5cbiAgICBpZiAocHJvcHMub3Blbk9uQ2xpY2spIHtcbiAgICAgIGxpc3RlbmVycy5jbGljayA9IChlKSA9PiBoYW5kbGVycy5jbGljayhlKVxuICAgIH1cblxuICAgIGlmIChwcm9wcy5vcGVuT25Db250ZXh0bWVudSkge1xuICAgICAgbGlzdGVuZXJzLmNvbnRleHRtZW51ID0gKGUpID0+IGhhbmRsZXJzLmNvbnRleHRtZW51KGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGxpc3RlbmVyc1xuICB9XG5cbiAgY29uc3QgYWRkQWN0aXZhdG9yRXZlbnRzID0gKCkgPT4ge1xuICAgIGNvbnN0IGV2ZW50cyA9IE9iamVjdC5rZXlzKGxpc3RlbmVycylcblxuICAgIGlmIChhY3RpdmF0b3JSZWYudmFsdWUpIHtcbiAgICAgIGV2ZW50cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgY29uc3QgZWwgPSBhY3RpdmF0b3JSZWYudmFsdWUuJGVsIHx8IGFjdGl2YXRvclJlZi52YWx1ZVxuICAgICAgICBlbCEuYWRkRXZlbnRMaXN0ZW5lcihrZXksIGxpc3RlbmVyc1trZXldKVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBjb25zdCByZW1vdmVBY3RpdmF0b3JFdmVudHMgPSAoKSA9PiB7XG4gICAgY29uc3QgZXZlbnRzID0gT2JqZWN0LmtleXMobGlzdGVuZXJzKVxuXG4gICAgaWYgKGFjdGl2YXRvclJlZi52YWx1ZSkge1xuICAgICAgZXZlbnRzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBjb25zdCBlbCA9IGFjdGl2YXRvclJlZi52YWx1ZS4kZWwgfHwgYWN0aXZhdG9yUmVmLnZhbHVlXG4gICAgICAgIGVsIS5yZW1vdmVFdmVudExpc3RlbmVyKGtleSwgbGlzdGVuZXJzW2tleV0pXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYWN0aXZhdG9yUmVmLFxuICAgIGdldEFjdGl2YXRvcixcbiAgICBnZXRBY3RpdmF0b3JTaXplcyxcbiAgICBhZGRBY3RpdmF0b3JFdmVudHMsXG4gICAgcmVtb3ZlQWN0aXZhdG9yRXZlbnRzLFxuICAgIGdlbkFjdGl2YXRvckxpc3RlbmVyc1xuICB9XG59XG4iXX0=