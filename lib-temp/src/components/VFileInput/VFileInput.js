import { h, defineComponent, ref, computed } from 'vue';
import { VInput } from '../VInput';
import { VChip } from '../VChip';
import { useColors } from '../../composable/use-colors';
import { useIcons } from '../../composable/use-icons';
import { mapToValArray } from '../../helpers';
export const VFileInput = defineComponent({
    name: 'v-file-input',
    props: {
        disabled: Boolean,
        multiple: Boolean,
        chipColor: {
            type: String,
            default: 'primary',
        },
        modelValue: {
            type: Array,
            default: null,
        },
    },
    emits: ['update:modelValue'],
    setup(props, { emit }) {
        const {} = useColors();
        const { icons } = useIcons();
        const inputRef = ref(null);
        const files = ref(new Map());
        const srcRef = ref(null);
        const classes = computed(() => ({
            'v-file-input': true,
            'v-file-input--disabled': props.disabled,
            'v-file-input--multiple': props.multiple,
        }));
        const onChange = (event) => {
            const inputFiles = Array.from(event.target.files);
            if (!props.multiple)
                files.value.clear();
            inputFiles.forEach(f => files.value.set(f.name, f));
            event.target.value = '';
            emit('update:modelValue', mapToValArray(files.value));
        };
        const onClose = (file) => {
            files.value.delete(file.name);
            emit('update:modelValue', mapToValArray(files.value));
        };
        const onClick = ({ srcElement }) => {
            if (srcElement !== srcRef.value)
                return;
            inputRef.value.click();
        };
        const genFileInput = () => {
            return h('input', {
                class: 'v-file-input__field',
                type: 'file',
                multiple: props.multiple,
                ref: inputRef,
                style: {
                    position: 'absolute',
                    visibility: 'hidden',
                },
                onChange,
            });
        };
        const genChips = () => {
            return mapToValArray(files.value)
                .map(file => h(VChip, {
                title: file.name,
                class: 'ma-1',
                color: props.chipColor,
                onClose: () => onClose(file),
            }));
        };
        const genChipsContainer = () => {
            return h('div', {
                class: 'v-file-input__container',
                ref: srcRef,
            }, genChips());
        };
        const genComponent = () => h('div', {
            class: classes.value,
            onClick,
        }, [
            genFileInput(),
            genChipsContainer(),
        ]);
        return () => h(VInput, {
            prependIcon: icons.$paperclip,
            file: true,
        }, {
            'text-field': () => genComponent(),
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkZpbGVJbnB1dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZGaWxlSW5wdXQvVkZpbGVJbnB1dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsQ0FBQyxFQUFFLGVBQWUsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLE1BQU0sS0FBSyxDQUFBO0FBRXZELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFDbEMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUVoQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sNkJBQTZCLENBQUE7QUFDdkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDRCQUE0QixDQUFBO0FBRXJELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFJN0MsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLGVBQWUsQ0FBQztJQUN4QyxJQUFJLEVBQUUsY0FBYztJQUNwQixLQUFLLEVBQUU7UUFDTCxRQUFRLEVBQUUsT0FBTztRQUNqQixRQUFRLEVBQUUsT0FBTztRQUNqQixTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsTUFBTTtZQUNaLE9BQU8sRUFBRSxTQUFTO1NBQ25CO1FBQ0QsVUFBVSxFQUFFO1lBQ1YsSUFBSSxFQUFFLEtBQUs7WUFDWCxPQUFPLEVBQUUsSUFBSTtTQUNkO0tBQ0Y7SUFDRCxLQUFLLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztJQUM1QixLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFO1FBQ25CLE1BQU0sRUFBRSxHQUFHLFNBQVMsRUFBRSxDQUFBO1FBQ3RCLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxRQUFRLEVBQUUsQ0FBQTtRQUU1QixNQUFNLFFBQVEsR0FBRyxHQUFHLENBQTBCLElBQUksQ0FBQyxDQUFBO1FBQ25ELE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBb0Is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TyxDQUFDLEtBQUs7WUFDcEIsT0FBTztTQUNSLEVBQUU7WUFDRCxZQUFZLEVBQUU7WUFDZCxpQkFBaUIsRUFBRTtTQUNwQixDQUFDLENBQUE7UUFFRixPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUU7WUFDckIsV0FBVyxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzdCLElBQUksRUFBRSxJQUFJO1NBQ1gsRUFBRTtZQUNELFlBQVksRUFBRSxHQUFHLEVBQUUsQ0FBQyxZQUFZLEVBQUU7U0FDbkMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGgsIGRlZmluZUNvbXBvbmVudCwgcmVmLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZJbnB1dCB9IGZyb20gJy4uL1ZJbnB1dCdcbmltcG9ydCB7IFZDaGlwIH0gZnJvbSAnLi4vVkNoaXAnXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlQ29sb3JzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtY29sb3JzJ1xuaW1wb3J0IHsgdXNlSWNvbnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1pY29ucydcbi8vIEhlbHBlcnNcbmltcG9ydCB7IG1hcFRvVmFsQXJyYXkgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuLy8gVHlwZXNcbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvYmFzZSdcblxuZXhwb3J0IGNvbnN0IFZGaWxlSW5wdXQgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1maWxlLWlucHV0JyxcbiAgcHJvcHM6IHtcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICBtdWx0aXBsZTogQm9vbGVhbixcbiAgICBjaGlwQ29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdwcmltYXJ5JyxcbiAgICB9LFxuICAgIG1vZGVsVmFsdWU6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICB9LFxuICB9LFxuICBlbWl0czogWyd1cGRhdGU6bW9kZWxWYWx1ZSddLFxuICBzZXR1cChwcm9wcywgeyBlbWl0IH0pIHtcbiAgICBjb25zdCB7fSA9IHVzZUNvbG9ycygpXG4gICAgY29uc3QgeyBpY29ucyB9ID0gdXNlSWNvbnMoKVxuXG4gICAgY29uc3QgaW5wdXRSZWYgPSByZWY8TWF5YmU8SFRNTElucHV0RWxlbWVudD4+KG51bGwpXG4gICAgY29uc3QgZmlsZXMgPSByZWY8TWFwPHN0cmluZywgRmlsZT4+KG5ldyBNYXAoKSlcbiAgICBjb25zdCBzcmNSZWYgPSByZWY8TWF5YmU8SFRNTEVsZW1lbnQ+PihudWxsKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICAndi1maWxlLWlucHV0JzogdHJ1ZSxcbiAgICAgICd2LWZpbGUtaW5wdXQtLWRpc2FibGVkJzogcHJvcHMuZGlzYWJsZWQsXG4gICAgICAndi1maWxlLWlucHV0LS1tdWx0aXBsZSc6IHByb3BzLm11bHRpcGxlLFxuICAgIH0pKVxuXG4gICAgY29uc3Qgb25DaGFuZ2UgPSAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IGlucHV0RmlsZXMgPSBBcnJheS5mcm9tKGV2ZW50LnRhcmdldC5maWxlcykgYXMgRmlsZVtdXG5cbiAgICAgIGlmICghcHJvcHMubXVsdGlwbGUpIGZpbGVzLnZhbHVlLmNsZWFyKClcblxuICAgICAgaW5wdXRGaWxlcy5mb3JFYWNoKGYgPT4gZmlsZXMudmFsdWUuc2V0KGYubmFtZSwgZikpXG5cbiAgICAgIGV2ZW50LnRhcmdldC52YWx1ZSA9ICcnXG4gICAgICBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIG1hcFRvVmFsQXJyYXkoZmlsZXMudmFsdWUpKVxuICAgIH1cblxuICAgIGNvbnN0IG9uQ2xvc2UgPSAoZmlsZSkgPT4ge1xuICAgICAgZmlsZXMudmFsdWUuZGVsZXRlKGZpbGUubmFtZSlcbiAgICAgIGVtaXQoJ3VwZGF0ZTptb2RlbFZhbHVlJywgbWFwVG9WYWxBcnJheShmaWxlcy52YWx1ZSkpXG4gICAgfVxuXG4gICAgY29uc3Qgb25DbGljayA9ICh7IHNyY0VsZW1lbnQgfSkgPT4ge1xuICAgICAgaWYgKHNyY0VsZW1lbnQgIT09IHNyY1JlZi52YWx1ZSkgcmV0dXJuXG4gICAgICBpbnB1dFJlZi52YWx1ZSEuY2xpY2soKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkZpbGVJbnB1dCA9ICgpID0+IHtcbiAgICAgIHJldHVybiBoKCdpbnB1dCcsIHtcbiAgICAgICAgY2xhc3M6ICd2LWZpbGUtaW5wdXRfX2ZpZWxkJyxcbiAgICAgICAgdHlwZTogJ2ZpbGUnLFxuICAgICAgICBtdWx0aXBsZTogcHJvcHMubXVsdGlwbGUsXG4gICAgICAgIHJlZjogaW5wdXRSZWYsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2hhbmdlLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5DaGlwcyA9ICgpID0+IHtcbiAgICAgIHJldHVybiBtYXBUb1ZhbEFycmF5KGZpbGVzLnZhbHVlKVxuICAgICAgICAubWFwKGZpbGUgPT4gaChWQ2hpcCwge1xuICAgICAgICAgICAgdGl0bGU6IGZpbGUubmFtZSxcbiAgICAgICAgICAgIGNsYXNzOiAnbWEtMScsXG4gICAgICAgICAgICBjb2xvcjogcHJvcHMuY2hpcENvbG9yLFxuICAgICAgICAgICAgb25DbG9zZTogKCkgPT4gb25DbG9zZShmaWxlKSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkNoaXBzQ29udGFpbmVyID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcbiAgICAgICAgY2xhc3M6ICd2LWZpbGUtaW5wdXRfX2NvbnRhaW5lcicsXG4gICAgICAgIHJlZjogc3JjUmVmLFxuICAgICAgfSwgZ2VuQ2hpcHMoKSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5Db21wb25lbnQgPSAoKSA9PiBoKCdkaXYnLCB7XG4gICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgIG9uQ2xpY2ssXG4gICAgfSwgW1xuICAgICAgZ2VuRmlsZUlucHV0KCksXG4gICAgICBnZW5DaGlwc0NvbnRhaW5lcigpLFxuICAgIF0pXG5cbiAgICByZXR1cm4gKCkgPT4gaChWSW5wdXQsIHtcbiAgICAgIHByZXBlbmRJY29uOiBpY29ucy4kcGFwZXJjbGlwLFxuICAgICAgZmlsZTogdHJ1ZSxcbiAgICB9LCB7XG4gICAgICAndGV4dC1maWVsZCc6ICgpID0+IGdlbkNvbXBvbmVudCgpLFxuICAgIH0pXG4gIH0sXG59KVxuIl19