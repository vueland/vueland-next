import { defineComponent, computed, h } from 'vue';
import { toCamelCase } from '../../helpers';
const breakpoints = ['sm', 'md', 'lg', 'xl'];
const colProps = breakpoints.reduce((props, p) => {
    props[p] = {
        type: [String, Number],
        default: null,
    };
    return props;
}, {});
const orderProps = breakpoints.reduce((props, p) => {
    props[`order-${p}`] = {
        type: [String, Number],
        default: null,
    };
    return props;
}, {});
const offsetProps = breakpoints.reduce((props, p) => {
    props[`offset-${p}`] = {
        type: [String, Number],
        default: null,
    };
    return props;
}, {});
export default defineComponent({
    name: 'v-col',
    props: {
        order: {
            type: [String, Number],
            default: null,
        },
        cols: {
            type: [String, Number],
            default: null,
        },
        offset: {
            type: [String, Number],
            default: null,
        },
        ...colProps,
        ...orderProps,
        ...offsetProps,
    },
    setup(props, { slots }) {
        const classes = computed(() => ({
            'v-col': true,
            [`v-col-${props.cols}`]: !!props.cols,
            ...breakpoints.reduce((cols, p) => {
                cols[`${p}-${props[p]}`] = !!props[p];
                return cols;
            }, {}),
            [`order-${props.order}`]: props.order !== null,
            ...breakpoints.reduce((orders, p) => {
                const propValue = props[toCamelCase('order', p)];
                orders[`order-${p}-${propValue}`] = !!propValue;
                return orders;
            }, {}),
            [`offset-${props.offset}`]: props.offset !== null,
            ...breakpoints.reduce((offsets, p) => {
                const propValue = props[toCamelCase('offset', p)];
                offsets[`offset-${p}-${propValue}`] = !!propValue;
                return offsets;
            }, {}),
        }));
        return () => h('div', {
            class: classes.value,
        }, {
            default: () => slots.default && slots.default(),
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkNvbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZHcmlkL1ZDb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFTLE1BQU0sS0FBSyxDQUFBO0FBQ3pELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFFM0MsTUFBTSxXQUFXLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQTtBQUU1QyxNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQy9DLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRztRQUNULElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7UUFDdEIsT0FBTyxFQUFFLElBQUk7S0FDZCxDQUFBO0lBRUQsT0FBTyxLQUFLLENBQUE7QUFDZCxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7QUFFTixNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ2pELEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEdBQUc7UUFDcEIsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztRQUN0QixPQUFPLEVBQUUsSUFBSTtLQUNkLENBQUE7SUFFRCxPQUFPLEtBQUssQ0FBQTtBQUNkLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtBQUVOLE1BQU0sV0FBVyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDbEQsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsR0FBRztRQUNyQixJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO1FBQ3RCLE9BQU8sRUFBRSxJQUFJO0tBQ2QsQ0FBQTtJQUVELE9BQU8sS0FBSyxDQUFBO0FBQ2QsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBRU4sZUFBZSxlQUFlLENBQUM7SUFDN0IsSUFBSSxFQUFFLE9BQU87SUFDYixLQUFLLEVBQUU7UUFDTCxLQUFLLEVBQUU7WUFDTCxJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO1lBQ3RCLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7UUFDRCxJQUFJLEVBQUU7WUFDSixJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO1lBQ3RCLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7UUFDRCxNQUFNLEVBQUU7WUFDTixJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO1lBQ3RCLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7UUFDRCxHQUFHLFFBQVE7UUFDWCxHQUFHLFVBQVU7UUFDYixHQUFHLFdBQVc7S0FDZjtJQUNELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUU7UUFDcEIsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUEwQixHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZELE9BQU8sRUFBRSxJQUFJO1lBQ2IsQ0FBQyxTQUFTLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSTtZQUNyQyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2hDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7Z0JBQ3JDLE9BQU8sSUFBSSxDQUFBO1lBQ2IsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUVOLENBQUMsU0FBUyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxLQUFLLElBQUk7WUFFOUMsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNsQyxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUNoRCxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksU0FBUyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFBO2dCQUMvQyxPQUFPLE1BQU0sQ0FBQTtZQUNmLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDTixDQUFDLFVBQVUsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQU0sS0FBSyxJQUFJO1lBQ2pELEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDbkMsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDakQsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLFNBQVMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQTtnQkFDakQsT0FBTyxPQUFPLENBQUE7WUFDaEIsQ0FBQyxFQUFFLEVBQUUsQ0FBQztTQUNQLENBQUMsQ0FBQyxDQUFBO1FBRUgsT0FBTyxHQUFHLEVBQUUsQ0FDVixDQUFDLENBQ0MsS0FBSyxFQUNMO1lBQ0UsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO1NBQ3JCLEVBQ0Q7WUFDRSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFO1NBQ2hELENBQ0YsQ0FBQTtJQUNMLENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGNvbXB1dGVkLCBoLCBWTm9kZSB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IHRvQ2FtZWxDYXNlIH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuY29uc3QgYnJlYWtwb2ludHMgPSBbJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ11cblxuY29uc3QgY29sUHJvcHMgPSBicmVha3BvaW50cy5yZWR1Y2UoKHByb3BzLCBwKSA9PiB7XG4gIHByb3BzW3BdID0ge1xuICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgZGVmYXVsdDogbnVsbCxcbiAgfVxuXG4gIHJldHVybiBwcm9wc1xufSwge30pXG5cbmNvbnN0IG9yZGVyUHJvcHMgPSBicmVha3BvaW50cy5yZWR1Y2UoKHByb3BzLCBwKSA9PiB7XG4gIHByb3BzW2BvcmRlci0ke3B9YF0gPSB7XG4gICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICBkZWZhdWx0OiBudWxsLFxuICB9XG5cbiAgcmV0dXJuIHByb3BzXG59LCB7fSlcblxuY29uc3Qgb2Zmc2V0UHJvcHMgPSBicmVha3BvaW50cy5yZWR1Y2UoKHByb3BzLCBwKSA9PiB7XG4gIHByb3BzW2BvZmZzZXQtJHtwfWBdID0ge1xuICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgZGVmYXVsdDogbnVsbCxcbiAgfVxuXG4gIHJldHVybiBwcm9wc1xufSwge30pXG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWNvbCcsXG4gIHByb3BzOiB7XG4gICAgb3JkZXI6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gICAgY29sczoge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgfSxcbiAgICBvZmZzZXQ6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gICAgLi4uY29sUHJvcHMsXG4gICAgLi4ub3JkZXJQcm9wcyxcbiAgICAuLi5vZmZzZXRQcm9wcyxcbiAgfSxcbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSk6ICgpID0+IFZOb2RlIHtcbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1jb2wnOiB0cnVlLFxuICAgICAgW2B2LWNvbC0ke3Byb3BzLmNvbHN9YF06ICEhcHJvcHMuY29scyxcbiAgICAgIC4uLmJyZWFrcG9pbnRzLnJlZHVjZSgoY29scywgcCkgPT4ge1xuICAgICAgICBjb2xzW2Ake3B9LSR7cHJvcHNbcF19YF0gPSAhIXByb3BzW3BdXG4gICAgICAgIHJldHVybiBjb2xzXG4gICAgICB9LCB7fSksXG5cbiAgICAgIFtgb3JkZXItJHtwcm9wcy5vcmRlcn1gXTogcHJvcHMub3JkZXIgIT09IG51bGwsXG5cbiAgICAgIC4uLmJyZWFrcG9pbnRzLnJlZHVjZSgob3JkZXJzLCBwKSA9PiB7XG4gICAgICAgIGNvbnN0IHByb3BWYWx1ZSA9IHByb3BzW3RvQ2FtZWxDYXNlKCdvcmRlcicsIHApXVxuICAgICAgICBvcmRlcnNbYG9yZGVyLSR7cH0tJHtwcm9wVmFsdWV9YF0gPSAhIXByb3BWYWx1ZVxuICAgICAgICByZXR1cm4gb3JkZXJzXG4gICAgICB9LCB7fSksXG4gICAgICBbYG9mZnNldC0ke3Byb3BzLm9mZnNldH1gXTogcHJvcHMub2Zmc2V0ICE9PSBudWxsLFxuICAgICAgLi4uYnJlYWtwb2ludHMucmVkdWNlKChvZmZzZXRzLCBwKSA9PiB7XG4gICAgICAgIGNvbnN0IHByb3BWYWx1ZSA9IHByb3BzW3RvQ2FtZWxDYXNlKCdvZmZzZXQnLCBwKV1cbiAgICAgICAgb2Zmc2V0c1tgb2Zmc2V0LSR7cH0tJHtwcm9wVmFsdWV9YF0gPSAhIXByb3BWYWx1ZVxuICAgICAgICByZXR1cm4gb2Zmc2V0c1xuICAgICAgfSwge30pLFxuICAgIH0pKVxuXG4gICAgcmV0dXJuICgpID0+XG4gICAgICBoKFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCksXG4gICAgICAgIH1cbiAgICAgIClcbiAgfSxcbn0pXG4iXX0=