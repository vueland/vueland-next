import { computed, reactive, watch } from 'vue';
import { useValidation } from '@/composable/use-validation';
export const useInputStates = (props, { attrs, emit }) => {
    const inputState = reactive({
        value: '',
        focused: false,
    });
    const { errorState, validate } = useValidation(props);
    const isDisabled = computed(() => {
        if (props.disabled)
            return true;
        if (typeof attrs.disabled === 'boolean')
            return attrs.disabled;
        return attrs.disabled !== undefined;
    });
    const isReadonly = computed(() => {
        if (props.readonly)
            return true;
        if (typeof attrs.readonly === 'boolean')
            return attrs.readonly;
        return attrs.readonly !== undefined;
    });
    const stateClasses = computed(() => ({
        'primary--text': inputState.focused,
        'error--text': !!errorState.innerError
    }));
    watch(() => inputState.focused, (focused) => {
        if (!focused && props.rules)
            return validate(inputState.value);
    });
    watch(() => inputState.value, (val) => {
        if (props.rules)
            return validate(val);
    });
    const onFocus = (e) => {
        if (isReadonly.value)
            return;
        inputState.focused = true;
        emit('focus', e);
    };
    const onChange = () => {
        if (isReadonly.value)
            return;
        emit('change');
    };
    const onBlur = (e) => {
        if (isReadonly.value)
            return;
        inputState.focused = false;
        emit('blur', e);
    };
    const onSelect = (val) => {
        inputState.focused = false;
        emit('update:modelValue', val);
        emit('select', val);
        onChange();
    };
    return {
        inputState,
        errorState,
        isReadonly,
        isDisabled,
        stateClasses,
        onFocus,
        onBlur,
        onChange,
        onSelect,
        validate
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWlucHV0LXN0YXRlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb3NhYmxlL3VzZS1pbnB1dC1zdGF0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLE1BQU0sS0FBSyxDQUFBO0FBQy9DLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQTtBQU8zRCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRTtJQUN2RCxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQVE7UUFDakMsS0FBSyxFQUFFLEVBQUU7UUFDVCxPQUFPLEVBQUUsS0FBSztLQUNmLENBQUMsQ0FBQTtJQUVGLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBRXJELE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBVSxHQUFHLEVBQUU7UUFDeEMsSUFBSSxLQUFLLENBQUMsUUFBUTtZQUFFLE9BQU8sSUFBSSxDQUFBO1FBRS9CLElBQUksT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLFNBQVM7WUFBRSxPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUE7UUFFOUQsT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLFNBQVMsQ0FBQTtJQUNyQyxDQUFDLENBQUMsQ0FBQTtJQUVGLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBVSxHQUFHLEVBQUU7UUFDeEMsSUFBSSxLQUFLLENBQUMsUUFBUTtZQUFFLE9BQU8sSUFBSSxDQUFBO1FBRS9CLElBQUksT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLFNBQVM7WUFBRSxPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUE7UUFFOUQsT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLFNBQVMsQ0FBQTtJQUNyQyxDQUFDLENBQUMsQ0FBQTtJQUVGLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBMEIsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUM1RCxlQUFlLEVBQUUsVUFBVSxDQUFDLE9BQU87UUFDbkMsYUFBYSxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsVUFBVTtLQUN2QyxDQUFDLENBQUMsQ0FBQTtJQUVILEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUU7UUFDMUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUMsS0FBSztZQUFFLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUNoRSxDQUFDLENBQUMsQ0FBQTtJQUVGLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDcEMsSUFBSSxLQUFLLENBQUMsS0FBSztZQUFFLE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ3ZDLENBQUMsQ0FBQyxDQUFBO0lBRUYsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRTtRQUNwQixJQUFJLFVBQVUsQ0FBQyxLQUFLO1lBQUUsT0FBTTtRQUU1QixVQUFVLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQTtRQUN6QixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ2xCLENBQUMsQ0FBQTtJQUVELE1BQU0sUUFBUSxHQUFHLEdBQUcsRUFBRTtRQUNwQixJQUFJLFVBQVUsQ0FBQyxLQUFLO1lBQUUsT0FBTTtRQUU1QixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDaEIsQ0FBQyxDQUFBO0lBRUQsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRTtRQUNuQixJQUFJLFVBQVUsQ0FBQyxLQUFLO1lBQUUsT0FBTTtRQUU1QixVQUFVLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQTtRQUMxQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ2pCLENBQUMsQ0FBQTtJQUVELE1BQU0sUUFBUSxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDdkIsVUFBVSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUE7UUFFMUIsSUFBSSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBQzlCLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFFbkIsUUFBUSxFQUFFLENBQUE7SUFDWixDQUFDLENBQUE7SUFFRCxPQUFPO1FBQ0wsVUFBVTtRQUNWLFVBQVU7UUFDVixVQUFVO1FBQ1YsVUFBVTtRQUNWLFlBQVk7UUFDWixPQUFPO1FBQ1AsTUFBTTtRQUNOLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtLQUNULENBQUE7QUFDSCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb21wdXRlZCwgcmVhY3RpdmUsIHdhdGNoIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgdXNlVmFsaWRhdGlvbiB9IGZyb20gJ0AvY29tcG9zYWJsZS91c2UtdmFsaWRhdGlvbidcblxudHlwZSBTdGF0ZSA9IHtcbiAgdmFsdWU6IHN0cmluZyB8IG51bWJlclxuICBmb2N1c2VkOiBib29sZWFuXG59XG5cbmV4cG9ydCBjb25zdCB1c2VJbnB1dFN0YXRlcyA9IChwcm9wcywgeyBhdHRycywgZW1pdCB9KSA9PiB7XG4gIGNvbnN0IGlucHV0U3RhdGUgPSByZWFjdGl2ZTxTdGF0ZT4oe1xuICAgIHZhbHVlOiAnJyxcbiAgICBmb2N1c2VkOiBmYWxzZSxcbiAgfSlcblxuICBjb25zdCB7IGVycm9yU3RhdGUsIHZhbGlkYXRlIH0gPSB1c2VWYWxpZGF0aW9uKHByb3BzKVxuXG4gIGNvbnN0IGlzRGlzYWJsZWQgPSBjb21wdXRlZDxib29sZWFuPigoKSA9PiB7XG4gICAgaWYgKHByb3BzLmRpc2FibGVkKSByZXR1cm4gdHJ1ZVxuXG4gICAgaWYgKHR5cGVvZiBhdHRycy5kaXNhYmxlZCA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gYXR0cnMuZGlzYWJsZWRcblxuICAgIHJldHVybiBhdHRycy5kaXNhYmxlZCAhPT0gdW5kZWZpbmVkXG4gIH0pXG5cbiAgY29uc3QgaXNSZWFkb25seSA9IGNvbXB1dGVkPGJvb2xlYW4+KCgpID0+IHtcbiAgICBpZiAocHJvcHMucmVhZG9ubHkpIHJldHVybiB0cnVlXG5cbiAgICBpZiAodHlwZW9mIGF0dHJzLnJlYWRvbmx5ID09PSAnYm9vbGVhbicpIHJldHVybiBhdHRycy5yZWFkb25seVxuXG4gICAgcmV0dXJuIGF0dHJzLnJlYWRvbmx5ICE9PSB1bmRlZmluZWRcbiAgfSlcblxuICBjb25zdCBzdGF0ZUNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAncHJpbWFyeS0tdGV4dCc6IGlucHV0U3RhdGUuZm9jdXNlZCxcbiAgICAnZXJyb3ItLXRleHQnOiAhIWVycm9yU3RhdGUuaW5uZXJFcnJvclxuICB9KSlcblxuICB3YXRjaCgoKSA9PiBpbnB1dFN0YXRlLmZvY3VzZWQsIChmb2N1c2VkKSA9PiB7XG4gICAgaWYgKCFmb2N1c2VkICYmIHByb3BzLnJ1bGVzKSByZXR1cm4gdmFsaWRhdGUoaW5wdXRTdGF0ZS52YWx1ZSlcbiAgfSlcblxuICB3YXRjaCgoKSA9PiBpbnB1dFN0YXRlLnZhbHVlLCAodmFsKSA9PiB7XG4gICAgaWYgKHByb3BzLnJ1bGVzKSByZXR1cm4gdmFsaWRhdGUodmFsKVxuICB9KVxuXG4gIGNvbnN0IG9uRm9jdXMgPSAoZSkgPT4ge1xuICAgIGlmIChpc1JlYWRvbmx5LnZhbHVlKSByZXR1cm5cblxuICAgIGlucHV0U3RhdGUuZm9jdXNlZCA9IHRydWVcbiAgICBlbWl0KCdmb2N1cycsIGUpXG4gIH1cblxuICBjb25zdCBvbkNoYW5nZSA9ICgpID0+IHtcbiAgICBpZiAoaXNSZWFkb25seS52YWx1ZSkgcmV0dXJuXG5cbiAgICBlbWl0KCdjaGFuZ2UnKVxuICB9XG5cbiAgY29uc3Qgb25CbHVyID0gKGUpID0+IHtcbiAgICBpZiAoaXNSZWFkb25seS52YWx1ZSkgcmV0dXJuXG5cbiAgICBpbnB1dFN0YXRlLmZvY3VzZWQgPSBmYWxzZVxuICAgIGVtaXQoJ2JsdXInLCBlKVxuICB9XG5cbiAgY29uc3Qgb25TZWxlY3QgPSAodmFsKSA9PiB7XG4gICAgaW5wdXRTdGF0ZS5mb2N1c2VkID0gZmFsc2VcblxuICAgIGVtaXQoJ3VwZGF0ZTptb2RlbFZhbHVlJywgdmFsKVxuICAgIGVtaXQoJ3NlbGVjdCcsIHZhbClcblxuICAgIG9uQ2hhbmdlKClcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaW5wdXRTdGF0ZSxcbiAgICBlcnJvclN0YXRlLFxuICAgIGlzUmVhZG9ubHksXG4gICAgaXNEaXNhYmxlZCxcbiAgICBzdGF0ZUNsYXNzZXMsXG4gICAgb25Gb2N1cyxcbiAgICBvbkJsdXIsXG4gICAgb25DaGFuZ2UsXG4gICAgb25TZWxlY3QsXG4gICAgdmFsaWRhdGVcbiAgfVxufVxuIl19