import { defineComponent, h, computed } from 'vue';
import { VIcon } from '../VIcon';
import { useColors, colorProps } from '../../composable/use-colors';
import { useIcons } from '../../composable/use-icons';
export default defineComponent({
    name: 'v-chip',
    props: {
        title: {
            type: String,
            default: ''
        },
        textColor: {
            type: String,
            default: '#ffffff'
        },
        disabled: Boolean,
        closable: {
            type: Boolean,
            default: true
        },
        ...colorProps('primary')
    },
    emits: ['close', 'click'],
    setup(props, { slots, emit }) {
        const { setBackgroundClassNameColor, setBackgroundCssColor, setTextCssColor, setTextClassNameColor } = useColors();
        const { icons } = useIcons();
        const classes = computed(() => ({
            'v-chip': true,
            'v-chip--disabled': props.disabled,
            ...(!props.disabled ? setBackgroundClassNameColor(props.color) : {}),
            ...setTextClassNameColor(props.textColor)
        }));
        const styles = computed(() => ({
            ...(!props.disabled ? setBackgroundCssColor(props.color) : {}),
            ...setTextCssColor(props.textColor)
        }));
        const genCloseIcon = () => {
            return h(VIcon, {
                icon: icons.$close,
                clickable: !props.disabled
            });
        };
        const genIconWrapper = () => {
            return h('div', {
                class: 'v-chip__icon-wrapper',
                onClick: () => emit('close')
            }, genCloseIcon());
        };
        const genChipContent = () => {
            return h('div', {
                class: 'v-chip__content',
                onClick: () => emit('click')
            }, slots.default?.() || props.title);
        };
        return () => h('span', {
            class: classes.value,
            style: styles.value
        }, [
            genChipContent(),
            props.closable ? genIconWrapper() : null
        ]);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkNoaXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WQ2hpcC9WQ2hpcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxLQUFLLENBQUE7QUFFbEQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUVoQyxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLDZCQUE2QixDQUFBO0FBQ25FLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQTtBQUVyRCxlQUFlLGVBQWUsQ0FBQztJQUM3QixJQUFJLEVBQUUsUUFBUTtJQUNkLEtBQUssRUFBRTtRQUNMLEtBQUssRUFBRTtZQUNMLElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLEVBQUU7U0FDWjtRQUNELFNBQVMsRUFBRTtZQUNULElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLFNBQVM7U0FDbkI7UUFDRCxRQUFRLEVBQUUsT0FBTztRQUNqQixRQUFRLEVBQUU7WUFDUixJQUFJLEVBQUUsT0FBTztZQUNiLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7UUFDRCxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUM7S0FDekI7SUFDRCxLQUFLLEVBQUUsQ0FBRSxPQUFPLEVBQUUsT0FBTyxDQUFFO0lBQzNCLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO1FBQzFCLE1BQU0sRUFDSiwyQkFBMkIsRUFDM0IscUJBQXFCLEVBQ3JCLGVBQWUsRUFDZixxQkFBcUIsRUFDdEIsR0FBRyxTQUFTLEVBQUUsQ0FBQTtRQUNmLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxRQUFRLEVBQUUsQ0FBQTtRQUU1QixNQUFNLE9BQU8sR0FBRyxRQUFRLENBQTBCLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDdkQsUUFBUSxFQUFFLElBQUk7WUFDZCxrQkFBa0IsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUNsQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQywyQkFBMkIsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNwRSxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUM7U0FDMUMsQ0FBQyxDQUFDLENBQUE7UUFFSCxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQXlCLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDckQsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDOUQsR0FBRyxlQUFlLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQztTQUNwQyxDQUFDLENBQUMsQ0FBQTtRQUVILE1BQU0sWUFBWSxHQUFHLEdBQUcsRUFBRTtZQUN4QixPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUU7Z0JBQ2QsSUFBSSxFQUFFLEtBQUssQ0FBQyxNQUFNO2dCQUNsQixTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUTthQUMzQixDQUFDLENBQUE7UUFDSixDQUFDLENBQUE7UUFFRCxNQUFNLGNBQWMsR0FBRyxHQUFHLEVBQUU7WUFDMUIsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFO2dCQUNkLEtBQUssRUFBRSxzQkFBc0I7Z0JBQzdCLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO2FBQzdCLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQTtRQUNwQixDQUFDLENBQUE7UUFFRCxNQUFNLGNBQWMsR0FBRyxHQUFHLEVBQUU7WUFDMUIsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFO2dCQUNkLEtBQUssRUFBRSxpQkFBaUI7Z0JBQ3hCLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO2FBQzdCLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUFFLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ3RDLENBQUMsQ0FBQTtRQUVELE9BQU8sR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRTtZQUNyQixLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7WUFDcEIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLO1NBQ3BCLEVBQUU7WUFDRCxjQUFjLEVBQUU7WUFDaEIsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUk7U0FDekMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaCwgY29tcHV0ZWQgfSBmcm9tICd2dWUnXG5cbmltcG9ydCB7IFZJY29uIH0gZnJvbSAnLi4vVkljb24nXG5cbmltcG9ydCB7IHVzZUNvbG9ycywgY29sb3JQcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcbmltcG9ydCB7IHVzZUljb25zIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtaWNvbnMnXG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWNoaXAnLFxuICBwcm9wczoge1xuICAgIHRpdGxlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJ1xuICAgIH0sXG4gICAgdGV4dENvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnI2ZmZmZmZidcbiAgICB9LFxuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIGNsb3NhYmxlOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgLi4uY29sb3JQcm9wcygncHJpbWFyeScpXG4gIH0sXG4gIGVtaXRzOiBbICdjbG9zZScsICdjbGljaycgXSxcbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMsIGVtaXQgfSkge1xuICAgIGNvbnN0IHtcbiAgICAgIHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcixcbiAgICAgIHNldEJhY2tncm91bmRDc3NDb2xvcixcbiAgICAgIHNldFRleHRDc3NDb2xvcixcbiAgICAgIHNldFRleHRDbGFzc05hbWVDb2xvclxuICAgIH0gPSB1c2VDb2xvcnMoKVxuICAgIGNvbnN0IHsgaWNvbnMgfSA9IHVzZUljb25zKClcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LWNoaXAnOiB0cnVlLFxuICAgICAgJ3YtY2hpcC0tZGlzYWJsZWQnOiBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIC4uLighcHJvcHMuZGlzYWJsZWQgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgICAgLi4uc2V0VGV4dENsYXNzTmFtZUNvbG9yKHByb3BzLnRleHRDb2xvcilcbiAgICB9KSlcblxuICAgIGNvbnN0IHN0eWxlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIHN0cmluZz4+KCgpID0+ICh7XG4gICAgICAuLi4oIXByb3BzLmRpc2FibGVkID8gc2V0QmFja2dyb3VuZENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICAgIC4uLnNldFRleHRDc3NDb2xvcihwcm9wcy50ZXh0Q29sb3IpXG4gICAgfSkpXG5cbiAgICBjb25zdCBnZW5DbG9zZUljb24gPSAoKSA9PiB7XG4gICAgICByZXR1cm4gaChWSWNvbiwge1xuICAgICAgICBpY29uOiBpY29ucy4kY2xvc2UsXG4gICAgICAgIGNsaWNrYWJsZTogIXByb3BzLmRpc2FibGVkXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkljb25XcmFwcGVyID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcbiAgICAgICAgY2xhc3M6ICd2LWNoaXBfX2ljb24td3JhcHBlcicsXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IGVtaXQoJ2Nsb3NlJylcbiAgICAgIH0sIGdlbkNsb3NlSWNvbigpKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkNoaXBDb250ZW50ID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcbiAgICAgICAgY2xhc3M6ICd2LWNoaXBfX2NvbnRlbnQnLFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiBlbWl0KCdjbGljaycpXG4gICAgICB9LCBzbG90cy5kZWZhdWx0Py4oKSB8fCBwcm9wcy50aXRsZSlcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4gaCgnc3BhbicsIHtcbiAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgc3R5bGU6IHN0eWxlcy52YWx1ZVxuICAgIH0sIFtcbiAgICAgIGdlbkNoaXBDb250ZW50KCksXG4gICAgICBwcm9wcy5jbG9zYWJsZSA/IGdlbkljb25XcmFwcGVyKCkgOiBudWxsXG4gICAgXSlcbiAgfVxufSlcbiJdfQ==