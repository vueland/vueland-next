import { defineComponent, provide, reactive, h, withDirectives, onMounted, } from 'vue';
import { resize } from '../../directives';
import { breakpoints } from '../../services/breakpoints';
import { throttle } from '../../utils/throttle';
export default defineComponent({
    name: 'v-app',
    directives: {
        resize,
    },
    props: {
        global: {
            type: Object,
            default: null,
        },
    },
    setup(props, { slots }) {
        const TIMEOUT = 40;
        const state = reactive({
            current: null,
            xlAndLess: false,
            lgAndLess: false,
            mdAndLess: false,
            smAndLess: false,
        });
        provide('$v_breakpoints', state);
        const setCurrentBreakpoint = (screen) => {
            if (screen >= breakpoints.xl) {
                return (state.current = 'xl');
            }
            if (screen >= breakpoints.lg && screen < breakpoints.xl) {
                return (state.current = 'lg');
            }
            if (screen >= breakpoints.md && screen < breakpoints.lg) {
                return (state.current = 'md');
            }
            if (screen >= breakpoints.sm && screen < breakpoints.md) {
                return (state.current = 'sm');
            }
            return (state.current = 'sm');
        };
        const setIntervals = (screen) => {
            const { xl, lg, md, sm } = breakpoints;
            state.xlAndLess = screen <= xl && screen > lg;
            state.lgAndLess = screen <= lg && screen > md;
            state.mdAndLess = screen <= md && screen > sm;
            state.smAndLess = screen <= sm;
        };
        const setSizes = () => {
            const { innerWidth } = props.global || window;
            setCurrentBreakpoint(innerWidth);
            setIntervals(innerWidth);
        };
        const genAppWrapper = () => {
            return h('div', { class: 'v-app--wrapper' }, {
                default: () => slots.default && slots.default(),
            });
        };
        const throttledResizeListener = throttle(setSizes, TIMEOUT);
        onMounted(() => setSizes());
        return () => withDirectives(h('div', { class: 'v-app' }, genAppWrapper()), [[resize, throttledResizeListener]]);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkFwcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3Z1ZWxhbmQvc3JjL2NvbXBvbmVudHMvVkFwcC9WQXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxlQUFlLEVBQ2YsT0FBTyxFQUNQLFFBQVEsRUFDUixDQUFDLEVBQ0QsY0FBYyxFQUNkLFNBQVMsR0FDVixNQUFNLEtBQUssQ0FBQTtBQUdaLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUd6QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sNEJBQTRCLENBQUE7QUFHeEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHNCQUFzQixDQUFBO0FBWS9DLGVBQWUsZUFBZSxDQUFDO0lBQzdCLElBQUksRUFBRSxPQUFPO0lBQ2IsVUFBVSxFQUFFO1FBQ1YsTUFBTTtLQUNQO0lBQ0QsS0FBSyxFQUFFO1FBQ0wsTUFBTSxFQUFFO1lBQ04sSUFBSSxFQUFFLE1BQU07WUFDWixPQUFPLEVBQUUsSUFBSTtTQUNkO0tBQ0Y7SUFDRCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFO1FBQ3BCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQTtRQUVsQixNQUFNLEtBQUssR0FBRyxRQUFRLENBQWlCO1lBQ3JDLE9BQU8sRUFBRSxJQUFJO1lBQ2IsU0FBUyxFQUFFLEtBQUs7WUFDaEIsU0FBUyxFQUFFLEtBQUs7WUFDaEIsU0FBUyxFQUFFLEtBQUs7WUFDaEIsU0FBUyxFQUFFLEtBQUs7U0FDakIsQ0FBQyxDQUFBO1FBRUYsT0FBTyxDQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxDQUFBO1FBRWhDLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUN0QyxJQUFJLE1BQU0sSUFBSSxXQUFXLENBQUMsRUFBRSxFQUFFO2dCQUM1QixPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQTthQUM5QjtZQUNELElBQUksTUFBTSxJQUFJLFdBQVcsQ0FBQyxFQUFFLElBQUksTUFBTSxHQUFHLFdBQVcsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZELE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFBO2FBQzlCO1lBQ0QsSUFBSSxNQUFNLElBQUksV0FBVyxDQUFDLEVBQUUsSUFBSSxNQUFNLEdBQUcsV0FBVyxDQUFDLEVBQUUsRUFBRTtnQkFDdkQsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUE7YUFDOUI7WUFDRCxJQUFJLE1BQU0sSUFBSSxXQUFXLENBQUMsRUFBRSxJQUFJLE1BQU0sR0FBRyxXQUFXLENBQUMsRUFBRSxFQUFFO2dCQUN2RCxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQTthQUM5QjtZQUVELE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFBO1FBQy9CLENBQUMsQ0FBQTtRQUVELE1BQU0sWUFBWSxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDOUIsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLFdBQVcsQ0FBQTtZQUV0QyxLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU0sSUFBSSxFQUFFLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQTtZQUM3QyxLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU0sSUFBSSxFQUFFLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQTtZQUM3QyxLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU0sSUFBSSxFQUFFLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQTtZQUM3QyxLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU0sSUFBSSxFQUFFLENBQUE7UUFDaEMsQ0FBQyxDQUFBO1FBRUQsTUFBTSxRQUFRLEdBQUcsR0FBRyxFQUFFO1lBQ3BCLE1BQU0sRUFBRSxVQUFVLEVBQUUsR0FBRyxLQUFLLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQTtZQUU3QyxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsQ0FBQTtZQUNoQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDMUIsQ0FBQyxDQUFBO1FBRUQsTUFBTSxhQUFhLEdBQUcsR0FBRyxFQUFFO1lBQ3pCLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxFQUFFO2dCQUMzQyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFO2FBQ2hELENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQTtRQUVELE1BQU0sdUJBQXVCLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUUzRCxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQTtRQUUzQixPQUFPLEdBQUcsRUFBRSxDQUNWLGNBQWMsQ0FDWixDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFLGFBQWEsRUFBRSxDQUFDLEVBQzdDLENBQUUsQ0FBRSxNQUFNLEVBQUUsdUJBQXVCLENBQUUsQ0FBRSxDQUN4QyxDQUFBO0lBQ0wsQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGRlZmluZUNvbXBvbmVudCxcbiAgcHJvdmlkZSxcbiAgcmVhY3RpdmUsXG4gIGgsXG4gIHdpdGhEaXJlY3RpdmVzLFxuICBvbk1vdW50ZWQsXG59IGZyb20gJ3Z1ZSdcblxuLy8gRGlyZWN0aXZlc1xuaW1wb3J0IHsgcmVzaXplIH0gZnJvbSAnLi4vLi4vZGlyZWN0aXZlcydcblxuLy8gU2VydmljZXNcbmltcG9ydCB7IGJyZWFrcG9pbnRzIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvYnJlYWtwb2ludHMnXG5cbi8vIFV0aWxzXG5pbXBvcnQgeyB0aHJvdHRsZSB9IGZyb20gJy4uLy4uL3V0aWxzL3Rocm90dGxlJ1xuXG4vLyBUeXBlc1xuXG5pbnRlcmZhY2UgQXBwQnJlYWtwb2ludHMge1xuICBjdXJyZW50OiBNYXliZTwneGwnIHwgJ2xnJyB8ICdtZCcgfCAnc20nPlxuICB4bEFuZExlc3M6IGJvb2xlYW5cbiAgbGdBbmRMZXNzOiBib29sZWFuXG4gIG1kQW5kTGVzczogYm9vbGVhblxuICBzbUFuZExlc3M6IGJvb2xlYW5cbn1cblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtYXBwJyxcbiAgZGlyZWN0aXZlczoge1xuICAgIHJlc2l6ZSxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBnbG9iYWw6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgfSxcbiAgfSxcbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSkge1xuICAgIGNvbnN0IFRJTUVPVVQgPSA0MFxuXG4gICAgY29uc3Qgc3RhdGUgPSByZWFjdGl2ZTxBcHBCcmVha3BvaW50cz4oe1xuICAgICAgY3VycmVudDogbnVsbCxcbiAgICAgIHhsQW5kTGVzczogZmFsc2UsXG4gICAgICBsZ0FuZExlc3M6IGZhbHNlLFxuICAgICAgbWRBbmRMZXNzOiBmYWxzZSxcbiAgICAgIHNtQW5kTGVzczogZmFsc2UsXG4gICAgfSlcblxuICAgIHByb3ZpZGUoJyR2X2JyZWFrcG9pbnRzJywgc3RhdGUpXG5cbiAgICBjb25zdCBzZXRDdXJyZW50QnJlYWtwb2ludCA9IChzY3JlZW4pID0+IHtcbiAgICAgIGlmIChzY3JlZW4gPj0gYnJlYWtwb2ludHMueGwpIHtcbiAgICAgICAgcmV0dXJuIChzdGF0ZS5jdXJyZW50ID0gJ3hsJylcbiAgICAgIH1cbiAgICAgIGlmIChzY3JlZW4gPj0gYnJlYWtwb2ludHMubGcgJiYgc2NyZWVuIDwgYnJlYWtwb2ludHMueGwpIHtcbiAgICAgICAgcmV0dXJuIChzdGF0ZS5jdXJyZW50ID0gJ2xnJylcbiAgICAgIH1cbiAgICAgIGlmIChzY3JlZW4gPj0gYnJlYWtwb2ludHMubWQgJiYgc2NyZWVuIDwgYnJlYWtwb2ludHMubGcpIHtcbiAgICAgICAgcmV0dXJuIChzdGF0ZS5jdXJyZW50ID0gJ21kJylcbiAgICAgIH1cbiAgICAgIGlmIChzY3JlZW4gPj0gYnJlYWtwb2ludHMuc20gJiYgc2NyZWVuIDwgYnJlYWtwb2ludHMubWQpIHtcbiAgICAgICAgcmV0dXJuIChzdGF0ZS5jdXJyZW50ID0gJ3NtJylcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIChzdGF0ZS5jdXJyZW50ID0gJ3NtJylcbiAgICB9XG5cbiAgICBjb25zdCBzZXRJbnRlcnZhbHMgPSAoc2NyZWVuKSA9PiB7XG4gICAgICBjb25zdCB7IHhsLCBsZywgbWQsIHNtIH0gPSBicmVha3BvaW50c1xuXG4gICAgICBzdGF0ZS54bEFuZExlc3MgPSBzY3JlZW4gPD0geGwgJiYgc2NyZWVuID4gbGdcbiAgICAgIHN0YXRlLmxnQW5kTGVzcyA9IHNjcmVlbiA8PSBsZyAmJiBzY3JlZW4gPiBtZFxuICAgICAgc3RhdGUubWRBbmRMZXNzID0gc2NyZWVuIDw9IG1kICYmIHNjcmVlbiA+IHNtXG4gICAgICBzdGF0ZS5zbUFuZExlc3MgPSBzY3JlZW4gPD0gc21cbiAgICB9XG5cbiAgICBjb25zdCBzZXRTaXplcyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHsgaW5uZXJXaWR0aCB9ID0gcHJvcHMuZ2xvYmFsIHx8IHdpbmRvd1xuXG4gICAgICBzZXRDdXJyZW50QnJlYWtwb2ludChpbm5lcldpZHRoKVxuICAgICAgc2V0SW50ZXJ2YWxzKGlubmVyV2lkdGgpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQXBwV3JhcHBlciA9ICgpID0+IHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7IGNsYXNzOiAndi1hcHAtLXdyYXBwZXInIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCksXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IHRocm90dGxlZFJlc2l6ZUxpc3RlbmVyID0gdGhyb3R0bGUoc2V0U2l6ZXMsIFRJTUVPVVQpXG5cbiAgICBvbk1vdW50ZWQoKCkgPT4gc2V0U2l6ZXMoKSlcblxuICAgIHJldHVybiAoKSA9PlxuICAgICAgd2l0aERpcmVjdGl2ZXMoXG4gICAgICAgIGgoJ2RpdicsIHsgY2xhc3M6ICd2LWFwcCcgfSwgZ2VuQXBwV3JhcHBlcigpKSxcbiAgICAgICAgWyBbIHJlc2l6ZSwgdGhyb3R0bGVkUmVzaXplTGlzdGVuZXIgXSBdLFxuICAgICAgKVxuICB9LFxufSlcbiJdfQ==