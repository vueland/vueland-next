import { h, inject, computed, defineComponent } from 'vue';
import { genTableRows } from './helpers';
export const VDatePickerMonths = defineComponent({
    name: 'v-date-picker-months',
    props: {
        lang: {
            type: String,
            default: 'en',
        },
        month: [String, Number],
        year: [String, Number],
        locale: Array,
    },
    emits: ['update:month', 'update:year'],
    setup(props, { emit }) {
        const CELLS_IN_ROW = 3;
        const MONTHS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
        const CURRENT_MONTH = new Date().getMonth();
        const handlers = inject('handlers');
        handlers.value = {
            onNext: () => updateYear(true),
            onPrev: () => updateYear(false),
        };
        const computedMonth = computed({
            get() {
                return props.month !== undefined ? +props.month : CURRENT_MONTH;
            },
            set(val) {
                emit('update:month', val);
            },
        });
        const updateYear = (isNext) => {
            const year = +props.year + (isNext ? 1 : -1);
            emit('update:year', year);
        };
        const genMonthCell = (month) => {
            const isSelected = month === computedMonth.value;
            const propsData = {
                class: {
                    'v-date-picker-months__cell': true,
                    'v-date-picker-months__cell--selected': isSelected,
                    'v-date-picker-months__cell--current-month': month === CURRENT_MONTH,
                },
                onClick: () => (computedMonth.value = month),
            };
            return h('div', propsData, props.locale[month]);
        };
        const genMonthRows = () => {
            const monthsVNodes = MONTHS.map(genMonthCell);
            return genTableRows(monthsVNodes, 'v-date-picker-months__row', CELLS_IN_ROW);
        };
        return () => {
            const propsData = {
                class: 'v-date-picker-months',
            };
            return h('div', propsData, genMonthRows());
        };
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkRhdGVQaWNrZXJNb250aHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy92dWVsYW5kL3NyYy9jb21wb25lbnRzL1ZEYXRlUGlja2VyL1ZEYXRlUGlja2VyTW9udGhzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsTUFBTSxLQUFLLENBQUE7QUFHMUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQU14QyxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxlQUFlLENBQUM7SUFDL0MsSUFBSSxFQUFFLHNCQUFzQjtJQUU1QixLQUFLLEVBQUU7UUFDTCxJQUFJLEVBQUU7WUFDSixJQUFJLEVBQUUsTUFBTTtZQUNaLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7UUFDRCxLQUFLLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO1FBQ3ZCLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7UUFDdEIsTUFBTSxFQUFFLEtBQUs7S0FDUDtJQUVSLEtBQUssRUFBRSxDQUFDLGNBQWMsRUFBRSxhQUFhLENBQUM7SUFFdEMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRTtRQUNuQixNQUFNLFlBQVksR0FBRyxDQUFDLENBQUE7UUFDdEIsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO1FBQ3JELE1BQU0sYUFBYSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUE7UUFFM0MsTUFBTSxRQUFRLEdBQVEsTUFBTSxDQUFDLFVBQVUsQ0FBMEIsQ0FBQTtRQUVqRSxRQUFRLENBQUMsS0FBSyxHQUFHO1lBQ2YsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7WUFDOUIsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7U0FDaEMsQ0FBQTtRQUVELE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBUztZQUNyQyxHQUFHO2dCQUNELE9BQU8sS0FBSyxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFBO1lBQ2pFLENBQUM7WUFDRCxHQUFHLENBQUMsR0FBRztnQkFDTCxJQUFJLENBQUMsY0FBYyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1lBQzNCLENBQUM7U0FDRixDQUFDLENBQUE7UUFFRixNQUFNLFVBQVUsR0FBRyxDQUFDLE1BQWUsRUFBRSxFQUFFO1lBQ3JDLE1BQU0sSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQzVDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDM0IsQ0FBQyxDQUFBO1FBRUQsTUFBTSxZQUFZLEdBQUcsQ0FBQyxLQUFLLEVBQVMsRUFBRTtZQUNwQyxNQUFNLFVBQVUsR0FBRyxLQUFLLEtBQUssYUFBYSxDQUFDLEtBQUssQ0FBQTtZQUNoRCxNQUFNLFNBQVMsR0FBRztnQkFDaEIsS0FBSyxFQUFFO29CQUNMLDRCQUE0QixFQUFFLElBQUk7b0JBQ2xDLHNDQUFzQyxFQUFFLFVBQVU7b0JBQ2xELDJDQUEyQyxFQUFFLEtBQUssS0FBSyxhQUFhO2lCQUNyRTtnQkFDRCxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQzthQUM3QyxDQUFBO1lBRUQsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7UUFDakQsQ0FBQyxDQUFBO1FBRUQsTUFBTSxZQUFZLEdBQUcsR0FBWSxFQUFFO1lBQ2pDLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUE7WUFFN0MsT0FBTyxZQUFZLENBQ2pCLFlBQVksRUFDWiwyQkFBMkIsRUFDM0IsWUFBWSxDQUNiLENBQUE7UUFDSCxDQUFDLENBQUE7UUFFRCxPQUFPLEdBQUcsRUFBRTtZQUNWLE1BQU0sU0FBUyxHQUFHO2dCQUNoQixLQUFLLEVBQUUsc0JBQXNCO2FBQzlCLENBQUE7WUFFRCxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUE7UUFDNUMsQ0FBQyxDQUFBO0lBQ0gsQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGgsIGluamVjdCwgY29tcHV0ZWQsIGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSdcblxuLy8gSGVscGVyc1xuaW1wb3J0IHsgZ2VuVGFibGVSb3dzIH0gZnJvbSAnLi9oZWxwZXJzJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyBEYXRlUGlja2VyQnRuSGFuZGxlcnMgfSBmcm9tICcuLi8uLi8uLi90eXBlcydcblxuZXhwb3J0IGNvbnN0IFZEYXRlUGlja2VyTW9udGhzID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtZGF0ZS1waWNrZXItbW9udGhzJyxcblxuICBwcm9wczoge1xuICAgIGxhbmc6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdlbicsXG4gICAgfSxcbiAgICBtb250aDogW1N0cmluZywgTnVtYmVyXSxcbiAgICB5ZWFyOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgIGxvY2FsZTogQXJyYXksXG4gIH0gYXMgYW55LFxuXG4gIGVtaXRzOiBbJ3VwZGF0ZTptb250aCcsICd1cGRhdGU6eWVhciddLFxuXG4gIHNldHVwKHByb3BzLCB7IGVtaXQgfSkge1xuICAgIGNvbnN0IENFTExTX0lOX1JPVyA9IDNcbiAgICBjb25zdCBNT05USFMgPSBbMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExXVxuICAgIGNvbnN0IENVUlJFTlRfTU9OVEggPSBuZXcgRGF0ZSgpLmdldE1vbnRoKClcblxuICAgIGNvbnN0IGhhbmRsZXJzOiBhbnkgPSBpbmplY3QoJ2hhbmRsZXJzJykgYXMgRGF0ZVBpY2tlckJ0bkhhbmRsZXJzXG5cbiAgICBoYW5kbGVycy52YWx1ZSA9IHtcbiAgICAgIG9uTmV4dDogKCkgPT4gdXBkYXRlWWVhcih0cnVlKSxcbiAgICAgIG9uUHJldjogKCkgPT4gdXBkYXRlWWVhcihmYWxzZSksXG4gICAgfVxuXG4gICAgY29uc3QgY29tcHV0ZWRNb250aCA9IGNvbXB1dGVkPG51bWJlcj4oe1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gcHJvcHMubW9udGggIT09IHVuZGVmaW5lZCA/ICtwcm9wcy5tb250aCA6IENVUlJFTlRfTU9OVEhcbiAgICAgIH0sXG4gICAgICBzZXQodmFsKSB7XG4gICAgICAgIGVtaXQoJ3VwZGF0ZTptb250aCcsIHZhbClcbiAgICAgIH0sXG4gICAgfSlcblxuICAgIGNvbnN0IHVwZGF0ZVllYXIgPSAoaXNOZXh0OiBib29sZWFuKSA9PiB7XG4gICAgICBjb25zdCB5ZWFyID0gK3Byb3BzLnllYXIgKyAoaXNOZXh0ID8gMSA6IC0xKVxuICAgICAgZW1pdCgndXBkYXRlOnllYXInLCB5ZWFyKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbk1vbnRoQ2VsbCA9IChtb250aCk6IFZOb2RlID0+IHtcbiAgICAgIGNvbnN0IGlzU2VsZWN0ZWQgPSBtb250aCA9PT0gY29tcHV0ZWRNb250aC52YWx1ZVxuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LWRhdGUtcGlja2VyLW1vbnRoc19fY2VsbCc6IHRydWUsXG4gICAgICAgICAgJ3YtZGF0ZS1waWNrZXItbW9udGhzX19jZWxsLS1zZWxlY3RlZCc6IGlzU2VsZWN0ZWQsXG4gICAgICAgICAgJ3YtZGF0ZS1waWNrZXItbW9udGhzX19jZWxsLS1jdXJyZW50LW1vbnRoJzogbW9udGggPT09IENVUlJFTlRfTU9OVEgsXG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IChjb21wdXRlZE1vbnRoLnZhbHVlID0gbW9udGgpLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBwcm9wcy5sb2NhbGVbbW9udGhdKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbk1vbnRoUm93cyA9ICgpOiBWTm9kZVtdID0+IHtcbiAgICAgIGNvbnN0IG1vbnRoc1ZOb2RlcyA9IE1PTlRIUy5tYXAoZ2VuTW9udGhDZWxsKVxuXG4gICAgICByZXR1cm4gZ2VuVGFibGVSb3dzKFxuICAgICAgICBtb250aHNWTm9kZXMsXG4gICAgICAgICd2LWRhdGUtcGlja2VyLW1vbnRoc19fcm93JyxcbiAgICAgICAgQ0VMTFNfSU5fUk9XXG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6ICd2LWRhdGUtcGlja2VyLW1vbnRocycsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIGdlbk1vbnRoUm93cygpKVxuICAgIH1cbiAgfSxcbn0pXG4iXX0=