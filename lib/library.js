import { ref, unref } from 'vue';
import lightTheme from './styles/scss/modules/_theme.module.scss';
export class Vueland {
    theme;
    icons;
    constructor() {
        this.icons = null;
        this.theme = ref(lightTheme);
    }
    install(app, args = {}) {
        if (this.install.installed)
            return;
        this.install.installed = true;
        const { components, directives } = args;
        for (const key in components) {
            if (components[key]) {
                app.component(key, components[key]);
            }
        }
        for (const key in directives) {
            if (directives[key]) {
                app.directive(key, directives[key]);
            }
        }
        app.provide('$v', this);
        app.provide('$v_theme', this.theme);
        app.provide('$v_icons', this.icons);
    }
    setTheme(theme) {
        if (typeof document === 'undefined') {
            return;
        }
        const root = document.documentElement;
        this.theme.value = Object.assign(unref(this.theme) || {}, theme);
        Object.keys(unref(this.theme)).forEach(key => {
            root.style.setProperty(`--${key}`, unref(this.theme)[key]);
        });
    }
    setIcons(icons) {
        this.icons = icons;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlicmFyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL3Z1ZWxhbmQvc3JjL2xpYnJhcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFPLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxLQUFLLENBQUE7QUFLckMsT0FBTyxVQUFVLE1BQU0sMENBQTBDLENBQUE7QUFFakUsTUFBTSxPQUFPLE9BQU87SUFDbEIsS0FBSyxDQUFrQztJQUN2QyxLQUFLLENBQTZCO0lBRWxDO1FBQ0UsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUE7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDOUIsQ0FBQztJQUVELE9BQU8sQ0FBQyxHQUFRLEVBQUUsT0FBWSxFQUFFO1FBQzlCLElBQUssSUFBSSxDQUFDLE9BQWUsQ0FBQyxTQUFTO1lBQUUsT0FBTTtRQUUxQyxJQUFJLENBQUMsT0FBZSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUE7UUFFdEMsTUFBTSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsR0FBRyxJQUFJLENBQUE7UUFFdkMsS0FBSyxNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUU7WUFDNUIsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ25CLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO2FBQ3BDO1NBQ0Y7UUFFRCxLQUFLLE1BQU0sR0FBRyxJQUFJLFVBQVUsRUFBRTtZQUM1QixJQUFJLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDbkIsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7YUFDcEM7U0FDRjtRQUVELEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQ3ZCLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUNuQyxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDckMsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUEyQjtRQUNsQyxJQUFJLE9BQU8sUUFBUSxLQUFLLFdBQVcsRUFBRTtZQUNuQyxPQUFNO1NBQ1A7UUFFRCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFBO1FBRXJDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFFaEUsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzVDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQU0sR0FBSSxFQUFFLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO1FBQy9ELENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUEyQjtRQUNsQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtJQUNwQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUeXBlc1xuaW1wb3J0IHsgUmVmLCByZWYsIHVucmVmIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgTGlicmFyeSwgVXNlck9wdGlvbnMgfSBmcm9tICcuL3R5cGVzJ1xuaW1wb3J0IHsgQXBwIH0gZnJvbSAndnVlJ1xuXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgbGlnaHRUaGVtZSBmcm9tICcuL3N0eWxlcy9zY3NzL21vZHVsZXMvX3RoZW1lLm1vZHVsZS5zY3NzJ1xuXG5leHBvcnQgY2xhc3MgVnVlbGFuZCBpbXBsZW1lbnRzIExpYnJhcnkge1xuICB0aGVtZTogUmVmPE1heWJlPFVzZXJPcHRpb25zWyd0aGVtZSddPj5cbiAgaWNvbnM6IE1heWJlPFVzZXJPcHRpb25zWydpY29ucyddPlxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaWNvbnMgPSBudWxsXG4gICAgdGhpcy50aGVtZSA9IHJlZihsaWdodFRoZW1lKVxuICB9XG5cbiAgaW5zdGFsbChhcHA6IEFwcCwgYXJnczogYW55ID0ge30pIHtcbiAgICBpZiAoKHRoaXMuaW5zdGFsbCBhcyBhbnkpLmluc3RhbGxlZCkgcmV0dXJuXG5cbiAgICAodGhpcy5pbnN0YWxsIGFzIGFueSkuaW5zdGFsbGVkID0gdHJ1ZVxuXG4gICAgY29uc3QgeyBjb21wb25lbnRzLCBkaXJlY3RpdmVzIH0gPSBhcmdzXG5cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBjb21wb25lbnRzKSB7XG4gICAgICBpZiAoY29tcG9uZW50c1trZXldKSB7XG4gICAgICAgIGFwcC5jb21wb25lbnQoa2V5LCBjb21wb25lbnRzW2tleV0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBrZXkgaW4gZGlyZWN0aXZlcykge1xuICAgICAgaWYgKGRpcmVjdGl2ZXNba2V5XSkge1xuICAgICAgICBhcHAuZGlyZWN0aXZlKGtleSwgZGlyZWN0aXZlc1trZXldKVxuICAgICAgfVxuICAgIH1cblxuICAgIGFwcC5wcm92aWRlKCckdicsIHRoaXMpXG4gICAgYXBwLnByb3ZpZGUoJyR2X3RoZW1lJywgdGhpcy50aGVtZSlcbiAgICBhcHAucHJvdmlkZSgnJHZfaWNvbnMnLCB0aGlzLmljb25zKVxuICB9XG5cbiAgc2V0VGhlbWUodGhlbWU6IFVzZXJPcHRpb25zWyd0aGVtZSddKSB7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHJvb3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRcblxuICAgIHRoaXMudGhlbWUudmFsdWUgPSBPYmplY3QuYXNzaWduKHVucmVmKHRoaXMudGhlbWUpIHx8IHt9LCB0aGVtZSlcblxuICAgIE9iamVjdC5rZXlzKHVucmVmKHRoaXMudGhlbWUpISkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgcm9vdC5zdHlsZS5zZXRQcm9wZXJ0eShgLS0keyBrZXkgfWAsIHVucmVmKHRoaXMudGhlbWUpIVtrZXldKVxuICAgIH0pXG4gIH1cblxuICBzZXRJY29ucyhpY29uczogVXNlck9wdGlvbnNbJ2ljb25zJ10pIHtcbiAgICB0aGlzLmljb25zID0gaWNvbnNcbiAgfVxufVxuIl19