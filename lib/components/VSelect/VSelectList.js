import { defineComponent, h, computed } from 'vue';
import { VList, VListItem, VListItemTitle } from '../VList';
import { getStringKeysValue } from '../../helpers';
export const VSelectList = defineComponent({
    name: 'v-select-list',
    props: {
        items: {
            type: Array,
            default: null,
        },
        color: {
            type: String,
            default: '#ffffff',
        },
        textColor: {
            type: String,
            default: '',
        },
        valueKey: {
            type: String,
            default: '',
        },
        selected: {
            type: [String, Number, Object],
            default: null,
        },
        activeClass: {
            type: String,
            default: '',
        }
    },
    emits: ['select'],
    setup(props, { emit }) {
        const computedSelect = computed({
            get() {
                const key = props.valueKey;
                const selectedValue = key ? props.selected ? getStringKeysValue(key, props.selected) : null : props.selected;
                return props.selected ? props.items.findIndex((it) => {
                    const itemValue = key ? getStringKeysValue(key, it) : it;
                    return itemValue === selectedValue;
                }) : null;
            },
            set(val) {
                emit('select', props.items[val]);
            },
        });
        const genItems = () => {
            return props.items.reduce((acc, it, i) => {
                const content = props.valueKey ?
                    getStringKeysValue(props.valueKey, it) : it;
                acc.push(h(VListItem, { key: i }, {
                    default: () => h(VListItemTitle, {}, {
                        default: () => content,
                    }),
                }));
                return acc;
            }, []);
        };
        const genItemsList = () => {
            return h(VList, {
                value: computedSelect.value,
                active: true,
                activeClass: props.activeClass,
                ['onUpdate:value']: val => computedSelect.value = val,
            }, {
                default: () => genItems(),
            });
        };
        return () => h('div', {
            class: 'v-select-list',
        }, [props.items ? genItemsList() : null]);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVlNlbGVjdExpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy92dWVsYW5kL3NyYy9jb21wb25lbnRzL1ZTZWxlY3QvVlNlbGVjdExpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLE1BQU0sS0FBSyxDQUFBO0FBRWxELE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUUzRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFFbEQsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLGVBQWUsQ0FBQztJQUN6QyxJQUFJLEVBQUUsZUFBZTtJQUNyQixLQUFLLEVBQUU7UUFDTCxLQUFLLEVBQUU7WUFDTCxJQUFJLEVBQUUsS0FBSztZQUNYLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7UUFDRCxLQUFLLEVBQUU7WUFDTCxJQUFJLEVBQUUsTUFBTTtZQUNaLE9BQU8sRUFBRSxTQUFTO1NBQ25CO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsSUFBSSxFQUFFLE1BQU07WUFDWixPQUFPLEVBQUUsRUFBRTtTQUNaO1FBQ0QsUUFBUSxFQUFFO1lBQ1IsSUFBSSxFQUFFLE1BQU07WUFDWixPQUFPLEVBQUUsRUFBRTtTQUNaO1FBQ0QsUUFBUSxFQUFFO1lBQ1IsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUM7WUFDOUIsT0FBTyxFQUFFLElBQUk7U0FDZDtRQUNELFdBQVcsRUFBRTtZQUNYLElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLEVBQUU7U0FDWjtLQUNGO0lBQ0QsS0FBSyxFQUFFLENBQUMsUUFBUSxDQUFDO0lBQ2pCLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUU7UUFDbkIsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFnQjtZQUM3QyxHQUFHO2dCQUNELE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUE7Z0JBRTFCLE1BQU0sYUFBYSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQzdELEdBQUcsRUFDSCxLQUFLLENBQUMsUUFBUSxDQUNmLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQTtnQkFFekIsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFO29CQUNuRCxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO29CQUV4RCxPQUFPLFNBQVMsS0FBSyxhQUFhLENBQUE7Z0JBQ3BDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUE7WUFDWCxDQUFDO1lBRUQsR0FBRyxDQUFDLEdBQVc7Z0JBQ2IsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7WUFDbEMsQ0FBQztTQUNGLENBQUMsQ0FBQTtRQUVGLE1BQU0sUUFBUSxHQUFHLEdBQUcsRUFBRTtZQUNwQixPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDdkMsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO29CQUM5QixrQkFBa0IsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFTLENBQUE7Z0JBRW5ELEdBQWEsQ0FBQyxJQUFJLENBQ2pCLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQ3ZCLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUUsRUFBRTt3QkFDbkMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU87cUJBQ3ZCLENBQUM7aUJBQ0gsQ0FBQyxDQUFDLENBQUE7Z0JBRUwsT0FBTyxHQUFHLENBQUE7WUFDWixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7UUFDUixDQUFDLENBQUE7UUFFRCxNQUFNLFlBQVksR0FBRyxHQUFHLEVBQUU7WUFDeEIsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFO2dCQUNkLEtBQUssRUFBRSxjQUFjLENBQUMsS0FBZTtnQkFDckMsTUFBTSxFQUFFLElBQUk7Z0JBQ1osV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO2dCQUM5QixDQUFDLGdCQUFnQixDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsS0FBSyxHQUFHLEdBQUc7YUFDdEQsRUFBRTtnQkFDRCxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFO2FBQzFCLENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQTtRQUVELE9BQU8sR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRTtZQUNwQixLQUFLLEVBQUUsZUFBZTtTQUN2QixFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7SUFDM0MsQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaCwgY29tcHV0ZWQgfSBmcm9tICd2dWUnXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWTGlzdCwgVkxpc3RJdGVtLCBWTGlzdEl0ZW1UaXRsZSB9IGZyb20gJy4uL1ZMaXN0J1xuLy8gSGVscGVyc1xuaW1wb3J0IHsgZ2V0U3RyaW5nS2V5c1ZhbHVlIH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuZXhwb3J0IGNvbnN0IFZTZWxlY3RMaXN0ID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3Ytc2VsZWN0LWxpc3QnLFxuICBwcm9wczoge1xuICAgIGl0ZW1zOiB7XG4gICAgICB0eXBlOiBBcnJheSxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgfSxcbiAgICBjb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJyNmZmZmZmYnLFxuICAgIH0sXG4gICAgdGV4dENvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJyxcbiAgICB9LFxuICAgIHZhbHVlS2V5OiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJyxcbiAgICB9LFxuICAgIHNlbGVjdGVkOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXIsIE9iamVjdF0sXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gICAgYWN0aXZlQ2xhc3M6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnLFxuICAgIH1cbiAgfSxcbiAgZW1pdHM6IFsnc2VsZWN0J10sXG4gIHNldHVwKHByb3BzLCB7IGVtaXQgfSkge1xuICAgIGNvbnN0IGNvbXB1dGVkU2VsZWN0ID0gY29tcHV0ZWQ8TWF5YmU8bnVtYmVyPj4oe1xuICAgICAgZ2V0KCkge1xuICAgICAgICBjb25zdCBrZXkgPSBwcm9wcy52YWx1ZUtleVxuXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkVmFsdWUgPSBrZXkgPyBwcm9wcy5zZWxlY3RlZCA/IGdldFN0cmluZ0tleXNWYWx1ZShcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgcHJvcHMuc2VsZWN0ZWQsXG4gICAgICAgICkgOiBudWxsIDogcHJvcHMuc2VsZWN0ZWRcblxuICAgICAgICByZXR1cm4gcHJvcHMuc2VsZWN0ZWQgPyBwcm9wcy5pdGVtcy5maW5kSW5kZXgoKGl0KSA9PiB7XG4gICAgICAgICAgY29uc3QgaXRlbVZhbHVlID0ga2V5ID8gZ2V0U3RyaW5nS2V5c1ZhbHVlKGtleSwgaXQpIDogaXRcblxuICAgICAgICAgIHJldHVybiBpdGVtVmFsdWUgPT09IHNlbGVjdGVkVmFsdWVcbiAgICAgICAgfSkgOiBudWxsXG4gICAgICB9LFxuXG4gICAgICBzZXQodmFsOiBudW1iZXIpIHtcbiAgICAgICAgZW1pdCgnc2VsZWN0JywgcHJvcHMuaXRlbXNbdmFsXSlcbiAgICAgIH0sXG4gICAgfSlcblxuICAgIGNvbnN0IGdlbkl0ZW1zID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLml0ZW1zLnJlZHVjZSgoYWNjLCBpdCwgaSkgPT4ge1xuICAgICAgICBjb25zdCBjb250ZW50ID0gcHJvcHMudmFsdWVLZXkgP1xuICAgICAgICAgIGdldFN0cmluZ0tleXNWYWx1ZShwcm9wcy52YWx1ZUtleSwgaXQpIDogaXQgYXMgYW55XG5cbiAgICAgICAgKGFjYyBhcyBhbnlbXSkucHVzaChcbiAgICAgICAgICBoKFZMaXN0SXRlbSwgeyBrZXk6IGkgfSwge1xuICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gaChWTGlzdEl0ZW1UaXRsZSwge30sIHtcbiAgICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gY29udGVudCxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pKVxuXG4gICAgICAgIHJldHVybiBhY2NcbiAgICAgIH0sIFtdKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkl0ZW1zTGlzdCA9ICgpID0+IHtcbiAgICAgIHJldHVybiBoKFZMaXN0LCB7XG4gICAgICAgIHZhbHVlOiBjb21wdXRlZFNlbGVjdC52YWx1ZSBhcyBudW1iZXIsXG4gICAgICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICAgICAgYWN0aXZlQ2xhc3M6IHByb3BzLmFjdGl2ZUNsYXNzLFxuICAgICAgICBbJ29uVXBkYXRlOnZhbHVlJ106IHZhbCA9PiBjb21wdXRlZFNlbGVjdC52YWx1ZSA9IHZhbCxcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gZ2VuSXRlbXMoKSxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IGgoJ2RpdicsIHtcbiAgICAgIGNsYXNzOiAndi1zZWxlY3QtbGlzdCcsXG4gICAgfSwgW3Byb3BzLml0ZW1zID8gZ2VuSXRlbXNMaXN0KCkgOiBudWxsXSlcbiAgfSxcbn0pXG5cbiJdfQ==