import { h, computed, defineComponent } from 'vue';
import { colorProps, useColors } from '../../composables/use-colors';
import { convertToUnit } from '../../helpers';
import { VResize } from '../VResize';
export const VDataTableCell = defineComponent({
    name: 'v-data-table-cell',
    props: {
        dark: Boolean,
        resizeable: Boolean,
        align: {
            type: String,
            default: 'start',
        },
        width: {
            type: [String, Number],
            default: 75,
        },
        resizerColor: {
            type: String,
            default: 'primary',
        },
        contentColor: String,
        ...colorProps(),
    },
    emits: ['resize'],
    setup(props, { slots, emit }) {
        const { setTextClassNameColor, setTextCssColor, setBackgroundCssColor, setBackgroundClassNameColor, } = useColors();
        const classes = computed(() => ({
            'v-data-table__cell': true,
            ...(props.contentColor ? setTextClassNameColor(props.contentColor) : {}),
            ...(props.color ? setBackgroundClassNameColor(props.color) : {}),
        }));
        const styles = computed(() => ({
            width: convertToUnit(+props.width),
            ...(props.contentColor ? setTextCssColor(props.contentColor) : {}),
            ...(props.color ? setBackgroundCssColor(props.color) : {}),
        }));
        const genResize = () => {
            const propsData = {
                right: true,
                emit: true,
                color: props.resizerColor,
                onResize: ($size) => emit('resize', $size),
            };
            return h(VResize, propsData);
        };
        const genCellContent = () => {
            const propsData = {
                class: {
                    'v-data-table__cell-content': true,
                    [`text-align--${props.align}`]: !!props.align,
                },
            };
            return h('div', propsData, slots.default && slots.default());
        };
        return () => {
            const propsData = {
                class: classes.value,
                style: styles.value,
            };
            return h('div', propsData, [
                genCellContent(),
                props.resizeable && genResize(),
            ]);
        };
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkRhdGFUYWJsZUNlbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WRGF0YVRhYmxlL1ZEYXRhVGFibGVDZWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxNQUFNLEtBQUssQ0FBQTtBQUdsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLDhCQUE4QixDQUFBO0FBR3BFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFHN0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUtwQyxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsZUFBZSxDQUFDO0lBQzVDLElBQUksRUFBRSxtQkFBbUI7SUFDekIsS0FBSyxFQUFFO1FBQ0wsSUFBSSxFQUFFLE9BQU87UUFDYixVQUFVLEVBQUUsT0FBTztRQUNuQixLQUFLLEVBQUU7WUFDTCxJQUFJLEVBQUUsTUFBTTtZQUNaLE9BQU8sRUFBRSxPQUFPO1NBQ2pCO1FBQ0QsS0FBSyxFQUFFO1lBQ0wsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztZQUN0QixPQUFPLEVBQUUsRUFBRTtTQUNaO1FBQ0QsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFLE1BQU07WUFDWixPQUFPLEVBQUUsU0FBUztTQUNuQjtRQUNELFlBQVksRUFBRSxNQUFNO1FBQ3BCLEdBQUcsVUFBVSxFQUFFO0tBQ1Q7SUFFUixLQUFLLEVBQUUsQ0FBQyxRQUFRLENBQUM7SUFFakIsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7UUFDMUIsTUFBTSxFQUNKLHFCQUFxQixFQUNyQixlQUFlLEVBQ2YscUJBQXFCLEVBQ3JCLDJCQUEyQixHQUM1QixHQUFHLFNBQVMsRUFBRSxDQUFBO1FBRWYsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUEwQixHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZELG9CQUFvQixFQUFFLElBQUk7WUFDMUIsR0FBRyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ3hFLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQywyQkFBMkIsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUNqRSxDQUFDLENBQUMsQ0FBQTtRQUVILE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQzdCLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQ2xDLEdBQUcsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDbEUsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1NBQzNELENBQUMsQ0FBQyxDQUFBO1FBRUgsTUFBTSxTQUFTLEdBQUcsR0FBVSxFQUFFO1lBQzVCLE1BQU0sU0FBUyxHQUFHO2dCQUNoQixLQUFLLEVBQUUsSUFBSTtnQkFDWCxJQUFJLEVBQUUsSUFBSTtnQkFDVixLQUFLLEVBQUUsS0FBSyxDQUFDLFlBQVk7Z0JBQ3pCLFFBQVEsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUM7YUFDM0MsQ0FBQTtZQUVELE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQTtRQUM5QixDQUFDLENBQUE7UUFFRCxNQUFNLGNBQWMsR0FBRyxHQUFVLEVBQUU7WUFDakMsTUFBTSxTQUFTLEdBQUc7Z0JBQ2hCLEtBQUssRUFBRTtvQkFDTCw0QkFBNEIsRUFBRSxJQUFJO29CQUNsQyxDQUFDLGVBQWdCLEtBQUssQ0FBQyxLQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSztpQkFDaEQ7YUFDRixDQUFBO1lBRUQsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFBO1FBQzlELENBQUMsQ0FBQTtRQUVELE9BQU8sR0FBRyxFQUFFO1lBQ1YsTUFBTSxTQUFTLEdBQUc7Z0JBQ2hCLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSztnQkFDcEIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLO2FBQ3BCLENBQUE7WUFFRCxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO2dCQUN6QixjQUFjLEVBQUU7Z0JBQ2hCLEtBQUssQ0FBQyxVQUFVLElBQUksU0FBUyxFQUFFO2FBQ2hDLENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQTtJQUNILENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBWdWUgQVBJXG5pbXBvcnQgeyBoLCBjb21wdXRlZCwgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJ1xuXG4vLyBFZmZlY3RzXG5pbXBvcnQgeyBjb2xvclByb3BzLCB1c2VDb2xvcnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy91c2UtY29sb3JzJ1xuXG4vLyBIZWxwZXJzXG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0IH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVlJlc2l6ZSB9IGZyb20gJy4uL1ZSZXNpemUnXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gJ3Z1ZSdcblxuZXhwb3J0IGNvbnN0IFZEYXRhVGFibGVDZWxsID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtZGF0YS10YWJsZS1jZWxsJyxcbiAgcHJvcHM6IHtcbiAgICBkYXJrOiBCb29sZWFuLFxuICAgIHJlc2l6ZWFibGU6IEJvb2xlYW4sXG4gICAgYWxpZ246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdzdGFydCcsXG4gICAgfSxcbiAgICB3aWR0aDoge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IDc1LFxuICAgIH0sXG4gICAgcmVzaXplckNvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAncHJpbWFyeScsXG4gICAgfSxcbiAgICBjb250ZW50Q29sb3I6IFN0cmluZyxcbiAgICAuLi5jb2xvclByb3BzKCksXG4gIH0gYXMgYW55LFxuXG4gIGVtaXRzOiBbJ3Jlc2l6ZSddLFxuXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzLCBlbWl0IH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3Qge1xuICAgICAgc2V0VGV4dENsYXNzTmFtZUNvbG9yLFxuICAgICAgc2V0VGV4dENzc0NvbG9yLFxuICAgICAgc2V0QmFja2dyb3VuZENzc0NvbG9yLFxuICAgICAgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yLFxuICAgIH0gPSB1c2VDb2xvcnMoKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtZGF0YS10YWJsZV9fY2VsbCc6IHRydWUsXG4gICAgICAuLi4ocHJvcHMuY29udGVudENvbG9yID8gc2V0VGV4dENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbnRlbnRDb2xvcikgOiB7fSksXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgIHdpZHRoOiBjb252ZXJ0VG9Vbml0KCtwcm9wcy53aWR0aCksXG4gICAgICAuLi4ocHJvcHMuY29udGVudENvbG9yID8gc2V0VGV4dENzc0NvbG9yKHByb3BzLmNvbnRlbnRDb2xvcikgOiB7fSksXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3QgZ2VuUmVzaXplID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgcmlnaHQ6IHRydWUsXG4gICAgICAgIGVtaXQ6IHRydWUsXG4gICAgICAgIGNvbG9yOiBwcm9wcy5yZXNpemVyQ29sb3IsXG4gICAgICAgIG9uUmVzaXplOiAoJHNpemUpID0+IGVtaXQoJ3Jlc2l6ZScsICRzaXplKSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoVlJlc2l6ZSwgcHJvcHNEYXRhKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkNlbGxDb250ZW50ID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1kYXRhLXRhYmxlX19jZWxsLWNvbnRlbnQnOiB0cnVlLFxuICAgICAgICAgIFtgdGV4dC1hbGlnbi0tJHsgcHJvcHMuYWxpZ24gfWBdOiAhIXByb3BzLmFsaWduLFxuICAgICAgICB9LFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKSlcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgc3R5bGU6IHN0eWxlcy52YWx1ZSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgW1xuICAgICAgICBnZW5DZWxsQ29udGVudCgpLFxuICAgICAgICBwcm9wcy5yZXNpemVhYmxlICYmIGdlblJlc2l6ZSgpLFxuICAgICAgXSlcbiAgICB9XG4gIH0sXG59KVxuIl19