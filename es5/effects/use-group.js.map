{"version":3,"sources":["../../../src/effects/use-group.ts"],"names":[],"mappings":";;;;;;;AAAA;;;;;;;;AAIM,SAAU,QAAV,GAAkB;AACtB,MAAM,YAAY,GAAG,SAAf,YAAe,CAAC,SAAD,EAAoC;AAAA,QAAhB,OAAgB,uEAAN,EAAM;AACvD,QAAM,MAAM,GAAG,cAAa,EAAb,CAAf;AAEA,IAAA,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,OAArB,CAA6B,UAAC,GAAD,EAAQ;AACnC,UAAI,KAAJ;;AAEA,UAAI,OAAO,OAAO,CAAC,GAAD,CAAd,KAAwB,UAA5B,EAAwC;AACtC,QAAA,KAAK,GAAG,OAAO,CAAC,GAAD,CAAP,CAAa,IAAb,CAAkB,IAAlB,EAAwB,MAAxB,CAAR;AACD,OAFD,MAEO;AACL,QAAA,KAAK,GAAG,OAAO,CAAC,GAAD,CAAf;AACD;;AAED,MAAA,MAAM,CAAC,cAAP,CAAsB,OAAtB,EAA+B,GAA/B,EAAoC;AAAE,QAAA,KAAK,EAAL;AAAF,OAApC;AACD,KAVD;AAYA,sBAAQ,SAAR;AACE,MAAA,MAAM,EAAN;AADF,OAEK,OAFL;AAID,GAnBD;;AAqBA,MAAM,WAAW,GAAG,SAAd,WAAc,CAAC,SAAD,EAAsB;AACxC,QAAI,QAAQ,GAAQ,EAApB;AAEA,IAAA,QAAQ,GAAG,iBAAO,SAAP,KAAqB,IAAhC;;AAEA,QAAM,QAAQ,GAAG,SAAX,QAAW,CAAC,KAAD,EAAiB;AAChC,MAAA,QAAQ,CAAC,MAAT,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,KAA3B;AACD,KAFD;;AAIA,QAAM,UAAU,GAAG,SAAb,UAAa,CAAC,KAAD,EAAiB;AAClC,MAAA,QAAQ,CAAC,MAAT,CAAgB,KAAhB,CAAsB,MAAtB,CAA6B,UAAC,EAAD,EAAO;AAClC,eAAO,EAAE,CAAC,GAAH,KAAW,KAAK,CAAC,GAAxB;AACD,OAFD;AAGD,KAJD;;AAMA,QAAI,QAAJ,EAAc;AACZ,6CACK,QADL;AAEE,QAAA,QAAQ,EAAR,QAFF;AAGE,QAAA,UAAU,EAAV;AAHF;AAKD;;AAED,WAAO,IAAP;AACD,GAxBD;;AA0BA,SAAO;AACL,IAAA,YAAY,EAAZ,YADK;AAEL,IAAA,WAAW,EAAX;AAFK,GAAP;AAID","sourcesContent":["import { provide, inject, ref } from 'vue'\n\nimport { Group } from '../../types'\n\nexport function useGroup() {\n  const provideGroup = (groupName: string, options = {}) => {\n    const groups = ref<Group[]>([])\n\n    Object.keys(options).forEach((key) => {\n      let value\n\n      if (typeof options[key] === 'function') {\n        value = options[key].bind(null, groups)\n      } else {\n        value = options[key]\n      }\n\n      Object.defineProperty(options, key, { value })\n    })\n\n    provide(groupName, {\n      groups,\n      ...options,\n    })\n  }\n\n  const injectGroup = (groupName: string) => {\n    let injected: any = {}\n\n    injected = inject(groupName) || null\n\n    const register = (group: Group) => {\n      injected.groups.value.push(group)\n    }\n\n    const unregister = (group: Group) => {\n      injected.groups.value.filter((it) => {\n        return it.ref !== group.ref\n      })\n    }\n\n    if (injected) {\n      return {\n        ...injected,\n        register,\n        unregister,\n      }\n    }\n\n    return null\n  }\n\n  return {\n    provideGroup,\n    injectGroup,\n  }\n}\n"],"sourceRoot":"","file":"use-group.js"}