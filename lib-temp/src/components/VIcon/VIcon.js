import { defineComponent, h, computed } from 'vue';
import { useColors, colorProps } from '../../composable/use-colors';
import { sizeProps } from '../../composable/use-size';
import { convertToUnit } from '../../helpers';
import { sizes } from '../../services/sizes';
export const VIcon = defineComponent({
    name: 'v-icon',
    props: {
        disabled: Boolean,
        clickable: Boolean,
        size: [String, Number],
        icon: String,
        tag: {
            type: String,
            default: 'i',
        },
        ...colorProps(),
        ...sizeProps('sm'),
    },
    emits: ['click'],
    setup(props, { slots, emit }) {
        const { setTextCssColor, setTextClassNameColor } = useColors();
        const iconTag = props.clickable ? 'button' : props.tag;
        const computedIcon = computed(() => {
            return (props.icon ||
                (slots.default && slots.default()[0].children))?.trim();
        });
        const classes = computed(() => ({
            'v-icon': true,
            'v-icon--disabled': props.disabled,
            'v-icon--clickable': props.clickable,
            [computedIcon.value]: !!computedIcon.value,
            ...(props.color ? setTextClassNameColor(props.color) : {}),
        }));
        const styles = computed(() => ({
            fontSize: getSizes(),
            ...(props.color ? setTextCssColor(props.color) : {}),
        }));
        const getSizes = () => {
            const sizeProps = {
                sm: props.sm,
                md: props.md,
                lg: props.lg,
                xl: props.xl,
            };
            const explicitSize = Object.keys(sizeProps).find((key) => sizeProps[key]);
            return convertToUnit((explicitSize && sizes[explicitSize]) || props.size);
        };
        const onClick = () => {
            if (!props.disabled && props.clickable)
                emit('click');
        };
        return () => h(iconTag, {
            class: classes.value,
            style: styles.value,
            onClick,
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkljb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WSWNvbi9WSWNvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxLQUFLLENBQUE7QUFHbEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQTtBQUNuRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMkJBQTJCLENBQUE7QUFHckQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQU03QyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFFNUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLGVBQWUsQ0FBQztJQUNuQyxJQUFJLEVBQUUsUUFBUTtJQUVkLEtBQUssRUFBRTtRQUNMLFFBQVEsRUFBRSxPQUFPO1FBQ2pCLFNBQVMsRUFBRSxPQUFPO1FBQ2xCLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7UUFDdEIsSUFBSSxFQUFFLE1BQU07UUFDWixHQUFHLEVBQUU7WUFDSCxJQUFJLEVBQUUsTUFBTTtZQUNaLE9BQU8sRUFBRSxHQUFHO1NBQ2I7UUFDRCxHQUFHLFVBQVUsRUFBRTtRQUNmLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQztLQUNaO0lBRVIsS0FBSyxFQUFFLENBQUMsT0FBTyxDQUFDO0lBRWhCLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO1FBQzFCLE1BQU0sRUFBRSxlQUFlLEVBQUUscUJBQXFCLEVBQUUsR0FBRyxTQUFTLEVBQUUsQ0FBQTtRQUM5RCxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUE7UUFFdEQsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFTLEdBQUcsRUFBRTtZQUN6QyxPQUFPLENBQ0wsS0FBSyxDQUFDLElBQUk7Z0JBQ1YsQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FDL0MsRUFBRSxJQUFJLEVBQUUsQ0FBQTtRQUNYLENBQUMsQ0FBQyxDQUFBO1FBRUYsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUEwQixHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZELFFBQVEsRUFBRSxJQUFJO1lBQ2Qsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDbEMsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDcEMsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxLQUFLO1lBQzFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUMzRCxDQUFDLENBQUMsQ0FBQTtRQUVILE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBeUIsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUNyRCxRQUFRLEVBQUUsUUFBUSxFQUFFO1lBQ3BCLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7U0FDckQsQ0FBQyxDQUFDLENBQUE7UUFFSCxNQUFNLFFBQVEsR0FBRyxHQUFXLEVBQUU7WUFDNUIsTUFBTSxTQUFTLEdBQUc7Z0JBQ2hCLEVBQUUsRUFBRSxLQUFLLENBQUMsRUFBRTtnQkFDWixFQUFFLEVBQUUsS0FBSyxDQUFDLEVBQUU7Z0JBQ1osRUFBRSxFQUFFLEtBQUssQ0FBQyxFQUFFO2dCQUNaLEVBQUUsRUFBRSxLQUFLLENBQUMsRUFBRTthQUNiLENBQUE7WUFDRCxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFFLENBQUE7WUFFMUUsT0FBTyxhQUFhLENBQUMsQ0FBQyxZQUFZLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksQ0FBRSxDQUFBO1FBQzVFLENBQUMsQ0FBQTtRQUVELE1BQU0sT0FBTyxHQUFHLEdBQUcsRUFBRTtZQUNuQixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsU0FBUztnQkFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDdkQsQ0FBQyxDQUFBO1FBRUQsT0FBTyxHQUFHLEVBQUUsQ0FDVixDQUFDLENBQUMsT0FBTyxFQUFFO1lBQ1QsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO1lBQ3BCLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSztZQUNuQixPQUFPO1NBQ1IsQ0FBQyxDQUFBO0lBQ04sQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaCwgY29tcHV0ZWQgfSBmcm9tICd2dWUnXG5cbi8vIENvbXBvc2FibGVcbmltcG9ydCB7IHVzZUNvbG9ycywgY29sb3JQcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcbmltcG9ydCB7IHNpemVQcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXNpemUnXG5cbi8vIEhlbHBlcnNcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tICd2dWUnXG5cbi8vIFNlcnZpY2VzXG5pbXBvcnQgeyBzaXplcyB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3NpemVzJ1xuXG5leHBvcnQgY29uc3QgVkljb24gPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1pY29uJyxcblxuICBwcm9wczoge1xuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIGNsaWNrYWJsZTogQm9vbGVhbixcbiAgICBzaXplOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgIGljb246IFN0cmluZyxcbiAgICB0YWc6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdpJyxcbiAgICB9LFxuICAgIC4uLmNvbG9yUHJvcHMoKSxcbiAgICAuLi5zaXplUHJvcHMoJ3NtJyksXG4gIH0gYXMgYW55LFxuXG4gIGVtaXRzOiBbJ2NsaWNrJ10sXG5cbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMsIGVtaXQgfSk6ICgpID0+IFZOb2RlIHtcbiAgICBjb25zdCB7IHNldFRleHRDc3NDb2xvciwgc2V0VGV4dENsYXNzTmFtZUNvbG9yIH0gPSB1c2VDb2xvcnMoKVxuICAgIGNvbnN0IGljb25UYWcgPSBwcm9wcy5jbGlja2FibGUgPyAnYnV0dG9uJyA6IHByb3BzLnRhZ1xuXG4gICAgY29uc3QgY29tcHV0ZWRJY29uID0gY29tcHV0ZWQ8c3RyaW5nPigoKSA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBwcm9wcy5pY29uIHx8XG4gICAgICAgIChzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKVswXS5jaGlsZHJlbilcbiAgICAgICk/LnRyaW0oKVxuICAgIH0pXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1pY29uJzogdHJ1ZSxcbiAgICAgICd2LWljb24tLWRpc2FibGVkJzogcHJvcHMuZGlzYWJsZWQsXG4gICAgICAndi1pY29uLS1jbGlja2FibGUnOiBwcm9wcy5jbGlja2FibGUsXG4gICAgICBbY29tcHV0ZWRJY29uLnZhbHVlXTogISFjb21wdXRlZEljb24udmFsdWUsXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgc3RyaW5nPj4oKCkgPT4gKHtcbiAgICAgIGZvbnRTaXplOiBnZXRTaXplcygpLFxuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0VGV4dENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IGdldFNpemVzID0gKCk6IHN0cmluZyA9PiB7XG4gICAgICBjb25zdCBzaXplUHJvcHMgPSB7XG4gICAgICAgIHNtOiBwcm9wcy5zbSxcbiAgICAgICAgbWQ6IHByb3BzLm1kLFxuICAgICAgICBsZzogcHJvcHMubGcsXG4gICAgICAgIHhsOiBwcm9wcy54bCxcbiAgICAgIH1cbiAgICAgIGNvbnN0IGV4cGxpY2l0U2l6ZSA9IE9iamVjdC5rZXlzKHNpemVQcm9wcykuZmluZCgoa2V5KSA9PiBzaXplUHJvcHNba2V5XSkhXG5cbiAgICAgIHJldHVybiBjb252ZXJ0VG9Vbml0KChleHBsaWNpdFNpemUgJiYgc2l6ZXNbZXhwbGljaXRTaXplXSkgfHwgcHJvcHMuc2l6ZSkhXG4gICAgfVxuXG4gICAgY29uc3Qgb25DbGljayA9ICgpID0+IHtcbiAgICAgIGlmICghcHJvcHMuZGlzYWJsZWQgJiYgcHJvcHMuY2xpY2thYmxlKSBlbWl0KCdjbGljaycpXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+XG4gICAgICBoKGljb25UYWcsIHtcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgIHN0eWxlOiBzdHlsZXMudmFsdWUsXG4gICAgICAgIG9uQ2xpY2ssXG4gICAgICB9KVxuICB9LFxufSlcbiJdfQ==