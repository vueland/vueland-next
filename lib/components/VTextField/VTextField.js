import { defineComponent, h, computed, ref } from 'vue';
import { VInput } from '../VInput';
import { useInputStates } from '../../composables/use-input-states';
import { validationProps } from '../../composables/use-validation';
export default defineComponent({
    name: 'v-text-field',
    components: {
        VInput,
    },
    inheritAttrs: true,
    props: {
        modelValue: {
            type: [String, Number],
            default: '',
        },
        ...validationProps(),
    },
    emits: ['update:modelValue', 'input', 'blur', 'focus', 'change'],
    setup(props, { emit, attrs }) {
        const inputRef = ref(null);
        const { isReadonly, isDisabled, onChange } = useInputStates(props, { emit, attrs });
        const classes = computed(() => ({
            'v-text-field': true,
            'v-text-field--disabled': isDisabled.value,
            'v-text-field--readonly': isReadonly.value,
        }));
        const computedValue = computed({
            get: () => props.modelValue,
            set: (val) => {
                emit('input', val);
                emit('update:modelValue', val);
            },
        });
        const onFocus = () => {
            inputRef.value.onFocus();
        };
        const onBlur = () => {
            inputRef.value.onBlur();
        };
        const onInput = (e) => {
            computedValue.value = e.target.value;
        };
        const genInputField = (textClassColor, textCssColor) => {
            return h('input', {
                class: {
                    'v-text-field__input': true,
                    ...(!attrs.disabled && textClassColor),
                },
                style: {
                    ...(!attrs.disabled ? textCssColor : {}),
                },
                disabled: attrs.disabled,
                type: attrs.type ? attrs.type : 'text',
                placeholder: attrs.placeholder,
                readonly: attrs.readonly,
                value: computedValue.value,
                onInput,
                onFocus,
                onBlur,
                onChange,
            });
        };
        const genTextFieldWrapper = (clsColor, cssColor) => {
            return h('div', {
                class: classes.value,
            }, genInputField(clsColor, cssColor));
        };
        return () => h(VInput, {
            value: computedValue.value,
            rules: props.rules,
            ref: inputRef
        }, {
            ['text-field']: ({ textClassColor, textCssColor }) => {
                return genTextFieldWrapper(textClassColor, textCssColor);
            },
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVlRleHRGaWVsZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZUZXh0RmllbGQvVlRleHRGaWVsZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLE1BQU0sS0FBSyxDQUFBO0FBRXZELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFFbEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9DQUFvQyxDQUFBO0FBQ25FLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQTtBQUVsRSxlQUFlLGVBQWUsQ0FBQztJQUM3QixJQUFJLEVBQUUsY0FBYztJQUNwQixVQUFVLEVBQUU7UUFDVixNQUFNO0tBQ1A7SUFDRCxZQUFZLEVBQUUsSUFBSTtJQUNsQixLQUFLLEVBQUU7UUFDTCxVQUFVLEVBQUU7WUFDVixJQUFJLEVBQUUsQ0FBRSxNQUFNLEVBQUUsTUFBTSxDQUFFO1lBQ3hCLE9BQU8sRUFBRSxFQUFFO1NBQ1o7UUFDRCxHQUFHLGVBQWUsRUFBRTtLQUNyQjtJQUNELEtBQUssRUFBRSxDQUFFLG1CQUFtQixFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBRTtJQUVsRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRTtRQUMxQixNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDMUIsTUFBTSxFQUNKLFVBQVUsRUFDVixVQUFVLEVBQ1YsUUFBUSxFQUNULEdBQUcsY0FBYyxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO1FBRTFDLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBMEIsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUN2RCxjQUFjLEVBQUUsSUFBSTtZQUNwQix3QkFBd0IsRUFBRSxVQUFVLENBQUMsS0FBSztZQUMxQyx3QkFBd0IsRUFBRSxVQUFVLENBQUMsS0FBSztTQUMzQyxDQUFDLENBQUMsQ0FBQTtRQUVILE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQztZQUM3QixHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVU7WUFFM0IsR0FBRyxFQUFFLENBQUMsR0FBVyxFQUFFLEVBQUU7Z0JBQ25CLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUE7Z0JBQ2xCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLENBQUMsQ0FBQTtZQUNoQyxDQUFDO1NBQ0YsQ0FBQyxDQUFBO1FBRUYsTUFBTSxPQUFPLEdBQUcsR0FBRyxFQUFFO1lBQ2xCLFFBQVEsQ0FBQyxLQUFjLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDcEMsQ0FBQyxDQUFBO1FBRUQsTUFBTSxNQUFNLEdBQUcsR0FBRyxFQUFFO1lBQ2pCLFFBQVEsQ0FBQyxLQUFjLENBQUMsTUFBTSxFQUFFLENBQUE7UUFDbkMsQ0FBQyxDQUFBO1FBRUQsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUNwQixhQUFhLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFBO1FBQ3RDLENBQUMsQ0FBQTtRQUVELE1BQU0sYUFBYSxHQUFHLENBQUMsY0FBYyxFQUFFLFlBQVksRUFBRSxFQUFFO1lBQ3JELE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRTtnQkFDaEIsS0FBSyxFQUFFO29CQUNMLHFCQUFxQixFQUFFLElBQUk7b0JBQzNCLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLElBQUksY0FBYyxDQUFDO2lCQUN2QztnQkFDRCxLQUFLLEVBQUU7b0JBQ0wsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7aUJBQ3pDO2dCQUNELFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtnQkFDeEIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU07Z0JBQ3RDLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztnQkFDOUIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO2dCQUN4QixLQUFLLEVBQUUsYUFBYSxDQUFDLEtBQUs7Z0JBQzFCLE9BQU87Z0JBQ1AsT0FBTztnQkFDUCxNQUFNO2dCQUNOLFFBQVE7YUFDVCxDQUFDLENBQUE7UUFDSixDQUFDLENBQUE7UUFFRCxNQUFNLG1CQUFtQixHQUFHLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxFQUFFO1lBQ2pELE9BQU8sQ0FBQyxDQUNOLEtBQUssRUFDTDtnQkFDRSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7YUFDckIsRUFDRCxhQUFhLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUNsQyxDQUFBO1FBQ0gsQ0FBQyxDQUFBO1FBRUQsT0FBTyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFO1lBQ3JCLEtBQUssRUFBRSxhQUFhLENBQUMsS0FBSztZQUMxQixLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDbEIsR0FBRyxFQUFFLFFBQVE7U0FDZCxFQUFFO1lBQ0QsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLEVBQUUsY0FBYyxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUU7Z0JBQ25ELE9BQU8sbUJBQW1CLENBQUMsY0FBYyxFQUFFLFlBQVksQ0FBQyxDQUFBO1lBQzFELENBQUM7U0FDRixDQUFDLENBQUE7SUFDSixDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVnVlIEFQSVxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoLCBjb21wdXRlZCwgcmVmIH0gZnJvbSAndnVlJ1xuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVklucHV0IH0gZnJvbSAnLi4vVklucHV0J1xuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZUlucHV0U3RhdGVzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvdXNlLWlucHV0LXN0YXRlcydcbmltcG9ydCB7IHZhbGlkYXRpb25Qcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3VzZS12YWxpZGF0aW9uJ1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi10ZXh0LWZpZWxkJyxcbiAgY29tcG9uZW50czoge1xuICAgIFZJbnB1dCxcbiAgfSxcbiAgaW5oZXJpdEF0dHJzOiB0cnVlLFxuICBwcm9wczoge1xuICAgIG1vZGVsVmFsdWU6IHtcbiAgICAgIHR5cGU6IFsgU3RyaW5nLCBOdW1iZXIgXSxcbiAgICAgIGRlZmF1bHQ6ICcnLFxuICAgIH0sXG4gICAgLi4udmFsaWRhdGlvblByb3BzKCksXG4gIH0sXG4gIGVtaXRzOiBbICd1cGRhdGU6bW9kZWxWYWx1ZScsICdpbnB1dCcsICdibHVyJywgJ2ZvY3VzJywgJ2NoYW5nZScgXSxcblxuICBzZXR1cChwcm9wcywgeyBlbWl0LCBhdHRycyB9KSB7XG4gICAgY29uc3QgaW5wdXRSZWYgPSByZWYobnVsbClcbiAgICBjb25zdCB7XG4gICAgICBpc1JlYWRvbmx5LFxuICAgICAgaXNEaXNhYmxlZCxcbiAgICAgIG9uQ2hhbmdlXG4gICAgfSA9IHVzZUlucHV0U3RhdGVzKHByb3BzLCB7IGVtaXQsIGF0dHJzIH0pXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi10ZXh0LWZpZWxkJzogdHJ1ZSxcbiAgICAgICd2LXRleHQtZmllbGQtLWRpc2FibGVkJzogaXNEaXNhYmxlZC52YWx1ZSxcbiAgICAgICd2LXRleHQtZmllbGQtLXJlYWRvbmx5JzogaXNSZWFkb25seS52YWx1ZSxcbiAgICB9KSlcblxuICAgIGNvbnN0IGNvbXB1dGVkVmFsdWUgPSBjb21wdXRlZCh7XG4gICAgICBnZXQ6ICgpID0+IHByb3BzLm1vZGVsVmFsdWUsXG5cbiAgICAgIHNldDogKHZhbDogc3RyaW5nKSA9PiB7XG4gICAgICAgIGVtaXQoJ2lucHV0JywgdmFsKVxuICAgICAgICBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIHZhbClcbiAgICAgIH0sXG4gICAgfSlcblxuICAgIGNvbnN0IG9uRm9jdXMgPSAoKSA9PiB7XG4gICAgICAoaW5wdXRSZWYudmFsdWUgYXMgYW55KSEub25Gb2N1cygpXG4gICAgfVxuXG4gICAgY29uc3Qgb25CbHVyID0gKCkgPT4ge1xuICAgICAgKGlucHV0UmVmLnZhbHVlIGFzIGFueSkhLm9uQmx1cigpXG4gICAgfVxuXG4gICAgY29uc3Qgb25JbnB1dCA9IChlKSA9PiB7XG4gICAgICBjb21wdXRlZFZhbHVlLnZhbHVlID0gZS50YXJnZXQudmFsdWVcbiAgICB9XG5cbiAgICBjb25zdCBnZW5JbnB1dEZpZWxkID0gKHRleHRDbGFzc0NvbG9yLCB0ZXh0Q3NzQ29sb3IpID0+IHtcbiAgICAgIHJldHVybiBoKCdpbnB1dCcsIHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi10ZXh0LWZpZWxkX19pbnB1dCc6IHRydWUsXG4gICAgICAgICAgLi4uKCFhdHRycy5kaXNhYmxlZCAmJiB0ZXh0Q2xhc3NDb2xvciksXG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgLi4uKCFhdHRycy5kaXNhYmxlZCA/IHRleHRDc3NDb2xvciA6IHt9KSxcbiAgICAgICAgfSxcbiAgICAgICAgZGlzYWJsZWQ6IGF0dHJzLmRpc2FibGVkLFxuICAgICAgICB0eXBlOiBhdHRycy50eXBlID8gYXR0cnMudHlwZSA6ICd0ZXh0JyxcbiAgICAgICAgcGxhY2Vob2xkZXI6IGF0dHJzLnBsYWNlaG9sZGVyLFxuICAgICAgICByZWFkb25seTogYXR0cnMucmVhZG9ubHksXG4gICAgICAgIHZhbHVlOiBjb21wdXRlZFZhbHVlLnZhbHVlLFxuICAgICAgICBvbklucHV0LFxuICAgICAgICBvbkZvY3VzLFxuICAgICAgICBvbkJsdXIsXG4gICAgICAgIG9uQ2hhbmdlLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5UZXh0RmllbGRXcmFwcGVyID0gKGNsc0NvbG9yLCBjc3NDb2xvcikgPT4ge1xuICAgICAgcmV0dXJuIGgoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgIH0sXG4gICAgICAgIGdlbklucHV0RmllbGQoY2xzQ29sb3IsIGNzc0NvbG9yKVxuICAgICAgKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiBoKFZJbnB1dCwge1xuICAgICAgdmFsdWU6IGNvbXB1dGVkVmFsdWUudmFsdWUsXG4gICAgICBydWxlczogcHJvcHMucnVsZXMsXG4gICAgICByZWY6IGlucHV0UmVmXG4gICAgfSwge1xuICAgICAgWyd0ZXh0LWZpZWxkJ106ICh7IHRleHRDbGFzc0NvbG9yLCB0ZXh0Q3NzQ29sb3IgfSkgPT4ge1xuICAgICAgICByZXR1cm4gZ2VuVGV4dEZpZWxkV3JhcHBlcih0ZXh0Q2xhc3NDb2xvciwgdGV4dENzc0NvbG9yKVxuICAgICAgfSxcbiAgICB9KVxuICB9LFxufSlcbiJdfQ==