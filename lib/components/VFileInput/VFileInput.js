import { h, defineComponent, ref, computed } from 'vue';
import { VInput } from '../VInput';
import { VChip } from '../VChip';
import { useIcons } from '../../composables/use-icons';
import { useInputStates } from '../../composables/use-input-states';
import { uniqueArray } from '../../helpers';
export default defineComponent({
    name: 'v-file-input',
    props: {
        disabled: Boolean,
        multiple: Boolean,
        chipColor: {
            type: String,
            default: 'primary',
        },
        value: {
            type: Array,
            default: () => [],
        },
    },
    emits: ['update:value', 'delete'],
    setup(props, { emit, attrs }) {
        const { icons } = useIcons();
        const { isDisabled, isReadonly } = useInputStates(props, { emit, attrs });
        const inputRef = ref(null);
        const srcRef = ref(null);
        const classes = computed(() => ({
            'v-file-input': true,
            'v-file-input--disabled': isDisabled.value,
            'v-file-input--readonly': isReadonly.value,
            'v-file-input--multiple': props.multiple,
        }));
        const onChange = (event) => {
            let files = Array.from(event.target.files);
            if (props.multiple) {
                files = uniqueArray(props.value.concat(files));
            }
            event.target.value = '';
            emit('update:value', files);
        };
        const onClose = (file) => {
            const files = props.value.filter(it => {
                return file.name !== it.name;
            });
            emit('update:value', files);
            emit('delete', file);
        };
        const onClick = ({ srcElement }) => {
            if (srcElement !== srcRef.value)
                return;
            inputRef.value.click();
        };
        const genFileInput = () => {
            return h('input', {
                class: 'v-file-input__field',
                type: 'file',
                multiple: props.multiple,
                ref: inputRef,
                style: {
                    position: 'absolute',
                    visibility: 'hidden',
                },
                onChange,
            });
        };
        const genChips = () => {
            return uniqueArray(props.value)
                .map(file => h(VChip, {
                title: file.name,
                class: 'ma-1',
                color: props.chipColor,
                onClose: () => onClose(file),
            }));
        };
        const genChipsContainer = () => {
            return h('div', {
                class: 'v-file-input__container',
                ref: srcRef,
            }, genChips());
        };
        const genComponent = () => h('div', {
            class: classes.value,
            onClick,
        }, [
            genFileInput(),
            genChipsContainer(),
        ]);
        return () => h(VInput, {
            prependIcon: icons.$paperclip,
            file: true,
            disabled: isDisabled.value,
        }, {
            'text-field': () => genComponent(),
        });
    },
});
//# sourceMappingURL=data:application/json;base64,