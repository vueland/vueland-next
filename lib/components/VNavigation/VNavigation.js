import { defineComponent, h, ref, computed } from 'vue';
import { useColors, colorProps } from '../../composables/use-colors';
import { convertToUnit } from '../../helpers';
export default defineComponent({
    name: 'v-navigation',
    props: {
        fixed: Boolean,
        right: Boolean,
        left: Boolean,
        onHover: Boolean,
        miniVariant: Boolean,
        expand: Boolean,
        offsetTop: {
            type: [String, Number],
            default: 0,
        },
        miniVariantWidth: {
            type: [String, Number],
            default: 56,
        },
        maxVariantWidth: {
            type: [String, Number],
            default: 237,
        },
        ...colorProps('#ffffff'),
    },
    emits: ['update:expand'],
    setup(props, { slots, emit }) {
        const { setBackgroundClassNameColor, setBackgroundCssColor } = useColors();
        const isHovered = ref(false);
        const isExpanded = computed(() => {
            if (props.onHover && isHovered.value)
                return true;
            if (props.expand)
                return true;
            if (!props.expand && props.miniVariant)
                return false;
            if (!props.expand && !props.miniVariant)
                return false;
            return !props.miniVariant;
        });
        const computedWidth = computed(() => {
            if (!isExpanded.value)
                return props.miniVariantWidth;
            return props.maxVariantWidth;
        });
        const classes = computed(() => ({
            'v-navigation': true,
            'v-navigation--expanded': isExpanded.value,
            'v-navigation--fixed': props.fixed,
            ...(props.color ? setBackgroundClassNameColor(props.color) : {}),
        }));
        const styles = computed(() => ({
            width: convertToUnit(computedWidth.value),
            maxHeight: `calc(100vh - ${convertToUnit(props.offsetTop)})`,
            top: props.fixed ? convertToUnit(props.offsetTop) : '',
            left: !props.right && props.fixed ? convertToUnit(0) : '',
            right: props.right && props.fixed ? convertToUnit(0) : '',
            ...(props.color ? setBackgroundCssColor(props.color) : {}),
        }));
        const genNavigationContent = () => {
            return h('div', {
                class: 'v-navigation__content',
            }, {
                default: () => slots.default?.(),
            });
        };
        const onMouseenter = () => {
            if (!props.onHover || props.miniVariant)
                return;
            isHovered.value = true;
            emit('update:expand', true);
        };
        const onMouseleave = () => {
            if (!props.onHover || props.miniVariant)
                return;
            isHovered.value = false;
            emit('update:expand', false);
        };
        return () => h('aside', {
            class: classes.value,
            style: styles.value,
            onMouseenter,
            onMouseleave,
        }, genNavigationContent());
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVk5hdmlnYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WTmF2aWdhdGlvbi9WTmF2aWdhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFTLE1BQU0sS0FBSyxDQUFBO0FBRTlELE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sOEJBQThCLENBQUE7QUFFcEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUU3QyxlQUFlLGVBQWUsQ0FBQztJQUM3QixJQUFJLEVBQUUsY0FBYztJQUNwQixLQUFLLEVBQUU7UUFDTCxLQUFLLEVBQUUsT0FBTztRQUNkLEtBQUssRUFBRSxPQUFPO1FBQ2QsSUFBSSxFQUFFLE9BQU87UUFDYixPQUFPLEVBQUUsT0FBTztRQUNoQixXQUFXLEVBQUUsT0FBTztRQUNwQixNQUFNLEVBQUUsT0FBTztRQUNmLFNBQVMsRUFBRTtZQUNULElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7WUFDdEIsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUNELGdCQUFnQixFQUFFO1lBQ2hCLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7WUFDdEIsT0FBTyxFQUFFLEVBQUU7U0FDWjtRQUNELGVBQWUsRUFBRTtZQUNmLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7WUFDdEIsT0FBTyxFQUFFLEdBQUc7U0FDYjtRQUNELEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQztLQUN6QjtJQUNELEtBQUssRUFBRSxDQUFDLGVBQWUsQ0FBQztJQUV4QixLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtRQUMxQixNQUFNLEVBQUUsMkJBQTJCLEVBQUUscUJBQXFCLEVBQUUsR0FBRyxTQUFT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RUQsTUFBTSxZQUFZLEdBQUcsR0FBRyxFQUFFO1lBQ3hCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxXQUFXO2dCQUFFLE9BQU07WUFDL0MsU0FBUyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7WUFDdkIsSUFBSSxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUM5QixDQUFDLENBQUE7UUFFRCxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUU7WUFDdEIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO1lBQ3BCLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSztZQUNuQixZQUFZO1lBQ1osWUFBWTtTQUNiLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyxDQUFBO0lBQzVCLENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGgsIHJlZiwgY29tcHV0ZWQsIFZOb2RlIH0gZnJvbSAndnVlJ1xuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZUNvbG9ycywgY29sb3JQcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3VzZS1jb2xvcnMnXG4vLyBIZWxwZXJzXG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0IH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtbmF2aWdhdGlvbicsXG4gIHByb3BzOiB7XG4gICAgZml4ZWQ6IEJvb2xlYW4sXG4gICAgcmlnaHQ6IEJvb2xlYW4sXG4gICAgbGVmdDogQm9vbGVhbixcbiAgICBvbkhvdmVyOiBCb29sZWFuLFxuICAgIG1pbmlWYXJpYW50OiBCb29sZWFuLFxuICAgIGV4cGFuZDogQm9vbGVhbixcbiAgICBvZmZzZXRUb3A6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiAwLFxuICAgIH0sXG4gICAgbWluaVZhcmlhbnRXaWR0aDoge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IDU2LFxuICAgIH0sXG4gICAgbWF4VmFyaWFudFdpZHRoOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogMjM3LFxuICAgIH0sXG4gICAgLi4uY29sb3JQcm9wcygnI2ZmZmZmZicpLFxuICB9LFxuICBlbWl0czogWyd1cGRhdGU6ZXhwYW5kJ10sXG5cbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMsIGVtaXQgfSk6ICgpID0+IFZOb2RlIHtcbiAgICBjb25zdCB7IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvciwgc2V0QmFja2dyb3VuZENzc0NvbG9yIH0gPSB1c2VDb2xvcnMoKVxuICAgIGNvbnN0IGlzSG92ZXJlZCA9IHJlZjxib29sZWFuPihmYWxzZSlcblxuICAgIGNvbnN0IGlzRXhwYW5kZWQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAocHJvcHMub25Ib3ZlciAmJiBpc0hvdmVyZWQudmFsdWUpIHJldHVybiB0cnVlXG4gICAgICBpZiAocHJvcHMuZXhwYW5kKSByZXR1cm4gdHJ1ZVxuICAgICAgaWYgKCFwcm9wcy5leHBhbmQgJiYgcHJvcHMubWluaVZhcmlhbnQpIHJldHVybiBmYWxzZVxuICAgICAgaWYgKCFwcm9wcy5leHBhbmQgJiYgIXByb3BzLm1pbmlWYXJpYW50KSByZXR1cm4gZmFsc2VcbiAgICAgIHJldHVybiAhcHJvcHMubWluaVZhcmlhbnRcbiAgICB9KVxuXG4gICAgY29uc3QgY29tcHV0ZWRXaWR0aCA9IGNvbXB1dGVkPG51bWJlciB8IHN0cmluZz4oKCkgPT4ge1xuICAgICAgaWYgKCFpc0V4cGFuZGVkLnZhbHVlKSByZXR1cm4gcHJvcHMubWluaVZhcmlhbnRXaWR0aFxuICAgICAgcmV0dXJuIHByb3BzLm1heFZhcmlhbnRXaWR0aFxuICAgIH0pXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1uYXZpZ2F0aW9uJzogdHJ1ZSxcbiAgICAgICd2LW5hdmlnYXRpb24tLWV4cGFuZGVkJzogaXNFeHBhbmRlZC52YWx1ZSxcbiAgICAgICd2LW5hdmlnYXRpb24tLWZpeGVkJzogcHJvcHMuZml4ZWQsXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgc3RyaW5nPj4oKCkgPT4gKHtcbiAgICAgIHdpZHRoOiBjb252ZXJ0VG9Vbml0KGNvbXB1dGVkV2lkdGgudmFsdWUpLFxuICAgICAgbWF4SGVpZ2h0OiBgY2FsYygxMDB2aCAtICR7IGNvbnZlcnRUb1VuaXQocHJvcHMub2Zmc2V0VG9wKSB9KWAsXG4gICAgICB0b3A6IHByb3BzLmZpeGVkID8gY29udmVydFRvVW5pdChwcm9wcy5vZmZzZXRUb3ApIDogJycsXG4gICAgICBsZWZ0OiAhcHJvcHMucmlnaHQgJiYgcHJvcHMuZml4ZWQgPyBjb252ZXJ0VG9Vbml0KDApIDogJycsXG4gICAgICByaWdodDogcHJvcHMucmlnaHQgJiYgcHJvcHMuZml4ZWQgPyBjb252ZXJ0VG9Vbml0KDApIDogJycsXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3QgZ2VuTmF2aWdhdGlvbkNvbnRlbnQgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcbiAgICAgICAgY2xhc3M6ICd2LW5hdmlnYXRpb25fX2NvbnRlbnQnLFxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBzbG90cy5kZWZhdWx0Py4oKSxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3Qgb25Nb3VzZWVudGVyID0gKCkgPT4ge1xuICAgICAgaWYgKCFwcm9wcy5vbkhvdmVyIHx8IHByb3BzLm1pbmlWYXJpYW50KSByZXR1cm5cbiAgICAgIGlzSG92ZXJlZC52YWx1ZSA9IHRydWVcbiAgICAgIGVtaXQoJ3VwZGF0ZTpleHBhbmQnLCB0cnVlKVxuICAgIH1cblxuICAgIGNvbnN0IG9uTW91c2VsZWF2ZSA9ICgpID0+IHtcbiAgICAgIGlmICghcHJvcHMub25Ib3ZlciB8fCBwcm9wcy5taW5pVmFyaWFudCkgcmV0dXJuXG4gICAgICBpc0hvdmVyZWQudmFsdWUgPSBmYWxzZVxuICAgICAgZW1pdCgndXBkYXRlOmV4cGFuZCcsIGZhbHNlKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiBoKCdhc2lkZScsIHtcbiAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgc3R5bGU6IHN0eWxlcy52YWx1ZSxcbiAgICAgIG9uTW91c2VlbnRlcixcbiAgICAgIG9uTW91c2VsZWF2ZSxcbiAgICB9LCBnZW5OYXZpZ2F0aW9uQ29udGVudCgpKVxuICB9LFxufSlcbiJdfQ==