import { defineComponent, h, computed } from 'vue';
import { VList, VListItem, VListItemTitle } from '../VList';
import { getStringKeysValue } from '../../helpers';
export const VSelectList = defineComponent({
    name: 'v-select-list',
    props: {
        items: {
            type: Array,
            default: null,
        },
        color: {
            type: String,
            default: '#ffffff',
        },
        textColor: {
            type: String,
            default: '',
        },
        valueKey: {
            type: String,
            default: '',
        },
        selected: {
            type: [String, Number, Object],
            default: null,
        },
        activeClass: {
            type: String,
            default: '',
        }
    },
    emits: ['select'],
    setup(props, { emit }) {
        const computedSelect = computed({
            get() {
                const key = props.valueKey;
                const selectedValue = key ? props.selected ? getStringKeysValue(key, props.selected) : null : props.selected;
                return props.selected ? props.items.findIndex((it) => {
                    const itemValue = key ? getStringKeysValue(key, it) : it;
                    return itemValue === selectedValue;
                }) : null;
            },
            set(val) {
                emit('select', props.items[val]);
            },
        });
        const genItems = () => {
            return props.items.reduce((acc, it, i) => {
                const content = props.valueKey ?
                    getStringKeysValue(props.valueKey, it) : it;
                acc.push(h(VListItem, { key: i }, {
                    default: () => h(VListItemTitle, {}, {
                        default: () => content,
                    }),
                }));
                return acc;
            }, []);
        };
        const genItemsList = () => {
            return h(VList, {
                value: computedSelect.value,
                active: true,
                color: '#ffffff',
                activeClass: props.activeClass,
                ['onUpdate:value']: val => computedSelect.value = val,
            }, {
                default: () => genItems(),
            });
        };
        return () => h('div', {
            class: 'v-select-list',
        }, [props.items ? genItemsList() : null]);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVlNlbGVjdExpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WU2VsZWN0L1ZTZWxlY3RMaXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxNQUFNLEtBQUssQ0FBQTtBQUVsRCxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFFM0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZUFBZSxDQUFBO0FBSWxELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxlQUFlLENBQUM7SUFDekMsSUFBSSxFQUFFLGVBQWU7SUFDckIsS0FBSyxFQUFFO1FBQ0wsS0FBSyxFQUFFO1lBQ0wsSUFBSSxFQUFFLEtBQUs7WUFDWCxPQUFPLEVBQUUsSUFBSTtTQUNkO1FBQ0QsS0FBSyxFQUFFO1lBQ0wsSUFBSSxFQUFFLE1BQU07WUFDWixPQUFPLEVBQUUsU0FBUztTQUNuQjtRQUNELFNBQVMsRUFBRTtZQUNULElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLEVBQUU7U0FDWjtRQUNELFFBQVEsRUFBRTtZQUNSLElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLEVBQUU7U0FDWjtRQUNELFFBQVEsRUFBRTtZQUNSLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDO1lBQzlCLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7UUFDRCxXQUFXLEVBQUU7WUFDWCxJQUFJLEVBQUUsTUFBTTtZQUNaLE9BQU8sRUFBRSxFQUFFO1NBQ1o7S0FDRjtJQUNELEtBQUssRUFBRSxDQUFDLFFBQVEsQ0FBQztJQUNqQixLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFO1FBQ25CLE1BQU0sY0FBYyxHQUFHLFFBQVEsQ0FBZ0I7WUFDN0MsR0FBRztnQkFDRCxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFBO2dCQUUxQixNQUFNLGFBQWEsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUM3RCxHQUFHLEVBQ0gsS0FBSyxDQUFDLFFBQVEsQ0FDZixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUE7Z0JBRXpCLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRTtvQkFDbkQsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtvQkFFeEQsT0FBTyxTQUFTLEtBQUssYUFBYSxDQUFBO2dCQUNwQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFBO1lBQ1gsQ0FBQztZQUVELEdBQUcsQ0FBQyxHQUFXO2dCQUNiLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO1lBQ2xDLENBQUM7U0FDRixDQUFDLENBQUE7UUFFRixNQUFNLFFBQVEsR0FBRyxHQUFHLEVBQUU7WUFDcEIsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZDLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDOUIsa0JBQWtCLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBUyxDQUFBO2dCQUVuRCxHQUFhLENBQUMsSUFBSSxDQUNqQixDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUN2QixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxFQUFFLEVBQUU7d0JBQ25DLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPO3FCQUN2QixDQUFDO2lCQUNILENBQUMsQ0FBQyxDQUFBO2dCQUVMLE9BQU8sR0FBRyxDQUFBO1lBQ1osQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO1FBQ1IsQ0FBQyxDQUFBO1FBRUQsTUFBTSxZQUFZLEdBQUcsR0FBRyxFQUFFO1lBQ3hCLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRTtnQkFDZCxLQUFLLEVBQUUsY0FBYyxDQUFDLEtBQWU7Z0JBQ3JDLE1BQU0sRUFBRSxJQUFJO2dCQUNaLEtBQUssRUFBRSxTQUFTO2dCQUNoQixXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7Z0JBQzlCLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEdBQUcsR0FBRzthQUN0RCxFQUFFO2dCQUNELE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUU7YUFDMUIsQ0FBQyxDQUFBO1FBQ0osQ0FBQyxDQUFBO1FBRUQsT0FBTyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFO1lBQ3BCLEtBQUssRUFBRSxlQUFlO1NBQ3ZCLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtJQUMzQyxDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZMaXN0LCBWTGlzdEl0ZW0sIFZMaXN0SXRlbVRpdGxlIH0gZnJvbSAnLi4vVkxpc3QnXG4vLyBIZWxwZXJzXG5pbXBvcnQgeyBnZXRTdHJpbmdLZXlzVmFsdWUgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuLy8gVHlwZXNcbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvYmFzZSdcblxuZXhwb3J0IGNvbnN0IFZTZWxlY3RMaXN0ID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3Ytc2VsZWN0LWxpc3QnLFxuICBwcm9wczoge1xuICAgIGl0ZW1zOiB7XG4gICAgICB0eXBlOiBBcnJheSxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgfSxcbiAgICBjb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJyNmZmZmZmYnLFxuICAgIH0sXG4gICAgdGV4dENvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJyxcbiAgICB9LFxuICAgIHZhbHVlS2V5OiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJyxcbiAgICB9LFxuICAgIHNlbGVjdGVkOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXIsIE9iamVjdF0sXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gICAgYWN0aXZlQ2xhc3M6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnLFxuICAgIH1cbiAgfSxcbiAgZW1pdHM6IFsnc2VsZWN0J10sXG4gIHNldHVwKHByb3BzLCB7IGVtaXQgfSkge1xuICAgIGNvbnN0IGNvbXB1dGVkU2VsZWN0ID0gY29tcHV0ZWQ8TWF5YmU8bnVtYmVyPj4oe1xuICAgICAgZ2V0KCkge1xuICAgICAgICBjb25zdCBrZXkgPSBwcm9wcy52YWx1ZUtleVxuXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkVmFsdWUgPSBrZXkgPyBwcm9wcy5zZWxlY3RlZCA/IGdldFN0cmluZ0tleXNWYWx1ZShcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgcHJvcHMuc2VsZWN0ZWQsXG4gICAgICAgICkgOiBudWxsIDogcHJvcHMuc2VsZWN0ZWRcblxuICAgICAgICByZXR1cm4gcHJvcHMuc2VsZWN0ZWQgPyBwcm9wcy5pdGVtcy5maW5kSW5kZXgoKGl0KSA9PiB7XG4gICAgICAgICAgY29uc3QgaXRlbVZhbHVlID0ga2V5ID8gZ2V0U3RyaW5nS2V5c1ZhbHVlKGtleSwgaXQpIDogaXRcblxuICAgICAgICAgIHJldHVybiBpdGVtVmFsdWUgPT09IHNlbGVjdGVkVmFsdWVcbiAgICAgICAgfSkgOiBudWxsXG4gICAgICB9LFxuXG4gICAgICBzZXQodmFsOiBudW1iZXIpIHtcbiAgICAgICAgZW1pdCgnc2VsZWN0JywgcHJvcHMuaXRlbXNbdmFsXSlcbiAgICAgIH0sXG4gICAgfSlcblxuICAgIGNvbnN0IGdlbkl0ZW1zID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLml0ZW1zLnJlZHVjZSgoYWNjLCBpdCwgaSkgPT4ge1xuICAgICAgICBjb25zdCBjb250ZW50ID0gcHJvcHMudmFsdWVLZXkgP1xuICAgICAgICAgIGdldFN0cmluZ0tleXNWYWx1ZShwcm9wcy52YWx1ZUtleSwgaXQpIDogaXQgYXMgYW55XG5cbiAgICAgICAgKGFjYyBhcyBhbnlbXSkucHVzaChcbiAgICAgICAgICBoKFZMaXN0SXRlbSwgeyBrZXk6IGkgfSwge1xuICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gaChWTGlzdEl0ZW1UaXRsZSwge30sIHtcbiAgICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gY29udGVudCxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pKVxuXG4gICAgICAgIHJldHVybiBhY2NcbiAgICAgIH0sIFtdKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkl0ZW1zTGlzdCA9ICgpID0+IHtcbiAgICAgIHJldHVybiBoKFZMaXN0LCB7XG4gICAgICAgIHZhbHVlOiBjb21wdXRlZFNlbGVjdC52YWx1ZSBhcyBudW1iZXIsXG4gICAgICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICAgICAgY29sb3I6ICcjZmZmZmZmJyxcbiAgICAgICAgYWN0aXZlQ2xhc3M6IHByb3BzLmFjdGl2ZUNsYXNzLFxuICAgICAgICBbJ29uVXBkYXRlOnZhbHVlJ106IHZhbCA9PiBjb21wdXRlZFNlbGVjdC52YWx1ZSA9IHZhbCxcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gZ2VuSXRlbXMoKSxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IGgoJ2RpdicsIHtcbiAgICAgIGNsYXNzOiAndi1zZWxlY3QtbGlzdCcsXG4gICAgfSwgW3Byb3BzLml0ZW1zID8gZ2VuSXRlbXNMaXN0KCkgOiBudWxsXSlcbiAgfSxcbn0pXG5cbiJdfQ==