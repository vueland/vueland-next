export function getMonth(date) {
    return date.getMonth();
}
export function getFullYear(date) {
    return date.getFullYear();
}
export function getDate(date) {
    return date.getDate();
}
export function getDay(date) {
    return date.getDay();
}
export function getHours(date) {
    return date.getHours();
}
export function getMinutes(date) {
    return date.getMinutes();
}
export function setFullYear(date, value) {
    return date.setFullYear(value);
}
export function setMonth(date, value) {
    return date.setMonth(value);
}
export function setDate(date, value) {
    return date.setDate(value);
}
export function isValidDate(date) {
    if (Object.prototype.toString.call(date) !== '[object Date]') {
        return false;
    }
    return !isNaN(date.getTime());
}
function getDayNameAbbr(date, days) {
    if (typeof date !== 'object') {
        throw TypeError('Invalid Type');
    }
    return days[getDay(date)];
}
function getMonthName(month, months) {
    if (!months) {
        throw Error('missing second parameter Months array');
    }
    return months[month];
}
function getMonthNameAbbr(month, monthsAbbr) {
    if (!monthsAbbr) {
        throw Error('missing 2nd paramter Months array');
    }
    if (typeof month === 'object') {
        return monthsAbbr[getMonth(month)];
    }
    if (typeof month === 'number') {
        return monthsAbbr[month];
    }
    throw TypeError('Invalid type');
}
export function formatDate(date, format, translation) {
    const year = getFullYear(date);
    const month = getMonth(date) + 1;
    const day = getDate(date);
    return format
        .replace(/dd/, ('0' + day).slice(-2))
        .replace(/d/, `${day}`)
        .replace(/yyyy/, `${year}`)
        .replace(/yy/, String(year).slice(2))
        .replace(/MMMM/, getMonthName(getMonth(date), translation.months))
        .replace(/MMM/, getMonthNameAbbr(getMonth(date), translation.monthsAbbr))
        .replace(/MM/, ('0' + month).slice(-2))
        .replace(/M(?!a|ä|e)/, `${month}`)
        .replace(/D(?!e|é|i)/, getDayNameAbbr(date, translation.week));
}
export function validateDateInput(val) {
    return (val === null ||
        val instanceof Date ||
        typeof val === 'string' ||
        typeof val === 'number');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy92dWVsYW5kL3NyYy9jb21wb25lbnRzL1ZEYXRlUGlja2VyL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVdBLE1BQU0sVUFBVSxRQUFRLENBQUMsSUFBVTtJQUNqQyxPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQTtBQUN4QixDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxJQUFVO0lBQ3BDLE9BQU8sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFBO0FBQzNCLENBQUM7QUFFRCxNQUFNLFVBQVUsT0FBTyxDQUFDLElBQVU7SUFDaEMsT0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUE7QUFDdkIsQ0FBQztBQUVELE1BQU0sVUFBVSxNQUFNLENBQUMsSUFBVTtJQUMvQixPQUFPLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtBQUN0QixDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxJQUFVO0lBQ2pDLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFBO0FBQ3hCLENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFDLElBQVU7SUFDbkMsT0FBTyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUE7QUFDMUIsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQUMsSUFBSSxFQUFFLEtBQUs7SUFDckMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQ2hDLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLElBQUksRUFBRSxLQUFLO0lBQ2xDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUM3QixDQUFDO0FBRUQsTUFBTSxVQUFVLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSztJQUNqQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7QUFD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bkIsT0FBTyxHQUFHLEtBQUssUUFBUTtRQUN2QixPQUFPLEdBQUcsS0FBSyxRQUFRLENBQ3hCLENBQUE7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHR5cGUgRGF0ZUxvY2FsZXMgPSB7XG4gIG1vbnRoczogc3RyaW5nW11cbiAgbW9udGhzQWJicjogc3RyaW5nW11cbiAgd2Vlazogc3RyaW5nW11cbn1cblxuZXhwb3J0IHR5cGUgRGF0ZVRyYW5zbGF0aW9ucyA9IHtcbiAgcnU6IERhdGVMb2NhbGVzXG4gIGVuOiBEYXRlTG9jYWxlc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9udGgoZGF0ZTogRGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNb250aCgpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGdWxsWWVhcihkYXRlOiBEYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldEZ1bGxZZWFyKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERhdGUoZGF0ZTogRGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXREYXRlKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERheShkYXRlOiBEYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldERheSgpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRIb3VycyhkYXRlOiBEYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldEhvdXJzKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1pbnV0ZXMoZGF0ZTogRGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNaW51dGVzKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldEZ1bGxZZWFyKGRhdGUsIHZhbHVlKSB7XG4gIHJldHVybiBkYXRlLnNldEZ1bGxZZWFyKHZhbHVlKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0TW9udGgoZGF0ZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRhdGUuc2V0TW9udGgodmFsdWUpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXREYXRlKGRhdGUsIHZhbHVlKSB7XG4gIHJldHVybiBkYXRlLnNldERhdGUodmFsdWUpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkRGF0ZShkYXRlKSB7XG4gIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZGF0ZSkgIT09ICdbb2JqZWN0IERhdGVdJykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHJldHVybiAhaXNOYU4oZGF0ZS5nZXRUaW1lKCkpXG59XG5cbmZ1bmN0aW9uIGdldERheU5hbWVBYmJyKGRhdGUsIGRheXMpIHtcbiAgaWYgKHR5cGVvZiBkYXRlICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IFR5cGVFcnJvcignSW52YWxpZCBUeXBlJylcbiAgfVxuICByZXR1cm4gZGF5c1tnZXREYXkoZGF0ZSldXG59XG5cbmZ1bmN0aW9uIGdldE1vbnRoTmFtZShtb250aDogbnVtYmVyLCBtb250aHM6IHN0cmluZ1tdKSB7XG4gIGlmICghbW9udGhzKSB7XG4gICAgdGhyb3cgRXJyb3IoJ21pc3Npbmcgc2Vjb25kIHBhcmFtZXRlciBNb250aHMgYXJyYXknKVxuICB9XG5cbiAgcmV0dXJuIG1vbnRoc1ttb250aF1cbn1cblxuZnVuY3Rpb24gZ2V0TW9udGhOYW1lQWJicihtb250aCwgbW9udGhzQWJicikge1xuICBpZiAoIW1vbnRoc0FiYnIpIHtcbiAgICB0aHJvdyBFcnJvcignbWlzc2luZyAybmQgcGFyYW10ZXIgTW9udGhzIGFycmF5JylcbiAgfVxuICBpZiAodHlwZW9mIG1vbnRoID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBtb250aHNBYmJyW2dldE1vbnRoKG1vbnRoKV1cbiAgfVxuICBpZiAodHlwZW9mIG1vbnRoID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBtb250aHNBYmJyW21vbnRoXVxuICB9XG4gIHRocm93IFR5cGVFcnJvcignSW52YWxpZCB0eXBlJylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdERhdGUoXG4gIGRhdGU6IERhdGUsXG4gIGZvcm1hdDogc3RyaW5nLFxuICB0cmFuc2xhdGlvbjogRGF0ZUxvY2FsZXNcbikge1xuICBjb25zdCB5ZWFyID0gZ2V0RnVsbFllYXIoZGF0ZSlcbiAgY29uc3QgbW9udGggPSBnZXRNb250aChkYXRlKSArIDFcbiAgY29uc3QgZGF5ID0gZ2V0RGF0ZShkYXRlKVxuXG4gIHJldHVybiBmb3JtYXRcbiAgICAucmVwbGFjZSgvZGQvLCAoJzAnICsgZGF5KS5zbGljZSgtMikpXG4gICAgLnJlcGxhY2UoL2QvLCBgJHtkYXl9YClcbiAgICAucmVwbGFjZSgveXl5eS8sIGAke3llYXJ9YClcbiAgICAucmVwbGFjZSgveXkvLCBTdHJpbmcoeWVhcikuc2xpY2UoMikpXG4gICAgLnJlcGxhY2UoL01NTU0vLCBnZXRNb250aE5hbWUoZ2V0TW9udGgoZGF0ZSksIHRyYW5zbGF0aW9uLm1vbnRocykpXG4gICAgLnJlcGxhY2UoL01NTS8sIGdldE1vbnRoTmFtZUFiYnIoZ2V0TW9udGgoZGF0ZSksIHRyYW5zbGF0aW9uLm1vbnRoc0FiYnIpKVxuICAgIC5yZXBsYWNlKC9NTS8sICgnMCcgKyBtb250aCkuc2xpY2UoLTIpKVxuICAgIC5yZXBsYWNlKC9NKD8hYXzDpHxlKS8sIGAke21vbnRofWApXG4gICAgLnJlcGxhY2UoL0QoPyFlfMOpfGkpLywgZ2V0RGF5TmFtZUFiYnIoZGF0ZSwgdHJhbnNsYXRpb24ud2VlaykpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZURhdGVJbnB1dCh2YWwpIHtcbiAgcmV0dXJuIChcbiAgICB2YWwgPT09IG51bGwgfHxcbiAgICB2YWwgaW5zdGFuY2VvZiBEYXRlIHx8XG4gICAgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgfHxcbiAgICB0eXBlb2YgdmFsID09PSAnbnVtYmVyJ1xuICApXG59XG4iXX0=