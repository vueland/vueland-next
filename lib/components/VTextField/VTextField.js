import { defineComponent, h, computed, ref } from 'vue';
import { VInput } from '../VInput';
import { useInputStates } from '../../composables/use-input-states';
import { validationProps } from '../../composables/use-validation';
export default defineComponent({
    name: 'v-text-field',
    components: {
        VInput,
    },
    inheritAttrs: true,
    props: {
        modelValue: {
            type: [String, Number],
            default: '',
        },
        ...validationProps(),
    },
    emits: ['update:modelValue', 'input', 'blur', 'focus', 'change'],
    setup(props, { emit, attrs, slots }) {
        const inputRef = ref(null);
        const { isReadonly, isDisabled, onChange, } = useInputStates(props, { emit, attrs });
        const classes = computed(() => ({
            'v-text-field': true,
            'v-text-field--disabled': isDisabled.value,
            'v-text-field--readonly': isReadonly.value,
        }));
        const computedValue = computed({
            get: () => props.modelValue,
            set: (val) => {
                emit('input', val);
                emit('update:modelValue', val);
            },
        });
        const onFocus = () => {
            inputRef.value.onFocus();
        };
        const onBlur = () => {
            inputRef.value.onBlur();
        };
        const onInput = (e) => {
            computedValue.value = e.target.value;
        };
        const genInputField = (textClassColor, textCssColor) => {
            return h('input', {
                class: {
                    'v-text-field__input': true,
                    ...(!attrs.disabled && textClassColor),
                },
                style: {
                    ...(!attrs.disabled ? textCssColor : {}),
                },
                disabled: attrs.disabled,
                type: attrs.type || 'text',
                placeholder: attrs.placeholder,
                readonly: attrs.readonly,
                autocomplete: attrs.autocomplete,
                value: computedValue.value,
                onInput,
                onFocus,
                onBlur,
                onChange,
            });
        };
        const genTextFieldWrapper = (clsColor, cssColor) => {
            return h('div', {
                class: classes.value,
            }, genInputField(clsColor, cssColor));
        };
        return () => h(VInput, {
            value: computedValue.value,
            rules: props.rules,
            ref: inputRef,
        }, {
            ['text-field']: ({ textClassColor, textCssColor }) => {
                return genTextFieldWrapper(textClassColor, textCssColor);
            },
            ...(slots['prepend-icon'] ? { ['prepend-icon']: () => slots['prepend-icon']?.() } : {}),
            ...(slots['append-icon'] ? { ['append-icon']: () => slots['append-icon']?.() } : {}),
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVlRleHRGaWVsZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3Z1ZWxhbmQvc3JjL2NvbXBvbmVudHMvVlRleHRGaWVsZC9WVGV4dEZpZWxkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxlQUFlLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsTUFBTSxLQUFLLENBQUE7QUFFdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUVsQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0NBQW9DLENBQUE7QUFDbkUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGtDQUFrQyxDQUFBO0FBRWxFLGVBQWUsZUFBZSxDQUFDO0lBQzdCLElBQUksRUFBRSxjQUFjO0lBQ3BCLFVBQVUsRUFBRTtRQUNWLE1BQU07S0FDUDtJQUNELFlBQVksRUFBRSxJQUFJO0lBQ2xCLEtBQUssRUFBRTtRQUNMLFVBQVUsRUFBRTtZQUNWLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7WUFDdEIsT0FBTyxFQUFFLEVBQUU7U0FDWjtRQUNELEdBQUcsZUFBZSxFQUFFO0tBQ3JCO0lBQ0QsS0FBSyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDO0lBRWhFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtRQUNqQyxNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDMUIsTUFBTSxFQUNKLFVBQVUsRUFDVixVQUFVLEVBQ1YsUUFBUSxHQUNULEdBQUcsY0FBYyxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO1FBRTFDLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBMEIsR0FBRyxF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QyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxhQUFhLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUNuRixDQUFDLENBQUE7SUFDSixDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVnVlIEFQSVxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoLCBjb21wdXRlZCwgcmVmIH0gZnJvbSAndnVlJ1xuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVklucHV0IH0gZnJvbSAnLi4vVklucHV0J1xuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZUlucHV0U3RhdGVzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvdXNlLWlucHV0LXN0YXRlcydcbmltcG9ydCB7IHZhbGlkYXRpb25Qcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3VzZS12YWxpZGF0aW9uJ1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi10ZXh0LWZpZWxkJyxcbiAgY29tcG9uZW50czoge1xuICAgIFZJbnB1dCxcbiAgfSxcbiAgaW5oZXJpdEF0dHJzOiB0cnVlLFxuICBwcm9wczoge1xuICAgIG1vZGVsVmFsdWU6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiAnJyxcbiAgICB9LFxuICAgIC4uLnZhbGlkYXRpb25Qcm9wcygpLFxuICB9LFxuICBlbWl0czogWyd1cGRhdGU6bW9kZWxWYWx1ZScsICdpbnB1dCcsICdibHVyJywgJ2ZvY3VzJywgJ2NoYW5nZSddLFxuXG4gIHNldHVwKHByb3BzLCB7IGVtaXQsIGF0dHJzLCBzbG90cyB9KSB7XG4gICAgY29uc3QgaW5wdXRSZWYgPSByZWYobnVsbClcbiAgICBjb25zdCB7XG4gICAgICBpc1JlYWRvbmx5LFxuICAgICAgaXNEaXNhYmxlZCxcbiAgICAgIG9uQ2hhbmdlLFxuICAgIH0gPSB1c2VJbnB1dFN0YXRlcyhwcm9wcywgeyBlbWl0LCBhdHRycyB9KVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtdGV4dC1maWVsZCc6IHRydWUsXG4gICAgICAndi10ZXh0LWZpZWxkLS1kaXNhYmxlZCc6IGlzRGlzYWJsZWQudmFsdWUsXG4gICAgICAndi10ZXh0LWZpZWxkLS1yZWFkb25seSc6IGlzUmVhZG9ubHkudmFsdWUsXG4gICAgfSkpXG5cbiAgICBjb25zdCBjb21wdXRlZFZhbHVlID0gY29tcHV0ZWQoe1xuICAgICAgZ2V0OiAoKSA9PiBwcm9wcy5tb2RlbFZhbHVlLFxuXG4gICAgICBzZXQ6ICh2YWw6IHN0cmluZykgPT4ge1xuICAgICAgICBlbWl0KCdpbnB1dCcsIHZhbClcbiAgICAgICAgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCB2YWwpXG4gICAgICB9LFxuICAgIH0pXG5cbiAgICBjb25zdCBvbkZvY3VzID0gKCkgPT4ge1xuICAgICAgKGlucHV0UmVmLnZhbHVlIGFzIGFueSkhLm9uRm9jdXMoKVxuICAgIH1cblxuICAgIGNvbnN0IG9uQmx1ciA9ICgpID0+IHtcbiAgICAgIChpbnB1dFJlZi52YWx1ZSBhcyBhbnkpIS5vbkJsdXIoKVxuICAgIH1cblxuICAgIGNvbnN0IG9uSW5wdXQgPSAoZSkgPT4ge1xuICAgICAgY29tcHV0ZWRWYWx1ZS52YWx1ZSA9IGUudGFyZ2V0LnZhbHVlXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuSW5wdXRGaWVsZCA9ICh0ZXh0Q2xhc3NDb2xvciwgdGV4dENzc0NvbG9yKSA9PiB7XG4gICAgICByZXR1cm4gaCgnaW5wdXQnLCB7XG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgJ3YtdGV4dC1maWVsZF9faW5wdXQnOiB0cnVlLFxuICAgICAgICAgIC4uLighYXR0cnMuZGlzYWJsZWQgJiYgdGV4dENsYXNzQ29sb3IpLFxuICAgICAgICB9LFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIC4uLighYXR0cnMuZGlzYWJsZWQgPyB0ZXh0Q3NzQ29sb3IgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICAgIGRpc2FibGVkOiBhdHRycy5kaXNhYmxlZCxcbiAgICAgICAgdHlwZTogYXR0cnMudHlwZSB8fCAndGV4dCcsXG4gICAgICAgIHBsYWNlaG9sZGVyOiBhdHRycy5wbGFjZWhvbGRlcixcbiAgICAgICAgcmVhZG9ubHk6IGF0dHJzLnJlYWRvbmx5LFxuICAgICAgICBhdXRvY29tcGxldGU6IGF0dHJzLmF1dG9jb21wbGV0ZSxcbiAgICAgICAgdmFsdWU6IGNvbXB1dGVkVmFsdWUudmFsdWUsXG4gICAgICAgIG9uSW5wdXQsXG4gICAgICAgIG9uRm9jdXMsXG4gICAgICAgIG9uQmx1cixcbiAgICAgICAgb25DaGFuZ2UsXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlblRleHRGaWVsZFdyYXBwZXIgPSAoY2xzQ29sb3IsIGNzc0NvbG9yKSA9PiB7XG4gICAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgICB9LFxuICAgICAgICBnZW5JbnB1dEZpZWxkKGNsc0NvbG9yLCBjc3NDb2xvciksXG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IGgoVklucHV0LCB7XG4gICAgICB2YWx1ZTogY29tcHV0ZWRWYWx1ZS52YWx1ZSxcbiAgICAgIHJ1bGVzOiBwcm9wcy5ydWxlcyxcbiAgICAgIHJlZjogaW5wdXRSZWYsXG4gICAgfSwge1xuICAgICAgWyd0ZXh0LWZpZWxkJ106ICh7IHRleHRDbGFzc0NvbG9yLCB0ZXh0Q3NzQ29sb3IgfSkgPT4ge1xuICAgICAgICByZXR1cm4gZ2VuVGV4dEZpZWxkV3JhcHBlcih0ZXh0Q2xhc3NDb2xvciwgdGV4dENzc0NvbG9yKVxuICAgICAgfSxcbiAgICAgIC4uLihzbG90c1sncHJlcGVuZC1pY29uJ10gPyB7WydwcmVwZW5kLWljb24nXTogKCkgPT4gc2xvdHNbJ3ByZXBlbmQtaWNvbiddPy4oKX0gOiB7fSksXG4gICAgICAuLi4oc2xvdHNbJ2FwcGVuZC1pY29uJ10gPyB7WydhcHBlbmQtaWNvbiddOiAoKSA9PiBzbG90c1snYXBwZW5kLWljb24nXT8uKCl9IDoge30pLFxuICAgIH0pXG4gIH0sXG59KVxuIl19