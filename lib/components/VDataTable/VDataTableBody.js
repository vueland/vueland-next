import { h, ref, watch, computed, defineComponent } from 'vue';
import { colorProps, useColors } from '../../composables/use-colors';
import { VDataTableCell } from './VDataTableCell';
import { VCheckbox } from '../VCheckbox';
export const VDataTableBody = defineComponent({
    name: 'v-data-table-body',
    props: {
        cols: Array,
        rows: Array,
        dark: Boolean,
        showSequence: Boolean,
        showCheckbox: Boolean,
        checkAllRows: Boolean,
        align: String,
        colWidth: {
            type: [String, Number],
            default: 125,
        },
        page: Number,
        rowsOnPage: Number,
        ...colorProps(),
    },
    emits: ['select', 'click:row', 'dblclick:row', 'contextmenu:row'],
    setup(props, { slots, emit }) {
        const checkedRows = ref([]);
        const { setBackgroundCssColor, setBackgroundClassNameColor } = useColors();
        const classes = computed(() => ({
            'v-data-table__body': true,
            ...(props.color ? setBackgroundClassNameColor(props.color) : {}),
        }));
        const styles = computed(() => ({
            ...(props.color ? setBackgroundCssColor(props.color) : {}),
        }));
        const rowsOnTable = computed(() => {
            return props.rows?.slice((props.page - 1) * props.rowsOnPage, props.page * props.rowsOnPage);
        });
        watch(() => props.checkAllRows, (to) => {
            if (to)
                onSelectRows(props.rows);
            else
                onSelectRows([]);
        });
        const onSelectRows = (rows) => {
            checkedRows.value = rows;
            emit('select', checkedRows.value);
        };
        const genNumberCell = (count) => {
            return h(VDataTableCell, {
                width: 50,
                align: 'center',
                dark: props.dark,
                color: props.color,
                class: 'v-data-table__row-number',
            }, {
                default: () => count + 1,
            });
        };
        const genCheckboxCell = (row) => {
            return h(VDataTableCell, {
                width: 50,
                align: 'center',
                dark: props.dark,
                color: props.color,
                class: 'v-data-table__row-checkbox',
            }, {
                default: () => h(VCheckbox, {
                    modelValue: checkedRows.value,
                    value: row,
                    onChange: onSelectRows,
                }),
            });
        };
        const genRowCell = (col, row) => {
            const { format } = col;
            const slotContent = slots[col.key] &&
                slots[col.key]({
                    row,
                    format,
                });
            return h(VDataTableCell, {
                width: col.width,
                align: col.align || props.align,
                dark: props.dark,
            }, {
                default: () => slotContent
                    ? slotContent
                    : format
                        ? format(row)
                        : String(row[col.key]),
            });
        };
        const genTableRow = (row, rowCount) => {
            const rowCells = [];
            props.showSequence && rowCells.push(genNumberCell(rowCount));
            props.showCheckbox && rowCells.push(genCheckboxCell(row));
            props.cols.forEach((col) => {
                col.show && rowCells.push(genRowCell(col, row));
            });
            return h('div', {
                class: { 'v-data-table__row': true },
                onClick: () => emit('click:row', row),
                onDblclick: () => emit('dblclick:row', row),
                onContextmenu: (e) => {
                    e.preventDefault();
                    emit('contextmenu:row', row);
                },
            }, rowCells);
        };
        const genTableRows = () => {
            const tableRows = [];
            const rowsLength = rowsOnTable.value?.length;
            const count = (props.page - 1) * props.rowsOnPage;
            for (let i = 0; i < rowsLength; i += 1) {
                tableRows.push(genTableRow(rowsOnTable.value[i], count + i));
            }
            return tableRows;
        };
        return () => h('div', {
            class: classes.value,
            style: styles.value,
        }, genTableRows());
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkRhdGFUYWJsZUJvZHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WRGF0YVRhYmxlL1ZEYXRhVGFibGVCb2R5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLE1BQU0sS0FBSyxDQUFBO0FBRzlELE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sOEJBQThCLENBQUE7QUFHcEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBQ2pELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFLeEMsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLGVBQWUsQ0FBQztJQUM1QyxJQUFJLEVBQUUsbUJBQW1CO0lBRXpCLEtBQUssRUFBRTtRQUNMLElBQUksRUFBRSxLQUFLO1FBQ1gsSUFBSSxFQUFFLEtBQUs7UUFDWCxJQUFJLEVBQUUsT0FBTztRQUNiLFlBQVksRUFBRSxPQUFPO1FBQ3JCLFlBQVksRUFBRSxPQUFPO1FBQ3JCLFlBQVksRUFBRSxPQUFPO1FBQ3JCLEtBQUssRUFBRSxNQUFNO1FBQ2IsUUFBUSxFQUFFO1lBQ1IsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztZQUN0QixPQUFPLEVBQUUsR0FBRztTQUNiO1FBQ0QsSUFBSSxFQUFFLE1BQU07UUFDWixVQUFVLEVBQUUsTUFBTTtRQUNsQixHQUFHLFVBQVUsRUFBRTtLQUNUO0lBRVIsS0FBSyxFQUFFLENBQUMsUUFBUSxFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUUsaUJBQWlCLENBQUM7SUFFakUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7UUFDMUIsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBRTNC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Y2gsIGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnXG5cbi8vIEVmZmVjdHNcbmltcG9ydCB7IGNvbG9yUHJvcHMsIHVzZUNvbG9ycyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3VzZS1jb2xvcnMnXG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZEYXRhVGFibGVDZWxsIH0gZnJvbSAnLi9WRGF0YVRhYmxlQ2VsbCdcbmltcG9ydCB7IFZDaGVja2JveCB9IGZyb20gJy4uL1ZDaGVja2JveCdcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuXG5leHBvcnQgY29uc3QgVkRhdGFUYWJsZUJvZHkgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1kYXRhLXRhYmxlLWJvZHknLFxuXG4gIHByb3BzOiB7XG4gICAgY29sczogQXJyYXksXG4gICAgcm93czogQXJyYXksXG4gICAgZGFyazogQm9vbGVhbixcbiAgICBzaG93U2VxdWVuY2U6IEJvb2xlYW4sXG4gICAgc2hvd0NoZWNrYm94OiBCb29sZWFuLFxuICAgIGNoZWNrQWxsUm93czogQm9vbGVhbixcbiAgICBhbGlnbjogU3RyaW5nLFxuICAgIGNvbFdpZHRoOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogMTI1LFxuICAgIH0sXG4gICAgcGFnZTogTnVtYmVyLFxuICAgIHJvd3NPblBhZ2U6IE51bWJlcixcbiAgICAuLi5jb2xvclByb3BzKCksXG4gIH0gYXMgYW55LFxuXG4gIGVtaXRzOiBbJ3NlbGVjdCcsICdjbGljazpyb3cnLCAnZGJsY2xpY2s6cm93JywgJ2NvbnRleHRtZW51OnJvdyddLFxuXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzLCBlbWl0IH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3QgY2hlY2tlZFJvd3MgPSByZWYoW10pXG5cbiAgICBjb25zdCB7IHNldEJhY2tncm91bmRDc3NDb2xvciwgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yIH0gPSB1c2VDb2xvcnMoKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtZGF0YS10YWJsZV9fYm9keSc6IHRydWUsXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCByb3dzT25UYWJsZSA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGFueT5bXT4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLnJvd3M/LnNsaWNlKFxuICAgICAgICAocHJvcHMucGFnZSAtIDEpICogcHJvcHMucm93c09uUGFnZSxcbiAgICAgICAgcHJvcHMucGFnZSAqIHByb3BzLnJvd3NPblBhZ2UsXG4gICAgICApXG4gICAgfSlcblxuICAgIHdhdGNoKFxuICAgICAgKCkgPT4gcHJvcHMuY2hlY2tBbGxSb3dzLFxuICAgICAgKHRvKSA9PiB7XG4gICAgICAgIGlmICh0bykgb25TZWxlY3RSb3dzKHByb3BzLnJvd3MpXG4gICAgICAgIGVsc2Ugb25TZWxlY3RSb3dzKFtdKVxuICAgICAgfSxcbiAgICApXG5cbiAgICBjb25zdCBvblNlbGVjdFJvd3MgPSAocm93cykgPT4ge1xuICAgICAgY2hlY2tlZFJvd3MudmFsdWUgPSByb3dzXG4gICAgICBlbWl0KCdzZWxlY3QnLCBjaGVja2VkUm93cy52YWx1ZSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5OdW1iZXJDZWxsID0gKGNvdW50KTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoXG4gICAgICAgIFZEYXRhVGFibGVDZWxsLFxuICAgICAgICB7XG4gICAgICAgICAgd2lkdGg6IDUwLFxuICAgICAgICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICBkYXJrOiBwcm9wcy5kYXJrLFxuICAgICAgICAgIGNvbG9yOiBwcm9wcy5jb2xvcixcbiAgICAgICAgICBjbGFzczogJ3YtZGF0YS10YWJsZV9fcm93LW51bWJlcicsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBjb3VudCArIDEsXG4gICAgICAgIH0sXG4gICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQ2hlY2tib3hDZWxsID0gKHJvdyk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKFxuICAgICAgICBWRGF0YVRhYmxlQ2VsbCxcbiAgICAgICAge1xuICAgICAgICAgIHdpZHRoOiA1MCxcbiAgICAgICAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgZGFyazogcHJvcHMuZGFyayxcbiAgICAgICAgICBjb2xvcjogcHJvcHMuY29sb3IsXG4gICAgICAgICAgY2xhc3M6ICd2LWRhdGEtdGFibGVfX3Jvdy1jaGVja2JveCcsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PlxuICAgICAgICAgICAgaChWQ2hlY2tib3gsIHtcbiAgICAgICAgICAgICAgbW9kZWxWYWx1ZTogY2hlY2tlZFJvd3MudmFsdWUsXG4gICAgICAgICAgICAgIHZhbHVlOiByb3csXG4gICAgICAgICAgICAgIG9uQ2hhbmdlOiBvblNlbGVjdFJvd3MsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSxcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5Sb3dDZWxsID0gKGNvbCwgcm93KTogVk5vZGUgPT4ge1xuICAgICAgY29uc3QgeyBmb3JtYXQgfSA9IGNvbFxuICAgICAgY29uc3Qgc2xvdENvbnRlbnQgPVxuICAgICAgICBzbG90c1tjb2wua2V5XSAmJlxuICAgICAgICBzbG90c1tjb2wua2V5XSEoe1xuICAgICAgICAgIHJvdyxcbiAgICAgICAgICBmb3JtYXQsXG4gICAgICAgIH0pXG5cbiAgICAgIHJldHVybiBoKFxuICAgICAgICBWRGF0YVRhYmxlQ2VsbCxcbiAgICAgICAge1xuICAgICAgICAgIHdpZHRoOiBjb2wud2lkdGgsXG4gICAgICAgICAgYWxpZ246IGNvbC5hbGlnbiB8fCBwcm9wcy5hbGlnbixcbiAgICAgICAgICBkYXJrOiBwcm9wcy5kYXJrLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT5cbiAgICAgICAgICAgIHNsb3RDb250ZW50XG4gICAgICAgICAgICAgID8gc2xvdENvbnRlbnRcbiAgICAgICAgICAgICAgOiBmb3JtYXRcbiAgICAgICAgICAgICAgPyBmb3JtYXQocm93KVxuICAgICAgICAgICAgICA6IFN0cmluZyhyb3dbY29sLmtleV0pLFxuICAgICAgICB9LFxuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IGdlblRhYmxlUm93ID0gKHJvdywgcm93Q291bnQ6IG51bWJlcik6IFZOb2RlID0+IHtcbiAgICAgIGNvbnN0IHJvd0NlbGxzOiBWTm9kZVtdID0gW11cblxuICAgICAgcHJvcHMuc2hvd1NlcXVlbmNlICYmIHJvd0NlbGxzLnB1c2goZ2VuTnVtYmVyQ2VsbChyb3dDb3VudCkpXG4gICAgICBwcm9wcy5zaG93Q2hlY2tib3ggJiYgcm93Q2VsbHMucHVzaChnZW5DaGVja2JveENlbGwocm93KSlcblxuICAgICAgcHJvcHMuY29scy5mb3JFYWNoKChjb2wpID0+IHtcbiAgICAgICAgY29sLnNob3cgJiYgcm93Q2VsbHMucHVzaChnZW5Sb3dDZWxsKGNvbCwgcm93KSlcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiBoKFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzOiB7ICd2LWRhdGEtdGFibGVfX3Jvdyc6IHRydWUgfSxcbiAgICAgICAgICBvbkNsaWNrOiAoKSA9PiBlbWl0KCdjbGljazpyb3cnLCByb3cpLFxuICAgICAgICAgIG9uRGJsY2xpY2s6ICgpID0+IGVtaXQoJ2RibGNsaWNrOnJvdycsIHJvdyksXG4gICAgICAgICAgb25Db250ZXh0bWVudTogKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgICAgZW1pdCgnY29udGV4dG1lbnU6cm93Jywgcm93KVxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHJvd0NlbGxzLFxuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IGdlblRhYmxlUm93cyA9ICgpOiBWTm9kZVtdID0+IHtcbiAgICAgIGNvbnN0IHRhYmxlUm93czogVk5vZGVbXSA9IFtdXG4gICAgICBjb25zdCByb3dzTGVuZ3RoID0gcm93c09uVGFibGUudmFsdWU/Lmxlbmd0aFxuICAgICAgY29uc3QgY291bnQgPSAocHJvcHMucGFnZSAtIDEpICogcHJvcHMucm93c09uUGFnZVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd3NMZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB0YWJsZVJvd3MucHVzaChnZW5UYWJsZVJvdyhyb3dzT25UYWJsZS52YWx1ZVtpXSwgY291bnQgKyBpKSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRhYmxlUm93c1xuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiBoKCdkaXYnLCB7XG4gICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgIHN0eWxlOiBzdHlsZXMudmFsdWUsXG4gICAgfSwgZ2VuVGFibGVSb3dzKCkpXG4gIH0sXG59KVxuIl19