import { h, shallowRef, watch, withDirectives, defineComponent, vShow, onMounted, } from 'vue';
import { overlayProps, useOverlay } from '../../composables/use-overlay';
import { transitionProps, useTransition } from '../../composables/use-transition';
import { useToggle } from '../../composables/use-toggle';
import { convertToUnit } from '../../helpers';
export default defineComponent({
    name: 'v-modal',
    props: {
        modelValue: Boolean,
        zIndex: {
            type: [Number, String],
            default: 10,
        },
        width: {
            type: [Number, String],
            default: null,
        },
        ...overlayProps(),
        ...transitionProps(),
    },
    emits: ['update:modelValue'],
    setup(props, { slots, emit }) {
        const { isActive } = useToggle(props);
        const modalRef = shallowRef(null);
        onMounted(() => {
            if (props.overlay) {
                const { createOverlay, removeOverlay } = useOverlay(props, modalRef.value);
                isActive.value && createOverlay();
                watch(() => isActive.value, (to) => {
                    to && createOverlay();
                    !to && removeOverlay();
                });
            }
        });
        const genContent = () => {
            const propsData = {
                class: 'v-modal__content',
                style: {
                    width: props.width ? convertToUnit(props.width) : '',
                },
            };
            return h('div', propsData, slots.default && slots.default());
        };
        const genModal = () => {
            const propsData = {
                class: 'v-modal',
                ref: modalRef,
                ['onUpdate:modelValue']: (val) => emit('update:modelValue', val),
            };
            return withDirectives(h('div', propsData, genContent()), [[vShow, isActive.value]]);
        };
        return () => useTransition(genModal(), props.transition);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVk1vZGFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvdnVlbGFuZC9zcmMvY29tcG9uZW50cy9WTW9kYWwvVk1vZGFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCxDQUFDLEVBQ0QsVUFBVSxFQUNWLEtBQUssRUFDTCxjQUFjLEVBQ2QsZUFBZSxFQUNmLEtBQUssRUFDTCxTQUFTLEdBQ1YsTUFBTSxLQUFLLENBQUE7QUFHWixPQUFPLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxNQUFNLCtCQUErQixDQUFBO0FBQ3hFLE9BQU8sRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0NBQWtDLENBQUE7QUFDakYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDhCQUE4QixDQUFBO0FBSXhELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFFN0MsZUFBZSxlQUFlLENBQUM7SUFDN0IsSUFBSSxFQUFFLFNBQVM7SUFFZixLQUFLLEVBQUU7UUFDTCxVQUFVLEVBQUUsT0FBTztRQUNuQixNQUFNLEVBQUU7WUFDTixJQUFJLEVBQUUsQ0FBRSxNQUFNLEVBQUUsTUFBTSxDQUFFO1lBQ3hCLE9BQU8sRUFBRSxFQUFFO1NBQ1o7UUFDRCxLQUFLLEVBQUU7WUFDTCxJQUFJLEVBQUUsQ0FBRSxNQUFNLEVBQUUsTUFBTSxDQUFFO1lBQ3hCLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7UUFDRCxHQUFHLFlBQVksRUFBRTtRQUNqQixHQUFHLGVBQWUsRUFBRTtLQUNkO0lBRVIsS0FBSyxFQUFFLENBQUUsbUJBQW1CLENBQUU7SUFFOUIsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7UUFDMUIsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUNyQyxNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFakMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUNiLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRTtnQkFFakIsTUFBTSxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsR0FBRyxVQUFVLENBQ2pELEtBQUssRUFDTCxRQUFRLENBQUMsS0FBTSxDQUNoQixDQUFBO2dCQUVELFFBQVEsQ0FBQyxLQUFLLElBQUksYUFBYSxFQUFFLENBQUE7Z0JBRWpDLEtBQUssQ0FDSCxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUNwQixDQUFDLEVBQUUsRUFBRSxFQUFFO29CQUNMLEVBQUUsSUFBSSxhQUFhLEVBQUUsQ0FBQTtvQkFDckIsQ0FBQyxFQUFFLElBQUksYUFBYSxFQUFFLENBQUE7Z0JBQ3hCLENBQUMsQ0FDRixDQUFBO2FBQ0Y7UUFDSCxDQUFDLENBQUMsQ0FBQTtRQUVGLE1BQU0sVUFBVSxHQUFHLEdBQVUsRUFBRTtZQUM3QixNQUFNLFNBQVMsR0FBRztnQkFDaEIsS0FBSyxFQUFFLGtCQUFrQjtnQkFDekIsS0FBSyxFQUFFO29CQUNMLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2lCQUNyRDthQUNGLENBQUE7WUFDRCxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxPQUFPLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7UUFDOUQsQ0FBQyxDQUFBO1FBRUQsTUFBTSxRQUFRLEdBQUcsR0FBRyxFQUFFO1lBQ3BCLE1BQU0sU0FBUyxHQUFHO2dCQUNoQixLQUFLLEVBQUUsU0FBUztnQkFDaEIsR0FBRyxFQUFFLFFBQVE7Z0JBQ2IsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxDQUFDO2FBQ2pFLENBQUE7WUFFRCxPQUFPLGNBQWMsQ0FDbkIsQ0FBQyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFDakMsQ0FBRSxDQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFFLENBQUUsQ0FDOUIsQ0FBQTtRQUNILENBQUMsQ0FBQTtRQUVELE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUMxRCxDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVnVlIEFQSVxuaW1wb3J0IHtcbiAgaCxcbiAgc2hhbGxvd1JlZixcbiAgd2F0Y2gsXG4gIHdpdGhEaXJlY3RpdmVzLFxuICBkZWZpbmVDb21wb25lbnQsXG4gIHZTaG93LFxuICBvbk1vdW50ZWQsXG59IGZyb20gJ3Z1ZSdcblxuLy8gRWZmZWN0c1xuaW1wb3J0IHsgb3ZlcmxheVByb3BzLCB1c2VPdmVybGF5IH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvdXNlLW92ZXJsYXknXG5pbXBvcnQgeyB0cmFuc2l0aW9uUHJvcHMsIHVzZVRyYW5zaXRpb24gfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy91c2UtdHJhbnNpdGlvbidcbmltcG9ydCB7IHVzZVRvZ2dsZSB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3VzZS10b2dnbGUnXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1tb2RhbCcsXG5cbiAgcHJvcHM6IHtcbiAgICBtb2RlbFZhbHVlOiBCb29sZWFuLFxuICAgIHpJbmRleDoge1xuICAgICAgdHlwZTogWyBOdW1iZXIsIFN0cmluZyBdLFxuICAgICAgZGVmYXVsdDogMTAsXG4gICAgfSxcbiAgICB3aWR0aDoge1xuICAgICAgdHlwZTogWyBOdW1iZXIsIFN0cmluZyBdLFxuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICB9LFxuICAgIC4uLm92ZXJsYXlQcm9wcygpLFxuICAgIC4uLnRyYW5zaXRpb25Qcm9wcygpLFxuICB9IGFzIGFueSxcblxuICBlbWl0czogWyAndXBkYXRlOm1vZGVsVmFsdWUnIF0sXG5cbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMsIGVtaXQgfSkge1xuICAgIGNvbnN0IHsgaXNBY3RpdmUgfSA9IHVzZVRvZ2dsZShwcm9wcylcbiAgICBjb25zdCBtb2RhbFJlZiA9IHNoYWxsb3dSZWYobnVsbClcblxuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICBpZiAocHJvcHMub3ZlcmxheSkge1xuXG4gICAgICAgIGNvbnN0IHsgY3JlYXRlT3ZlcmxheSwgcmVtb3ZlT3ZlcmxheSB9ID0gdXNlT3ZlcmxheShcbiAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICBtb2RhbFJlZi52YWx1ZSEsXG4gICAgICAgIClcblxuICAgICAgICBpc0FjdGl2ZS52YWx1ZSAmJiBjcmVhdGVPdmVybGF5KClcblxuICAgICAgICB3YXRjaChcbiAgICAgICAgICAoKSA9PiBpc0FjdGl2ZS52YWx1ZSxcbiAgICAgICAgICAodG8pID0+IHtcbiAgICAgICAgICAgIHRvICYmIGNyZWF0ZU92ZXJsYXkoKVxuICAgICAgICAgICAgIXRvICYmIHJlbW92ZU92ZXJsYXkoKVxuICAgICAgICAgIH0sXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgY29uc3QgZ2VuQ29udGVudCA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiAndi1tb2RhbF9fY29udGVudCcsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgd2lkdGg6IHByb3BzLndpZHRoID8gY29udmVydFRvVW5pdChwcm9wcy53aWR0aCkgOiAnJyxcbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIHNsb3RzLmRlZmF1bHQgJiYgc2xvdHMuZGVmYXVsdCgpKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbk1vZGFsID0gKCkgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogJ3YtbW9kYWwnLFxuICAgICAgICByZWY6IG1vZGFsUmVmLFxuICAgICAgICBbJ29uVXBkYXRlOm1vZGVsVmFsdWUnXTogKHZhbCkgPT4gZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCB2YWwpLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gd2l0aERpcmVjdGl2ZXMoXG4gICAgICAgIGgoJ2RpdicsIHByb3BzRGF0YSwgZ2VuQ29udGVudCgpKSxcbiAgICAgICAgWyBbIHZTaG93LCBpc0FjdGl2ZS52YWx1ZSBdIF1cbiAgICAgIClcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4gdXNlVHJhbnNpdGlvbihnZW5Nb2RhbCgpLCBwcm9wcy50cmFuc2l0aW9uKVxuICB9LFxufSlcbiJdfQ==