import { h, computed, defineComponent } from 'vue';
import { colorProps, useColors } from '../../composable/use-colors';
import { convertToUnit } from '../../helpers';
import { VResize } from '../VResize';
export const VDataTableCell = defineComponent({
    name: 'v-data-table-cell',
    props: {
        dark: Boolean,
        resizeable: Boolean,
        align: {
            type: String,
            default: 'start',
        },
        width: {
            type: [String, Number],
            default: 75,
        },
        resizerColor: {
            type: String,
            default: 'primary',
        },
        contentColor: String,
        ...colorProps(),
    },
    emits: ['resize'],
    setup(props, { slots, emit }) {
        const { setTextClassNameColor, setTextCssColor, setBackgroundCssColor, setBackgroundClassNameColor, } = useColors();
        const classes = computed(() => ({
            'v-data-table__cell': true,
            ...(props.contentColor ? setTextClassNameColor(props.contentColor) : {}),
            ...(props.color ? setBackgroundClassNameColor(props.color) : {}),
        }));
        const styles = computed(() => ({
            width: convertToUnit(+props.width),
            ...(props.contentColor ? setTextCssColor(props.contentColor) : {}),
            ...(props.color ? setBackgroundCssColor(props.color) : {}),
        }));
        const genResize = () => {
            const propsData = {
                right: true,
                emit: true,
                color: props.resizerColor,
                onResize: ($size) => emit('resize', $size),
            };
            return h(VResize, propsData);
        };
        const genCellContent = () => {
            const propsData = {
                class: {
                    'v-data-table__cell-content': true,
                    [`text-align--${props.align}`]: !!props.align,
                },
            };
            return h('div', propsData, slots.default && slots.default());
        };
        return () => {
            const propsData = {
                class: classes.value,
                style: styles.value,
            };
            return h('div', propsData, [
                genCellContent(),
                props.resizeable && genResize(),
            ]);
        };
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkRhdGFUYWJsZUNlbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WRGF0YVRhYmxlL1ZEYXRhVGFibGVDZWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxNQUFNLEtBQUssQ0FBQTtBQUdsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLDZCQUE2QixDQUFBO0FBR25FLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFHN0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUtwQyxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsZUFBZSxDQUFDO0lBQzVDLElBQUksRUFBRSxtQkFBbUI7SUFDekIsS0FBSyxFQUFFO1FBQ0wsSUFBSSxFQUFFLE9BQU87UUFDYixVQUFVLEVBQUUsT0FBTztRQUNuQixLQUFLLEVBQUU7WUFDTCxJQUFJLEVBQUUsTUFBTTtZQUNaLE9BQU8sRUFBRSxPQUFPO1NBQ2pCO1FBQ0QsS0FBSyxFQUFFO1lBQ0wsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztZQUN0QixPQUFPLEVBQUUsRUFBRTtTQUNaO1FBQ0QsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFLE1BQU07WUFDWixPQUFPLEVBQUUsU0FBUztTQUNuQjtRQUNELFlBQVksRUFBRSxNQUFNO1FBQ3BCLEdBQUcsVUFBVSxFQUFFO0tBQ1Q7SUFFUixLQUFLLEVBQUUsQ0FBQyxRQUFRLENBQUM7SUFFakIsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7UUFDMUIsTUFBTSxFQUNKLHFCQUFxQixFQUNyQixlQUFlLEVBQ2YscUJBQXFCLEVBQ3JCLDJCQUEyQixHQUM1QixHQUFHLFNBQVMsRUFBRSxDQUFBO1FBRWYsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUEwQixHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZELG9CQUFvQixFQUFFLElBQUk7WUFDMUIsR0FBRyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ3hFLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQywyQkFBMkIsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUNqRSxDQUFDLENBQUMsQ0FBQTtRQUVILE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQzdCLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQ2xDLEdBQUcsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDbEUsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1NBQzNELENBQUMsQ0FBQyxDQUFBO1FBRUgsTUFBTSxTQUFTLEdBQUcsR0FBVSxFQUFFO1lBQzVCLE1BQU0sU0FBUyxHQUFHO2dCQUNoQixLQUFLLEVBQUUsSUFBSTtnQkFDWCxJQUFJLEVBQUUsSUFBSTtnQkFDVixLQUFLLEVBQUUsS0FBSyxDQUFDLFlBQVk7Z0JBQ3pCLFFBQVEsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUM7YUFDM0MsQ0FBQTtZQUVELE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQTtRQUM5QixDQUFDLENBQUE7UUFFRCxNQUFNLGNBQWMsR0FBRyxHQUFVLEVBQUU7WUFDakMsTUFBTSxTQUFTLEdBQUc7Z0JBQ2hCLEtBQUssRUFBRTtvQkFDTCw0QkFBNEIsRUFBRSxJQUFJO29CQUNsQyxDQUFDLGVBQWdCLEtBQUssQ0FBQyxLQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSztpQkFDaEQ7YUFDRixDQUFBO1lBRUQsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFBO1FBQzlELENBQUMsQ0FBQTtRQUVELE9BQU8sR0FBRyxFQUFFO1lBQ1YsTUFBTSxTQUFTLEdBQUc7Z0JBQ2hCLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSztnQkFDcEIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLO2FBQ3BCLENBQUE7WUFFRCxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO2dCQUN6QixjQUFjLEVBQUU7Z0JBQ2hCLEtBQUssQ0FBQyxVQUFVLElBQUksU0FBUyxFQUFFO2FBQ2hDLENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQTtJQUNILENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBWdWUgQVBJXG5pbXBvcnQgeyBoLCBjb21wdXRlZCwgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJ1xuXG4vLyBFZmZlY3RzXG5pbXBvcnQgeyBjb2xvclByb3BzLCB1c2VDb2xvcnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG5cbi8vIEhlbHBlcnNcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWUmVzaXplIH0gZnJvbSAnLi4vVlJlc2l6ZSdcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuXG5leHBvcnQgY29uc3QgVkRhdGFUYWJsZUNlbGwgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1kYXRhLXRhYmxlLWNlbGwnLFxuICBwcm9wczoge1xuICAgIGRhcms6IEJvb2xlYW4sXG4gICAgcmVzaXplYWJsZTogQm9vbGVhbixcbiAgICBhbGlnbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3N0YXJ0JyxcbiAgICB9LFxuICAgIHdpZHRoOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogNzUsXG4gICAgfSxcbiAgICByZXNpemVyQ29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdwcmltYXJ5JyxcbiAgICB9LFxuICAgIGNvbnRlbnRDb2xvcjogU3RyaW5nLFxuICAgIC4uLmNvbG9yUHJvcHMoKSxcbiAgfSBhcyBhbnksXG5cbiAgZW1pdHM6IFsncmVzaXplJ10sXG5cbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMsIGVtaXQgfSk6ICgpID0+IFZOb2RlIHtcbiAgICBjb25zdCB7XG4gICAgICBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IsXG4gICAgICBzZXRUZXh0Q3NzQ29sb3IsXG4gICAgICBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IsXG4gICAgICBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IsXG4gICAgfSA9IHVzZUNvbG9ycygpXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1kYXRhLXRhYmxlX19jZWxsJzogdHJ1ZSxcbiAgICAgIC4uLihwcm9wcy5jb250ZW50Q29sb3IgPyBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IocHJvcHMuY29udGVudENvbG9yKSA6IHt9KSxcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgd2lkdGg6IGNvbnZlcnRUb1VuaXQoK3Byb3BzLndpZHRoKSxcbiAgICAgIC4uLihwcm9wcy5jb250ZW50Q29sb3IgPyBzZXRUZXh0Q3NzQ29sb3IocHJvcHMuY29udGVudENvbG9yKSA6IHt9KSxcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBnZW5SZXNpemUgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICByaWdodDogdHJ1ZSxcbiAgICAgICAgZW1pdDogdHJ1ZSxcbiAgICAgICAgY29sb3I6IHByb3BzLnJlc2l6ZXJDb2xvcixcbiAgICAgICAgb25SZXNpemU6ICgkc2l6ZSkgPT4gZW1pdCgncmVzaXplJywgJHNpemUpLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaChWUmVzaXplLCBwcm9wc0RhdGEpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQ2VsbENvbnRlbnQgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LWRhdGEtdGFibGVfX2NlbGwtY29udGVudCc6IHRydWUsXG4gICAgICAgICAgW2B0ZXh0LWFsaWduLS0keyBwcm9wcy5hbGlnbiB9YF06ICEhcHJvcHMuYWxpZ24sXG4gICAgICAgIH0sXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIHNsb3RzLmRlZmF1bHQgJiYgc2xvdHMuZGVmYXVsdCgpKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgICBzdHlsZTogc3R5bGVzLnZhbHVlLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBbXG4gICAgICAgIGdlbkNlbGxDb250ZW50KCksXG4gICAgICAgIHByb3BzLnJlc2l6ZWFibGUgJiYgZ2VuUmVzaXplKCksXG4gICAgICBdKVxuICAgIH1cbiAgfSxcbn0pXG4iXX0=