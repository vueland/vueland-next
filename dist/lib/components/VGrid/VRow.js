import { defineComponent, h, computed } from 'vue';
import { toCamelCase } from '../../helpers';
const breakpoints = ['sm', 'md', 'lg', 'xl'];
const positions = ['start', 'center', 'end'];
export default defineComponent({
    name: 'v-row',
    props: {
        align: {
            type: String,
            default: null,
            validator: (str) => [...positions, 'baseline', 'stretch'].includes(str),
        },
        alignContent: {
            type: String,
            default: null,
            validator: (str) => [...positions, 'space-between', 'space-around', 'stretch'].includes(str),
        },
        justify: {
            type: String,
            default: null,
            validator: (str) => [...positions, 'space-between', 'space-around'].includes(str),
        },
        noGutter: Boolean,
        ...breakpoints.reduce((props, bp) => {
            props[`justify-${bp}`] = {
                type: String,
                default: null,
                validator: (str) => [...positions, 'space-between', 'space-around'].includes(str),
            };
            props[`align-${bp}`] = {
                type: String,
                default: null,
                validator: (str) => [...positions, 'baseline', 'stretch'].includes(str),
            };
            props[`align-content-${bp}`] = {
                type: String,
                default: null,
                validator: (str) => [...positions, 'space-between', 'space-around', 'stretch'].includes(str),
            };
            return props;
        }, {}),
    },
    setup(props, { slots }) {
        const classes = computed(() => ({
            'v-row': true,
            'no-gutter': props.noGutter,
            [`justify-${props.justify}`]: !!props.justify,
            [`align-${props.align}`]: !!props.align,
            [`align-content-${props.alignContent}`]: !!props.alignContent,
            ...breakpoints.reduce((cls, bp) => {
                ;
                [...positions, 'space-between', 'space-around'].forEach((pos) => {
                    cls[`justify-${bp}-${pos}`] =
                        pos === props[toCamelCase('justify', bp)];
                });
                [...positions, 'baseline', 'stretch'].forEach((pos) => {
                    cls[`align-${bp}-${pos}`] =
                        pos === props[toCamelCase('align', bp)];
                });
                [...positions, 'space-between', 'space-around', 'stretch'].forEach((pos) => {
                    cls[`align-content-${bp}-${pos}`] =
                        pos === props[toCamelCase('align', 'content', bp)];
                });
                return cls;
            }, {}),
        }));
        return () => h('div', {
            class: classes.value,
        }, {
            default: () => slots.default && slots.default(),
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVlJvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZHcmlkL1ZSb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFTLE1BQU0sS0FBSyxDQUFBO0FBQ3pELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFFM0MsTUFBTSxXQUFXLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQTtBQUM1QyxNQUFNLFNBQVMsR0FBRyxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUE7QUFFNUMsZUFBZSxlQUFlLENBQUM7SUFDN0IsSUFBSSxFQUFFLE9BQU87SUFDYixLQUFLLEVBQUU7UUFDTCxLQUFLLEVBQUU7WUFDTCxJQUFJLEVBQUUsTUFBTTtZQUNaLE9BQU8sRUFBRSxJQUFJO1lBQ2IsU0FBUyxFQUFFLENBQUMsR0FBVyxFQUFFLEVBQUUsQ0FDekIsQ0FBQyxHQUFHLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztTQUN0RDtRQUNELFlBQVksRUFBRTtZQUNaLElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLElBQUk7WUFDYixTQUFTLEVBQUUsQ0FBQyxHQUFXLEVBQUUsRUFBRSxDQUN6QixDQUFDLEdBQUcsU0FBUyxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsU0FBUyxDQUFDLENBQUMsUUFBUSxDQUNqRSxHQUFHLENBQ0o7U0FDSjtRQUNELE9BQU8sRUFBRTtZQUNQLElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLElBQUk7WUFDYixTQUFTLEVBQUUsQ0FBQyxHQUFXLEVBQUUsRUFBRSxDQUN6QixDQUFDLEdBQUcsU0FBUyxFQUFFLGVBQWUsRUFBRSxjQUFjLENBQUMsQ0FBQyxR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QUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFZLENBQUE7Z0JBQ2xFLENBQUMsQ0FDRixDQUFBO2dCQUVELE9BQU8sR0FBRyxDQUFBO1lBQ1osQ0FBQyxFQUFFLEVBQUUsQ0FBQztTQUNQLENBQUMsQ0FBQyxDQUFBO1FBRUgsT0FBTyxHQUFHLEVBQUUsQ0FDVixDQUFDLENBQ0MsS0FBSyxFQUNMO1lBQ0UsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO1NBQ3JCLEVBQ0Q7WUFDRSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFO1NBQ2hELENBQ0YsQ0FBQTtJQUNMLENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGgsIGNvbXB1dGVkLCBWTm9kZSB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IHRvQ2FtZWxDYXNlIH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuY29uc3QgYnJlYWtwb2ludHMgPSBbJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ11cbmNvbnN0IHBvc2l0aW9ucyA9IFsnc3RhcnQnLCAnY2VudGVyJywgJ2VuZCddXG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LXJvdycsXG4gIHByb3BzOiB7XG4gICAgYWxpZ246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICB2YWxpZGF0b3I6IChzdHI6IHN0cmluZykgPT5cbiAgICAgICAgWy4uLnBvc2l0aW9ucywgJ2Jhc2VsaW5lJywgJ3N0cmV0Y2gnXS5pbmNsdWRlcyhzdHIpLFxuICAgIH0sXG4gICAgYWxpZ25Db250ZW50OiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgdmFsaWRhdG9yOiAoc3RyOiBzdHJpbmcpID0+XG4gICAgICAgIFsuLi5wb3NpdGlvbnMsICdzcGFjZS1iZXR3ZWVuJywgJ3NwYWNlLWFyb3VuZCcsICdzdHJldGNoJ10uaW5jbHVkZXMoXG4gICAgICAgICAgc3RyXG4gICAgICAgICksXG4gICAgfSxcbiAgICBqdXN0aWZ5OiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgdmFsaWRhdG9yOiAoc3RyOiBzdHJpbmcpID0+XG4gICAgICAgIFsuLi5wb3NpdGlvbnMsICdzcGFjZS1iZXR3ZWVuJywgJ3NwYWNlLWFyb3VuZCddLmluY2x1ZGVzKHN0ciksXG4gICAgfSxcbiAgICBub0d1dHRlcjogQm9vbGVhbixcbiAgICAuLi5icmVha3BvaW50cy5yZWR1Y2UoKHByb3BzLCBicCkgPT4ge1xuICAgICAgcHJvcHNbYGp1c3RpZnktJHticH1gXSA9IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICB2YWxpZGF0b3I6IChzdHI6IHN0cmluZykgPT5cbiAgICAgICAgICBbLi4ucG9zaXRpb25zLCAnc3BhY2UtYmV0d2VlbicsICdzcGFjZS1hcm91bmQnXS5pbmNsdWRlcyhzdHIpLFxuICAgICAgfVxuICAgICAgcHJvcHNbYGFsaWduLSR7YnB9YF0gPSB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgICAgdmFsaWRhdG9yOiAoc3RyOiBzdHJpbmcpID0+XG4gICAgICAgICAgWy4uLnBvc2l0aW9ucywgJ2Jhc2VsaW5lJywgJ3N0cmV0Y2gnXS5pbmNsdWRlcyhzdHIpLFxuICAgICAgfVxuICAgICAgcHJvcHNbYGFsaWduLWNvbnRlbnQtJHticH1gXSA9IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICB2YWxpZGF0b3I6IChzdHI6IHN0cmluZykgPT5cbiAgICAgICAgICBbLi4ucG9zaXRpb25zLCAnc3BhY2UtYmV0d2VlbicsICdzcGFjZS1hcm91bmQnLCAnc3RyZXRjaCddLmluY2x1ZGVzKFxuICAgICAgICAgICAgc3RyXG4gICAgICAgICAgKSxcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9wc1xuICAgIH0sIHt9KSxcbiAgfSxcblxuICBzZXR1cChwcm9wcywgeyBzbG90cyB9KTogKCkgPT4gVk5vZGUge1xuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LXJvdyc6IHRydWUsXG4gICAgICAnbm8tZ3V0dGVyJzogcHJvcHMubm9HdXR0ZXIsXG4gICAgICBbYGp1c3RpZnktJHtwcm9wcy5qdXN0aWZ5fWBdOiAhIXByb3BzLmp1c3RpZnksXG4gICAgICBbYGFsaWduLSR7cHJvcHMuYWxpZ259YF06ICEhcHJvcHMuYWxpZ24sXG4gICAgICBbYGFsaWduLWNvbnRlbnQtJHtwcm9wcy5hbGlnbkNvbnRlbnR9YF06ICEhcHJvcHMuYWxpZ25Db250ZW50LFxuXG4gICAgICAuLi5icmVha3BvaW50cy5yZWR1Y2UoKGNscywgYnApID0+IHtcbiAgICAgICAgO1suLi5wb3NpdGlvbnMsICdzcGFjZS1iZXR3ZWVuJywgJ3NwYWNlLWFyb3VuZCddLmZvckVhY2goKHBvcykgPT4ge1xuICAgICAgICAgIGNsc1tganVzdGlmeS0ke2JwfS0ke3Bvc31gXSA9XG4gICAgICAgICAgICBwb3MgPT09IChwcm9wc1t0b0NhbWVsQ2FzZSgnanVzdGlmeScsIGJwKV0gYXMgc3RyaW5nKVxuICAgICAgICB9KVxuICAgICAgICA7Wy4uLnBvc2l0aW9ucywgJ2Jhc2VsaW5lJywgJ3N0cmV0Y2gnXS5mb3JFYWNoKChwb3MpID0+IHtcbiAgICAgICAgICBjbHNbYGFsaWduLSR7YnB9LSR7cG9zfWBdID1cbiAgICAgICAgICAgIHBvcyA9PT0gKHByb3BzW3RvQ2FtZWxDYXNlKCdhbGlnbicsIGJwKV0gYXMgc3RyaW5nKVxuICAgICAgICB9KVxuICAgICAgICA7Wy4uLnBvc2l0aW9ucywgJ3NwYWNlLWJldHdlZW4nLCAnc3BhY2UtYXJvdW5kJywgJ3N0cmV0Y2gnXS5mb3JFYWNoKFxuICAgICAgICAgIChwb3MpID0+IHtcbiAgICAgICAgICAgIGNsc1tgYWxpZ24tY29udGVudC0ke2JwfS0ke3Bvc31gXSA9XG4gICAgICAgICAgICAgIHBvcyA9PT0gKHByb3BzW3RvQ2FtZWxDYXNlKCdhbGlnbicsICdjb250ZW50JywgYnApXSBhcyBzdHJpbmcpXG4gICAgICAgICAgfVxuICAgICAgICApXG5cbiAgICAgICAgcmV0dXJuIGNsc1xuICAgICAgfSwge30pLFxuICAgIH0pKVxuXG4gICAgcmV0dXJuICgpID0+XG4gICAgICBoKFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCksXG4gICAgICAgIH1cbiAgICAgIClcbiAgfSxcbn0pXG4iXX0=