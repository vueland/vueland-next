!function(Q,F){"object"==typeof exports&&"object"==typeof module?module.exports=F(require("vue")):"function"==typeof define&&define.amd?define("vueland",["vue"],F):"object"==typeof exports?exports.vueland=F(require("vue")):Q.vueland=F(Q.Vue)}("undefined"!=typeof self?self:this,(function(__WEBPACK_EXTERNAL_MODULE__895__){return function(){"use strict";var __webpack_modules__={717:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": function() { return /* binding */ src; }\n});\n\n// NAMESPACE OBJECT: ./src/directives/index.ts\nvar directives_namespaceObject = {};\n__webpack_require__.r(directives_namespaceObject);\n__webpack_require__.d(directives_namespaceObject, {\n  \"clickOutside\": function() { return clickOutside; },\n  \"resize\": function() { return resize; }\n});\n\n;// CONCATENATED MODULE: ./src/install.ts\n\nfunction install(app) {\n  var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (install.installed) return;\n  install.installed = true;\n  var components = args.components,\n      directives = args.directives;\n\n  for (var key in components) {\n    if (components[key]) {\n      app.component(key, components[key]);\n    }\n  }\n\n  for (var _key in directives) {\n    if (directives[_key]) {\n      app.directive(_key, directives[_key]);\n    }\n  }\n\n  app.provide('$v_options', Vueland.options);\n  app.provide('$v_theme', Vueland.theme);\n  app.provide('$v_icons', Vueland.icons);\n\n  if (this instanceof Vueland) {\n    return this;\n  }\n\n  console.log(new Vueland());\n  return new Vueland();\n}\n;// CONCATENATED MODULE: ./src/library.ts\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n\nvar Vueland = /*#__PURE__*/function () {\n  function Vueland() {\n    _classCallCheck(this, Vueland);\n  }\n\n  _createClass(Vueland, null, [{\n    key: \"setOptions\",\n    value: function setOptions() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      Vueland.options = options || {};\n    }\n  }, {\n    key: \"setTheme\",\n    value: function setTheme(theme) {\n      Vueland.theme = theme;\n    }\n  }, {\n    key: \"setIcons\",\n    value: function setIcons(icons) {\n      Vueland.icons = icons;\n    }\n  }]);\n\n  return Vueland;\n}();\nVueland.install = install;\nVueland.installed = false;\nVueland.theme = null;\nVueland.icons = null;\n/* harmony default export */ var library = (Vueland);\n;// CONCATENATED MODULE: ./src/directives/v-click-outside/index.ts\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction clickHandler(e, el) {\n  var _a, _b, _c, _d;\n\n  if (el.contains(e.target) && ((_a = el._binds) === null || _a === void 0 ? void 0 : _a.value) && !((_b = el._binds) === null || _b === void 0 ? void 0 : _b.value.closeConditional)) return;\n  if (typeof ((_c = el._binds) === null || _c === void 0 ? void 0 : _c.value) === 'function') el._binds.value(e);\n  if (_typeof((_d = el._binds) === null || _d === void 0 ? void 0 : _d.value) === 'object') el._binds.value.handler(e);\n}\n\nfunction removeListener(el) {\n  document.body.removeEventListener('click', el._onClick, true);\n  delete el._onClick;\n  delete el._binds;\n}\n\nvar clickOutside = {\n  beforeMount: function beforeMount(el, binding) {\n    el._binds = binding;\n  },\n  mounted: function mounted(el) {\n    el._onClick = function (e) {\n      return clickHandler(e, el);\n    };\n\n    document.body.addEventListener('click', el._onClick, true);\n  },\n  beforeUpdate: function beforeUpdate(el, binding) {\n    el._binds = binding;\n  },\n  beforeUnmount: function beforeUnmount(el) {\n    removeListener(el);\n  }\n};\n;// CONCATENATED MODULE: ./src/directives/v-resize/index.ts\nvar resize = {\n  mounted: function mounted(el, binding) {\n    var callback = binding.value;\n    var options = binding.options || {\n      passive: true\n    };\n    window.addEventListener('resize', callback, options);\n    el._onResize = {\n      callback: callback,\n      options: options\n    };\n\n    if (!binding.modifiers || !binding.modifiers.quiet) {\n      callback();\n    }\n  },\n  beforeUnmount: function beforeUnmount(el) {\n    if (!el._onResize) return;\n    var _el$_onResize = el._onResize,\n        callback = _el$_onResize.callback,\n        options = _el$_onResize.options;\n    window.removeEventListener('resize', callback, options);\n    delete el._onResize;\n  }\n};\n;// CONCATENATED MODULE: ./src/directives/index.ts\n\n\n// EXTERNAL MODULE: external {\"root\":\"Vue\",\"commonjs\":\"vue\",\"commonjs2\":\"vue\",\"amd\":\"vue\"}\nvar external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_ = __webpack_require__(895);\n;// CONCATENATED MODULE: ./src/services/breakpoints.ts\nvar breakpoints = {\n  sm: 576,\n  md: 768,\n  lg: 992,\n  xl: 1200\n};\n;// CONCATENATED MODULE: ./src/utils/throttle.ts\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar throttle = function throttle(fn, timeout) {\n  var lastThis = null;\n  var lastArgs = null;\n  var isThrottled = false;\n\n  function wrapper() {\n    if (isThrottled) {\n      lastThis = this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      lastArgs = args;\n      return;\n    }\n\n    lastArgs && fn.call.apply(fn, [lastThis].concat(_toConsumableArray(lastArgs)));\n    isThrottled = true;\n    setTimeout(function () {\n      isThrottled = false;\n\n      if (lastArgs) {\n        wrapper.apply(lastThis, lastArgs);\n      }\n\n      lastThis = null;\n      lastArgs = null;\n    }, timeout);\n  }\n\n  return wrapper;\n};\n;// CONCATENATED MODULE: ./src/components/VApp/VApp.ts\n\n\n\n\n/* harmony default export */ var VApp = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-app',\n  directives: {\n    resize: resize\n  },\n  props: {\n    global: {\n      type: Object,\n      \"default\": null\n    }\n  },\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var THROTTLING_TIMEOUT = 60;\n    var state = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({\n      current: null,\n      xlAndLess: false,\n      lgAndLess: false,\n      mdAndLess: false,\n      smAndLess: false\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.provide)('breakpoints', state);\n\n    var setCurrentBreakpointName = function setCurrentBreakpointName(screen) {\n      if (screen >= breakpoints.xl) {\n        return state.current = 'xl';\n      }\n\n      if (screen >= breakpoints.lg && screen < breakpoints.xl) {\n        return state.current = 'lg';\n      }\n\n      if (screen >= breakpoints.md && screen < breakpoints.lg) {\n        return state.current = 'md';\n      }\n\n      if (screen >= breakpoints.sm && screen < breakpoints.md) {\n        return state.current = 'sm';\n      }\n\n      return null;\n    };\n\n    var setIntervals = function setIntervals(screen) {\n      var xl = breakpoints.xl,\n          lg = breakpoints.lg,\n          md = breakpoints.md,\n          sm = breakpoints.sm;\n      state.xlAndLess = screen <= xl && screen > lg;\n      state.lgAndLess = screen <= lg && screen > md;\n      state.mdAndLess = screen <= md && screen > sm;\n      state.smAndLess = screen <= sm;\n    };\n\n    var setSizes = function setSizes() {\n      var _a;\n\n      var screen = ((_a = props.global) === null || _a === void 0 ? void 0 : _a.innerWidth) || window.innerWidth;\n      setCurrentBreakpointName(screen);\n      setIntervals(screen);\n    };\n\n    var throttledResizeListener = throttle(setSizes, THROTTLING_TIMEOUT);\n\n    var genAppWrapper = function genAppWrapper() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-app--wrapper'\n      }, {\n        \"default\": function _default() {\n          return slots[\"default\"] && slots[\"default\"]();\n        }\n      });\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onMounted)(function () {\n      setSizes();\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.withDirectives)((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-app'\n      }, genAppWrapper()), [[resize, throttledResizeListener]]);\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/utils/color-parser.ts\nfunction isCssColor(color) {\n  return !!color.match(/^(#|var\\(--|(rgb|hsl)a?\\()/);\n}\n;// CONCATENATED MODULE: ./src/composable/use-colors.ts\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || use_colors_unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction use_colors_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return use_colors_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return use_colors_arrayLikeToArray(o, minLen); }\n\nfunction use_colors_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\nvar colorProps = function colorProps() {\n  var defaultColor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return {\n    color: {\n      type: String,\n      \"default\": defaultColor\n    }\n  };\n};\nvar useColors = function useColors() {\n  var setTextClassNameColor = function setTextClassNameColor(color) {\n    var classes = {};\n\n    if (!isCssColor(color)) {\n      var _color$trim$split = color.trim().split(' ', 2),\n          _color$trim$split2 = _slicedToArray(_color$trim$split, 2),\n          colorName = _color$trim$split2[0],\n          colorModifier = _color$trim$split2[1];\n\n      colorName && (classes[\"\".concat(colorName, \"--text\")] = true);\n      colorModifier && (classes[\"text--\".concat(colorModifier)] = true);\n    }\n\n    return classes;\n  };\n\n  var setTextCssColor = function setTextCssColor(color) {\n    var styles = {};\n\n    if (isCssColor(color)) {\n      styles.color = color;\n    }\n\n    return styles;\n  };\n\n  var setBackgroundCssColor = function setBackgroundCssColor(color) {\n    var styles = {};\n\n    if (isCssColor(color)) {\n      styles['background-color'] = color;\n      styles['border-color'] = color;\n    }\n\n    return styles;\n  };\n\n  var setBackgroundClassNameColor = function setBackgroundClassNameColor(color) {\n    var classes = {};\n\n    if (!isCssColor(color)) {\n      var _color$trim$split3 = color.trim().split(' ', 2),\n          _color$trim$split4 = _slicedToArray(_color$trim$split3, 2),\n          colorName = _color$trim$split4[0],\n          colorModifier = _color$trim$split4[1];\n\n      colorName && (classes[colorName] = true);\n      colorModifier && (classes[colorModifier] = true);\n    }\n\n    return classes;\n  };\n\n  return {\n    setTextCssColor: setTextCssColor,\n    setTextClassNameColor: setTextClassNameColor,\n    setBackgroundCssColor: setBackgroundCssColor,\n    setBackgroundClassNameColor: setBackgroundClassNameColor\n  };\n};\n;// CONCATENATED MODULE: ./src/composable/use-elevation.ts\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nfunction elevationProps() {\n  return {\n    elevation: [String, Number]\n  };\n}\nfunction useElevation(props) {\n  var elevationClasses = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n    return _defineProperty({}, \"elevation-\".concat(props.elevation), !!props.elevation);\n  });\n  return {\n    elevationClasses: elevationClasses\n  };\n}\n;// CONCATENATED MODULE: ./src/composable/use-position.ts\n\nvar positionProps = function positionProps() {\n  return {\n    absolute: Boolean,\n    left: Boolean,\n    right: Boolean,\n    top: Boolean,\n    bottom: Boolean\n  };\n};\nvar usePosition = function usePosition(props) {\n  var positionClasses = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n    return {\n      'position--absolute': props.absolute,\n      'to--left': props.left,\n      'to--right': props.right,\n      'to--top': props.top,\n      'to--bottom': props.bottom\n    };\n  });\n  return {\n    positionClasses: positionClasses\n  };\n};\n;// CONCATENATED MODULE: ./src/helpers/index.ts\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { helpers_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction helpers_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nvar createSimpleFunctional = function createSimpleFunctional(c) {\n  var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'div';\n  var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n    name: name || c.replace(/__/g, '-'),\n    setup: function setup(_, _ref) {\n      var slots = _ref.slots;\n      var propsData = {\n        \"class\": helpers_defineProperty({}, c.trim(), true)\n      };\n      return function () {\n        return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(el, propsData, slots[\"default\"] && slots[\"default\"]());\n      };\n    }\n  });\n};\nvar addOnceListener = function addOnceListener(el, eventName, cb) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  var once = function once(event) {\n    cb(event);\n    el.removeEventListener(eventName, once, options);\n  };\n\n  el.addEventListener(eventName, once, options);\n};\nvar convertToUnit = function convertToUnit(str) {\n  var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'px';\n\n  if (isNaN(+str)) {\n    return String(str);\n  } else {\n    return \"\".concat(Number(str)).concat(unit);\n  }\n};\nvar warning = function warning(warningText) {\n  console.warn(warningText);\n};\nvar copyWithoutLink = function copyWithoutLink(obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\nvar addScopedSlot = function addScopedSlot(slotName, slots) {\n  return function (scoped) {\n    var arg = _objectSpread({}, scoped);\n\n    return slots[slotName] && slots[slotName](arg);\n  };\n};\nvar getKeyValueFromTarget = function getKeyValueFromTarget(valueKey, target) {\n  return valueKey.split('.').reduce(function (acc, it) {\n    return acc[it];\n  }, target);\n};\nvar mapToValArray = function mapToValArray(map) {\n  return Array.from(map.values());\n};\nvar uniqueArray = function uniqueArray(arr) {\n  return Object.values(arr.reduce(function (map, it) {\n    if (!map[it.name]) map[it.name] = it;\n    return map;\n  }, {}));\n};\nvar getStringKeysValue = function getStringKeysValue(str, value) {\n  return str.split('.').reduce(function (acc, it) {\n    return acc[it];\n  }, value);\n};\nvar toCamelCase = function toCamelCase() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return args.reduce(function (res, s, i) {\n    if (i === 0) res += s;else res += s[0].toUpperCase() + s.slice(1);\n    return res;\n  }, '');\n};\n;// CONCATENATED MODULE: ./src/components/VProgressCircular/VProgressCircular.ts\nfunction VProgressCircular_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VProgressCircular_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VProgressCircular_ownKeys(Object(source), !0).forEach(function (key) { VProgressCircular_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VProgressCircular_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VProgressCircular_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n/* harmony default export */ var VProgressCircular = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-progress-circular',\n  props: VProgressCircular_objectSpread({\n    indeterminate: Boolean,\n    size: {\n      type: [Number, String],\n      \"default\": 32\n    },\n    width: {\n      type: [Number, String],\n      \"default\": 4\n    },\n    value: {\n      type: [Number, String],\n      \"default\": 0\n    },\n    rotate: {\n      type: [Number, String],\n      \"default\": 0\n    }\n  }, colorProps()),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var radius = 20;\n\n    var _useColors = useColors(),\n        setTextClassNameColor = _useColors.setTextClassNameColor,\n        setTextCssColor = _useColors.setTextCssColor;\n\n    var normalizedValue = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      if (props.value < 0) return 0;\n      if (props.value > 100) return 100;\n      return parseFloat(props.value);\n    });\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VProgressCircular_objectSpread({\n        'v-progress-circular': true,\n        'v-progress-circular--indeterminate': props.indeterminate\n      }, props.color ? setTextClassNameColor(props.color) : {});\n    });\n    var circumference = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return 2 * Math.PI * radius;\n    });\n    var strokeDashArray = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return Math.round(circumference.value * 1000) / 1000;\n    });\n    var strokeDashOffset = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return (100 - normalizedValue.value) / 100 * circumference.value + 'px';\n    });\n    var viewBoxSize = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return radius / (1 - Number(props.width) / +props.size);\n    });\n    var strokeWidth = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return Number(props.width) / +props.size * viewBoxSize.value * 2;\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VProgressCircular_objectSpread({\n        width: convertToUnit(props.size),\n        height: convertToUnit(props.size)\n      }, props.color ? setTextCssColor(props.color) : {});\n    });\n    var svgStyle = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        transform: \"rotate(\".concat(+props.rotate, \"deg)\")\n      };\n    });\n\n    function genCircle(name, offset) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('circle', {\n        \"class\": \"v-progress-circular__\".concat(name),\n        fill: 'transparent',\n        cx: 2 * viewBoxSize.value,\n        cy: 2 * viewBoxSize.value,\n        r: radius,\n        'stroke-width': strokeWidth.value,\n        'stroke-dasharray': strokeDashArray.value,\n        'stroke-dashoffset': offset\n      });\n    }\n\n    var genSvg = function genSvg() {\n      var children = [props.indeterminate || genCircle('underlay', 0), genCircle('overlay', strokeDashOffset.value)];\n      var propsData = {\n        xmlns: 'http://www.w3.org/2000/svg',\n        viewBox: \"\".concat(viewBoxSize.value, \" \").concat(viewBoxSize.value, \" \").concat(2 * viewBoxSize.value, \" \").concat(2 * viewBoxSize.value),\n        style: svgStyle.value\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('svg', propsData, children);\n    };\n\n    var genInfo = function genInfo() {\n      var propsData = {\n        \"class\": 'v-progress-circular__info'\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, slots[\"default\"] && slots[\"default\"]());\n    };\n\n    return function () {\n      var propsData = {\n        \"class\": classes.value,\n        style: styles.value\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [genSvg(), genInfo()]);\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VButton/VButton.ts\nfunction VButton_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VButton_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VButton_ownKeys(Object(source), !0).forEach(function (key) { VButton_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VButton_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VButton_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n/* harmony default export */ var VButton = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-button',\n  props: VButton_objectSpread({\n    disabled: Boolean,\n    outlined: Boolean,\n    rounded: Boolean,\n    round: Boolean,\n    absolute: Boolean,\n    loading: Boolean,\n    left: Boolean,\n    right: Boolean,\n    text: Boolean,\n    dark: Boolean,\n    label: String,\n    width: [String, Number],\n    height: [String, Number],\n    color: {\n      type: String,\n      \"default\": 'grey lighten-1'\n    }\n  }, elevationProps()),\n  emits: ['click'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n\n    var _useColors = useColors(),\n        setTextClassNameColor = _useColors.setTextClassNameColor,\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor,\n        setTextCssColor = _useColors.setTextCssColor;\n\n    var _useElevation = useElevation(props),\n        elevationClasses = _useElevation.elevationClasses;\n\n    var _usePosition = usePosition(props),\n        positionClasses = _usePosition.positionClasses;\n\n    var isFlat = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.text || props.outlined;\n    });\n    var isLoadable = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return !props.text && !props.outlined && props.loading;\n    });\n    var isElevetable = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return !isLoadable.value && !props.disabled;\n    });\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var elevations = isElevetable.value ? elevationClasses.value : {};\n      return VButton_objectSpread(VButton_objectSpread(VButton_objectSpread(VButton_objectSpread({\n        'v-button': true,\n        'v-button--text': props.text || props.outlined,\n        'v-button--outlined': props.outlined,\n        'v-button--rounded': !props.round && props.rounded,\n        'v-button--round': props.round,\n        'v-button--disabled': props.disabled || isLoadable.value,\n        'v-button--loading': props.loading\n      }, elevations), positionClasses.value), props.color && isFlat.value ? setTextClassNameColor(props.color) : {}), props.color && !isFlat.value ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var width = props.width || 40;\n      var height = props.round ? width : props.height ? props.height : '';\n      return VButton_objectSpread(VButton_objectSpread({\n        width: (props.width || props.round) && convertToUnit(width),\n        height: !!height && convertToUnit(height)\n      }, props.color && isFlat.value ? setTextCssColor(props.color) : {}), props.color && !isFlat.value ? setBackgroundCssColor(props.color) : {});\n    });\n\n    var genLoader = function genLoader() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', {\n        \"class\": 'v-button__loader'\n      }, slots.loading && slots.loading() || (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VProgressCircular, {\n        indeterminate: true,\n        size: 23,\n        width: 2\n      }));\n    };\n\n    var genLabel = function genLabel() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', {\n        \"class\": 'v-button__label'\n      }, props.label);\n    };\n\n    var genContent = function genContent() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-button__content'\n      }, [slots[\"default\"] && slots[\"default\"]() || props.label && genLabel()]);\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('button', {\n        \"class\": classes.value,\n        style: styles.value,\n        onClick: function onClick() {\n          return !props.disabled && emit('click');\n        }\n      }, [genContent(), props.loading && genLoader()]);\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VOverlay/VOverlay.ts\nfunction VOverlay_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VOverlay_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VOverlay_ownKeys(Object(source), !0).forEach(function (key) { VOverlay_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VOverlay_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VOverlay_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n/* harmony default export */ var VOverlay = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-overlay',\n  props: {\n    hide: Boolean,\n    active: Boolean,\n    color: String,\n    fixed: Boolean\n  },\n  setup: function setup(props) {\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VOverlay_objectSpread({\n        'v-overlay': true,\n        'v-overlay--hidden': props.hide,\n        'v-overlay--active': props.active\n      }, props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VOverlay_objectSpread({}, props.color ? setBackgroundCssColor(props.color) : {});\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        style: styles.value,\n        ref: 'overlay'\n      });\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/composable/use-overlay.ts\n\n\n\nvar overlayProps = function overlayProps() {\n  return {\n    overlay: Boolean,\n    overlayColor: {\n      type: String,\n      \"default\": '#000000'\n    }\n  };\n};\nvar useOverlay = function useOverlay(props, overlayOn) {\n  var container = document.createElement('div');\n  var overlayElement = null;\n\n  var renderOverlay = function renderOverlay() {\n    return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.render)((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VOverlay, {\n      active: false,\n      color: props.overlayColor\n    }), container);\n  };\n\n  var createOverlay = function createOverlay() {\n    var _a;\n\n    overlayElement.style.zIndex = \"\".concat(props.zIndex - 1);\n    overlayOn.style.zIndex = \"\".concat(props.zIndex);\n    (_a = overlayOn === null || overlayOn === void 0 ? void 0 : overlayOn.parentNode) === null || _a === void 0 ? void 0 : _a.insertBefore(overlayElement, overlayOn);\n    overlayElement === null || overlayElement === void 0 ? void 0 : overlayElement.classList.remove('v-overlay--hidden');\n    requestAnimationFrame(function () {\n      overlayElement === null || overlayElement === void 0 ? void 0 : overlayElement.classList.add('v-overlay--active');\n    });\n  };\n\n  var removeOverlay = function removeOverlay() {\n    overlayElement.classList.remove('v-overlay--active');\n    requestAnimationFrame(function () {\n      overlayElement === null || overlayElement === void 0 ? void 0 : overlayElement.classList.add('v-overlay--hidden');\n    });\n\n    var remove = function remove() {\n      var _a;\n\n      (_a = overlayElement === null || overlayElement === void 0 ? void 0 : overlayElement.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(overlayElement);\n    };\n\n    addOnceListener(overlayElement, 'transitionend', remove);\n  };\n\n  renderOverlay();\n  overlayElement = container.firstChild;\n  return {\n    createOverlay: createOverlay,\n    removeOverlay: removeOverlay\n  };\n};\n;// CONCATENATED MODULE: ./src/composable/use-transition.ts\n\nfunction transitionProps() {\n  return {\n    transition: String\n  };\n}\nfunction useTransition(vNode, transition) {\n  var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var props = {\n    name: transition,\n    mode: mode\n  };\n  return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.Transition, props, {\n    \"default\": function _default() {\n      return vNode;\n    }\n  });\n}\n;// CONCATENATED MODULE: ./src/composable/use-toggle.ts\n\nfunction useToggle(props, propName) {\n  var isActive = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(false);\n  var prop = propName ? propName : 'modelValue';\n  (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n    return props[prop];\n  }, function (to) {\n    return isActive.value = !!to;\n  }, {\n    immediate: true\n  });\n  return {\n    isActive: isActive\n  };\n}\n;// CONCATENATED MODULE: ./src/components/VModal/VModal.ts\nfunction VModal_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VModal_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VModal_ownKeys(Object(source), !0).forEach(function (key) { VModal_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VModal_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VModal_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n/* harmony default export */ var VModal = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-modal',\n  props: VModal_objectSpread(VModal_objectSpread({\n    modelValue: Boolean,\n    zIndex: {\n      type: [Number, String],\n      \"default\": 10\n    },\n    width: {\n      type: [Number, String],\n      \"default\": null\n    }\n  }, overlayProps()), transitionProps()),\n  emits: ['update:modelValue'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n\n    var _useToggle = useToggle(props),\n        isActive = _useToggle.isActive;\n\n    var modalRef = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.shallowRef)(null);\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onMounted)(function () {\n      if (props.overlay) {\n        var _useOverlay = useOverlay(props, modalRef.value),\n            createOverlay = _useOverlay.createOverlay,\n            removeOverlay = _useOverlay.removeOverlay;\n\n        isActive.value && createOverlay();\n        (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n          return isActive.value;\n        }, function (to) {\n          to && createOverlay();\n          !to && removeOverlay();\n        });\n      }\n    });\n\n    var genContent = function genContent() {\n      var propsData = {\n        \"class\": 'v-modal__content',\n        style: {\n          width: props.width ? convertToUnit(props.width) : ''\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, slots[\"default\"] && slots[\"default\"]());\n    };\n\n    var genModal = function genModal() {\n      var propsData = VModal_defineProperty({\n        \"class\": 'v-modal',\n        ref: modalRef\n      }, 'onUpdate:modelValue', function onUpdateModelValue(val) {\n        return emit('update:modelValue', val);\n      });\n\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.withDirectives)((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, genContent()), [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.vShow, isActive.value]]);\n    };\n\n    return function () {\n      return useTransition(genModal(), props.transition);\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/composable/use-auto-position.ts\n\nfunction autoPositionProps() {\n  return {\n    positionX: {\n      type: Number,\n      \"default\": 0\n    },\n    positionY: {\n      type: Number,\n      \"default\": 0\n    }\n  };\n}\nfunction useAutoPosition(props) {\n  var dimensions = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({\n    activator: {\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n      width: 0,\n      height: 0\n    },\n    content: {\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n      width: 0,\n      height: 0\n    },\n    pageYOffset: 0,\n    pageWidth: 0\n  });\n  var contentRef = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n  var offsetY = +props.offsetY;\n  var activator;\n  var content;\n  var contentBottomBorder = 0;\n\n  var getRect = function getRect(el) {\n    var rect = el.getBoundingClientRect();\n    return {\n      top: rect.top,\n      left: rect.left,\n      bottom: rect.bottom,\n      right: rect.right,\n      width: rect.width,\n      height: rect.height\n    };\n  };\n\n  var isAbsolutePositioned = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n    return !!props.positionY || !!props.positionX;\n  });\n\n  var getInnerHeight = function getInnerHeight() {\n    if (!window) return 0;\n    return innerHeight || document.documentElement.clientHeight;\n  };\n\n  var getScrollTop = function getScrollTop() {\n    if (!window) return 0;\n    return pageYOffset || document.documentElement.scrollTop;\n  };\n\n  var getScrollLeft = function getScrollLeft() {\n    if (!window) return 0;\n    return pageXOffset || document.documentElement.scrollLeft;\n  };\n\n  var getContentAbsoluteBottomPoint = function getContentAbsoluteBottomPoint() {\n    return dimensions.content.height + props.positionY + getScrollTop();\n  };\n\n  var getContentBottomBorder = function getContentBottomBorder() {\n    var activator = dimensions.activator,\n        content = dimensions.content;\n\n    if (props.bottom) {\n      return content.height + activator.top + activator.height;\n    }\n\n    if (props.top) {\n      return activator.top;\n    }\n\n    return content.height + activator.top;\n  };\n\n  var calcContentBottomPosition = function calcContentBottomPosition() {\n    var fullHeight = getScrollTop() + getInnerHeight();\n    var contentBottomPosition = isAbsolutePositioned.value ? getContentAbsoluteBottomPoint() : getContentBottomBorder();\n    return fullHeight - contentBottomPosition;\n  };\n\n  var calcAbsoluteTop = function calcAbsoluteTop() {\n    var topPosition = props.positionY + getScrollTop();\n\n    if (offsetY >= contentBottomBorder) {\n      return topPosition + contentBottomBorder - offsetY;\n    }\n\n    return topPosition;\n  };\n\n  var calcBottomPosition = function calcBottomPosition() {\n    var activator = dimensions.activator,\n        content = dimensions.content;\n\n    if (offsetY >= contentBottomBorder) {\n      return activator.top - content.height - offsetY;\n    }\n\n    return activator.top + activator.height + offsetY;\n  };\n\n  var calcTopPosition = function calcTopPosition() {\n    var activator = dimensions.activator,\n        content = dimensions.content;\n\n    if (content.height + getScrollTop() + offsetY > activator.top) {\n      return activator.top + activator.height;\n    }\n\n    return activator.top - content.height;\n  };\n\n  var calcContentAutoPosition = function calcContentAutoPosition() {\n    if (offsetY >= contentBottomBorder) {\n      return dimensions.activator.top + contentBottomBorder - offsetY;\n    }\n\n    return dimensions.activator.top;\n  };\n\n  var calcPositionY = function calcPositionY() {\n    contentBottomBorder = calcContentBottomPosition();\n    if (props.positionY) return calcAbsoluteTop();\n    if (props.bottom) return calcBottomPosition();\n    if (props.top) return calcTopPosition();\n    return calcContentAutoPosition();\n  };\n\n  var calcPositionX = function calcPositionX() {\n    if (props.positionX) return props.positionX + getScrollLeft();\n    return dimensions.activator.left;\n  };\n\n  var snapShot = function snapShot(cb) {\n    requestAnimationFrame(function () {\n      if (!content || content.style.display !== 'none') return cb();\n      content.style.display = 'inline-block';\n      cb();\n      content.style.display = 'none';\n    });\n  };\n\n  var updateDimensions = function updateDimensions() {\n    return new Promise(function (resolve) {\n      snapShot(function () {\n        activator && setActivatorDimensions();\n        content && setContentDimensions();\n        resolve();\n      });\n    });\n  };\n\n  var setActivatorDimensions = function setActivatorDimensions() {\n    dimensions.activator = getRect(activator);\n    dimensions.activator.height = activator.offsetHeight;\n    dimensions.activator.top = dimensions.activator.top + getScrollTop();\n    dimensions.activator.left = dimensions.activator.left + getScrollLeft();\n  };\n\n  var setContentDimensions = function setContentDimensions() {\n    var rect = activator ? dimensions.activator : getRect(content);\n    dimensions.content.height = content.offsetHeight;\n    dimensions.content.top = calcPositionY();\n    dimensions.content.left = calcPositionX();\n    dimensions.content.width = rect.width;\n  };\n\n  var setDimensions = function setDimensions(activatorEl) {\n    if (!activator && !content) {\n      activator = activatorEl;\n      content = contentRef.value;\n    }\n\n    return updateDimensions();\n  };\n\n  return {\n    dimensions: dimensions,\n    contentRef: contentRef,\n    setDimensions: setDimensions,\n    updateDimensions: updateDimensions\n  };\n}\n;// CONCATENATED MODULE: ./src/composable/use-activator.ts\n\nfunction activatorProps() {\n  return {\n    activator: {\n      type: [Object, String]\n    },\n    internalActivator: Boolean\n  };\n}\nvar useActivator = function useActivator(props) {\n  var activatorRef = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n  var activatorSizes = {};\n  var listeners = {};\n\n  var getActivator = function getActivator(event) {\n    var _a;\n\n    if (activatorRef.value) return ((_a = activatorRef.value) === null || _a === void 0 ? void 0 : _a.$el) || activatorRef.value;\n    var target = props.internalActivator ? props.activator.$el : document;\n\n    if (props.inputActivator) {\n      return activatorRef.value = target.querySelector(props.inputActivator);\n    }\n\n    if (props.activator) {\n      if (typeof props.activator === 'string') {\n        return activatorRef.value = target.querySelector(props.activator);\n      }\n\n      return activatorRef.value = props.activator;\n    }\n\n    if (event) {\n      return activatorRef.value = event.target || event.currentTarget;\n    }\n\n    return null;\n  };\n\n  var getActivatorSizes = function getActivatorSizes() {\n    var el = activatorRef.value.$el || activatorRef.value;\n    activatorSizes.left = el.offsetLeft;\n    activatorSizes.top = el.offsetTop;\n    activatorSizes.height = el.offsetHeight;\n    activatorSizes.width = el.offsetWidth;\n    return activatorSizes;\n  };\n\n  var genActivatorListeners = function genActivatorListeners(props, handlers) {\n    if (props.openOnHover) {\n      listeners.mouseenter = function (e) {\n        return handlers.mouseenter(e);\n      };\n\n      listeners.mouseleave = function (e) {\n        return handlers.mouseleave(e);\n      };\n    }\n\n    if (props.openOnClick) {\n      listeners.click = function (e) {\n        return handlers.click(e);\n      };\n    }\n\n    if (props.openOnContextmenu) {\n      listeners.contextmenu = function (e) {\n        return handlers.contextmenu(e);\n      };\n    }\n\n    return listeners;\n  };\n\n  var addActivatorEvents = function addActivatorEvents() {\n    var events = Object.keys(listeners);\n\n    if (activatorRef.value) {\n      events.forEach(function (key) {\n        var el = activatorRef.value.$el || activatorRef.value;\n        el.addEventListener(key, listeners[key]);\n      });\n    }\n  };\n\n  var removeActivatorEvents = function removeActivatorEvents() {\n    var events = Object.keys(listeners);\n\n    if (activatorRef.value) {\n      events.forEach(function (key) {\n        var el = activatorRef.value.$el || activatorRef.value;\n        el.removeEventListener(key, listeners[key]);\n      });\n    }\n  };\n\n  return {\n    activatorRef: activatorRef,\n    getActivator: getActivator,\n    getActivatorSizes: getActivatorSizes,\n    addActivatorEvents: addActivatorEvents,\n    removeActivatorEvents: removeActivatorEvents,\n    genActivatorListeners: genActivatorListeners\n  };\n};\n;// CONCATENATED MODULE: ./src/composable/use-detach.ts\nfunction useDetach() {\n  var target;\n\n  var setDetached = function setDetached(el) {\n    var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    if (selector) target = document.querySelector(selector);\n    if (!selector) target = document.querySelector('.v-app');\n    if (!target) target = document.querySelector('#app');\n    if (!target) target = document.querySelector('body');\n    target.appendChild(el);\n  };\n\n  var removeDetached = function removeDetached(el) {\n    target.removeChild(el);\n  };\n\n  return {\n    setDetached: setDetached,\n    removeDetached: removeDetached\n  };\n}\n;// CONCATENATED MODULE: ./src/components/VMenu/VMenu.ts\nfunction VMenu_typeof(obj) { \"@babel/helpers - typeof\"; return VMenu_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, VMenu_typeof(obj); }\n\nfunction VMenu_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VMenu_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VMenu_ownKeys(Object(source), !0).forEach(function (key) { VMenu_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VMenu_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VMenu_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var VMenu = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-menu',\n  directives: {\n    clickOutside: clickOutside,\n    resize: resize\n  },\n  props: VMenu_objectSpread(VMenu_objectSpread(VMenu_objectSpread({\n    maxHeight: {\n      type: [Number, String],\n      \"default\": 200\n    },\n    width: {\n      type: [Number, String],\n      \"default\": 0\n    },\n    zIndex: {\n      type: [String, Number],\n      \"default\": 10\n    },\n    openOnHover: Boolean,\n    openOnClick: Boolean,\n    openOnContextmenu: Boolean,\n    closeOnClick: {\n      type: Boolean,\n      \"default\": true\n    },\n    elevation: {\n      type: [Number, String],\n      \"default\": 10\n    },\n    offsetX: {\n      type: [String, Number],\n      \"default\": 20\n    },\n    offsetY: {\n      type: [String, Number],\n      \"default\": 20\n    },\n    modelValue: Boolean,\n    inputActivator: {\n      type: String,\n      \"default\": ''\n    }\n  }, positionProps()), autoPositionProps()), activatorProps()),\n  emits: ['show', 'hide'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n\n    var _useElevation = useElevation(props),\n        elevationClasses = _useElevation.elevationClasses;\n\n    var _useToggle = useToggle(props),\n        isActive = _useToggle.isActive;\n\n    var _useAutoPosition = useAutoPosition(props),\n        contentRef = _useAutoPosition.contentRef,\n        setDimensions = _useAutoPosition.setDimensions,\n        dimensions = _useAutoPosition.dimensions;\n\n    var _useDetach = useDetach(),\n        setDetached = _useDetach.setDetached,\n        removeDetached = _useDetach.removeDetached;\n\n    var _useActivator = useActivator(props),\n        activatorRef = _useActivator.activatorRef,\n        getActivator = _useActivator.getActivator,\n        genActivatorListeners = _useActivator.genActivatorListeners,\n        addActivatorEvents = _useActivator.addActivatorEvents,\n        removeActivatorEvents = _useActivator.removeActivatorEvents;\n\n    var setDimensionsOn = function setDimensionsOn(e, flag) {\n      setDimensions(getActivator(e)).then(function () {\n        requestAnimationFrame(function () {\n          return isActive.value = flag;\n        });\n      });\n    };\n\n    var handlers = {\n      click: function click(e) {\n        return setDimensionsOn(e, props.openOnClick);\n      },\n      mouseenter: function mouseenter(e) {\n        return setDimensionsOn(e, props.openOnHover);\n      },\n      mouseleave: function mouseleave(e) {\n        return setDimensionsOn(e, !props.openOnHover);\n      },\n      contextmenu: function contextmenu(e) {\n        return setDimensionsOn(e, props.openOnContextmenu);\n      }\n    };\n    var listeners = genActivatorListeners(props, handlers);\n    var directive = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return isActive.value ? {\n        handler: function handler(e) {\n          if (props.internalActivator && activatorRef.value.contains(e.target)) return;\n          isActive.value = false;\n        },\n        closeConditional: props.closeOnClick\n      } : undefined;\n    });\n    var calcWidth = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.width || +dimensions.content.width;\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(isActive, function (to) {\n      to && emit('show');\n      !to && emit('hide');\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return [props.positionY, props.positionX];\n    }, function () {\n      return setDimensions(activatorRef.value);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.modelValue;\n    }, function (to) {\n      isActive.value = false;\n      setTimeout(function () {\n        return isActive.value = to;\n      });\n    });\n    var contentClasses = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VMenu_objectSpread({\n        'v-menu__content': true\n      }, elevationClasses.value);\n    });\n    var contentStyles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        top: convertToUnit(dimensions.content.top),\n        left: convertToUnit(dimensions.content.left),\n        zIndex: props.zIndex\n      };\n    });\n\n    var onContentClick = function onContentClick() {\n      isActive.value = !props.closeOnClick;\n    };\n\n    var onResize = function onResize() {\n      if (!isActive.value) return;\n      requestAnimationFrame(function () {\n        return setDimensions(activatorRef.value);\n      });\n    };\n\n    var genActivatorSlot = function genActivatorSlot() {\n      if (slots.activator) {\n        var slotContent = slots.activator({\n          on: listeners\n        });\n\n        if (VMenu_typeof(slotContent[0].type) === 'object') {\n          return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n            ref: activatorRef\n          }, (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(slotContent[0]));\n        }\n\n        return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(slotContent[0], {\n          ref: activatorRef\n        });\n      }\n\n      return null;\n    };\n\n    var genContentSlot = function genContentSlot() {\n      var propsData = {\n        ref: contentRef,\n        \"class\": contentClasses.value,\n        style: contentStyles.value,\n        onClick: onContentClick\n      };\n      var slotContent = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-menu__slot',\n        style: {\n          maxHeight: convertToUnit(props.maxHeight),\n          width: convertToUnit(calcWidth.value)\n        }\n      }, [slots[\"default\"] && slots[\"default\"]()]);\n      var content = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, slotContent);\n      var directives = [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.vShow, isActive.value], [resize, onResize], [clickOutside, directive.value]];\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.withDirectives)(content, directives);\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onMounted)(function () {\n      activatorRef.value = getActivator();\n      addActivatorEvents();\n      setDetached(contentRef.value);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeUnmount)(function () {\n      removeActivatorEvents();\n      removeDetached(contentRef.value);\n    });\n    return function () {\n      return [(0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": {\n          'v-menu': true\n        }\n      }), slots.activator && genActivatorSlot(), useTransition(genContentSlot(), 'fade')];\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/composable/use-validation.ts\n\nvar validationProps = function validationProps() {\n  return {\n    rules: {\n      type: Array,\n      \"default\": null\n    },\n    value: [String, Number, Date, Object]\n  };\n};\nvar useValidation = function useValidation(props) {\n  var errorState = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({\n    innerError: null,\n    innerErrorMessage: null,\n    isDirty: false\n  });\n\n  var validationClasses = function validationClasses() {\n    return {\n      'e-validatable': true\n    };\n  };\n\n  var computedColor = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n    return props.disabled ? 'disabled' : 'primary';\n  });\n  var hasRules = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n    return !!props.rules && props.rules.length > 0;\n  });\n\n  var dirty = function dirty() {\n    return errorState.isDirty = true;\n  };\n\n  var update = function update(err) {\n    var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (errorState.innerError !== err) {\n      errorState.innerError = err;\n    }\n\n    if (msg && errorState.innerErrorMessage !== msg) {\n      errorState.innerErrorMessage = msg;\n    }\n\n    if (!msg) errorState.innerErrorMessage = msg;\n    return errorState.innerError;\n  };\n\n  var validate = function validate() {\n    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : props.value;\n    if (!hasRules.value) return true;\n    dirty();\n\n    for (var i = 0, len = props.rules.length; i < len; i += 1) {\n      var rule = props.rules[i];\n      var result = void 0;\n      if (typeof rule === 'function') result = rule(val);\n\n      if (result === false || typeof result === 'string') {\n        update(true, result);\n        return false;\n      }\n\n      if (result === true && i === len - 1) {\n        update(false);\n        return true;\n      }\n    }\n  };\n\n  return {\n    errorState: errorState,\n    computedColor: computedColor,\n    validationClasses: validationClasses,\n    validate: validate,\n    dirty: dirty\n  };\n};\n;// CONCATENATED MODULE: ./src/composable/use-input-states.ts\n\n\nvar useInputStates = function useInputStates(props, _ref) {\n  var attrs = _ref.attrs,\n      emit = _ref.emit;\n  var inputState = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({\n    value: '',\n    focused: false\n  });\n\n  var _useValidation = useValidation(props),\n      errorState = _useValidation.errorState,\n      validate = _useValidation.validate;\n\n  var isDisabled = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n    if (props.disabled) return true;\n    if (typeof attrs.disabled === 'boolean') return attrs.disabled;\n    return attrs.disabled !== undefined;\n  });\n  var isReadonly = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n    if (props.readonly) return true;\n    if (typeof attrs.readonly === 'boolean') return attrs.readonly;\n    return attrs.readonly !== undefined;\n  });\n  var stateClasses = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n    return {\n      'primary--text': inputState.focused,\n      'error--text': !!errorState.innerError\n    };\n  });\n  (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n    return inputState.focused;\n  }, function (focused) {\n    if (!focused && props.rules) return validate(inputState.value);\n  });\n  (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n    return inputState.value;\n  }, function (val) {\n    if (props.rules) return validate(val);\n  });\n\n  var onFocus = function onFocus(e) {\n    if (isReadonly.value) return;\n    inputState.focused = true;\n    emit('focus', e);\n  };\n\n  var onChange = function onChange() {\n    if (isReadonly.value) return;\n    emit('change');\n  };\n\n  var onBlur = function onBlur(e) {\n    if (isReadonly.value) return;\n    inputState.focused = false;\n    emit('blur', e);\n  };\n\n  var onSelect = function onSelect(val) {\n    inputState.focused = false;\n    emit('update:modelValue', val);\n    emit('select', val);\n    onChange();\n  };\n\n  return {\n    inputState: inputState,\n    errorState: errorState,\n    isReadonly: isReadonly,\n    isDisabled: isDisabled,\n    stateClasses: stateClasses,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onChange: onChange,\n    onSelect: onSelect,\n    validate: validate\n  };\n};\n;// CONCATENATED MODULE: ./src/components/VLabel/VLabel.ts\nfunction VLabel_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VLabel_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VLabel_ownKeys(Object(source), !0).forEach(function (key) { VLabel_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VLabel_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VLabel_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n/* harmony default export */ var VLabel = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-label',\n  props: VLabel_objectSpread({\n    disabled: Boolean,\n    focused: Boolean\n  }, colorProps()),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n\n    var _useColors = useColors(),\n        setTextClassNameColor = _useColors.setTextClassNameColor,\n        setTextCssColor = _useColors.setTextCssColor;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VLabel_objectSpread({\n        'v-label': true,\n        'v-label--disabled': props.disabled,\n        'v-label--focused': props.focused\n      }, !props.disabled ? setTextClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VLabel_objectSpread({}, !props.disabled ? setTextCssColor(props.color) : {});\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('label', {\n        \"class\": classes.value,\n        style: styles.value\n      }, {\n        \"default\": function _default() {\n          var _a;\n\n          return (_a = slots[\"default\"]) === null || _a === void 0 ? void 0 : _a.call(slots);\n        }\n      });\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/composable/use-size.ts\n\nvar sizeProps = function sizeProps() {\n  var defaultSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return {\n    sm: {\n      type: Boolean,\n      \"default\": defaultSize === 'sm'\n    },\n    md: {\n      type: Boolean,\n      \"default\": defaultSize === 'md'\n    },\n    lg: {\n      type: Boolean,\n      \"default\": defaultSize === 'lg'\n    },\n    xl: {\n      type: Boolean,\n      \"default\": defaultSize === 'xl'\n    }\n  };\n};\nvar useSize = function useSize(props) {\n  var sizes = Object.keys(sizeProps());\n  var size = computed(function () {\n    return sizes.find(function (s) {\n      return props[s];\n    });\n  });\n  return {\n    size: size\n  };\n};\n;// CONCATENATED MODULE: ./src/services/sizes.ts\nvar sizes;\n\n(function (sizes) {\n  sizes[sizes[\"sm\"] = 16] = \"sm\";\n  sizes[sizes[\"md\"] = 20] = \"md\";\n  sizes[sizes[\"lg\"] = 24] = \"lg\";\n  sizes[sizes[\"xl\"] = 32] = \"xl\";\n})(sizes || (sizes = {}));\n;// CONCATENATED MODULE: ./src/components/VIcon/VIcon.ts\nfunction VIcon_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VIcon_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VIcon_ownKeys(Object(source), !0).forEach(function (key) { VIcon_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VIcon_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VIcon_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n/* harmony default export */ var VIcon = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-icon',\n  props: VIcon_objectSpread(VIcon_objectSpread({\n    disabled: Boolean,\n    clickable: Boolean,\n    size: [String, Number],\n    icon: String,\n    tag: {\n      type: String,\n      \"default\": 'i'\n    }\n  }, colorProps()), sizeProps('sm')),\n  emits: ['click'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n\n    var _useColors = useColors(),\n        setTextCssColor = _useColors.setTextCssColor,\n        setTextClassNameColor = _useColors.setTextClassNameColor;\n\n    var iconTag = props.clickable ? 'button' : props.tag;\n    var computedIcon = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _a;\n\n      return (_a = props.icon || slots[\"default\"] && slots[\"default\"]()[0].children) === null || _a === void 0 ? void 0 : _a.trim();\n    });\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VIcon_objectSpread(VIcon_defineProperty({\n        'v-icon': true,\n        'v-icon--disabled': props.disabled,\n        'v-icon--clickable': props.clickable\n      }, computedIcon.value, !!computedIcon.value), props.color ? setTextClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VIcon_objectSpread({\n        fontSize: getSizes()\n      }, props.color ? setTextCssColor(props.color) : {});\n    });\n\n    var getSizes = function getSizes() {\n      var sizeProps = {\n        sm: props.sm,\n        md: props.md,\n        lg: props.lg,\n        xl: props.xl\n      };\n      var explicitSize = Object.keys(sizeProps).find(function (key) {\n        return sizeProps[key];\n      });\n      return convertToUnit(props.size || explicitSize && sizes[explicitSize]);\n    };\n\n    var onClick = function onClick() {\n      if (!props.disabled && props.clickable) emit('click');\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(iconTag, {\n        \"class\": classes.value,\n        style: styles.value,\n        onClick: onClick\n      });\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VInput/VInput.ts\nfunction VInput_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VInput_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VInput_ownKeys(Object(source), !0).forEach(function (key) { VInput_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VInput_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VInput_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n/* harmony default export */ var VInput = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-input',\n  components: {\n    VLabel: VLabel,\n    VIcon: VIcon\n  },\n  inheritAttrs: false,\n  props: VInput_objectSpread(VInput_objectSpread({\n    label: {\n      type: String,\n      \"default\": ''\n    },\n    prependIcon: {\n      type: String,\n      \"default\": ''\n    },\n    appendIcon: {\n      type: String,\n      \"default\": ''\n    },\n    disabled: Boolean,\n    focused: Boolean,\n    readonly: Boolean,\n    file: Boolean,\n    hints: {\n      type: Boolean,\n      \"default\": true\n    },\n    hintMessage: {\n      type: String,\n      \"default\": ''\n    },\n    textColor: {\n      type: String,\n      \"default\": ''\n    }\n  }, validationProps()), colorProps()),\n  setup: function setup(props, _ref) {\n    var attrs = _ref.attrs,\n        emit = _ref.emit,\n        slots = _ref.slots,\n        expose = _ref.expose;\n\n    var _useColors = useColors(),\n        setTextCssColor = _useColors.setTextCssColor,\n        setTextClassNameColor = _useColors.setTextClassNameColor;\n\n    var _useInputStates = useInputStates(props, {\n      attrs: attrs,\n      emit: emit\n    }),\n        inputState = _useInputStates.inputState,\n        errorState = _useInputStates.errorState,\n        isDisabled = _useInputStates.isDisabled,\n        isReadonly = _useInputStates.isReadonly,\n        stateClasses = _useInputStates.stateClasses,\n        validate = _useInputStates.validate,\n        onFocus = _useInputStates.onFocus,\n        onBlur = _useInputStates.onBlur;\n\n    var form = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.inject)('form', null);\n    var textClassColor = setTextClassNameColor(props.textColor);\n    var textCssColor = setTextCssColor(props.textColor);\n    var hasPrependIcon = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return !!props.prependIcon || !!slots['prepend-icon'];\n    });\n    var hasAppendIcon = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return !!props.appendIcon || !!slots['append-icon'];\n    });\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VInput_objectSpread(VInput_objectSpread(VInput_objectSpread({\n        'v-input': true,\n        'v-input--focused': inputState.focused && !isReadonly.value,\n        'v-input--disabled': isDisabled.value,\n        'v-input--readonly': isReadonly.value,\n        'v-input--file': props.file,\n        'v-input--has-prepend-icon': hasPrependIcon.value,\n        'v-input--has-append-icon': hasAppendIcon.value,\n        'v-input--not-valid': !!errorState.innerError\n      }, stateClasses.value), !props.disabled && !errorState.innerError ? setTextClassNameColor(props.color) : {}), attrs[\"class\"]);\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VInput_objectSpread(VInput_objectSpread({}, !props.disabled && !errorState.innerError ? setTextCssColor(props.color) : {}), attrs.style);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.value;\n    }, function (to) {\n      return inputState.value = to;\n    });\n\n    var genLabel = function genLabel() {\n      var label = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VLabel, {\n        \"class\": 'v-label--on-input',\n        disabled: isDisabled.value,\n        focused: inputState.focused,\n        color: !errorState.innerError ? props.color : ''\n      }, {\n        \"default\": function _default() {\n          return props.label;\n        }\n      });\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-input__label'\n      }, [label]);\n    };\n\n    var genIcon = function genIcon(iconName) {\n      var clickable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, {\n        icon: iconName,\n        size: 16,\n        disabled: props.disabled,\n        clickable: clickable\n      });\n    };\n\n    var genPrependIcon = function genPrependIcon() {\n      var _a;\n\n      var content;\n\n      if (props.prependIcon) {\n        content = genIcon(props.prependIcon);\n      } else {\n        content = (_a = slots['prepend-icon']) === null || _a === void 0 ? void 0 : _a.call(slots);\n      }\n\n      return content ? (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-input__prepend-icon'\n      }, content) : null;\n    };\n\n    var genAppendIcon = function genAppendIcon() {\n      var _a;\n\n      var content;\n\n      if (props.appendIcon) {\n        content = genIcon(props.appendIcon);\n      } else {\n        content = (_a = slots['append-icon']) === null || _a === void 0 ? void 0 : _a.call(slots);\n      }\n\n      return content ? (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-input__append-icon'\n      }, content) : null;\n    };\n\n    var genTextFieldSlot = function genTextFieldSlot() {\n      var _a;\n\n      var prependIconContent = genPrependIcon();\n      var appendIconContent = genAppendIcon();\n      var disabled = props.disabled;\n      var textFieldContent = (_a = slots['text-field']) === null || _a === void 0 ? void 0 : _a.call(slots, {\n        textCssColor: textCssColor,\n        textClassColor: textClassColor,\n        disabled: disabled\n      });\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-input__text-field'\n      }, [prependIconContent, textFieldContent, appendIconContent]);\n    };\n\n    var genHintMessage = function genHintMessage() {\n      return !!errorState.innerErrorMessage ? (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', {\n        \"class\": 'v-input__hints-message'\n      }, [errorState.innerErrorMessage]) : null;\n    };\n\n    var genHints = function genHints() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-input__hints'\n      }, useTransition(genHintMessage(), 'fade'));\n    };\n\n    var genSelectSlot = function genSelectSlot() {\n      var _a;\n\n      return slots.select ? (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-input__selects'\n      }, (_a = slots.select) === null || _a === void 0 ? void 0 : _a.call(slots)) : null;\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeMount)(function () {\n      if (props.rules) form === null || form === void 0 ? void 0 : form.add(validate);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeUnmount)(function () {\n      form === null || form === void 0 ? void 0 : form.remove(validate);\n    });\n    expose({\n      onFocus: onFocus,\n      onBlur: onBlur\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        style: styles.value\n      }, [genLabel(), genTextFieldSlot(), genHints(), genSelectSlot()]);\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VTextField/VTextField.ts\nfunction VTextField_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VTextField_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VTextField_ownKeys(Object(source), !0).forEach(function (key) { VTextField_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VTextField_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VTextField_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n/* harmony default export */ var VTextField = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-text-field',\n  components: {\n    VInput: VInput\n  },\n  inheritAttrs: true,\n  props: VTextField_objectSpread({\n    modelValue: {\n      type: [String, Number],\n      \"default\": ''\n    }\n  }, validationProps()),\n  emits: ['update:modelValue', 'input', 'blur', 'focus', 'change'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        attrs = _ref.attrs;\n    var inputRef = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n\n    var _useInputStates = useInputStates(props, {\n      emit: emit,\n      attrs: attrs\n    }),\n        isReadonly = _useInputStates.isReadonly,\n        isDisabled = _useInputStates.isDisabled,\n        onChange = _useInputStates.onChange;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        'v-text-field': true,\n        'v-text-field--disabled': isDisabled.value,\n        'v-text-field--readonly': isReadonly.value\n      };\n    });\n    var computedValue = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)({\n      get: function get() {\n        return props.modelValue;\n      },\n      set: function set(val) {\n        emit('input', val);\n        emit('update:modelValue', val);\n      }\n    });\n\n    var onFocus = function onFocus() {\n      inputRef.value.onFocus();\n    };\n\n    var onBlur = function onBlur() {\n      inputRef.value.onBlur();\n    };\n\n    var onInput = function onInput(e) {\n      computedValue.value = e.target.value;\n    };\n\n    var genInputField = function genInputField(textClassColor, textCssColor) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('input', {\n        \"class\": VTextField_objectSpread({\n          'v-text-field__input': true\n        }, !attrs.disabled && textClassColor),\n        style: VTextField_objectSpread({}, !attrs.disabled ? textCssColor : {}),\n        disabled: attrs.disabled,\n        type: attrs.type ? attrs.type : 'text',\n        placeholder: attrs.placeholder,\n        readonly: attrs.readonly,\n        value: computedValue.value,\n        onInput: onInput,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        onChange: onChange\n      });\n    };\n\n    var genTextFieldWrapper = function genTextFieldWrapper(clsColor, cssColor) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value\n      }, genInputField(clsColor, cssColor));\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VInput, {\n        value: computedValue.value,\n        rules: props.rules,\n        ref: inputRef\n      }, VTextField_defineProperty({}, 'text-field', function textField(_ref2) {\n        var textClassColor = _ref2.textClassColor,\n            textCssColor = _ref2.textCssColor;\n        return genTextFieldWrapper(textClassColor, textCssColor);\n      }));\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/services/icons.ts\nvar FaIcons;\n\n(function (FaIcons) {\n  FaIcons[\"$add\"] = \"fas fa-plus\";\n  FaIcons[\"$delete\"] = \"fas fa-trash-alt\";\n  FaIcons[\"$sliders\"] = \"fas fa-sliders-h\";\n  FaIcons[\"$edit\"] = \"fas fa-pen\";\n  FaIcons[\"$menu\"] = \"fas fa-bars\";\n  FaIcons[\"$chevronDown\"] = \"fas fa-chevron-down\";\n  FaIcons[\"$caretDown\"] = \"fas fa-caret-down\";\n  FaIcons[\"$radioOn\"] = \"far fa-dot-circle\";\n  FaIcons[\"$radioOff\"] = \"far fa-circle\";\n  FaIcons[\"$box\"] = \"far fa-square\";\n  FaIcons[\"$checkbox\"] = \"far fa-check-square\";\n  FaIcons[\"$arrowRight\"] = \"fas fa-chevron-right\";\n  FaIcons[\"$arrowLeft\"] = \"fas fa-chevron-left\";\n  FaIcons[\"$arrowUp\"] = \"fas fa-arrow-up\";\n  FaIcons[\"$filter\"] = \"fas fa-align-justify\";\n  FaIcons[\"$marker\"] = \"fas fa-map-marker-alt\";\n  FaIcons[\"$search\"] = \"fas fa-search\";\n  FaIcons[\"$close\"] = \"fas fa-times\";\n  FaIcons[\"$paperclip\"] = \"fas fa-paperclip\";\n})(FaIcons || (FaIcons = {}));\n\nvar MaterialIcons;\n\n(function (MaterialIcons) {\n  MaterialIcons[\"$add\"] = \"add\";\n  MaterialIcons[\"$delete\"] = \"delete_forever\";\n  MaterialIcons[\"$sliders\"] = \"fas fa-sliders-h\";\n  MaterialIcons[\"$edit\"] = \"fas fa-pen\";\n  MaterialIcons[\"$menu\"] = \"fas fa-bars\";\n  MaterialIcons[\"$expand\"] = \"expand_more\";\n  MaterialIcons[\"$group\"] = \"expand_more\";\n  MaterialIcons[\"$subgroup\"] = \"arrow_drop_down\";\n  MaterialIcons[\"$dropdown\"] = \"fas fa-caret-down\";\n  MaterialIcons[\"$radioOn\"] = \"far fa-dot-circle\";\n  MaterialIcons[\"$radioOff\"] = \"far fa-circle\";\n  MaterialIcons[\"$box\"] = \"check_box\";\n  MaterialIcons[\"$checkbox\"] = \"check_box_outline_blank\";\n  MaterialIcons[\"$arrowRight\"] = \"chevron_right\";\n  MaterialIcons[\"$arrowLeft\"] = \"chevron_left\";\n  MaterialIcons[\"$arrowUp\"] = \"arrow_upward\";\n  MaterialIcons[\"$filter\"] = \"filter_list\";\n  MaterialIcons[\"$marker\"] = \"fas fa-map-marker-alt\";\n  MaterialIcons[\"$search\"] = \"search\";\n  MaterialIcons[\"$close\"] = \"clear\";\n})(MaterialIcons || (MaterialIcons = {}));\n\nvar MaterialSizes;\n\n(function (MaterialSizes) {\n  MaterialSizes[MaterialSizes[\"xs\"] = 14] = \"xs\";\n  MaterialSizes[MaterialSizes[\"s\"] = 18] = \"s\";\n  MaterialSizes[MaterialSizes[\"md\"] = 20] = \"md\";\n  MaterialSizes[MaterialSizes[\"l\"] = 28] = \"l\";\n  MaterialSizes[MaterialSizes[\"xl\"] = 36] = \"xl\";\n})(MaterialSizes || (MaterialSizes = {}));\n\nvar FaSizes;\n\n(function (FaSizes) {\n  FaSizes[FaSizes[\"xs\"] = 12] = \"xs\";\n  FaSizes[FaSizes[\"s\"] = 14] = \"s\";\n  FaSizes[FaSizes[\"md\"] = 18] = \"md\";\n  FaSizes[FaSizes[\"l\"] = 24] = \"l\";\n  FaSizes[FaSizes[\"xl\"] = 32] = \"xl\";\n})(FaSizes || (FaSizes = {}));\n;// CONCATENATED MODULE: ./src/composable/use-icons.ts\n\n\nfunction useIcons() {\n  var options = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.inject)('$options', function () {\n    return null;\n  });\n  var icons = FaIcons;\n\n  if (options === null || options === void 0 ? void 0 : options.icons) {\n    if (options.icons.includes('material-icons')) {\n      icons = MaterialIcons;\n    }\n  }\n\n  return {\n    icons: icons\n  };\n}\n;// CONCATENATED MODULE: ./src/components/VChip/VChip.ts\nfunction VChip_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VChip_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VChip_ownKeys(Object(source), !0).forEach(function (key) { VChip_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VChip_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VChip_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n/* harmony default export */ var VChip = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-chip',\n  props: VChip_objectSpread({\n    title: {\n      type: String,\n      \"default\": ''\n    },\n    textColor: {\n      type: String,\n      \"default\": '#ffffff'\n    },\n    disabled: Boolean,\n    closable: {\n      type: Boolean,\n      \"default\": true\n    }\n  }, colorProps('primary')),\n  emits: ['close', 'click'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor,\n        setTextCssColor = _useColors.setTextCssColor,\n        setTextClassNameColor = _useColors.setTextClassNameColor;\n\n    var _useIcons = useIcons(),\n        icons = _useIcons.icons;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VChip_objectSpread(VChip_objectSpread({\n        'v-chip': true,\n        'v-chip--disabled': props.disabled\n      }, !props.disabled ? setBackgroundClassNameColor(props.color) : {}), setTextClassNameColor(props.textColor));\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VChip_objectSpread(VChip_objectSpread({}, !props.disabled ? setBackgroundCssColor(props.color) : {}), setTextCssColor(props.textColor));\n    });\n\n    var genCloseIcon = function genCloseIcon() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, {\n        icon: icons.$close,\n        clickable: !props.disabled\n      });\n    };\n\n    var genIconWrapper = function genIconWrapper() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-chip__icon-wrapper',\n        onClick: function onClick() {\n          return emit('close');\n        }\n      }, genCloseIcon());\n    };\n\n    var genChipContent = function genChipContent() {\n      var _a;\n\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-chip__content',\n        onClick: function onClick() {\n          return emit('click');\n        }\n      }, ((_a = slots[\"default\"]) === null || _a === void 0 ? void 0 : _a.call(slots)) || props.title);\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', {\n        \"class\": classes.value,\n        style: styles.value\n      }, [genChipContent(), props.closable ? genIconWrapper() : null]);\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VFileInput/VFileInput.ts\n\n\n\n\n\n\n/* harmony default export */ var VFileInput = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-file-input',\n  props: {\n    disabled: Boolean,\n    multiple: Boolean,\n    chipColor: {\n      type: String,\n      \"default\": 'primary'\n    },\n    value: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    }\n  },\n  emits: ['update:value', 'delete'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        attrs = _ref.attrs;\n\n    var _useIcons = useIcons(),\n        icons = _useIcons.icons;\n\n    var _useInputStates = useInputStates(props, {\n      emit: emit,\n      attrs: attrs\n    }),\n        isDisabled = _useInputStates.isDisabled,\n        isReadonly = _useInputStates.isReadonly;\n\n    var inputRef = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n    var srcRef = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        'v-file-input': true,\n        'v-file-input--disabled': isDisabled.value,\n        'v-file-input--readonly': isReadonly.value,\n        'v-file-input--multiple': props.multiple\n      };\n    });\n\n    var onChange = function onChange(event) {\n      var files = Array.from(event.target.files);\n\n      if (props.multiple) {\n        files = uniqueArray(props.value.concat(files));\n      }\n\n      event.target.value = '';\n      emit('update:value', files);\n    };\n\n    var _onClose = function onClose(file) {\n      var files = props.value.filter(function (it) {\n        return file.name !== it.name;\n      });\n      emit('update:value', files);\n      emit('delete', file);\n    };\n\n    var onClick = function onClick(_ref2) {\n      var srcElement = _ref2.srcElement;\n      if (srcElement !== srcRef.value) return;\n      inputRef.value.click();\n    };\n\n    var genFileInput = function genFileInput() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('input', {\n        \"class\": 'v-file-input__field',\n        type: 'file',\n        multiple: props.multiple,\n        ref: inputRef,\n        style: {\n          position: 'absolute',\n          visibility: 'hidden'\n        },\n        onChange: onChange\n      });\n    };\n\n    var genChips = function genChips() {\n      return uniqueArray(props.value).map(function (file) {\n        return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VChip, {\n          title: file.name,\n          \"class\": 'ma-1',\n          color: props.chipColor,\n          onClose: function onClose() {\n            return _onClose(file);\n          }\n        });\n      });\n    };\n\n    var genChipsContainer = function genChipsContainer() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-file-input__container',\n        ref: srcRef\n      }, genChips());\n    };\n\n    var genComponent = function genComponent() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        onClick: onClick\n      }, [genFileInput(), genChipsContainer()]);\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VInput, {\n        prependIcon: icons.$paperclip,\n        file: true,\n        disabled: isDisabled.value\n      }, {\n        'text-field': function textField() {\n          return genComponent();\n        }\n      });\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VList/VListItem.ts\nfunction VListItem_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n/* harmony default export */ var VListItem = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-list-item',\n  emits: ['click'],\n  setup: function setup(_, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n    var itemRef = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n    var isActive = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(false);\n    var list = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.inject)('list', null);\n    var item = {\n      itemRef: itemRef,\n      isActive: isActive\n    };\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VListItem_defineProperty({\n        'v-list-item': true,\n        'v-list-item--selected': !list.activeClass && isActive.value\n      }, list === null || list === void 0 ? void 0 : list.activeClass, isActive.value);\n    });\n\n    var onClick = function onClick() {\n      list === null || list === void 0 ? void 0 : list.click(item);\n      emit('click');\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeMount)(function () {\n      list === null || list === void 0 ? void 0 : list.add(item);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeUnmount)(function () {\n      list === null || list === void 0 ? void 0 : list.remove(item);\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        ref: itemRef,\n        onClick: onClick\n      }, {\n        \"default\": function _default() {\n          return slots[\"default\"] && slots[\"default\"]({\n            active: isActive\n          });\n        }\n      });\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VList/VListItemTitle.ts\n\n/* harmony default export */ var VListItemTitle = (createSimpleFunctional('v-list-item__title'));\n;// CONCATENATED MODULE: ./src/components/VList/VList.ts\nfunction VList_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VList_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VList_ownKeys(Object(source), !0).forEach(function (key) { VList_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VList_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VList_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n/* harmony default export */ var VList = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-list',\n  props: VList_objectSpread({\n    value: {\n      type: [Number, Array],\n      \"default\": null\n    },\n    multiple: Boolean,\n    active: {\n      type: Boolean,\n      \"default\": false\n    },\n    activeClass: {\n      type: String,\n      \"default\": ''\n    },\n    textColor: {\n      type: String,\n      \"default\": ''\n    }\n  }, colorProps()),\n  emits: ['update:value'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n\n    var _useColors = useColors(),\n        setTextClassNameColor = _useColors.setTextClassNameColor,\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setTextCssColor = _useColors.setTextCssColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var items = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(new Map());\n    var isTrustedSelect = false;\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VList_objectSpread(VList_objectSpread({\n        'v-list': true,\n        'v-list--active': props.active\n      }, setTextClassNameColor(props.textColor)), setBackgroundClassNameColor(props.color));\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VList_objectSpread(VList_objectSpread({}, setTextCssColor(props.textColor)), setBackgroundCssColor(props.color));\n    });\n\n    var register = function register(item) {\n      !items.value.has(item) && items.value.set(item, item);\n    };\n\n    var unregister = function unregister(item) {\n      items.value.has(item) && items.value[\"delete\"](item);\n    };\n\n    var dispatchEvent = function dispatchEvent(val) {\n      isTrustedSelect = true;\n      emit('update:value', val);\n    };\n\n    var setActiveItem = function setActiveItem(item) {\n      mapToValArray((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.toRaw)(items.value)).forEach(function (it) {\n        it.isActive.value = it === item;\n      });\n    };\n\n    var toggleItem = function toggleItem(item) {\n      item.isActive.value = !item.isActive.value;\n    };\n\n    var prepareIndexes = function prepareIndexes() {\n      var values = mapToValArray((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.toRaw)(items.value));\n      var multiple = props.multiple;\n      var val = multiple ? [] : 0;\n      values.forEach(function (it, i) {\n        if (it.isActive.value) {\n          multiple && val.push(i);\n          !multiple && (val = i);\n        }\n      });\n      return val;\n    };\n\n    var onClick = function onClick(item) {\n      if (!props.active) return;\n      props.multiple && toggleItem(item);\n      !props.multiple && setActiveItem(item);\n      dispatchEvent(prepareIndexes());\n    };\n\n    var setItemState = function setItemState(value) {\n      if (value === null) return setActiveItem(value);\n      var values = mapToValArray((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.toRaw)(items.value));\n\n      if (values.length) {\n        if (props.multiple) {\n          ;\n          value.forEach(function (ind) {\n            return toggleItem(values[ind]);\n          });\n        } else {\n          setActiveItem(values[value]);\n        }\n      }\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.value;\n    }, function (to) {\n      if (!isTrustedSelect) setItemState(to);\n      isTrustedSelect && (isTrustedSelect = false);\n    });\n    var stop = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(items, function () {\n      setItemState(props.value);\n      stop();\n    }, {\n      deep: true\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onMounted)(function () {\n      setItemState(props.value);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.provide)('list', {\n      add: register,\n      remove: unregister,\n      click: onClick,\n      activeClass: props.activeClass\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        style: styles.value\n      }, {\n        \"default\": function _default() {\n          var _a;\n\n          return (_a = slots[\"default\"]) === null || _a === void 0 ? void 0 : _a.call(slots);\n        }\n      });\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VSelect/VSelectList.ts\nfunction VSelectList_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar VSelectList = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-select-list',\n  props: {\n    items: {\n      type: Array,\n      \"default\": null\n    },\n    color: {\n      type: String,\n      \"default\": '#ffffff'\n    },\n    textColor: {\n      type: String,\n      \"default\": ''\n    },\n    valueKey: {\n      type: String,\n      \"default\": ''\n    },\n    selected: {\n      type: [String, Number, Object],\n      \"default\": null\n    },\n    activeClass: {\n      type: String,\n      \"default\": ''\n    }\n  },\n  emits: ['select'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var computedSelect = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)({\n      get: function get() {\n        var key = props.valueKey;\n        var selectedValue = key ? props.selected ? getStringKeysValue(key, props.selected) : null : props.selected;\n        return props.selected ? props.items.findIndex(function (it) {\n          var itemValue = key ? getStringKeysValue(key, it) : it;\n          return itemValue === selectedValue;\n        }) : null;\n      },\n      set: function set(val) {\n        emit('select', props.items[val]);\n      }\n    });\n\n    var genItems = function genItems() {\n      return props.items.reduce(function (acc, it, i) {\n        var content = props.valueKey ? getStringKeysValue(props.valueKey, it) : it;\n        acc.push((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VListItem, {\n          key: i\n        }, {\n          \"default\": function _default() {\n            return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VListItemTitle, {}, {\n              \"default\": function _default() {\n                return content;\n              }\n            });\n          }\n        }));\n        return acc;\n      }, []);\n    };\n\n    var genItemsList = function genItemsList() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VList, VSelectList_defineProperty({\n        value: computedSelect.value,\n        active: true,\n        color: '#ffffff',\n        activeClass: props.activeClass\n      }, 'onUpdate:value', function onUpdateValue(val) {\n        return computedSelect.value = val;\n      }), {\n        \"default\": function _default() {\n          return genItems();\n        }\n      });\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-select-list'\n      }, [props.items ? genItemsList() : null]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VSelect/VSelect.ts\nfunction VSelect_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VSelect_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VSelect_ownKeys(Object(source), !0).forEach(function (key) { VSelect_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VSelect_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VSelect_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction VSelect_typeof(obj) { \"@babel/helpers - typeof\"; return VSelect_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, VSelect_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var VSelect = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-select',\n  props: {\n    modelValue: {\n      type: [String, Number, Object],\n      \"default\": null\n    },\n    items: {\n      type: Array,\n      \"default\": null\n    },\n    valueKey: {\n      type: String,\n      \"default\": ''\n    },\n    activeClass: {\n      type: String,\n      \"default\": 'primary white--text text--base'\n    },\n    loading: Boolean\n  },\n  emits: ['click', 'focus', 'select', 'blur', 'change', 'update:modelValue'],\n  setup: function setup(props, _ref) {\n    var attrs = _ref.attrs,\n        emit = _ref.emit;\n\n    var _useInputStates = useInputStates(props, {\n      attrs: attrs,\n      emit: emit\n    }),\n        isDisabled = _useInputStates.isDisabled,\n        isReadonly = _useInputStates.isReadonly,\n        inputState = _useInputStates.inputState,\n        onBlur = _useInputStates.onBlur,\n        onSelect = _useInputStates.onSelect,\n        onFocus = _useInputStates.onFocus;\n\n    var activator = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n    var computedValue = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      if (!!props.modelValue && VSelect_typeof(props.modelValue) === 'object') {\n        return getStringKeysValue(props.valueKey, props.modelValue);\n      }\n\n      return props.modelValue;\n    });\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        'v-select': true,\n        'v-select--expanded': inputState.focused,\n        'v-select--readonly': isReadonly.value,\n        'v-select--disabled': isDisabled.value\n      };\n    });\n\n    var genInput = function genInput(_ref2) {\n      var textCssColor = _ref2.textCssColor,\n          textClassColor = _ref2.textClassColor,\n          disabled = _ref2.disabled;\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('input', {\n        \"class\": VSelect_objectSpread({\n          'v-select__input': true\n        }, disabled ? textClassColor : {}),\n        style: VSelect_objectSpread({}, !disabled ? textCssColor : {}),\n        disabled: isDisabled.value,\n        type: attrs.type || 'text',\n        placeholder: attrs.placeholder,\n        value: computedValue.value,\n        readonly: true\n      });\n    };\n\n    var genListPreloader = function genListPreloader() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-select__preloader'\n      }, (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VProgressCircular, {\n        indeterminate: true,\n        width: 2,\n        size: 30,\n        color: attrs.color || 'primary'\n      }));\n    };\n\n    var genSelectList = function genSelectList() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VMenu, {\n        internalActivator: true,\n        activator: activator.value,\n        inputActivator: '.v-input__text-field',\n        openOnClick: true,\n        maxHeight: 240,\n        zIndex: 12,\n        onShow: onFocus,\n        onHide: onBlur\n      }, {\n        \"default\": function _default() {\n          return props.loading ? genListPreloader() : (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VSelectList, {\n            items: props.items,\n            selected: props.modelValue,\n            valueKey: props.valueKey,\n            activeClass: props.activeClass,\n            onSelect: onSelect\n          });\n        }\n      });\n    };\n\n    var genExpandIcon = function genExpandIcon() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, {\n        icon: FaIcons.$chevronDown,\n        color: !isDisabled.value ? attrs.color : '',\n        size: 16\n      });\n    };\n\n    var genSelect = function genSelect(_ref3) {\n      var textCssColor = _ref3.textCssColor,\n          textClassColor = _ref3.textClassColor,\n          disabled = _ref3.disabled;\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value\n      }, genInput({\n        textCssColor: textCssColor,\n        textClassColor: textClassColor,\n        disabled: disabled\n      }));\n    };\n\n    return function () {\n      var _h;\n\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VInput, {\n        ref: activator,\n        value: computedValue.value,\n        focused: inputState.focused\n      }, (_h = {}, VSelect_defineProperty(_h, 'text-field', function textField(_ref4) {\n        var textCssColor = _ref4.textCssColor,\n            textClassColor = _ref4.textClassColor,\n            disabled = _ref4.disabled;\n        return genSelect({\n          textCssColor: textCssColor,\n          textClassColor: textClassColor,\n          disabled: disabled\n        });\n      }), VSelect_defineProperty(_h, 'append-icon', function appendIcon() {\n        return genExpandIcon();\n      }), VSelect_defineProperty(_h, \"select\", function select() {\n        return activator.value ? genSelectList() : null;\n      }), _h));\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VForm/VForm.ts\n\n/* harmony default export */ var VForm = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-form',\n  setup: function setup(_, _ref) {\n    var slots = _ref.slots;\n    var fields = [];\n\n    var addFieldValidator = function addFieldValidator(item) {\n      fields.push(item);\n    };\n\n    var removeFieldValidator = function removeFieldValidator(item) {\n      fields = fields.filter(function (v) {\n        return v !== item;\n      });\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.provide)('form', {\n      add: addFieldValidator,\n      remove: removeFieldValidator\n    });\n\n    var validate = function validate() {\n      var promises = [];\n      fields.forEach(function (v) {\n        promises.push(v());\n      });\n      return !promises.some(function (f) {\n        return !f;\n      }) ? Promise.resolve() : Promise.reject();\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('form', {\n        \"class\": 'v-form',\n        onSubmit: function onSubmit(e) {\n          return e.preventDefault();\n        }\n      }, {\n        \"default\": function _default() {\n          return slots[\"default\"] && slots[\"default\"]({\n            validate: validate\n          });\n        }\n      });\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VBadge/VBadge.ts\nfunction VBadge_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VBadge_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VBadge_ownKeys(Object(source), !0).forEach(function (key) { VBadge_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VBadge_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VBadge_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n/* harmony default export */ var VBadge = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-badge',\n  props: VBadge_objectSpread(VBadge_objectSpread({\n    dot: Boolean,\n    avatar: Boolean,\n    border: Boolean,\n    toggle: Boolean,\n    content: {\n      required: false\n    },\n    color: {\n      type: String,\n      \"default\": 'primary'\n    },\n    transition: {\n      type: String,\n      \"default\": 'scaleIn'\n    },\n    offsetY: {\n      type: [String, Number],\n      \"default\": 0\n    },\n    offsetX: {\n      type: [String, Number],\n      \"default\": 0\n    }\n  }, positionProps()), elevationProps()),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n\n    var _useElevation = useElevation(props),\n        elevationClasses = _useElevation.elevationClasses;\n\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var offset = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.dot ? 4 : 12;\n    });\n\n    var calcPosition = function calcPosition() {\n      var offsetVal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var value = offset.value - Number(offsetVal);\n      return \"\".concat(value, \"px\");\n    };\n\n    var computedLeft = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.left && calcPosition(props.offsetX);\n    });\n    var computedRight = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.right && calcPosition(props.offsetX);\n    });\n    var computedTop = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.top && calcPosition(props.offsetY);\n    });\n    var computedBottom = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.bottom && calcPosition(props.offsetY);\n    });\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        'v-badge': true,\n        'v-badge--border': props.border,\n        'v-badge--dot': props.dot,\n        'v-badge--avatar': props.avatar\n      };\n    });\n    var badgeClasses = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VBadge_objectSpread(VBadge_objectSpread({\n        'v-badge__badge': true\n      }, elevationClasses.value), props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VBadge_objectSpread({\n        top: computedTop.value,\n        right: computedRight.value,\n        bottom: computedBottom.value,\n        left: computedLeft.value\n      }, props.color ? setBackgroundCssColor(props.color) : {});\n    });\n\n    var addContent = function addContent() {\n      if (props.dot) return undefined;\n      if (props.content) return String(props.content);\n      return undefined;\n    };\n\n    var genBadgeSlot = function genBadgeSlot() {\n      var propsData = {\n        \"class\": {\n          'v-badge__badge-slot': true\n        }\n      };\n      return slots.badge ? (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, slots.badge()) : null;\n    };\n\n    var genContent = function genContent() {\n      var propsData = {\n        \"class\": {\n          'v-badge__content': true\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [addContent(), genBadgeSlot()]);\n    };\n\n    var genBadge = function genBadge() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": badgeClasses.value,\n        style: styles.value\n      }, genContent());\n    };\n\n    return function () {\n      var badge = genBadge();\n\n      if (props.toggle && !slots.badge) {\n        var _useToggle = useToggle(props, 'content'),\n            isActive = _useToggle.isActive;\n\n        badge = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.withDirectives)(badge, [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.vShow, isActive.value]]);\n      }\n\n      var propsData = {\n        \"class\": classes.value\n      };\n      var children = [useTransition(badge, props.transition), slots[\"default\"] && slots[\"default\"]()];\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, children);\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/transitions/helpers.ts\nfunction helpers_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction helpers_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? helpers_ownKeys(Object(source), !0).forEach(function (key) { transitions_helpers_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : helpers_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction transitions_helpers_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nfunction createTransition(hooks) {\n  var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'in-out';\n  return function (vNode) {\n    return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.createBlock)(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.Transition, helpers_objectSpread({\n      mode: mode\n    }, hooks), {\n      \"default\": (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.withCtx)(function () {\n        return [vNode && (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(vNode)];\n      })\n    });\n  };\n}\n;// CONCATENATED MODULE: ./src/components/transitions/expand-transition.ts\nvar init = {\n  transition: null,\n  propSize: '',\n  height: 0,\n  width: 0\n};\nvar PRIMARY_TRANSITION = 'cubic-bezier(.25, .8, .5, 1)';\n\nvar resetStyles = function resetStyles(el) {\n  el.style[init.propSize] = '';\n  el.style.transition = '';\n};\n\nvar getChildrenSizes = function getChildrenSizes(el) {\n  return Array.prototype.reduce.call(el.children, function (acc, it) {\n    var size = getComputedStyle(it)[init.propSize];\n    return acc += parseFloat(size);\n  }, 0);\n};\n\nvar setInitStyles = function setInitStyles(el, x) {\n  init.propSize = x ? 'width' : 'height';\n  init.transition = getComputedStyle(el).transition;\n  init[init.propSize] = getChildrenSizes(el);\n};\n\nvar expandHooks = function expandHooks(expandedParentClass) {\n  var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return {\n    onBeforeEnter: function onBeforeEnter(el) {\n      el.style.transition = '';\n    },\n    onEnter: function onEnter(el) {\n      setInitStyles(el, x);\n      el.style[init.propSize] = '0';\n      el.style.transition = \".2s \".concat(init.propSize, \" \").concat(PRIMARY_TRANSITION);\n      requestAnimationFrame(function () {\n        el.style[init.propSize] = \"\".concat(init[init.propSize], \"px\");\n      });\n\n      if (expandedParentClass) {\n        el.parentNode.classList.add(expandedParentClass);\n      }\n    },\n    onAfterEnter: function onAfterEnter(el) {\n      el.parentNode.classList.remove(expandedParentClass);\n      resetStyles(el);\n    },\n    onBeforeLeave: function onBeforeLeave(el) {\n      setInitStyles(el, x);\n    },\n    onLeave: function onLeave(el) {\n      setInitStyles(el, x);\n      el.style.transition = \".2s \".concat(init.propSize, \" \").concat(PRIMARY_TRANSITION);\n      el.style[init.propSize] = \"\".concat(init[init.propSize], \"px\");\n      requestAnimationFrame(function () {\n        return el.style[init.propSize] = '0';\n      });\n    },\n    onAfterLeave: function onAfterLeave(el) {\n      requestAnimationFrame(function () {\n        return resetStyles(el);\n      });\n    }\n  };\n};\n;// CONCATENATED MODULE: ./src/components/transitions/index.ts\n\n\nvar ExpandTransition = createTransition(expandHooks('expand-transition'));\n;// CONCATENATED MODULE: ./src/components/VGroup/VGroup.ts\nfunction VGroup_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VGroup_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VGroup_ownKeys(Object(source), !0).forEach(function (key) { VGroup_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VGroup_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VGroup_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n/* harmony default export */ var VGroup = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-group',\n  props: VGroup_objectSpread({\n    expand: Boolean,\n    subgroup: Boolean,\n    title: {\n      type: String,\n      \"default\": ''\n    },\n    activeClass: {\n      type: String,\n      \"default\": ''\n    },\n    prependIcon: {\n      type: String,\n      \"default\": ''\n    },\n    appendIcon: {\n      type: String,\n      \"default\": ''\n    }\n  }, colorProps()),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n\n    var _useIcons = useIcons(),\n        icons = _useIcons.icons;\n\n    var _useColors = useColors(),\n        setBackgroundCssColor = _useColors.setBackgroundCssColor,\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor;\n\n    var isActive = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(false);\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VGroup_objectSpread(VGroup_defineProperty({\n        'v-group': true,\n        'v-group--subgroup': props.subgroup,\n        'v-group--active': isActive.value,\n        'v-group--default': !isActive.value\n      }, props.activeClass, !!props.activeClass && isActive.value), setBackgroundClassNameColor(props.color));\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VGroup_objectSpread({}, setBackgroundCssColor(props.color));\n    });\n\n    var genHeaderContent = function genHeaderContent() {\n      var _a;\n\n      var content = props.title || ((_a = slots.header) === null || _a === void 0 ? void 0 : _a.call(slots));\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-group__header-content'\n      }, content);\n    };\n\n    var genExpandIcon = function genExpandIcon(icon) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-group__expand-icon'\n      }, icon);\n    };\n\n    var genSubExpandIcon = function genSubExpandIcon(icon) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-group__sub-expand-icon'\n      }, icon);\n    };\n\n    var genPrependIcon = function genPrependIcon(icon) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-group__prepend-icon'\n      }, icon);\n    };\n\n    var genAppendIcon = function genAppendIcon(icon) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-group__append-icon'\n      }, icon);\n    };\n\n    var genIcon = function genIcon(iconName) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, {\n        icon: iconName,\n        size: 16\n      });\n    };\n\n    var genGroupHeader = function genGroupHeader() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-group__header',\n        onClick: function onClick() {\n          return isActive.value = !isActive.value;\n        }\n      }, [props.subgroup && genSubExpandIcon(genIcon(icons.$caretDown)), props.prependIcon && genPrependIcon(genIcon(props.prependIcon)), genHeaderContent(), props.appendIcon && genAppendIcon(genIcon(props.appendIcon)), !props.subgroup && genExpandIcon(genIcon(icons.$chevronDown))]);\n    };\n\n    var genGroupChildContent = function genGroupChildContent() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.withDirectives)((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-group__content'\n      }, {\n        \"default\": function _default() {\n          var _a;\n\n          return (_a = slots[\"default\"]) === null || _a === void 0 ? void 0 : _a.call(slots);\n        }\n      }), [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.vShow, isActive.value]]);\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.expand;\n    }, function (to) {\n      return isActive.value = to;\n    }, {\n      immediate: true\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        style: styles.value\n      }, [genGroupHeader(), ExpandTransition(genGroupChildContent())]);\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VResize/VResize.ts\nfunction VResize_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VResize_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VResize_ownKeys(Object(source), !0).forEach(function (key) { VResize_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VResize_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VResize_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n/* harmony default export */ var VResize = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-resize',\n  props: VResize_objectSpread({\n    emit: {\n      type: Boolean,\n      \"default\": false\n    },\n    customClass: {\n      type: String\n    },\n    minSize: {\n      type: [String, Number],\n      \"default\": 50\n    },\n    color: {\n      type: String,\n      \"default\": 'primary'\n    }\n  }, positionProps()),\n  emits: ['resize'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var data = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({\n      parentNode: null,\n      startOffset: null,\n      offsetTop: 0,\n      offsetLeft: 0,\n      parentHeight: 0,\n      parentWidth: 0,\n      marginLeft: 0,\n      marginTop: 0,\n      left: 0,\n      top: 0,\n      isActive: false\n    });\n    var resizeRef = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VResize_objectSpread(VResize_defineProperty({\n        'v-resize': true,\n        'v-resize--active': data.isActive,\n        'v-resize--top': props.top,\n        'v-resize--bottom': props.bottom,\n        'v-resize--right': props.right,\n        'v-resize--left': props.left\n      }, props.customClass, !!props.customClass), props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VResize_objectSpread({}, props.color ? setBackgroundCssColor(props.color) : {});\n    });\n    var isDirectY = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.top || props.bottom;\n    });\n    var isNeedReverse = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.top || props.left;\n    });\n    var currentSize = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return isDirectY.value ? data.parentHeight : data.parentWidth;\n    });\n    var sizeProp = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return isDirectY.value ? 'height' : 'width';\n    });\n    var reverseDirection = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.top ? 'top' : 'left';\n    });\n    var reverseOffsetKey = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var side = reverseDirection.value;\n      return 'offset' + side[0].toUpperCase() + side.slice(1);\n    });\n    var offset = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return isDirectY.value ? data.offsetTop : data.offsetLeft;\n    });\n    var direction = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return isDirectY.value ? 'clientY' : 'clientX';\n    });\n\n    function moveReverse(size) {\n      var parentNode = data.parentNode,\n          left = data.left,\n          top = data.top;\n      var reverseTo = reverseDirection.value;\n      var value = !isDirectY.value ? currentSize.value - size + left : currentSize.value - size + top;\n      parentNode.style[reverseTo] = \"\".concat(value, \"px\");\n    }\n\n    function setOrEmitSize(size) {\n      if (props.emit) return emit('resize', size);\n      data.parentNode.style[sizeProp.value] = \"\".concat(size, \"px\");\n      isNeedReverse.value && moveReverse(size);\n    }\n\n    function resize(e) {\n      var size;\n\n      if (isNeedReverse.value) {\n        size = currentSize.value - (e[direction.value] - offset.value) + data.startOffset;\n      } else {\n        size = currentSize.value + (e[direction.value] - currentSize.value - offset.value - data.startOffset);\n      }\n\n      size > props.minSize && setOrEmitSize(size);\n    }\n\n    function resetMinMaxStyles() {\n      if (isDirectY.value) {\n        data.parentNode.style.maxHeight = '';\n        data.parentNode.style.minHeight = '';\n      } else {\n        data.parentNode.style.maxWidth = '';\n        data.parentNode.style.minWidth = '';\n      }\n    }\n\n    function setParent() {\n      var parent = resizeRef.value.parentNode;\n      data.parentNode = parent;\n    }\n\n    function computeSizes() {\n      var _getComputedStyle = getComputedStyle(data.parentNode),\n          top = _getComputedStyle.top,\n          left = _getComputedStyle.left,\n          height = _getComputedStyle.height,\n          width = _getComputedStyle.width,\n          marginLeft = _getComputedStyle.marginLeft,\n          marginTop = _getComputedStyle.marginTop;\n\n      data.offsetTop = data.parentNode.offsetTop;\n      data.offsetLeft = data.parentNode.offsetLeft;\n      data.marginLeft = parseFloat(marginLeft);\n      data.marginTop = parseFloat(marginTop);\n      data.parentHeight = parseFloat(height);\n      data.parentWidth = parseFloat(width);\n      data.top = parseFloat(top);\n      data.left = parseFloat(left);\n    }\n\n    function setStartPositions() {\n      var side = reverseDirection.value;\n      var offset = reverseOffsetKey.value;\n\n      if (data[side] === data[offset]) {\n        data.parentNode.style[side] = \"\".concat(data[offset], \"px\");\n      }\n    }\n\n    function disableSelection(e) {\n      e.preventDefault();\n    }\n\n    function initResize(e) {\n      if (!data.isActive) {\n        data.isActive = true;\n        computeSizes();\n        resetMinMaxStyles();\n        setStartPositions();\n        setStartOffset(e);\n      }\n\n      requestAnimationFrame(function () {\n        return resize(e);\n      });\n    }\n\n    function setStartOffset(e) {\n      if (isNeedReverse.value) data.startOffset = e[direction.value];else data.startOffset = e[direction.value] - currentSize.value;\n      data.startOffset -= offset.value;\n    }\n\n    function reset() {\n      data.isActive = false;\n      resetMinMaxStyles();\n    }\n\n    function onMouseup() {\n      reset();\n      removeHandlers();\n    }\n\n    function onMousedown() {\n      document.addEventListener('mousemove', initResize);\n      document.addEventListener('mouseup', onMouseup);\n      document.addEventListener('selectstart', disableSelection);\n    }\n\n    function removeHandlers() {\n      document.removeEventListener('mousemove', initResize);\n      document.removeEventListener('mouseup', onMouseup);\n      document.removeEventListener('selectstart', disableSelection);\n    }\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onMounted)(function () {\n      setParent();\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeUnmount)(function () {\n      document.removeEventListener('mousedown', onMousedown);\n    });\n    return function () {\n      var propsData = {\n        \"class\": classes.value,\n        style: styles.value,\n        key: 'resize',\n        ref: resizeRef,\n        onMousedown: onMousedown\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData);\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VCheckbox/VCheckbox.ts\n\n\n\n\n\n\n/* harmony default export */ var VCheckbox = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-checkbox',\n  props: {\n    modelValue: {\n      type: [Array, Boolean],\n      \"default\": null\n    },\n    label: {\n      type: String,\n      \"default\": ''\n    },\n    disabled: Boolean,\n    validate: Boolean,\n    value: {\n      type: [Array, Object, String, Number],\n      \"default\": null\n    },\n    color: {\n      type: String,\n      \"default\": 'primary'\n    }\n  },\n  emits: ['change', 'update:modelValue'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var isChecked = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(false);\n    var form = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.inject)('form', null);\n    var valuesMap = new Map();\n\n    var _useValidation = useValidation(props),\n        validate = _useValidation.validate;\n\n    var _useIcons = useIcons(),\n        icons = _useIcons.icons;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        'v-checkbox': true,\n        'v-checkbox--disabled': props.disabled,\n        'v-checkbox--checked': isChecked.value,\n        'v-validatable': props.validate\n      };\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.modelValue;\n    }, function (to) {\n      if (Array.isArray(to)) {\n        valuesMap.clear();\n        to.forEach(function (it) {\n          return valuesMap.set((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.toRaw)(it), (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.toRaw)(it));\n        });\n        isChecked.value = !!valuesMap.get((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.toRaw)(props.value));\n      } else {\n        isChecked.value = !!props.modelValue;\n      }\n    }, {\n      immediate: true\n    });\n\n    var validateValue = function validateValue() {\n      return validate(isChecked.value);\n    };\n\n    var genLabel = function genLabel() {\n      var propsData = {\n        absolute: false,\n        disabled: props.disabled\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VLabel, propsData, {\n        \"default\": function _default() {\n          return props.label;\n        }\n      });\n    };\n\n    var genLabelWrapper = function genLabelWrapper() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-checkbox__label'\n      }, genLabel());\n    };\n\n    var genIcon = function genIcon() {\n      var icon = isChecked.value ? icons.$checkbox : icons.$box;\n      var propsData = {\n        icon: icon,\n        size: sizes.sm,\n        color: props.color,\n        disabled: props.disabled\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, propsData);\n    };\n\n    var genCheckbox = function genCheckbox() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-checkbox__square'\n      }, genIcon());\n    };\n\n    var computeValue = function computeValue() {\n      if (Array.isArray(props.modelValue)) {\n        if (isChecked.value) {\n          valuesMap[\"delete\"]((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.toRaw)(props.value));\n        } else {\n          valuesMap.set((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.toRaw)(props.value), (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.toRaw)(props.value));\n        }\n\n        return Array.from(valuesMap.values());\n      }\n\n      return isChecked.value = !isChecked.value;\n    };\n\n    var onClick = function onClick() {\n      if (props.disabled) return;\n      var value = computeValue();\n      props.validate && validateValue();\n      emit('update:modelValue', value);\n      emit('change', value);\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeMount)(function () {\n      form === null || form === void 0 ? void 0 : form.add(validateValue);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeUnmount)(function () {\n      form === null || form === void 0 ? void 0 : form.remove(validateValue);\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        onClick: onClick\n      }, [genCheckbox(), props.label && genLabelWrapper()]);\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/services/transitions.ts\nvar transitions;\n\n(function (transitions) {\n  transitions[\"FADE\"] = \"fade\";\n  transitions[\"FADE_IN_DOWN\"] = \"fade-in-down\";\n  transitions[\"FADE_IN_UP\"] = \"fade-in-up\";\n  transitions[\"SCALE_IN\"] = \"scale-in\";\n  transitions[\"SCALE_IN_OUT\"] = \"scale-in-out\";\n  transitions[\"SLIDE_IN_LEFT\"] = \"slide-in-left\";\n})(transitions || (transitions = {}));\n;// CONCATENATED MODULE: ./src/components/VTooltip/VTooltip.ts\nfunction VTooltip_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VTooltip_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VTooltip_ownKeys(Object(source), !0).forEach(function (key) { VTooltip_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VTooltip_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VTooltip_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var VTooltip = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-tooltip',\n  props: VTooltip_objectSpread(VTooltip_objectSpread({\n    openOnHover: {\n      type: Boolean,\n      \"default\": true\n    },\n    color: {\n      type: String,\n      \"default\": 'grey lighten-1'\n    },\n    zIndex: [Number, String],\n    maxWidth: [Number, String],\n    minWidth: [Number, String],\n    modelValue: Boolean,\n    offsetX: {\n      type: [String, Number],\n      \"default\": 20\n    },\n    offsetY: {\n      type: [String, Number],\n      \"default\": 20\n    }\n  }, elevationProps()), positionProps()),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var tooltip = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({});\n    var activator = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({});\n    var tooltipRef = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.shallowRef)(null);\n\n    var _useToggle = useToggle(props),\n        isActive = _useToggle.isActive;\n\n    var _useElevation = useElevation(props),\n        elevationClasses = _useElevation.elevationClasses;\n\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var _useActivator = useActivator(props),\n        activatorRef = _useActivator.activatorRef,\n        getActivatorSizes = _useActivator.getActivatorSizes,\n        genActivatorListeners = _useActivator.genActivatorListeners;\n\n    var handlers = {\n      mouseenter: function mouseenter() {\n        return isActive.value = true;\n      },\n      mouseleave: function mouseleave() {\n        return isActive.value = false;\n      }\n    };\n    var listeners = genActivatorListeners(props, handlers);\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VTooltip_objectSpread(VTooltip_objectSpread({\n        'v-tooltip': true,\n        'v-tooltip--top': props.top,\n        'v-tooltip--right': props.right,\n        'v-tooltip--left': props.left,\n        'v-tooltip--bottom': props.bottom\n      }, elevationClasses.value), props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var computeTopPosition = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return (props.top ? activator.top - tooltip.height : props.bottom ? activator.top + activator.height : activator.top + (activator.height - tooltip.height) / 2) + +props.offsetY;\n    });\n    var computeLeftPosition = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return (props.left ? activator.left - tooltip.width : props.right ? activator.left + activator.width : activator.left + (activator.width - tooltip.width) / 2) + +props.offsetX;\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VTooltip_objectSpread({\n        top: tooltip.top ? convertToUnit(tooltip.top) : '',\n        left: tooltip.top ? convertToUnit(tooltip.left) : '',\n        maxWidth: !!props.maxWidth ? \"\".concat(props.maxWidth, \"px\") : '',\n        minWidth: !!props.minWidth ? \"\".concat(props.minWidth, \"px\") : '',\n        zIndex: props.zIndex\n      }, props.color ? setBackgroundCssColor(props.color) : {});\n    });\n\n    function genActivator() {\n      var slotContent = slots.activator && slots.activator({\n        on: listeners\n      });\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(slotContent[0], {\n        ref: activatorRef\n      });\n    }\n\n    function genContent() {\n      var propsData = {\n        \"class\": classes.value,\n        style: styles.value,\n        ref: tooltipRef\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.withDirectives)((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', propsData, slots[\"default\"] && slots[\"default\"]()), [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.vShow, isActive.value]]);\n    }\n\n    function setTooltipPosition() {\n      if (tooltipRef.value) {\n        tooltip.width = tooltipRef.value.offsetWidth;\n        tooltip.height = tooltipRef.value.offsetHeight;\n        tooltip.top = computeTopPosition.value;\n        tooltip.left = computeLeftPosition.value;\n      }\n    }\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onMounted)(function () {\n      (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n        return isActive.value;\n      }, function (to) {\n        if (to) {\n          var _getActivatorSizes = getActivatorSizes(),\n              left = _getActivatorSizes.left,\n              top = _getActivatorSizes.top,\n              height = _getActivatorSizes.height,\n              width = _getActivatorSizes.width;\n\n          activator.left = left;\n          activator.top = top;\n          activator.height = height;\n          activator.width = width;\n          tooltip.top = 0;\n          tooltip.left = 0;\n          requestAnimationFrame(setTooltipPosition);\n        }\n      }, {\n        immediate: true\n      });\n    });\n    return function () {\n      var content = useTransition(genContent(), isActive.value ? transitions.SCALE_IN : transitions.FADE);\n      return [content, genActivator()];\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VNavigation/VNavigation.ts\nfunction VNavigation_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VNavigation_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VNavigation_ownKeys(Object(source), !0).forEach(function (key) { VNavigation_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VNavigation_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VNavigation_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n/* harmony default export */ var VNavigation = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-navigation',\n  props: VNavigation_objectSpread({\n    fixed: Boolean,\n    right: Boolean,\n    left: Boolean,\n    onHover: Boolean,\n    miniVariant: Boolean,\n    expand: Boolean,\n    offsetTop: {\n      type: [String, Number],\n      \"default\": 0\n    },\n    miniVariantWidth: {\n      type: [String, Number],\n      \"default\": 56\n    },\n    maxVariantWidth: {\n      type: [String, Number],\n      \"default\": 237\n    }\n  }, colorProps('#ffffff')),\n  emits: ['update:expand'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var isHovered = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(false);\n    var isExpanded = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      if (props.onHover && isHovered.value) return true;\n      if (props.expand) return true;\n      if (!props.expand && props.miniVariant) return false;\n      if (!props.expand && !props.miniVariant) return false;\n      return !props.miniVariant;\n    });\n    var computedWidth = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      if (!isExpanded.value) return props.miniVariantWidth;\n      return props.maxVariantWidth;\n    });\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VNavigation_objectSpread({\n        'v-navigation': true,\n        'v-navigation--expanded': isExpanded.value,\n        'v-navigation--fixed': props.fixed\n      }, props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VNavigation_objectSpread({\n        width: convertToUnit(computedWidth.value),\n        maxHeight: \"calc(100vh - \".concat(convertToUnit(props.offsetTop), \")\"),\n        top: props.fixed ? convertToUnit(props.offsetTop) : '',\n        left: !props.right && props.fixed ? convertToUnit(0) : '',\n        right: props.right && props.fixed ? convertToUnit(0) : ''\n      }, props.color ? setBackgroundCssColor(props.color) : {});\n    });\n\n    var genNavigationContent = function genNavigationContent() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-navigation__content'\n      }, {\n        \"default\": function _default() {\n          var _a;\n\n          return (_a = slots[\"default\"]) === null || _a === void 0 ? void 0 : _a.call(slots);\n        }\n      });\n    };\n\n    var onMouseenter = function onMouseenter() {\n      if (!props.onHover || props.miniVariant) return;\n      isHovered.value = true;\n      emit('update:expand', true);\n    };\n\n    var onMouseleave = function onMouseleave() {\n      if (!props.onHover || props.miniVariant) return;\n      isHovered.value = false;\n      emit('update:expand', false);\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('aside', {\n        \"class\": classes.value,\n        style: styles.value,\n        onMouseenter: onMouseenter,\n        onMouseleave: onMouseleave\n      }, genNavigationContent());\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VMain/VMain.ts\n\n/* harmony default export */ var VMain = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-main',\n  setup: function setup(_, _ref) {\n    var slots = _ref.slots;\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-main'\n      }, {\n        \"default\": function _default() {\n          var _a;\n\n          return (_a = slots[\"default\"]) === null || _a === void 0 ? void 0 : _a.call(slots);\n        }\n      });\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VTextarea/VTextarea.ts\n\n\n/* harmony default export */ var VTextarea = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-textarea',\n  setup: function setup() {\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VTextField, {\n        tag: 'textarea',\n        \"class\": 'v-textarea'\n      });\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VSkeleton/VSkeleton.ts\n\n\n/* harmony default export */ var VSkeleton = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-skeleton',\n  props: {\n    tag: {\n      type: String,\n      \"default\": 'div'\n    },\n    width: {\n      type: [Number, String],\n      \"default\": null\n    },\n    height: {\n      type: [Number, String],\n      \"default\": 20\n    },\n    radius: {\n      type: [Number, String],\n      \"default\": 5\n    },\n    light: {\n      type: Boolean,\n      \"default\": true\n    },\n    dynamic: Boolean\n  },\n  setup: function setup(props) {\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(props.tag, {\n        \"class\": {\n          'v-skeleton': true,\n          'v-skeleton--light': props.light,\n          'v-skeleton--dynamic': props.dynamic\n        },\n        style: {\n          width: props.width && convertToUnit(props.width),\n          flexBasis: props.width && convertToUnit(props.width) || '100%',\n          height: convertToUnit(props.height),\n          borderRadius: convertToUnit(props.radius)\n        }\n      });\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VDataTable/VDataTableCell.ts\nfunction VDataTableCell_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VDataTableCell_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VDataTableCell_ownKeys(Object(source), !0).forEach(function (key) { VDataTableCell_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VDataTableCell_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VDataTableCell_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar VDataTableCell = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-data-table-cell',\n  props: VDataTableCell_objectSpread({\n    dark: Boolean,\n    resizeable: Boolean,\n    align: {\n      type: String,\n      \"default\": 'start'\n    },\n    width: {\n      type: [String, Number],\n      \"default\": 75\n    },\n    resizerColor: {\n      type: String,\n      \"default\": 'primary'\n    },\n    contentColor: String\n  }, colorProps()),\n  emits: ['resize'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n\n    var _useColors = useColors(),\n        setTextClassNameColor = _useColors.setTextClassNameColor,\n        setTextCssColor = _useColors.setTextCssColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor,\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTableCell_objectSpread(VDataTableCell_objectSpread({\n        'v-data-table__cell': true\n      }, props.contentColor ? setTextClassNameColor(props.contentColor) : {}), props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTableCell_objectSpread(VDataTableCell_objectSpread({\n        width: convertToUnit(+props.width)\n      }, props.contentColor ? setTextCssColor(props.contentColor) : {}), props.color ? setBackgroundCssColor(props.color) : {});\n    });\n\n    var genResize = function genResize() {\n      var propsData = {\n        right: true,\n        emit: true,\n        color: props.resizerColor,\n        onResize: function onResize($size) {\n          return emit('resize', $size);\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VResize, propsData);\n    };\n\n    var genCellContent = function genCellContent() {\n      var propsData = {\n        \"class\": VDataTableCell_defineProperty({\n          'v-data-table__cell-content': true\n        }, \"text-align--\".concat(props.align), !!props.align)\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, slots[\"default\"] && slots[\"default\"]());\n    };\n\n    return function () {\n      var propsData = {\n        \"class\": classes.value,\n        style: styles.value\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [genCellContent(), props.resizeable && genResize()]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VDataTable/VDataTableHeader.ts\nfunction VDataTableHeader_toConsumableArray(arr) { return VDataTableHeader_arrayWithoutHoles(arr) || VDataTableHeader_iterableToArray(arr) || VDataTableHeader_unsupportedIterableToArray(arr) || VDataTableHeader_nonIterableSpread(); }\n\nfunction VDataTableHeader_nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction VDataTableHeader_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return VDataTableHeader_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return VDataTableHeader_arrayLikeToArray(o, minLen); }\n\nfunction VDataTableHeader_iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction VDataTableHeader_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return VDataTableHeader_arrayLikeToArray(arr); }\n\nfunction VDataTableHeader_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction VDataTableHeader_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VDataTableHeader_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VDataTableHeader_ownKeys(Object(source), !0).forEach(function (key) { VDataTableHeader_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VDataTableHeader_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VDataTableHeader_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\n\n\n\nvar VDataTableHeader = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-data-table-header',\n  props: {\n    showSequence: Boolean,\n    showCheckbox: Boolean,\n    cols: Array,\n    colWidth: {\n      type: [String, Number],\n      \"default\": 125\n    },\n    align: String,\n    options: Object\n  },\n  emits: ['sort', 'filter', 'select-all', 'update:cols'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var _useIcons = useIcons(),\n        icons = _useIcons.icons;\n\n    var _cache = {};\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTableHeader_objectSpread({\n        'v-data-table__header': true\n      }, props.options.color ? setBackgroundClassNameColor(props.options.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTableHeader_objectSpread({}, props.options.color ? setBackgroundCssColor(props.options.color) : {});\n    });\n    var computedContentColor = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _a, _b;\n\n      return props.options.dark ? ((_a = props.options) === null || _a === void 0 ? void 0 : _a.contentColor) || 'white' : (_b = props.options) === null || _b === void 0 ? void 0 : _b.contentColor;\n    });\n    var cols = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTableHeader_toConsumableArray(props.cols);\n    });\n\n    var onSort = function onSort(item) {\n      emit('sort', item);\n    };\n\n    var _onInput = function onInput($value, col) {\n      col.filtered = !!$value;\n      _cache[col.title] = $value;\n      console.log(_cache);\n      emit('filter', {\n        value: $value,\n        col: col\n      });\n    };\n\n    var showFilter = function showFilter(item) {\n      if (item.showFilter) return;\n      item.showFilter = true;\n    };\n\n    var genSortButton = function genSortButton(item) {\n      var classes = {\n        'v-data-table-col__actions-sort': true,\n        'v-data-table-col__actions-sort--active': item.sorted\n      };\n      var propsData = {\n        clickable: true,\n        \"class\": classes,\n        icon: icons.$arrowUp,\n        onClick: function onClick() {\n          return onSort(item);\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, propsData);\n    };\n\n    var genFilterButton = function genFilterButton(item) {\n      var classes = {\n        'v-data-table-col__actions-filter': true,\n        'v-data-table-col__actions-filter--active': item.filtered\n      };\n      var propsData = {\n        clickable: true,\n        \"class\": classes,\n        icon: icons.$filter,\n        color: !item.cellClass ? computedContentColor.value : '',\n        onClick: function onClick() {\n          return showFilter(item);\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, propsData);\n    };\n\n    var genHeaderActions = function genHeaderActions(item) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', {\n        \"class\": 'v-data-table-col__actions'\n      }, [item.sortable && genSortButton(item), item.filterable && genFilterButton(item)]);\n    };\n\n    var genFilterInput = function genFilterInput(col) {\n      var propsData = {\n        modelValue: _cache[col.title],\n        label: 'search',\n        dark: props.options.dark,\n        color: !col.cellClass ? computedContentColor.value : '',\n        prependIcon: icons.$search,\n        clearable: true,\n        onInput: function onInput($value) {\n          return _onInput($value, col);\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VTextField, propsData);\n    };\n\n    var genFilterWrapper = function genFilterWrapper(col) {\n      var _a, _b;\n\n      var color = props.options.dark ? ((_a = props.options) === null || _a === void 0 ? void 0 : _a.color) || 'grey darken-3' : ((_b = props.options) === null || _b === void 0 ? void 0 : _b.color) || 'white';\n      var slotName = \"\".concat(col.key, \"-filter\");\n      var filterSlot = slots[slotName] && slots[slotName]({\n        filter: function filter(event) {\n          return _onInput(event, col);\n        }\n      });\n      var directive = col.showFilter ? {\n        handler: function handler() {\n          return setTimeout(function () {\n            return col.showFilter = false;\n          });\n        },\n        closeConditional: false\n      } : undefined;\n      var propsData = {\n        \"class\": VDataTableHeader_objectSpread(VDataTableHeader_defineProperty({\n          'v-data-table-col__filter': !filterSlot,\n          'v-data-table-col__custom-filter': !!filterSlot,\n          'elevation-5': true\n        }, col.cellClass, !!col.cellClass), color ? setBackgroundClassNameColor(color) : {}),\n        style: VDataTableHeader_objectSpread({}, color ? setBackgroundCssColor(color) : {})\n      };\n      return col.filterable && (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.withDirectives)((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, filterSlot || genFilterInput(col)), [[clickOutside, directive], [external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.vShow, col.showFilter]]);\n    };\n\n    var genHeaderTitle = function genHeaderTitle(col) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-data-table-col__title'\n      }, col.title);\n    };\n\n    var genNumberCell = function genNumberCell() {\n      var propsData = {\n        align: 'center',\n        \"class\": VDataTableHeader_defineProperty({\n          'v-data-table-col__number': true\n        }, props.cellClass, !!props.cellClass),\n        contentColor: computedContentColor.value,\n        color: props.options.color,\n        width: 50\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableCell, propsData, {\n        \"default\": function _default() {\n          return '№';\n        }\n      });\n    };\n\n    var genCheckboxCell = function genCheckboxCell() {\n      var propsData = {\n        align: 'center',\n        \"class\": VDataTableHeader_defineProperty({\n          'v-data-table-col__checkbox': true\n        }, props.cellClass, !!props.cellClass),\n        dark: props.options.dark,\n        contentColor: computedContentColor.value,\n        color: props.options.color,\n        width: 50\n      };\n      var content = {\n        \"default\": function _default() {\n          return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VCheckbox, {\n            color: computedContentColor.value,\n            onChange: function onChange(e) {\n              return emit('select-all', e);\n            }\n          });\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableCell, propsData, content);\n    };\n\n    var genHeaderCell = function genHeaderCell(col) {\n      var _a;\n\n      var propsData = {\n        dark: props.options.dark,\n        \"class\": VDataTableHeader_defineProperty({\n          'v-data-table-col': true,\n          'v-data-table-col--sorted': col.sorted\n        }, col.cellClass, !!col.cellClass),\n        contentColor: !col.cellClass ? computedContentColor.value : '',\n        color: !col.cellClass ? props.options.color : '',\n        width: col.width,\n        resizeable: col.resizeable,\n        resizerColor: (_a = props.options) === null || _a === void 0 ? void 0 : _a.resizerColor,\n        align: col.align || props.align,\n        onResize: function onResize($size) {\n          return col.width = $size;\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableCell, propsData, {\n        \"default\": function _default() {\n          return [genHeaderTitle(col), genHeaderActions(col), useTransition(genFilterWrapper(col), transitions.FADE)];\n        }\n      });\n    };\n\n    var genHeaderChildren = function genHeaderChildren() {\n      var children = [];\n      var headerSlot = slots.header && slots.header(props);\n      props.showSequence && children.push(genNumberCell());\n      props.showCheckbox && children.push(genCheckboxCell());\n      cols.value.forEach(function (col) {\n        col.width = col.width || props.colWidth;\n\n        if (!col.hasOwnProperty('show')) {\n          col.show = !col.show;\n        }\n\n        !headerSlot[0].children && col.show && children.push(genHeaderCell(col));\n      });\n      headerSlot[0].children && children.push(headerSlot);\n      return children;\n    };\n\n    return function () {\n      var propsData = {\n        \"class\": classes.value,\n        style: styles.value\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, genHeaderChildren());\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VDataTable/VDataTableBody.ts\nfunction VDataTableBody_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VDataTableBody_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VDataTableBody_ownKeys(Object(source), !0).forEach(function (key) { VDataTableBody_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VDataTableBody_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VDataTableBody_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar VDataTableBody = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-data-table-body',\n  props: VDataTableBody_objectSpread({\n    cols: Array,\n    rows: Array,\n    dark: Boolean,\n    showSequence: Boolean,\n    showCheckbox: Boolean,\n    checkAllRows: Boolean,\n    align: String,\n    colWidth: {\n      type: [String, Number],\n      \"default\": 125\n    },\n    page: Number,\n    rowsOnPage: Number\n  }, colorProps()),\n  emits: ['select', 'click:row', 'dblclick:row', 'contextmenu:row'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n    var checkedRows = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)([]);\n\n    var _useColors = useColors(),\n        setBackgroundCssColor = _useColors.setBackgroundCssColor,\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTableBody_objectSpread({\n        'v-data-table__body': true\n      }, props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTableBody_objectSpread({}, props.color ? setBackgroundCssColor(props.color) : {});\n    });\n    var rowsOnTable = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _a;\n\n      return (_a = props.rows) === null || _a === void 0 ? void 0 : _a.slice((props.page - 1) * props.rowsOnPage, props.page * props.rowsOnPage);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.checkAllRows;\n    }, function (to) {\n      if (to) onSelectRows(props.rows);else onSelectRows([]);\n    });\n\n    var onSelectRows = function onSelectRows(rows) {\n      checkedRows.value = rows;\n      emit('select', checkedRows.value);\n    };\n\n    var genNumberCell = function genNumberCell(count) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableCell, {\n        width: 50,\n        align: 'center',\n        dark: props.dark,\n        color: props.color,\n        \"class\": 'v-data-table__row-number'\n      }, {\n        \"default\": function _default() {\n          return count + 1;\n        }\n      });\n    };\n\n    var genCheckboxCell = function genCheckboxCell(row) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableCell, {\n        width: 50,\n        align: 'center',\n        dark: props.dark,\n        color: props.color,\n        \"class\": 'v-data-table__row-checkbox'\n      }, {\n        \"default\": function _default() {\n          return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VCheckbox, {\n            modelValue: checkedRows.value,\n            color: props.dark ? 'white' : '',\n            value: row,\n            onChange: onSelectRows\n          });\n        }\n      });\n    };\n\n    var genRowCell = function genRowCell(col, row) {\n      var format = col.format;\n      var slotContent = slots[col.key] && slots[col.key]({\n        row: row,\n        format: format\n      });\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableCell, {\n        width: col.width,\n        align: col.align || props.align,\n        dark: props.dark\n      }, {\n        \"default\": function _default() {\n          return slotContent ? slotContent : format ? format(row) : String(row[col.key]);\n        }\n      });\n    };\n\n    var genTableRow = function genTableRow(row, rowCount) {\n      var rowCells = [];\n      props.showSequence && rowCells.push(genNumberCell(rowCount));\n      props.showCheckbox && rowCells.push(genCheckboxCell(row));\n      props.cols.forEach(function (col) {\n        col.show && rowCells.push(genRowCell(col, row));\n      });\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": {\n          'v-data-table__row': true\n        },\n        onClick: function onClick() {\n          return emit('click:row', row);\n        },\n        onDblclick: function onDblclick() {\n          return emit('dblclick:row', row);\n        },\n        onContextmenu: function onContextmenu(e) {\n          e.preventDefault();\n          emit('contextmenu:row', row);\n        }\n      }, rowCells);\n    };\n\n    var genTableRows = function genTableRows() {\n      var _a;\n\n      var tableRows = [];\n      var rowsLength = (_a = rowsOnTable.value) === null || _a === void 0 ? void 0 : _a.length;\n      var count = (props.page - 1) * props.rowsOnPage;\n\n      for (var i = 0; i < rowsLength; i += 1) {\n        tableRows.push(genTableRow(rowsOnTable.value[i], count + i));\n      }\n\n      return tableRows;\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        style: styles.value\n      }, genTableRows());\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VDataTable/VDataTableFooter.ts\nfunction VDataTableFooter_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VDataTableFooter_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VDataTableFooter_ownKeys(Object(source), !0).forEach(function (key) { VDataTableFooter_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VDataTableFooter_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VDataTableFooter_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\nvar VDataTableFooter = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-data-table-footer',\n  props: {\n    pages: Number,\n    page: Number,\n    firstOnPage: Number,\n    lastOnPage: Number,\n    pageCorrection: Number,\n    rowsLength: Number,\n    rowsOnPage: Number,\n    options: Object\n  },\n  emits: ['last-page', 'correct-page', 'select-rows-count', 'next-page', 'prev-page'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n\n    var _useColors = useColors(),\n        setBackgroundCssColor = _useColors.setBackgroundCssColor,\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setTextClassNameColor = _useColors.setTextClassNameColor,\n        setTextCssColor = _useColors.setTextCssColor;\n\n    var _useIcons = useIcons(),\n        icons = _useIcons.icons;\n\n    var activator = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n    var paginationDisplayText = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return \"\".concat(props.firstOnPage, \" - \").concat(props.lastOnPage, \"\\n        of \").concat(props.rowsLength);\n    });\n    var isLastPage = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.page >= props.pages;\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return isLastPage.value;\n    }, function (to) {\n      return to && emit('last-page');\n    });\n\n    function changeTableRowsPage(isNext) {\n      if (props.page === props.pages && isNext) return;\n      var event = isNext ? 'next-page' : 'prev-page';\n      emit(event, isNext ? 1 : -1);\n    }\n\n    function genPaginationButton() {\n      var isNext = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      var _a, _b;\n\n      var btnColor = ((_b = (_a = props.options) === null || _a === void 0 ? void 0 : _a.pagination) === null || _b === void 0 ? void 0 : _b.buttonsColor) || 'primary';\n      var contentColor = props.options.contentColor || 'white';\n      var disableIf = isNext && props.lastOnPage >= props.rowsLength || !isNext && props.firstOnPage === 1;\n      var propsData = {\n        width: 42,\n        color: btnColor,\n        elevation: 3,\n        disabled: disableIf,\n        text: disableIf,\n        onClick: function onClick() {\n          return changeTableRowsPage(isNext);\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VButton, propsData, {\n        \"default\": function _default() {\n          return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, {\n            icon: isNext ? icons.$arrowRight : icons.$arrowLeft,\n            color: disableIf ? 'grey lighten-1' : contentColor\n          });\n        }\n      });\n    }\n\n    function genPaginationPageDisplay() {\n      var _a, _b;\n\n      var displayColor = ((_b = (_a = props.options) === null || _a === void 0 ? void 0 : _a.pagination) === null || _b === void 0 ? void 0 : _b.displayColor) || 'primary';\n      var propsData = {\n        width: 42,\n        style: {\n          margin: '0 10px'\n        },\n        color: displayColor,\n        elevation: 3\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VButton, propsData, {\n        \"default\": function _default() {\n          return props.page;\n        }\n      });\n    }\n\n    var genRowsCountSelectList = function genRowsCountSelectList() {\n      var _a, _b, _c;\n\n      var options = ((_a = props.options.counts) === null || _a === void 0 ? void 0 : _a.rowsPerPageOptions) || [5, 10, 15, 20];\n      var color = ((_c = (_b = props.options) === null || _b === void 0 ? void 0 : _b.counts) === null || _c === void 0 ? void 0 : _c.displayColor) || 'primary';\n      var contentColor = props.options.contentColor || 'white';\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": VDataTableFooter_objectSpread(VDataTableFooter_objectSpread({\n          'v-data-table__rows-count-list': true\n        }, color ? setBackgroundClassNameColor(color) : {}), contentColor ? setTextClassNameColor(contentColor) : {}),\n        style: VDataTableFooter_objectSpread(VDataTableFooter_objectSpread({}, color ? setBackgroundCssColor(color) : {}), contentColor ? setTextCssColor(contentColor) : {})\n      }, options.map(function (it) {\n        return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n          \"class\": 'v-data-table__rows-count-item',\n          onClick: function onClick() {\n            return emit('select-rows-count', it);\n          }\n        }, [it]);\n      }));\n    };\n\n    var genMenu = function genMenu() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VMenu, {\n        activator: activator.value,\n        maxHeight: 240,\n        zIndex: 12,\n        openOnClick: true\n      }, {\n        \"default\": function _default() {\n          return genRowsCountSelectList();\n        }\n      });\n    };\n\n    var genRowsCountField = function genRowsCountField() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-data-table__rows-count-value',\n        textColor: props.options.contentColor\n      }, props.rowsOnPage);\n    };\n\n    var genRowsCountSelect = function genRowsCountSelect() {\n      var _a, _b;\n\n      var displayColor = ((_b = (_a = props.options) === null || _a === void 0 ? void 0 : _a.counts) === null || _b === void 0 ? void 0 : _b.displayColor) || 'primary';\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VButton, {\n        color: displayColor,\n        ref: activator\n      }, {\n        \"default\": function _default() {\n          return [genRowsCountField(), activator.value && genMenu()];\n        }\n      });\n    };\n\n    var genRowsCountSelectCaption = function genRowsCountSelectCaption() {\n      var _a, _b;\n\n      var color = props.options.contentColor;\n      var propsData = {\n        \"class\": VDataTableFooter_objectSpread({\n          'v-data-table__pagination-label': true\n        }, color ? setTextClassNameColor(color) : {}),\n        style: VDataTableFooter_objectSpread({}, color ? setTextCssColor(color) : {})\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', propsData, ((_b = (_a = props.options) === null || _a === void 0 ? void 0 : _a.counts) === null || _b === void 0 ? void 0 : _b.rowsPerPageText) || 'Rows per page');\n    };\n\n    var genRowsCountSelectBlock = function genRowsCountSelectBlock() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-data-table__pagination-select'\n      }, [genRowsCountSelectCaption(), genRowsCountSelect()]);\n    };\n\n    var genPagesCountDisplay = function genPagesCountDisplay() {\n      var _a;\n\n      var color = props.options.contentColor;\n      var propsData = {\n        \"class\": VDataTableFooter_objectSpread({\n          'v-data-table__pagination-pages': true\n        }, color ? setTextClassNameColor(color) : {}),\n        style: VDataTableFooter_objectSpread({}, color ? setTextCssColor(color) : {})\n      };\n      props.pageCorrection && emit('correct-page', -props.pageCorrection);\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, props.rowsLength && ((_a = slots['pagination-text']) === null || _a === void 0 ? void 0 : _a.call(slots)) || props.rowsLength && paginationDisplayText.value || '-');\n    };\n\n    var genPaginationButtonsBlock = function genPaginationButtonsBlock() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": {\n          'v-data-table__pagination-route': true\n        }\n      }, [genPaginationButton(), genPaginationPageDisplay(), genPaginationButton(true)]);\n    };\n\n    var genPaginationBlock = function genPaginationBlock() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-data-table__pagination'\n      }, [genRowsCountSelectBlock(), genPagesCountDisplay(), genPaginationButtonsBlock()]);\n    };\n\n    return function () {\n      var propsData = {\n        \"class\": VDataTableFooter_objectSpread({\n          'v-data-table__footer': true\n        }, props.options.color ? setBackgroundClassNameColor(props.options.color) : {}),\n        style: VDataTableFooter_objectSpread({}, props.options.color ? setBackgroundCssColor(props.options.color) : {})\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, genPaginationBlock());\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VDataTable/VDataTable.ts\nfunction VDataTable_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VDataTable_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VDataTable_ownKeys(Object(source), !0).forEach(function (key) { VDataTable_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VDataTable_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VDataTable_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n/* harmony default export */ var VDataTable = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-data-table',\n  props: {\n    cols: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    rows: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    dark: Boolean,\n    showSequence: Boolean,\n    showCheckbox: Boolean,\n    align: {\n      type: String,\n      validator: function validator(val) {\n        return ['left', 'center', 'right'].includes(val);\n      }\n    },\n    color: {\n      type: String,\n      \"default\": 'white'\n    },\n    headerOptions: {\n      type: Object,\n      \"default\": function _default() {\n        return {};\n      }\n    },\n    footerOptions: {\n      type: Object,\n      \"default\": function _default() {\n        return {};\n      }\n    },\n    customFilter: Function\n  },\n  emits: ['last-page', 'select:row', 'click:row', 'dblclick:row', 'contextmenu:row'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n    var data = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({\n      cols: [],\n      rows: [],\n      checkedRows: [],\n      rowsOnPage: 20,\n      page: 1,\n      isAllRowsChecked: false\n    });\n\n    var _useColors = useColors(),\n        setBackgroundCssColor = _useColors.setBackgroundCssColor,\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor;\n\n    var filters = {};\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTable_objectSpread({\n        'v-data-table': true\n      }, props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTable_objectSpread({}, props.color ? setBackgroundCssColor(props.color) : {});\n    });\n    var headerOptions = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTable_objectSpread({\n        color: props.color,\n        dark: props.dark\n      }, props.headerOptions);\n    });\n    var footerOptions = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTable_objectSpread({\n        color: props.color,\n        dark: props.dark\n      }, props.footerOptions);\n    });\n    var pages = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _a;\n\n      return Math.ceil(((_a = data.rows) === null || _a === void 0 ? void 0 : _a.length) / data.rowsOnPage);\n    });\n    var firstOnPage = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return data.page === 1 ? 1 : (data.page - 1) * data.rowsOnPage + 1;\n    });\n    var lastOnPage = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _a, _b;\n\n      return data.page * data.rowsOnPage > ((_a = data.rows) === null || _a === void 0 ? void 0 : _a.length) ? (_b = data.rows) === null || _b === void 0 ? void 0 : _b.length : data.page * data.rowsOnPage;\n    });\n    var pageCorrection = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _a, _b;\n\n      if ((data.page - 1) * data.rowsOnPage > ((_a = data.rows) === null || _a === void 0 ? void 0 : _a.length)) {\n        return Math.ceil((data.page * data.rowsOnPage - ((_b = data.rows) === null || _b === void 0 ? void 0 : _b.length)) / data.rowsOnPage);\n      }\n\n      return null;\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.cols;\n    }, function (to) {\n      return data.cols = to;\n    }, {\n      immediate: true\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.rows;\n    }, function (to) {\n      return data.rows = to;\n    }, {\n      immediate: true\n    });\n\n    var onSelectAll = function onSelectAll(value) {\n      data.isAllRowsChecked = value;\n      data.rows.forEach(function (row) {\n        return row.checked = value;\n      });\n    };\n\n    var onSelect = function onSelect(rows) {\n      data.checkedRows = rows;\n      emit('select:row', data.checkedRows);\n    };\n\n    var onPrevPage = function onPrevPage(num) {\n      data.page = data.page > 1 ? data.page + num : data.page;\n    };\n\n    var onNextPage = function onNextPage(num) {\n      if (data.rows.length - data.page * data.rowsOnPage > 0) {\n        data.page += num;\n      }\n    };\n\n    var onSort = function onSort(col) {\n      if (col.sorted) {\n        col.sorted = !col.sorted;\n        return sortColumn(col);\n      }\n\n      data.cols.forEach(function (c) {\n        return c.sorted = col.key === c.key;\n      });\n      sortColumn(col);\n    };\n\n    var sortColumn = function sortColumn(col) {\n      var _a, _b;\n\n      if (!col.sorted) {\n        return (_a = data.rows) === null || _a === void 0 ? void 0 : _a.reverse();\n      }\n\n      var executor = col.sort || function (a, b) {\n        if (col.format) return col.format(a) > col.format(b) ? 1 : -1;\n        if (col.sorted) return a[col.key] > b[col.key] ? 1 : -1;\n      };\n\n      (_b = data.rows) === null || _b === void 0 ? void 0 : _b.sort(executor);\n    };\n\n    var onFilter = function onFilter(_ref2) {\n      var value = _ref2.value,\n          col = _ref2.col;\n      if (!value && filters[col.key]) delete filters[col.key];\n      if (value) filters[col.key] = value;\n\n      if (col.filter) {\n        return data.rows = col.filter({\n          value: value,\n          col: col\n        });\n      }\n\n      if (props.customFilter) {\n        return props.customFilter(filters);\n      }\n\n      if (!Object.keys(filters).length) {\n        return data.rows = props.rows;\n      }\n\n      data.rows = filterRows(props.rows, props.cols);\n      data.page = 1;\n    };\n\n    var onSelectRowsCount = function onSelectRowsCount(count) {\n      data.rowsOnPage = count;\n    };\n\n    var filterRows = function filterRows(rows, cols) {\n      var filterKeys = Object.keys(filters);\n      return rows.reduce(function (acc, row) {\n        var rowResults = [];\n        filterKeys.forEach(function (key) {\n          var _cols$find = cols.find(function (col) {\n            return col.key === key;\n          }),\n              format = _cols$find.format;\n\n          var value = format ? format(row) : row[key];\n          var rowKeyValue = \"\".concat(value).toLowerCase();\n          var filterValue = \"\".concat(filters[key]).toLowerCase();\n\n          if (rowKeyValue.includes(filterValue)) {\n            rowResults.push(row[key]);\n          }\n        });\n\n        if (rowResults.length === filterKeys.length && rowResults.every(function (value) {\n          return !!value;\n        })) {\n          acc.push(row);\n        }\n\n        return acc;\n      }, []);\n    };\n\n    var genTableTools = function genTableTools() {\n      var propsData = {\n        \"class\": 'v-data-table__toolbar'\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, {\n        \"default\": function _default() {\n          return slots.toolbar && slots.toolbar();\n        }\n      });\n    };\n\n    var genTableHeader = function genTableHeader() {\n      var propsData = {\n        cols: data.cols,\n        color: props.color,\n        showCheckbox: props.showCheckbox,\n        dark: props.dark,\n        align: props.align,\n        showSequence: props.showSequence,\n        options: headerOptions.value,\n        onFilter: onFilter,\n        onSort: onSort,\n        onSelectAll: onSelectAll\n      };\n      var content = data.cols.reduce(function (acc, col) {\n        var slotName = \"\".concat(col.key, \"-filter\");\n\n        if (col && slots[slotName]) {\n          acc[slotName] = addScopedSlot(slotName, slots);\n        }\n\n        return acc;\n      }, {});\n      content.header = addScopedSlot('header', slots);\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableHeader, propsData, content);\n    };\n\n    var genTableBody = function genTableBody() {\n      var _propsData;\n\n      var propsData = (_propsData = {\n        cols: data.cols,\n        rows: data.rows,\n        page: data.page,\n        rowsOnPage: data.rowsOnPage,\n        showCheckbox: props.showCheckbox,\n        checkAllRows: data.isAllRowsChecked,\n        align: props.align,\n        dark: props.dark,\n        showSequence: props.showSequence,\n        color: props.color,\n        onSelect: onSelect\n      }, VDataTable_defineProperty(_propsData, 'onClick:row', function onClickRow(e) {\n        return emit('click:row', e);\n      }), VDataTable_defineProperty(_propsData, 'onDblclick:row', function onDblclickRow(e) {\n        return emit('dblclick:row', e);\n      }), VDataTable_defineProperty(_propsData, 'onContextmenu:row', function onContextmenuRow(e) {\n        return emit('contextmenu:row', e);\n      }), _propsData);\n      var content = props.cols.reduce(function (acc, col) {\n        if (col && slots[col.key]) {\n          acc[col.key] = addScopedSlot(col.key, slots);\n        }\n\n        return acc;\n      }, {});\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableBody, propsData, content);\n    };\n\n    var genTableFooter = function genTableFooter() {\n      var _a;\n\n      var propsData = {\n        pages: pages.value,\n        page: data.page,\n        firstOnPage: firstOnPage.value,\n        lastOnPage: lastOnPage.value,\n        pageCorrection: pageCorrection.value,\n        rowsOnPage: data.rowsOnPage,\n        rowsLength: (_a = data.rows) === null || _a === void 0 ? void 0 : _a.length,\n        options: footerOptions.value,\n        onPrevPage: onPrevPage,\n        onNextPage: onNextPage,\n        onSelectRowsCount: onSelectRowsCount,\n        onLastPage: function onLastPage() {\n          return emit('last-page', props.rows.length);\n        },\n        onCorrectPage: function onCorrectPage(val) {\n          return data.page += val;\n        }\n      };\n      var content = slots['pagination-text'] ? VDataTable_defineProperty({}, 'pagination-text', function paginationText() {\n        var _a;\n\n        return slots['pagination-text'] && slots['pagination-text']({\n          start: firstOnPage.value,\n          last: lastOnPage.value,\n          length: (_a = data.rows) === null || _a === void 0 ? void 0 : _a.length\n        });\n      }) : '';\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableFooter, propsData, content);\n    };\n\n    var genTableInner = function genTableInner() {\n      var propsData = {\n        \"class\": 'v-data-table__inner'\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [genTableHeader(), genTableBody()]);\n    };\n\n    return function () {\n      var propsData = {\n        \"class\": classes.value,\n        style: styles.value\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [slots.toolbar && genTableTools(), genTableInner(), genTableFooter()]);\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VDatePicker/VDatepickerHeader.ts\nfunction VDatepickerHeader_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VDatepickerHeader_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VDatepickerHeader_ownKeys(Object(source), !0).forEach(function (key) { VDatepickerHeader_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VDatepickerHeader_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VDatepickerHeader_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar VDatepickerHeader = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-date-picker-header',\n  props: {\n    onNext: Function,\n    onPrev: Function,\n    color: String\n  },\n  emits: ['table'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n\n    var _useColors = useColors(),\n        setTextClassNameColor = _useColors.setTextClassNameColor,\n        setTextCssColor = _useColors.setTextCssColor;\n\n    var _useIcons = useIcons(),\n        icons = _useIcons.icons;\n\n    var genHeaderButton = function genHeaderButton(isRight) {\n      var icon = isRight ? icons.$arrowRight : icons.$arrowLeft;\n      var propsData = {\n        \"class\": 'v-date-picker__header-button'\n      };\n      var iconPropsData = {\n        icon: icon,\n        clickable: true,\n        \"class\": VDatepickerHeader_objectSpread({}, props.color ? setTextClassNameColor(props.color) : {}),\n        style: VDatepickerHeader_objectSpread({}, props.color ? setTextCssColor(props.color) : {}),\n        onClick: function onClick() {\n          return isRight ? props.onNext() : props.onPrev();\n        }\n      };\n      var arrowBtn = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, iconPropsData);\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, arrowBtn);\n    };\n\n    var genHeaderDisplay = function genHeaderDisplay() {\n      var propsData = {\n        \"class\": VDatepickerHeader_objectSpread({\n          'v-date-picker__header-display': true\n        }, props.color ? setTextClassNameColor(props.color) : {}),\n        style: VDatepickerHeader_objectSpread({}, props.color ? setTextCssColor(props.color) : {}),\n        onClick: function onClick() {\n          return emit('table');\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, slots[\"default\"] && slots[\"default\"]());\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-date-picker__header'\n      }, [genHeaderButton(false), genHeaderDisplay(), genHeaderButton(true)]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VDatePicker/utils.ts\nfunction utils_typeof(obj) { \"@babel/helpers - typeof\"; return utils_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, utils_typeof(obj); }\n\nfunction getMonth(date) {\n  return date.getMonth();\n}\nfunction getFullYear(date) {\n  return date.getFullYear();\n}\nfunction getDate(date) {\n  return date.getDate();\n}\nfunction getDay(date) {\n  return date.getDay();\n}\nfunction getHours(date) {\n  return date.getHours();\n}\nfunction getMinutes(date) {\n  return date.getMinutes();\n}\nfunction setFullYear(date, value) {\n  return date.setFullYear(value);\n}\nfunction setMonth(date, value) {\n  return date.setMonth(value);\n}\nfunction setDate(date, value) {\n  return date.setDate(value);\n}\nfunction isValidDate(date) {\n  if (Object.prototype.toString.call(date) !== '[object Date]') {\n    return false;\n  }\n\n  return !isNaN(date.getTime());\n}\n\nfunction getDayNameAbbr(date, days) {\n  if (utils_typeof(date) !== 'object') {\n    throw TypeError('Invalid Type');\n  }\n\n  return days[getDay(date)];\n}\n\nfunction getMonthName(month, months) {\n  if (!months) {\n    throw Error('missing second parameter Months array');\n  }\n\n  return months[month];\n}\n\nfunction getMonthNameAbbr(month, monthsAbbr) {\n  if (!monthsAbbr) {\n    throw Error('missing 2nd paramter Months array');\n  }\n\n  if (utils_typeof(month) === 'object') {\n    return monthsAbbr[getMonth(month)];\n  }\n\n  if (typeof month === 'number') {\n    return monthsAbbr[month];\n  }\n\n  throw TypeError('Invalid type');\n}\n\nfunction formatDate(date, format, translation) {\n  var year = getFullYear(date);\n  var month = getMonth(date) + 1;\n  var day = getDate(date);\n  return format.replace(/dd/, ('0' + day).slice(-2)).replace(/d/, \"\".concat(day)).replace(/yyyy/, \"\".concat(year)).replace(/yy/, String(year).slice(2)).replace(/MMMM/, getMonthName(getMonth(date), translation.months)).replace(/MMM/, getMonthNameAbbr(getMonth(date), translation.monthsAbbr)).replace(/MM/, ('0' + month).slice(-2)).replace(/M(?!a|ä|e)/, \"\".concat(month)).replace(/D(?!e|é|i)/, getDayNameAbbr(date, translation.week));\n}\nfunction validateDateInput(val) {\n  return val === null || val instanceof Date || typeof val === 'string' || typeof val === 'number';\n}\n;// CONCATENATED MODULE: ./src/components/VDatePicker/helpers.ts\n\n\nfunction genTableRows(vNodesArray, rowClassName, cellsInRow) {\n  var tableRows = [];\n  var vNodesInRow = [];\n\n  var genTableRow = function genTableRow(cellVNodes) {\n    return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n      \"class\": rowClassName\n    }, cellVNodes);\n  };\n\n  for (var i = 0; i <= vNodesArray.length; i += 1) {\n    if (i && !(i % cellsInRow)) {\n      tableRows.push(genTableRow(vNodesInRow));\n      vNodesInRow = [];\n    }\n\n    vNodesInRow.push(vNodesArray[i]);\n  }\n\n  if (vNodesInRow.length) {\n    tableRows.push(genTableRow(vNodesInRow));\n  }\n\n  return tableRows;\n}\nfunction toDateString(date) {\n  return new Date(date.year, date.month, date.date);\n}\nfunction parseDate(selectedDate) {\n  var date = new Date(selectedDate);\n  var day = getDay(date);\n  return {\n    year: getFullYear(date),\n    month: getMonth(date),\n    date: getDate(date),\n    mls: date.getTime(),\n    day: day\n  };\n}\n;// CONCATENATED MODULE: ./src/components/VDatePicker/VDatePickerDates.ts\n\n\n\nvar VDatePickerDates = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-date-picker-dates',\n  props: {\n    locale: Array,\n    year: [String, Number],\n    month: [String, Number],\n    date: [String, Number],\n    value: Object,\n    mondayFirst: Boolean,\n    disabledDates: Object\n  },\n  emits: ['update:month', 'update:value'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n    var FIRST_MONTH = 0;\n    var LAST_MONTH = 11;\n    var DAYS = [0, 1, 2, 3, 4, 5, 6];\n    var ANIMATION_TIMEOUT = 0;\n    var dates = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)([]);\n    var isDatesChanged = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(false);\n    var today = parseDate(new Date());\n    var handlers = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.inject)('handlers');\n    handlers.value = {\n      onNext: function onNext() {\n        return updateMonth(true);\n      },\n      onPrev: function onPrev() {\n        return updateMonth(false);\n      }\n    };\n\n    if (props.mondayFirst) {\n      DAYS.push(DAYS.splice(0, 1)[0]);\n    }\n\n    var daysInMonth = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return new Date(props.year, props.month + 1, 0).getDate();\n    });\n\n    var updateMonth = function updateMonth(isNext) {\n      var params = {};\n      params.month = props.month + (isNext ? 1 : -1);\n      if (!isNext && params.month < FIRST_MONTH) params.month = LAST_MONTH;\n      if (isNext && params.month > LAST_MONTH) params.month = FIRST_MONTH;\n      if (isNext && !params.month) params.year = props.year + 1;\n      if (!isNext && params.month === LAST_MONTH) params.year = props.year - 1;\n      isDatesChanged.value = true;\n      emit('update:month', params);\n    };\n\n    var genWeekDays = function genWeekDays() {\n      var propsData = {\n        \"class\": 'v-date-picker-dates__day'\n      };\n      return DAYS.map(function (day) {\n        return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', propsData, props.locale[day]);\n      });\n    };\n\n    var genDateObject = function genDateObject(date) {\n      var year = props.year,\n          month = props.month;\n      return parseDate(new Date(year, month, date));\n    };\n\n    var setEmptiesBeforeFirstDate = function setEmptiesBeforeFirstDate(dateObject) {\n      var firstDay = DAYS[0];\n      var startDay = firstDay && !dateObject.day ? dateObject.day : firstDay;\n      var tillDay = firstDay && !dateObject.day ? DAYS.length - 1 : dateObject.day;\n\n      for (var i = startDay; i <= tillDay; i += 1) {\n        dates.value[i] = {\n          date: null\n        };\n      }\n\n      dates.value[tillDay] = dateObject;\n    };\n\n    var genTableDates = function genTableDates() {\n      dates.value = [];\n\n      for (var i = 1; i <= daysInMonth.value; i += 1) {\n        var dateObject = genDateObject(i);\n\n        if (i === 1) {\n          setEmptiesBeforeFirstDate(dateObject);\n        } else {\n          dates.value[dates.value.length] = dateObject;\n        }\n      }\n    };\n\n    var compareDates = function compareDates(date1, date2) {\n      return date1.date === date2.date && date1.month === date2.month && date1.year === date2.year;\n    };\n\n    var setDisabled = function setDisabled(date) {\n      if (!date.date) return false;\n      if (!props.disabledDates) return !!date.isHoliday;\n      var disabledDates = props.disabledDates;\n      return disabledDates.daysOfMonth && disableDaysOfMonth(date) || disabledDates.from && disableFromTo(date, disabledDates) || disabledDates.dates && disableDates(date) || disabledDates.days && disableDays(date) || disabledDates.ranges && disableRanges(date) || disabledDates.custom && disabledDates.custom(date);\n    };\n\n    var disableFromTo = function disableFromTo(date, _ref2) {\n      var from = _ref2.from,\n          to = _ref2.to;\n      var dateFrom = parseDate(from);\n      var dateTo = parseDate(to);\n      return date.mls >= dateFrom.mls && date.mls <= dateTo.mls;\n    };\n\n    var disableDaysOfMonth = function disableDaysOfMonth(date) {\n      return props.disabledDates.daysOfMonth.some(function (it) {\n        return it === date.date;\n      });\n    };\n\n    var disableDates = function disableDates(date) {\n      return props.disabledDates.dates.find(function (d) {\n        return String(d) === String(toDateString(date));\n      });\n    };\n\n    var disableDays = function disableDays(date) {\n      return props.disabledDates.days.find(function (d) {\n        return d === date.day;\n      }) >= 0;\n    };\n\n    var disableRanges = function disableRanges(date) {\n      var ranges = props.disabledDates.ranges;\n\n      for (var i = 0; i < ranges.length; i += 1) {\n        if (disableFromTo(date, ranges[i])) return true;\n      }\n    };\n\n    var genDateCell = function genDateCell(date) {\n      var isSelected = compareDates(date, props.value);\n      var isToday = compareDates(date, today);\n      date.isHoliday = setDisabled(date);\n      var propsData = {\n        \"class\": {\n          'v-date-picker-dates__cell': !!date.date,\n          'v-date-picker-dates__cell--empty': !date.date,\n          'v-date-picker-dates__cell--selected': isSelected && !props.value[\"default\"],\n          'v-date-picker-dates__cell--current-date': isToday,\n          'v-date-picker-dates__cell--holiday': date.date && date.isHoliday\n        },\n        onClick: function onClick() {\n          return date.date && emit('update:value', date);\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [date.date && slots.date && slots.date(date) || date.date]);\n    };\n\n    var genDateCells = function genDateCells() {\n      return dates.value.reduce(function (acc, dateObject) {\n        acc.push(genDateCell(dateObject));\n        return acc;\n      }, []);\n    };\n\n    var genDateRows = function genDateRows() {\n      var datesVNodes = genDateCells();\n      return genTableRows(datesVNodes, 'v-date-picker-dates__row', DAYS.length);\n    };\n\n    var genDates = function genDates() {\n      return !isDatesChanged.value && (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-date-picker-dates__dates'\n      }, genDateRows()) || null;\n    };\n\n    var genWeek = function genWeek() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-date-picker-dates__week'\n      }, genWeekDays());\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.month;\n    }, function () {\n      return genTableDates();\n    }, {\n      immediate: true\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return isDatesChanged.value;\n    }, function () {\n      return setTimeout(function () {\n        return isDatesChanged.value = false;\n      }, ANIMATION_TIMEOUT);\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-date-picker-dates'\n      }, [genWeek(), useTransition(genDates(), 'fade')]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VDatePicker/VDatePickerYears.ts\n\n\n\nvar VDatePickerYears = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-date-picker-years',\n  props: {\n    year: [Number, String]\n  },\n  emits: ['update:year'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var LIMIT = 100;\n    var ON_TABLE = 20;\n    var CELLS_IN_ROW = 4;\n    var CURRENT_YEAR = new Date().getFullYear();\n    var ANIMATION_TIMEOUT = 100;\n    var years = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)([]);\n    var onTableIndex = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(0);\n    var isListChanged = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(false);\n    var transition = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)('');\n    var handlers = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.inject)('handlers');\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watchEffect)(function () {\n      return isListChanged.value && setTimeout(function () {\n        isListChanged.value = false;\n      }, ANIMATION_TIMEOUT);\n    });\n    var computedYear = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)({\n      get: function get() {\n        return +props.year || CURRENT_YEAR;\n      },\n      set: function set(val) {\n        emit('update:year', val);\n      }\n    });\n\n    if (handlers === null || handlers === void 0 ? void 0 : handlers.value) {\n      handlers.value = {\n        onNext: function onNext() {\n          return changeYearsList(true);\n        },\n        onPrev: function onPrev() {\n          return changeYearsList(false);\n        }\n      };\n    }\n\n    var setCurrentTransition = function setCurrentTransition(isNext) {\n      transition.value = isNext ? 'fade-in-down' : 'fade-in-up';\n    };\n\n    var setTableIndex = function setTableIndex() {\n      onTableIndex.value = years.value.findIndex(function (row) {\n        return row.find(function (year) {\n          return year === computedYear.value;\n        });\n      });\n    };\n\n    var changeYearsList = function changeYearsList(isNext) {\n      var max = years.value.length - 1;\n      var val = isNext ? 1 : -1;\n      if (onTableIndex.value === max && val > 0 || onTableIndex.value === 0 && val < 0) return;\n      setCurrentTransition(isNext);\n      onTableIndex.value += val;\n      isListChanged.value = true;\n    };\n\n    var genTableYears = function genTableYears() {\n      var fromYear = CURRENT_YEAR - LIMIT;\n      var maxYears = LIMIT * 2;\n      var yearsList = [];\n\n      for (var i = 0; i <= maxYears; i += 1) {\n        if (yearsList.length === ON_TABLE) {\n          years.value.push(yearsList);\n          yearsList = [];\n        }\n\n        yearsList.push(fromYear + i);\n      }\n    };\n\n    var genYearCell = function genYearCell(year) {\n      var isSelected = year === computedYear.value;\n      var propsData = {\n        \"class\": {\n          'v-date-picker-years__cell': true,\n          'v-date-picker-years__cell--selected': isSelected,\n          'v-date-picker-years__cell--current-year': year === CURRENT_YEAR\n        },\n        onClick: function onClick() {\n          return computedYear.value = year;\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, year);\n    };\n\n    var genYearsRows = function genYearsRows() {\n      var currentYears = years.value[onTableIndex.value];\n      var yearsVNodes = currentYears.map(genYearCell);\n      return genTableRows(yearsVNodes, 'v-date-picker-years__row', CELLS_IN_ROW);\n    };\n\n    var genYears = function genYears() {\n      var propsData = {\n        \"class\": 'v-date-picker-years__years'\n      };\n      return !isListChanged.value && (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, genYearsRows()) || null;\n    };\n\n    genTableYears();\n    setTableIndex();\n    return function () {\n      var content = useTransition(genYears(), transition.value);\n      var propsData = {\n        \"class\": {\n          'v-date-picker-years': true\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, content);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VDatePicker/VDatePickerMonths.ts\n\n\nvar VDatePickerMonths = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-date-picker-months',\n  props: {\n    lang: {\n      type: String,\n      \"default\": 'en'\n    },\n    month: [String, Number],\n    year: [String, Number],\n    locale: Array\n  },\n  emits: ['update:month', 'update:year'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var CELLS_IN_ROW = 3;\n    var MONTHS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n    var CURRENT_MONTH = new Date().getMonth();\n    var handlers = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.inject)('handlers');\n    handlers.value = {\n      onNext: function onNext() {\n        return updateYear(true);\n      },\n      onPrev: function onPrev() {\n        return updateYear(false);\n      }\n    };\n    var computedMonth = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)({\n      get: function get() {\n        return props.month !== undefined ? +props.month : CURRENT_MONTH;\n      },\n      set: function set(val) {\n        emit('update:month', val);\n      }\n    });\n\n    var updateYear = function updateYear(isNext) {\n      var year = +props.year + (isNext ? 1 : -1);\n      emit('update:year', year);\n    };\n\n    var genMonthCell = function genMonthCell(month) {\n      var isSelected = month === computedMonth.value;\n      var propsData = {\n        \"class\": {\n          'v-date-picker-months__cell': true,\n          'v-date-picker-months__cell--selected': isSelected,\n          'v-date-picker-months__cell--current-month': month === CURRENT_MONTH\n        },\n        onClick: function onClick() {\n          return computedMonth.value = month;\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, props.locale[month]);\n    };\n\n    var genMonthRows = function genMonthRows() {\n      var monthsVNodes = MONTHS.map(genMonthCell);\n      return genTableRows(monthsVNodes, 'v-date-picker-months__row', CELLS_IN_ROW);\n    };\n\n    return function () {\n      var propsData = {\n        \"class\": 'v-date-picker-months'\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, genMonthRows());\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/services/locale.ts\nvar locale = {\n  ru: {\n    months: ['Январь', 'Феввраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],\n    monthsAbbr: ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'],\n    week: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб']\n  },\n  en: {\n    months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    monthsAbbr: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    week: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n  }\n};\n;// CONCATENATED MODULE: ./src/components/VDatePicker/VDatePicker.ts\nfunction VDatePicker_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VDatePicker_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VDatePicker_ownKeys(Object(source), !0).forEach(function (key) { VDatePicker_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VDatePicker_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VDatePicker_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var VDatePicker = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-date-picker',\n  props: VDatePicker_objectSpread({\n    dark: Boolean,\n    disabled: Boolean,\n    clearable: Boolean,\n    readonly: Boolean,\n    typeable: Boolean,\n    mondayFirst: Boolean,\n    today: Boolean,\n    useMls: Boolean,\n    useUtc: Boolean,\n    lang: {\n      type: String,\n      \"default\": 'en'\n    },\n    label: String,\n    prependIcon: String,\n    format: {\n      type: String,\n      \"default\": 'yyyy MM dd D'\n    },\n    rules: Array,\n    value: [String, Date, Number],\n    modelValue: [String, Date, Number],\n    disabledDates: Object,\n    highlighted: Object,\n    contentColor: {\n      type: String,\n      \"default\": 'primary'\n    },\n    color: {\n      type: String,\n      \"default\": 'white'\n    }\n  }, elevationProps()),\n  emits: ['update:value', 'update:modelValue', 'selected'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n    var data = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({\n      year: null,\n      month: null,\n      date: null,\n      day: null,\n      selected: null,\n      tableMonth: null,\n      tableYear: null,\n      convertedDateString: null,\n      isYears: false,\n      isMonths: false,\n      isDates: true,\n      isActive: false\n    });\n\n    var _useColors = useColors(),\n        setTextClassNameColor = _useColors.setTextClassNameColor,\n        setTextCssColor = _useColors.setTextCssColor,\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var _useElevation = useElevation(props),\n        elevationClasses = _useElevation.elevationClasses;\n\n    var localeMonths = locale[props.lang].monthsAbbr;\n    var localeWeek = locale[props.lang].week;\n    var contentColor = props.dark ? 'white' : props.contentColor;\n    var handlers = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)({});\n    var activator = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n    var closeConditional = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(false);\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.provide)('handlers', handlers);\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        'v-date-picker': true,\n        'v-date-picker--typeable': props.typeable,\n        'v-date-picker--readonly': !props.typeable || props.readonly\n      };\n    });\n    var tableClasses = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDatePicker_objectSpread(VDatePicker_objectSpread(VDatePicker_objectSpread({\n        'v-date-picker__table': true\n      }, elevationClasses.value), props.color ? setBackgroundClassNameColor(props.color) : {}), contentColor ? setTextClassNameColor(contentColor) : {});\n    });\n    var tableStyles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDatePicker_objectSpread(VDatePicker_objectSpread({}, props.color ? setBackgroundCssColor(props.color) : {}), contentColor ? setTextCssColor(contentColor) : {});\n    });\n    var headerValue = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return data.isYears || data.isMonths ? \"\".concat(data.tableYear) : data.isDates ? \"\".concat(data.tableYear, \" \").concat(localeMonths[data.tableMonth]) : '';\n    });\n    var displayDate = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _data$selected = data.selected,\n          month = _data$selected.month,\n          date = _data$selected.date,\n          day = _data$selected.day;\n      return \"\".concat(localeMonths[month], \" \").concat(date, \" \").concat(localeWeek[day]);\n    });\n    var computedValue = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _data$selected2 = data.selected,\n          year = _data$selected2.year,\n          month = _data$selected2.month,\n          date = _data$selected2.date;\n      return new Date(year, month, date);\n    });\n\n    var setInitDate = function setInitDate() {\n      if (props.value) setParsedDate(props.value);else if (props.modelValue) setParsedDate(props.modelValue);else setParsedDate();\n\n      if (props.today || props.value || props.modelValue) {\n        data.convertedDateString = convertToFormat();\n      }\n    };\n\n    var onTableChange = function onTableChange() {\n      if (data.isYears) {\n        data.isYears = false;\n        return data.isMonths = true;\n      }\n\n      if (data.isMonths) {\n        data.isMonths = false;\n        return data.isYears = true;\n      }\n\n      if (data.isDates) {\n        data.isDates = false;\n        return data.isMonths = true;\n      }\n\n      return undefined;\n    };\n\n    var setDataDate = function setDataDate(_ref2) {\n      var year = _ref2.year,\n          month = _ref2.month,\n          date = _ref2.date,\n          day = _ref2.day;\n      data.tableMonth = month;\n      data.tableYear = year;\n      data.year = year;\n      data.month = month;\n      data.date = date;\n      data.day = day;\n    };\n\n    var setParsedDate = function setParsedDate() {\n      var selectedDate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var dateForParsing = selectedDate || new Date();\n      data.selected = parseDate(dateForParsing);\n      !selectedDate && (data.selected[\"default\"] = !selectedDate);\n      setDataDate(data.selected);\n    };\n\n    var onYearUpdate = function onYearUpdate(year) {\n      data.tableYear = year;\n      data.isMonths = true;\n      data.isYears = false;\n    };\n\n    var onMonthUpdate = function onMonthUpdate(month) {\n      data.tableMonth = month;\n      data.isMonths = false;\n      data.isYears = false;\n      data.isDates = true;\n    };\n\n    var onDateUpdate = function onDateUpdate(date) {\n      if (!date) return;\n      closeConditional.value = true;\n      data.selected = date;\n      data.tableMonth = date.month;\n      data.tableYear = date.year;\n      data.convertedDateString = convertToFormat();\n      emit('update:value', computedValue.value);\n      emit('update:modelValue', computedValue.value);\n      emit('selected', computedValue.value);\n      requestAnimationFrame(function () {\n        return closeConditional.value = false;\n      });\n    };\n\n    var onDateMonthUpdate = function onDateMonthUpdate(dateObject) {\n      data.tableMonth = dateObject.month;\n      if (dateObject.year) data.tableYear = dateObject.year;\n    };\n\n    var onDateInput = function onDateInput(date) {\n      onDateUpdate(stringToDate(date));\n    };\n\n    var stringToDate = function stringToDate(date) {\n      if (date.length === 10) {\n        var dateArray = date.trim().split(/\\W/);\n\n        if (dateArray[0].length < 4) {\n          date = dateArray.reverse().join('.');\n        }\n\n        return parseDate(new Date(Date.parse(date)));\n      }\n\n      return null;\n    };\n\n    var convertToFormat = function convertToFormat() {\n      if (!data.selected) return '';\n      return formatDate(new Date(data.selected.year, data.selected.month, data.selected.date), props.format, locale[props.lang]);\n    };\n\n    var genDisplayValue = function genDisplayValue(value) {\n      var propsData = {\n        \"class\": 'v-date-picker__display-value'\n      };\n      return useTransition((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', propsData, value), 'scale-in-out', 'out-in');\n    };\n\n    var genDatepickerDisplayInner = function genDatepickerDisplayInner() {\n      var _a;\n\n      var propsData = {\n        \"class\": 'v-date-picker__display-inner'\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [genDisplayValue((_a = data.selected) === null || _a === void 0 ? void 0 : _a.year), genDisplayValue(displayDate.value)]);\n    };\n\n    var genDatepickerDisplay = function genDatepickerDisplay() {\n      var propsData = {\n        \"class\": VDatePicker_objectSpread(VDatePicker_objectSpread({\n          'v-date-picker__display': true\n        }, contentColor ? setBackgroundClassNameColor(contentColor) : {}), props.color ? setTextClassNameColor(props.color) : {}),\n        style: VDatePicker_objectSpread(VDatePicker_objectSpread({}, contentColor ? setBackgroundCssColor(contentColor) : {}), props.color ? setTextCssColor(props.color) : {})\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, genDatepickerDisplayInner());\n    };\n\n    var genDatepickerHeader = function genDatepickerHeader() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDatepickerHeader, {\n        onNext: function onNext() {\n          return handlers.value.onNext();\n        },\n        onPrev: function onPrev() {\n          return handlers.value.onPrev();\n        },\n        onTable: onTableChange\n      }, {\n        \"default\": function _default() {\n          return headerValue.value;\n        }\n      });\n    };\n\n    var genDatepickerYearsTable = function genDatepickerYearsTable() {\n      var propsData = VDatePicker_defineProperty({\n        year: data.tableYear\n      }, 'onUpdate:year', onYearUpdate);\n\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDatePickerYears, propsData);\n    };\n\n    var genDatepickerMonthsTable = function genDatepickerMonthsTable() {\n      var _h;\n\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDatePickerMonths, (_h = {\n        lang: props.lang,\n        month: data.tableMonth,\n        year: data.tableYear,\n        locale: localeMonths\n      }, VDatePicker_defineProperty(_h, 'onUpdate:month', onMonthUpdate), VDatePicker_defineProperty(_h, 'onUpdate:year', onYearUpdate), _h));\n    };\n\n    var genDatepickerDatesTable = function genDatepickerDatesTable() {\n      var _h2;\n\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDatePickerDates, (_h2 = {\n        locale: localeWeek,\n        mondayFirst: props.mondayFirst,\n        month: data.tableMonth,\n        year: data.tableYear,\n        value: data.selected,\n        disabledDates: props.disabledDates\n      }, VDatePicker_defineProperty(_h2, 'onUpdate:value', onDateUpdate), VDatePicker_defineProperty(_h2, 'onUpdate:month', onDateMonthUpdate), _h2), {\n        date: slots.date && addScopedSlot('date', slots)\n      });\n    };\n\n    var genDatepickerBody = function genDatepickerBody() {\n      var propsData = {\n        \"class\": {\n          'v-date-picker__body': true\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, useTransition(data.isYears && genDatepickerYearsTable() || data.isMonths && genDatepickerMonthsTable() || data.isDates && genDatepickerDatesTable(), 'slide-in-left', 'out-in'));\n    };\n\n    var genDatepickerInput = function genDatepickerInput() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VTextField, {\n        modelValue: data.convertedDateString,\n        dark: props.dark,\n        label: props.label,\n        readonly: !props.typeable,\n        disabled: props.disabled,\n        prependIcon: props.prependIcon,\n        rules: props.rules,\n        clearable: props.clearable,\n        ref: activator,\n        onInput: onDateInput,\n        onClear: function onClear() {\n          data.convertedDateString = '';\n          emit('update:value', null);\n          emit('update:modelValue', null);\n          emit('selected', null);\n        }\n      });\n    };\n\n    var genDatepickerTable = function genDatepickerTable() {\n      var propsData = {\n        \"class\": tableClasses.value,\n        style: tableStyles.value\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [genDatepickerDisplay(), genDatepickerHeader(), genDatepickerBody()]);\n    };\n\n    var genMenu = function genMenu() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VMenu, {\n        activator: activator.value,\n        internalActivator: true,\n        inputActivator: '.v-input__text-field',\n        width: 'auto',\n        maxHeight: 'auto',\n        bottom: props.typeable,\n        openOnClick: true,\n        closeOnClick: closeConditional.value\n      }, {\n        \"default\": function _default() {\n          return genDatepickerTable();\n        }\n      });\n    };\n\n    var genDatepicker = function genDatepicker() {\n      var propsData = {\n        \"class\": classes.value\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [genDatepickerInput(), activator.value && genMenu()]);\n    };\n\n    setInitDate();\n    return function () {\n      return genDatepicker();\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VProgressLinear/VProgressLinear.ts\nfunction VProgressLinear_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VProgressLinear_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VProgressLinear_ownKeys(Object(source), !0).forEach(function (key) { VProgressLinear_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VProgressLinear_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VProgressLinear_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n/* harmony default export */ var VProgressLinear = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-progress-linear',\n  props: {\n    value: {\n      type: [String, Number],\n      \"default\": null\n    },\n    modelValue: {\n      type: [String, Number],\n      \"default\": null\n    },\n    bufferValue: {\n      type: [String, Number],\n      \"default\": null\n    },\n    height: {\n      type: [Number, String],\n      \"default\": 4\n    },\n    color: {\n      type: String,\n      \"default\": 'primary'\n    },\n    backgroundColor: {\n      type: String,\n      \"default\": 'primary'\n    },\n    backgroundOpacity: {\n      type: String,\n      \"default\": '0.3'\n    },\n    indeterminate: Boolean,\n    reverse: Boolean,\n    rounded: Boolean,\n    stream: Boolean,\n    striped: Boolean\n  },\n  setup: function setup(props) {\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var genProgressBar = function genProgressBar() {\n      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var barWidth = props.value || props.modelValue;\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": VProgressLinear_objectSpread(VProgressLinear_defineProperty({\n          'v-progress-linear__bar': true\n        }, type, !!type), props.color ? setBackgroundClassNameColor(props.color) : {}),\n        style: VProgressLinear_objectSpread({\n          width: !props.indeterminate ? barWidth + '%' : ''\n        }, props.color ? setBackgroundCssColor(props.color) : {})\n      });\n    };\n\n    var genProgressBuffer = function genProgressBuffer() {\n      var bufferWidth = props.value || props.modelValue;\n      var propsData = {\n        \"class\": {\n          'v-progress-linear__buffer': true\n        },\n        style: {\n          width: bufferWidth ? bufferWidth + '%' : ''\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData);\n    };\n\n    function genProgressBackground() {\n      var propsData = {\n        \"class\": VProgressLinear_objectSpread({\n          'v-progress-linear__background': true\n        }, props.backgroundColor ? setBackgroundClassNameColor(props.backgroundColor) : {}),\n        style: VProgressLinear_objectSpread({\n          opacity: props.backgroundOpacity\n        }, props.backgroundColor ? setBackgroundCssColor(props.backgroundColor) : {})\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData);\n    }\n\n    function genProgressIndeterminate() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": {\n          'v-progress-linear__indeterminate': true\n        }\n      }, [genProgressBar('long'), genProgressBar('short')]);\n    }\n\n    function genProgressLinear() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-progress-linear',\n        style: {\n          height: \"\".concat(props.height, \"px\")\n        }\n      }, [genProgressBackground(), genProgressBuffer(), props.indeterminate ? genProgressIndeterminate() : genProgressBar()]);\n    }\n\n    return function () {\n      return genProgressLinear();\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VAutocomplete/VAutocomplete.ts\nfunction VAutocomplete_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VAutocomplete_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VAutocomplete_ownKeys(Object(source), !0).forEach(function (key) { VAutocomplete_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VAutocomplete_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VAutocomplete_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var VAutocomplete = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-autocomplete',\n  props: VAutocomplete_objectSpread({\n    label: String,\n    items: Array,\n    dark: Boolean,\n    valueKey: String,\n    idKey: String,\n    listColor: String,\n    disabled: Boolean,\n    typeable: Boolean,\n    loading: Boolean,\n    modelValue: {\n      \"default\": null\n    },\n    color: {\n      type: String,\n      \"default\": 'primary'\n    }\n  }, validationProps()),\n  emits: ['input', 'blur', 'focus', 'select', 'update:modelValue', 'update:value'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var state = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({\n      focused: false,\n      isMenuActive: false,\n      search: '',\n      select: null\n    });\n\n    var _useColors = useColors(),\n        setTextCssColor = _useColors.setTextCssColor,\n        setTextClassNameColor = _useColors.setTextClassNameColor;\n\n    var activator = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VAutocomplete_objectSpread({\n        'v-autocomplete': true,\n        'v-autocomplete--disabled': props.disabled,\n        'v-autocomplete--focused': state.focused\n      }, props.color ? setTextClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VAutocomplete_objectSpread({}, props.color ? setTextCssColor(props.color) : {});\n    });\n    var valueProperty = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.modelValue || props.value;\n    });\n    var inputValue = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.valueKey && valueProperty.value ? getKeyValueFromTarget(props.valueKey, valueProperty.value) : valueProperty.value;\n    });\n\n    var onFocus = function onFocus() {\n      state.focused = true;\n      state.isMenuActive = true;\n      emit('focus');\n    };\n\n    var onBlur = function onBlur() {\n      if (!valueProperty.value && !state.search) state.search = '';\n      if (!state.search && valueProperty.value) state.search = inputValue.value;\n      state.focused = false;\n      emit('blur');\n    };\n\n    var onInput = function onInput(e) {\n      state.search = e.target.value;\n      emit('input', e.target.value);\n    };\n\n    var onClear = function onClear() {\n      state.search = '';\n      state.select = null;\n      emit('select', null);\n      emit('update:modelValue', null);\n      emit('update:value', null);\n    };\n\n    var onSelect = function onSelect(it) {\n      state.search = props.valueKey ? getKeyValueFromTarget(props.valueKey, it) : it;\n      state.select = it;\n      emit('select', it);\n      emit('update:modelValue', it);\n      emit('update:value', it);\n    };\n\n    var genInput = function genInput() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('input', {\n        value: state.search,\n        disabled: props.disabled,\n        readonly: props.readonly && !props.typeable,\n        ref: activator,\n        \"class\": 'v-autocomplete__input',\n        onInput: onInput,\n        onFocus: onFocus,\n        onBlur: onBlur\n      });\n    };\n\n    var genAutocompleteList = function genAutocompleteList() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VSelectList, {\n        items: props.items,\n        valueKey: props.valueKey,\n        idKey: props.idKey,\n        active: state.isMenuActive,\n        color: props.dark ? 'white' : props.color,\n        listColor: props.listColor,\n        select: state.select,\n        onSelect: onSelect\n      });\n    };\n\n    var genMenu = function genMenu() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VMenu, {\n        activator: activator.value,\n        openOnClick: true,\n        maxHeight: 240,\n        bottom: true,\n        onHide: function onHide() {\n          return state.isMenuActive = state.focused;\n        }\n      }, {\n        \"default\": genAutocompleteList\n      });\n    };\n\n    var genLinearProgress = function genLinearProgress() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": {\n          'v-autocomplete__loading': true\n        }\n      }, (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VProgressLinear, {\n        height: 2,\n        indeterminate: true,\n        color: props.color,\n        backgroundColor: props.color\n      }));\n    };\n\n    var genAutocomplete = function genAutocomplete() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        style: styles.value\n      }, [genInput(), props.loading && genLinearProgress(), activator.value && genMenu()]);\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeMount)(function () {\n      state.select = valueProperty.value;\n      state.search = inputValue.value;\n    });\n    return function () {\n      var propsData = {\n        label: props.label,\n        focused: state.isMenuActive,\n        hasState: !!state.search,\n        dark: props.dark,\n        disabled: props.disabled,\n        clearable: props.clearable,\n        color: props.color,\n        rules: props.rules,\n        value: valueProperty.value || state.search,\n        onClear: onClear\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VInput, propsData, {\n        'text-field': function textField() {\n          return genAutocomplete();\n        }\n      });\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VGrid/VLayout.ts\n\n/* harmony default export */ var VLayout = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-layout',\n  props: {\n    column: Boolean,\n    wrap: Boolean\n  },\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        'v-layout': true,\n        'flex-column': props.column,\n        'flex-wrap': props.wrap\n      };\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value\n      }, {\n        \"default\": function _default() {\n          return slots[\"default\"] && slots[\"default\"]();\n        }\n      });\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VGrid/VRow.ts\nfunction VRow_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VRow_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VRow_ownKeys(Object(source), !0).forEach(function (key) { VRow_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VRow_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VRow_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar VRow_breakpoints = ['sm', 'md', 'lg', 'xl'];\nvar positions = ['start', 'center', 'end'];\n/* harmony default export */ var VRow = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-row',\n  props: VRow_objectSpread({\n    align: {\n      type: String,\n      \"default\": null,\n      validator: function validator(str) {\n        return [].concat(positions, ['baseline', 'stretch']).includes(str);\n      }\n    },\n    alignContent: {\n      type: String,\n      \"default\": null,\n      validator: function validator(str) {\n        return [].concat(positions, ['space-between', 'space-around', 'stretch']).includes(str);\n      }\n    },\n    justify: {\n      type: String,\n      \"default\": null,\n      validator: function validator(str) {\n        return [].concat(positions, ['space-between', 'space-around']).includes(str);\n      }\n    },\n    noGutter: Boolean\n  }, VRow_breakpoints.reduce(function (props, bp) {\n    props[\"justify-\".concat(bp)] = {\n      type: String,\n      \"default\": null,\n      validator: function validator(str) {\n        return [].concat(positions, ['space-between', 'space-around']).includes(str);\n      }\n    };\n    props[\"align-\".concat(bp)] = {\n      type: String,\n      \"default\": null,\n      validator: function validator(str) {\n        return [].concat(positions, ['baseline', 'stretch']).includes(str);\n      }\n    };\n    props[\"align-content-\".concat(bp)] = {\n      type: String,\n      \"default\": null,\n      validator: function validator(str) {\n        return [].concat(positions, ['space-between', 'space-around', 'stretch']).includes(str);\n      }\n    };\n    return props;\n  }, {})),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _objectSpread2;\n\n      return VRow_objectSpread((_objectSpread2 = {\n        'v-row': true,\n        'no-gutter': props.noGutter\n      }, VRow_defineProperty(_objectSpread2, \"justify-\".concat(props.justify), !!props.justify), VRow_defineProperty(_objectSpread2, \"align-\".concat(props.align), !!props.align), VRow_defineProperty(_objectSpread2, \"align-content-\".concat(props.alignContent), !!props.alignContent), _objectSpread2), VRow_breakpoints.reduce(function (cls, bp) {\n        ;\n        [].concat(positions, ['space-between', 'space-around']).forEach(function (pos) {\n          cls[\"justify-\".concat(bp, \"-\").concat(pos)] = pos === props[toCamelCase('justify', bp)];\n        });\n        [].concat(positions, ['baseline', 'stretch']).forEach(function (pos) {\n          cls[\"align-\".concat(bp, \"-\").concat(pos)] = pos === props[toCamelCase('align', bp)];\n        });\n        [].concat(positions, ['space-between', 'space-around', 'stretch']).forEach(function (pos) {\n          cls[\"align-content-\".concat(bp, \"-\").concat(pos)] = pos === props[toCamelCase('align', 'content', bp)];\n        });\n        return cls;\n      }, {}));\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value\n      }, {\n        \"default\": function _default() {\n          return slots[\"default\"] && slots[\"default\"]();\n        }\n      });\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VGrid/VCol.ts\nfunction VCol_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VCol_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VCol_ownKeys(Object(source), !0).forEach(function (key) { VCol_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VCol_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VCol_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar VCol_breakpoints = ['sm', 'md', 'lg', 'xl'];\nvar colProps = VCol_breakpoints.reduce(function (props, p) {\n  props[p] = {\n    type: [String, Number],\n    \"default\": null\n  };\n  return props;\n}, {});\nvar orderProps = VCol_breakpoints.reduce(function (props, p) {\n  props[\"order-\".concat(p)] = {\n    type: [String, Number],\n    \"default\": null\n  };\n  return props;\n}, {});\nvar offsetProps = VCol_breakpoints.reduce(function (props, p) {\n  props[\"offset-\".concat(p)] = {\n    type: [String, Number],\n    \"default\": null\n  };\n  return props;\n}, {});\n/* harmony default export */ var VCol = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-col',\n  props: VCol_objectSpread(VCol_objectSpread(VCol_objectSpread({\n    order: {\n      type: [String, Number],\n      \"default\": null\n    },\n    cols: {\n      type: [String, Number],\n      \"default\": null\n    },\n    offset: {\n      type: [String, Number],\n      \"default\": null\n    }\n  }, colProps), orderProps), offsetProps),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VCol_objectSpread(VCol_objectSpread(VCol_objectSpread(VCol_defineProperty({\n        'v-col': true\n      }, \"v-col-\".concat(props.cols), !!props.cols), VCol_breakpoints.reduce(function (cols, p) {\n        cols[\"\".concat(p, \"-\").concat(props[p])] = !!props[p];\n        return cols;\n      }, {})), {}, VCol_defineProperty({}, \"order-\".concat(props.order), props.order !== null), VCol_breakpoints.reduce(function (orders, p) {\n        var propValue = props[toCamelCase('order', p)];\n        orders[\"order-\".concat(p, \"-\").concat(propValue)] = !!propValue;\n        return orders;\n      }, {})), {}, VCol_defineProperty({}, \"offset-\".concat(props.offset), props.offset !== null), VCol_breakpoints.reduce(function (offsets, p) {\n        var propValue = props[toCamelCase('offset', p)];\n        offsets[\"offset-\".concat(p, \"-\").concat(propValue)] = !!propValue;\n        return offsets;\n      }, {}));\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value\n      }, {\n        \"default\": function _default() {\n          return slots[\"default\"] && slots[\"default\"]();\n        }\n      });\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VGrid/VSpacer.ts\n\n/* harmony default export */ var VSpacer = (createSimpleFunctional('v-spacer'));\n;// CONCATENATED MODULE: ./src/components/VCard/VCard.ts\nfunction VCard_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VCard_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VCard_ownKeys(Object(source), !0).forEach(function (key) { VCard_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VCard_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VCard_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n/* harmony default export */ var VCard = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-card',\n  props: VCard_objectSpread(VCard_objectSpread({\n    width: {\n      type: [String, Number],\n      \"default\": 350\n    }\n  }, colorProps()), elevationProps()),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var _useElevation = useElevation(props),\n        elevationClasses = _useElevation.elevationClasses;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VCard_objectSpread(VCard_objectSpread({\n        'v-card': true\n      }, elevationClasses.value), props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VCard_objectSpread({\n        width: \"\".concat(props.width, \"px\")\n      }, props.color ? setBackgroundCssColor(props.color) : {});\n    });\n\n    function genCard() {\n      var propsData = {\n        \"class\": classes.value,\n        style: styles.value\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, slots[\"default\"] && slots[\"default\"]());\n    }\n\n    return function () {\n      return genCard();\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VCard/VCardTitle.ts\n\n/* harmony default export */ var VCardTitle = (createSimpleFunctional('v-card__title'));\n;// CONCATENATED MODULE: ./src/components/VCard/VCardSubtitle.ts\n\n/* harmony default export */ var VCardSubtitle = (createSimpleFunctional('v-card__subtitle'));\n;// CONCATENATED MODULE: ./src/components/VCard/VCardActions.ts\n\n/* harmony default export */ var VCardActions = (createSimpleFunctional('v-card__actions'));\n;// CONCATENATED MODULE: ./src/components/VCard/VCardContent.ts\n\n/* harmony default export */ var VCardContent = (createSimpleFunctional('v-card__content'));\n;// CONCATENATED MODULE: ./src/components/VToolbar/VToolbar.ts\nfunction VToolbar_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VToolbar_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VToolbar_ownKeys(Object(source), !0).forEach(function (key) { VToolbar_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VToolbar_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VToolbar_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n/* harmony default export */ var VToolbar = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-toolbar',\n  props: VToolbar_objectSpread({\n    fixed: Boolean,\n    height: {\n      type: [String, Number],\n      \"default\": 56\n    }\n  }, colorProps('#ffffff')),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VToolbar_objectSpread({\n        'v-toolbar': true,\n        'v-toolbar--fixed': props.fixed\n      }, setBackgroundClassNameColor(props.color));\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VToolbar_objectSpread({\n        height: convertToUnit(props.height),\n        left: props.fixed ? convertToUnit(0) : '',\n        top: props.fixed ? convertToUnit(0) : ''\n      }, setBackgroundCssColor(props.color));\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        style: styles.value\n      }, {\n        \"default\": function _default() {\n          var _a;\n\n          return (_a = slots[\"default\"]) === null || _a === void 0 ? void 0 : _a.call(slots);\n        }\n      });\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VToolbar/VToolbarLogo.ts\n\n/* harmony default export */ var VToolbarLogo = (createSimpleFunctional('v-toolbar__logo'));\n;// CONCATENATED MODULE: ./src/components/VToolbar/VToolbarItems.ts\n\n/* harmony default export */ var VToolbarItems = (createSimpleFunctional('v-toolbar__items'));\n;// CONCATENATED MODULE: ./src/components/VToolbar/VToolbarNavBtn.ts\n\n\n\n/* harmony default export */ var VToolbarNavBtn = ((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-toolbar-nav-btn',\n  emits: ['click'],\n  setup: function setup(_, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n\n    var _useIcons = useIcons(),\n        icons = _useIcons.icons;\n\n    var onClick = function onClick() {\n      return emit('click');\n    };\n\n    var genNavBtn = function genNavBtn() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, {\n        clickable: true,\n        icon: icons.$menu,\n        onClick: onClick\n      });\n    };\n\n    return function () {\n      var _a;\n\n      var content = ((_a = slots[\"default\"]) === null || _a === void 0 ? void 0 : _a.call(slots)) || genNavBtn();\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-toolbar__nav-btn'\n      }, content);\n    };\n  }\n}));\n;// CONCATENATED MODULE: ./src/components/VToolbar/VToolbarContent.ts\n\n/* harmony default export */ var VToolbarContent = (createSimpleFunctional('v-toolbar__content'));\n;// CONCATENATED MODULE: ./src/components/VList/VListItemContent.ts\n\n/* harmony default export */ var VListItemContent = (createSimpleFunctional('v-list-item__content'));\n;// CONCATENATED MODULE: ./src/components/VList/VListItemIcon.ts\n\n/* harmony default export */ var VListItemIcon = (createSimpleFunctional('v-list-item__icon'));\n;// CONCATENATED MODULE: ./src/components/VList/VListItemSubtitle.ts\n\n/* harmony default export */ var VListItemSubtitle = (createSimpleFunctional('v-list-item__subtitle'));\n;// CONCATENATED MODULE: ./src/components/index.ts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar components = {\n  VApp: VApp,\n  VButton: VButton,\n  VCard: VCard,\n  VCardTitle: VCardTitle,\n  VCardSubtitle: VCardSubtitle,\n  VCardActions: VCardActions,\n  VCardContent: VCardContent,\n  VToolbar: VToolbar,\n  VToolbarLogo: VToolbarLogo,\n  VToolbarItems: VToolbarItems,\n  VToolbarNavBtn: VToolbarNavBtn,\n  VToolbarContent: VToolbarContent,\n  VList: VList,\n  VListItemTitle: VListItemTitle,\n  VListItem: VListItem,\n  VListItemContent: VListItemContent,\n  VListItemIcon: VListItemIcon,\n  VListItemSubtitle: VListItemSubtitle,\n  VLayout: VLayout,\n  VRow: VRow,\n  VCol: VCol,\n  VSpacer: VSpacer,\n  VOverlay: VOverlay,\n  VModal: VModal,\n  VMenu: VMenu,\n  VTextField: VTextField,\n  VInput: VInput,\n  VFileInput: VFileInput,\n  VSelect: VSelect,\n  VForm: VForm,\n  VLabel: VLabel,\n  VBadge: VBadge,\n  VGroup: VGroup,\n  VResize: VResize,\n  VIcon: VIcon,\n  VChip: VChip,\n  VCheckbox: VCheckbox,\n  VTooltip: VTooltip,\n  VNavigation: VNavigation,\n  VMain: VMain,\n  VTextarea: VTextarea,\n  VSkeleton: VSkeleton,\n  VDataTable: VDataTable,\n  VDatePicker: VDatePicker,\n  VAutocomplete: VAutocomplete,\n  VProgressLinear: VProgressLinear,\n  VProgressCircular: VProgressCircular\n};\n/* harmony default export */ var src_components = ((/* unused pure expression or super */ null && (components)));\n;// CONCATENATED MODULE: ./src/index.ts\nfunction src_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction src_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? src_ownKeys(Object(source), !0).forEach(function (key) { src_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : src_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction src_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar src_install = library.install;\n\nlibrary.install = function (app, args) {\n  src_install.call(library, app, src_objectSpread({\n    components: components,\n    directives: directives_namespaceObject\n  }, args));\n};\n\n/* harmony default export */ var src = (library);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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R0FHS0gsSUFITDtBQUtELENBTkQ7O0FBUUEsd0NBQWVILE9BQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2luc3RhbGwudHM/OTZiZCIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2xpYnJhcnkudHM/ZmUzMiIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2RpcmVjdGl2ZXMvdi1jbGljay1vdXRzaWRlL2luZGV4LnRzPzAwYjYiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9kaXJlY3RpdmVzL3YtcmVzaXplL2luZGV4LnRzPzdlNTUiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9kaXJlY3RpdmVzL2luZGV4LnRzPzY2N2YiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9zZXJ2aWNlcy9icmVha3BvaW50cy50cz82MzM1Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvdXRpbHMvdGhyb3R0bGUudHM/ODI3NCIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkFwcC9WQXBwLnRzPzE4MzMiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy91dGlscy9jb2xvci1wYXJzZXIudHM/ZThiMCIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvc2FibGUvdXNlLWNvbG9ycy50cz8yYmUxIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9zYWJsZS91c2UtZWxldmF0aW9uLnRzPzBlOTciLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb3NhYmxlL3VzZS1wb3NpdGlvbi50cz83ODA1Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvaGVscGVycy9pbmRleC50cz8xNzkzIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WUHJvZ3Jlc3NDaXJjdWxhci9WUHJvZ3Jlc3NDaXJjdWxhci50cz9mYjQ3Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WQnV0dG9uL1ZCdXR0b24udHM/YTY0MSIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVk92ZXJsYXkvVk92ZXJsYXkudHM/Mzg5OSIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvc2FibGUvdXNlLW92ZXJsYXkudHM/YWEzOSIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvc2FibGUvdXNlLXRyYW5zaXRpb24udHM/NzkzZCIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvc2FibGUvdXNlLXRvZ2dsZS50cz8yNmM2Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WTW9kYWwvVk1vZGFsLnRzPzA0OTkiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb3NhYmxlL3VzZS1hdXRvLXBvc2l0aW9uLnRzP2E4MjkiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb3NhYmxlL3VzZS1hY3RpdmF0b3IudHM/MzhmMiIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvc2FibGUvdXNlLWRldGFjaC50cz82OWQyIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WTWVudS9WTWVudS50cz82NWQxIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9zYWJsZS91c2UtdmFsaWRhdGlvbi50cz9lZjljIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9zYWJsZS91c2UtaW5wdXQtc3RhdGVzLnRzPzExYjIiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZMYWJlbC9WTGFiZWwudHM/YmI4YSIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvc2FibGUvdXNlLXNpemUudHM/OTJlMCIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL3NlcnZpY2VzL3NpemVzLnRzP2VlZDUiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZJY29uL1ZJY29uLnRzPzY0OTUiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZJbnB1dC9WSW5wdXQudHM/ZTY3NSIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVlRleHRGaWVsZC9WVGV4dEZpZWxkLnRzPzI0NzciLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9zZXJ2aWNlcy9pY29ucy50cz81MmY4Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9zYWJsZS91c2UtaWNvbnMudHM/Mjg5NyIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkNoaXAvVkNoaXAudHM/Njc0YyIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkZpbGVJbnB1dC9WRmlsZUlucHV0LnRzPzkyMTQiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZMaXN0L1ZMaXN0SXRlbS50cz9kODU0Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WTGlzdC9WTGlzdEl0ZW1UaXRsZS50cz80YTI5Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WTGlzdC9WTGlzdC50cz9mYzI4Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WU2VsZWN0L1ZTZWxlY3RMaXN0LnRzP2QzNzYiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZTZWxlY3QvVlNlbGVjdC50cz8wMTYyIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WRm9ybS9WRm9ybS50cz85OWU4Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WQmFkZ2UvVkJhZGdlLnRzPzMxYjYiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL3RyYW5zaXRpb25zL2hlbHBlcnMudHM/ODRhNCIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvdHJhbnNpdGlvbnMvZXhwYW5kLXRyYW5zaXRpb24udHM/YThhYSIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvdHJhbnNpdGlvbnMvaW5kZXgudHM/ZTMwMyIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkdyb3VwL1ZHcm91cC50cz8wZDY1Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WUmVzaXplL1ZSZXNpemUudHM/NTQyMSIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkNoZWNrYm94L1ZDaGVja2JveC50cz83M2Y4Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvc2VydmljZXMvdHJhbnNpdGlvbnMudHM/ZGQ1OCIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVlRvb2x0aXAvVlRvb2x0aXAudHM/M2IxMiIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVk5hdmlnYXRpb24vVk5hdmlnYXRpb24udHM/MzE5ZiIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVk1haW4vVk1haW4udHM/YTRkMiIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVlRleHRhcmVhL1ZUZXh0YXJlYS50cz9kNjExIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WU2tlbGV0b24vVlNrZWxldG9uLnRzPzRmZDUiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZEYXRhVGFibGUvVkRhdGFUYWJsZUNlbGwudHM/OWYyYiIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkRhdGFUYWJsZS9WRGF0YVRhYmxlSGVhZGVyLnRzPzA4YWMiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZEYXRhVGFibGUvVkRhdGFUYWJsZUJvZHkudHM/Njc2ZCIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkRhdGFUYWJsZS9WRGF0YVRhYmxlRm9vdGVyLnRzPzJkY2UiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZEYXRhVGFibGUvVkRhdGFUYWJsZS50cz84ZGI3Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WRGF0ZVBpY2tlci9WRGF0ZXBpY2tlckhlYWRlci50cz8zYTg3Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WRGF0ZVBpY2tlci91dGlscy50cz84YzBmIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WRGF0ZVBpY2tlci9oZWxwZXJzLnRzPzY4ODciLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZEYXRlUGlja2VyL1ZEYXRlUGlja2VyRGF0ZXMudHM/ZWQzZiIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkRhdGVQaWNrZXIvVkRhdGVQaWNrZXJZZWFycy50cz80NDkxIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WRGF0ZVBpY2tlci9WRGF0ZVBpY2tlck1vbnRocy50cz9kYjA4Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvc2VydmljZXMvbG9jYWxlLnRzPzlmYTciLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZEYXRlUGlja2VyL1ZEYXRlUGlja2VyLnRzPzk3M2IiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZQcm9ncmVzc0xpbmVhci9WUHJvZ3Jlc3NMaW5lYXIudHM/NzMxNCIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkF1dG9jb21wbGV0ZS9WQXV0b2NvbXBsZXRlLnRzPzVmNzciLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZHcmlkL1ZMYXlvdXQudHM/ZmFiZSIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkdyaWQvVlJvdy50cz84ZGM0Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WR3JpZC9WQ29sLnRzP2YwYjEiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZHcmlkL1ZTcGFjZXIudHM/ZjNkOCIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkNhcmQvVkNhcmQudHM/OTBiNiIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkNhcmQvVkNhcmRUaXRsZS50cz9mZDBhIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WQ2FyZC9WQ2FyZFN1YnRpdGxlLnRzPzVkZjgiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZDYXJkL1ZDYXJkQWN0aW9ucy50cz9kNWVkIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WQ2FyZC9WQ2FyZENvbnRlbnQudHM/NWRhMCIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVlRvb2xiYXIvVlRvb2xiYXIudHM/OTU0ZCIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVlRvb2xiYXIvVlRvb2xiYXJMb2dvLnRzPzFjNmUiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZUb29sYmFyL1ZUb29sYmFySXRlbXMudHM/ODBkZiIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVlRvb2xiYXIvVlRvb2xiYXJOYXZCdG4udHM/OTQ2NSIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVlRvb2xiYXIvVlRvb2xiYXJDb250ZW50LnRzPzc2NWUiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZMaXN0L1ZMaXN0SXRlbUNvbnRlbnQudHM/OTI2OCIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkxpc3QvVkxpc3RJdGVtSWNvbi50cz84ZDFkIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WTGlzdC9WTGlzdEl0ZW1TdWJ0aXRsZS50cz9lMGM3Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9pbmRleC50cz81NzA5Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvaW5kZXgudHM/MGJhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHAgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyBWdWVsYW5kIH0gZnJvbSAnLi9saWJyYXJ5J1xuXG5leHBvcnQgZnVuY3Rpb24gaW5zdGFsbChhcHA6IEFwcCwgYXJnczogYW55ID0ge30pIHtcbiAgaWYgKChpbnN0YWxsIGFzIGFueSkuaW5zdGFsbGVkKSByZXR1cm5cblxuICAoaW5zdGFsbCBhcyBhbnkpLmluc3RhbGxlZCA9IHRydWVcblxuICBjb25zdCB7IGNvbXBvbmVudHMsIGRpcmVjdGl2ZXMgfSA9IGFyZ3NcblxuICBmb3IgKGNvbnN0IGtleSBpbiBjb21wb25lbnRzKSB7XG4gICAgaWYgKGNvbXBvbmVudHNba2V5XSkge1xuICAgICAgYXBwLmNvbXBvbmVudChrZXksIGNvbXBvbmVudHNba2V5XSlcbiAgICB9XG4gIH1cblxuICBmb3IgKGNvbnN0IGtleSBpbiBkaXJlY3RpdmVzKSB7XG4gICAgaWYgKGRpcmVjdGl2ZXNba2V5XSkge1xuICAgICAgYXBwLmRpcmVjdGl2ZShrZXksIGRpcmVjdGl2ZXNba2V5XSlcbiAgICB9XG4gIH1cblxuICBhcHAucHJvdmlkZSgnJHZfb3B0aW9ucycsIFZ1ZWxhbmQub3B0aW9ucylcbiAgYXBwLnByb3ZpZGUoJyR2X3RoZW1lJywgVnVlbGFuZC50aGVtZSlcbiAgYXBwLnByb3ZpZGUoJyR2X2ljb25zJywgVnVlbGFuZC5pY29ucylcblxuICBpZiAodGhpcyBpbnN0YW5jZW9mIFZ1ZWxhbmQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgY29uc29sZS5sb2cobmV3IFZ1ZWxhbmQoKSlcbiAgcmV0dXJuIG5ldyBWdWVsYW5kKClcblxufVxuIiwiLy8gVHlwZXNcbmltcG9ydCB7UGx1Z2lufSBmcm9tICd2dWUnXG5pbXBvcnQgeyBMaWJyYXJ5LCBVc2VyT3B0aW9ucyB9IGZyb20gJy4uL3R5cGVzJ1xuaW1wb3J0IHsgaW5zdGFsbCB9IGZyb20gJy4vaW5zdGFsbCdcbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vdHlwZXMvYmFzZSdcblxuZXhwb3J0IGNsYXNzIFZ1ZWxhbmQge1xuICBzdGF0aWMgb3B0aW9uczogVXNlck9wdGlvbnNcbiAgc3RhdGljIGluc3RhbGw6IFBsdWdpblsnaW5zdGFsbCddID0gaW5zdGFsbFxuICBzdGF0aWMgaW5zdGFsbGVkOiBib29sZWFuID0gZmFsc2VcbiAgc3RhdGljIHRoZW1lOiBNYXliZTxVc2VyT3B0aW9uc1sndGhlbWUnXT4gPSBudWxsXG4gIHN0YXRpYyBpY29uczogTWF5YmU8VXNlck9wdGlvbnNbJ2ljb25zJ10+ID0gbnVsbFxuXG4gIHN0YXRpYyBzZXRPcHRpb25zKG9wdGlvbnM6IE1heWJlPFVzZXJPcHRpb25zPiA9IG51bGwpIHtcbiAgICBWdWVsYW5kLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gIH1cblxuICBzdGF0aWMgc2V0VGhlbWUodGhlbWU6IFVzZXJPcHRpb25zWyd0aGVtZSddKSB7XG4gICAgVnVlbGFuZC50aGVtZSA9IHRoZW1lXG4gIH1cblxuICBzdGF0aWMgc2V0SWNvbnMoaWNvbnM6IFVzZXJPcHRpb25zWydpY29ucyddKSB7XG4gICAgVnVlbGFuZC5pY29ucyA9IGljb25zXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVnVlbGFuZCBhcyBMaWJyYXJ5XG4iLCJmdW5jdGlvbiBjbGlja0hhbmRsZXIoZSwgZWwpIHtcbiAgaWYgKFxuICAgIGVsLmNvbnRhaW5zKGUudGFyZ2V0KSAmJlxuICAgIGVsLl9iaW5kcz8udmFsdWUgJiZcbiAgICAhZWwuX2JpbmRzPy52YWx1ZS5jbG9zZUNvbmRpdGlvbmFsXG4gIClcbiAgICByZXR1cm5cblxuICBpZiAodHlwZW9mIGVsLl9iaW5kcz8udmFsdWUgPT09ICdmdW5jdGlvbicpIGVsLl9iaW5kcy52YWx1ZShlKVxuXG4gIGlmICh0eXBlb2YgZWwuX2JpbmRzPy52YWx1ZSA9PT0gJ29iamVjdCcpIGVsLl9iaW5kcy52YWx1ZS5oYW5kbGVyKGUpXG59XG5cbmZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKGVsKSB7XG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlbC5fb25DbGljaywgdHJ1ZSlcbiAgZGVsZXRlIGVsLl9vbkNsaWNrXG4gIGRlbGV0ZSBlbC5fYmluZHNcbn1cblxuZXhwb3J0IGNvbnN0IGNsaWNrT3V0c2lkZSA9IHtcbiAgYmVmb3JlTW91bnQoZWwsIGJpbmRpbmcpIHtcbiAgICBlbC5fYmluZHMgPSBiaW5kaW5nXG4gIH0sXG5cbiAgbW91bnRlZChlbCkge1xuICAgIGVsLl9vbkNsaWNrID0gKGUpID0+IGNsaWNrSGFuZGxlcihlLCBlbClcbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZWwuX29uQ2xpY2ssIHRydWUpXG4gIH0sXG5cbiAgYmVmb3JlVXBkYXRlKGVsLCBiaW5kaW5nKSB7XG4gICAgZWwuX2JpbmRzID0gYmluZGluZ1xuICB9LFxuXG4gIGJlZm9yZVVubW91bnQoZWwpIHtcbiAgICByZW1vdmVMaXN0ZW5lcihlbClcbiAgfSxcbn1cbiIsImltcG9ydCB7IERpcmVjdGl2ZUJpbmRpbmcgfSBmcm9tICd2dWUnXG5cbmludGVyZmFjZSBSZXNpemVWTm9kZURpcmVjdGl2ZSBleHRlbmRzIERpcmVjdGl2ZUJpbmRpbmcge1xuICB2YWx1ZTogKCkgPT4gdm9pZFxuICBvcHRpb25zOiBib29sZWFuIHwgQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnNcbn1cblxuZXhwb3J0IGNvbnN0IHJlc2l6ZSA9IHtcbiAgbW91bnRlZChlbDogSFRNTEVsZW1lbnQgJiBhbnksIGJpbmRpbmc6IFJlc2l6ZVZOb2RlRGlyZWN0aXZlKSB7XG4gICAgY29uc3QgY2FsbGJhY2sgPSBiaW5kaW5nLnZhbHVlIVxuICAgIGNvbnN0IG9wdGlvbnMgPSBiaW5kaW5nLm9wdGlvbnMgfHwgeyBwYXNzaXZlOiB0cnVlIH1cblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBjYWxsYmFjaywgb3B0aW9ucylcblxuICAgIGVsLl9vblJlc2l6ZSA9IHtcbiAgICAgIGNhbGxiYWNrLFxuICAgICAgb3B0aW9uc1xuICAgIH1cbiAgICBpZiAoIWJpbmRpbmcubW9kaWZpZXJzIHx8ICFiaW5kaW5nLm1vZGlmaWVycy5xdWlldCkge1xuICAgICAgY2FsbGJhY2soKVxuICAgIH1cbiAgfSxcblxuICBiZWZvcmVVbm1vdW50KGVsKSB7XG4gICAgaWYgKCFlbC5fb25SZXNpemUpIHJldHVyblxuXG4gICAgY29uc3QgeyBjYWxsYmFjaywgb3B0aW9ucyB9ID0gZWwuX29uUmVzaXplXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGNhbGxiYWNrLCBvcHRpb25zKVxuICAgIGRlbGV0ZSBlbC5fb25SZXNpemVcbiAgfVxufVxuIiwiZXhwb3J0ICogZnJvbSAnLi92LWNsaWNrLW91dHNpZGUnXG5leHBvcnQgKiBmcm9tICcuL3YtcmVzaXplJ1xuIiwiZXhwb3J0IGNvbnN0IGJyZWFrcG9pbnRzID0ge1xuICBzbTogNTc2LFxuICBtZDogNzY4LFxuICBsZzogOTkyLFxuICB4bDogMTIwMCxcbn1cbiIsImV4cG9ydCBjb25zdCB0aHJvdHRsZSA9IChmbjogRnVuY3Rpb24sIHRpbWVvdXQ6IG51bWJlcik6IEZ1bmN0aW9uID0+IHtcbiAgbGV0IGxhc3RUaGlzOiBhbnkgPSBudWxsXG4gIGxldCBsYXN0QXJnczogYW55ID0gbnVsbFxuICBsZXQgaXNUaHJvdHRsZWQgPSBmYWxzZVxuXG4gIGZ1bmN0aW9uIHdyYXBwZXIoLi4uYXJncykge1xuICAgIGlmIChpc1Rocm90dGxlZCkge1xuXG4gICAgICBsYXN0VGhpcyA9IHRoaXNcbiAgICAgIGxhc3RBcmdzID0gYXJnc1xuXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsYXN0QXJncyAmJiBmbi5jYWxsKGxhc3RUaGlzLCAuLi5sYXN0QXJncylcblxuICAgIGlzVGhyb3R0bGVkID0gdHJ1ZVxuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpc1Rocm90dGxlZCA9IGZhbHNlXG5cbiAgICAgIGlmIChsYXN0QXJncykge1xuICAgICAgICB3cmFwcGVyLmFwcGx5KGxhc3RUaGlzLCBsYXN0QXJncylcbiAgICAgIH1cbiAgICAgIGxhc3RUaGlzID0gbnVsbFxuICAgICAgbGFzdEFyZ3MgPSBudWxsXG4gICAgfSwgdGltZW91dClcbiAgfVxuXG4gIHJldHVybiB3cmFwcGVyXG59XG4iLCJpbXBvcnQge1xuICBkZWZpbmVDb21wb25lbnQsXG4gIHByb3ZpZGUsXG4gIHJlYWN0aXZlLFxuICBoLFxuICB3aXRoRGlyZWN0aXZlcyxcbiAgb25Nb3VudGVkLFxufSBmcm9tICd2dWUnXG5cbi8vIERpcmVjdGl2ZXNcbmltcG9ydCB7IHJlc2l6ZSB9IGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMnXG5cbi8vIFNlcnZpY2VzXG5pbXBvcnQgeyBicmVha3BvaW50cyB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2JyZWFrcG9pbnRzJ1xuXG4vLyBVdGlsc1xuaW1wb3J0IHsgdGhyb3R0bGUgfSBmcm9tICcuLi8uLi91dGlscy90aHJvdHRsZSdcblxuLy8gVHlwZXNcbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvYmFzZS5kJ1xuXG5pbnRlcmZhY2UgQXBwU3RhdGUge1xuICBjdXJyZW50OiBNYXliZTwneGwnIHwgJ2xnJyB8ICdtZCcgfCAnc20nPlxuICB4bEFuZExlc3M6IGJvb2xlYW5cbiAgbGdBbmRMZXNzOiBib29sZWFuXG4gIG1kQW5kTGVzczogYm9vbGVhblxuICBzbUFuZExlc3M6IGJvb2xlYW5cbn1cblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtYXBwJyxcbiAgZGlyZWN0aXZlczoge1xuICAgIHJlc2l6ZSxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBnbG9iYWw6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgfSxcbiAgfSxcbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSkge1xuICAgIGNvbnN0IFRIUk9UVExJTkdfVElNRU9VVCA9IDYwXG5cbiAgICBjb25zdCBzdGF0ZSA9IHJlYWN0aXZlPEFwcFN0YXRlPih7XG4gICAgICBjdXJyZW50OiBudWxsLFxuICAgICAgeGxBbmRMZXNzOiBmYWxzZSxcbiAgICAgIGxnQW5kTGVzczogZmFsc2UsXG4gICAgICBtZEFuZExlc3M6IGZhbHNlLFxuICAgICAgc21BbmRMZXNzOiBmYWxzZSxcbiAgICB9KVxuXG4gICAgcHJvdmlkZSgnYnJlYWtwb2ludHMnLCBzdGF0ZSlcblxuICAgIGNvbnN0IHNldEN1cnJlbnRCcmVha3BvaW50TmFtZSA9IChzY3JlZW4pID0+IHtcbiAgICAgIGlmIChzY3JlZW4gPj0gYnJlYWtwb2ludHMueGwpIHtcbiAgICAgICAgcmV0dXJuIChzdGF0ZS5jdXJyZW50ID0gJ3hsJylcbiAgICAgIH1cbiAgICAgIGlmIChzY3JlZW4gPj0gYnJlYWtwb2ludHMubGcgJiYgc2NyZWVuIDwgYnJlYWtwb2ludHMueGwpIHtcbiAgICAgICAgcmV0dXJuIChzdGF0ZS5jdXJyZW50ID0gJ2xnJylcbiAgICAgIH1cbiAgICAgIGlmIChzY3JlZW4gPj0gYnJlYWtwb2ludHMubWQgJiYgc2NyZWVuIDwgYnJlYWtwb2ludHMubGcpIHtcbiAgICAgICAgcmV0dXJuIChzdGF0ZS5jdXJyZW50ID0gJ21kJylcbiAgICAgIH1cbiAgICAgIGlmIChzY3JlZW4gPj0gYnJlYWtwb2ludHMuc20gJiYgc2NyZWVuIDwgYnJlYWtwb2ludHMubWQpIHtcbiAgICAgICAgcmV0dXJuIChzdGF0ZS5jdXJyZW50ID0gJ3NtJylcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBjb25zdCBzZXRJbnRlcnZhbHMgPSAoc2NyZWVuKSA9PiB7XG4gICAgICBjb25zdCB7IHhsLCBsZywgbWQsIHNtIH0gPSBicmVha3BvaW50c1xuXG4gICAgICBzdGF0ZS54bEFuZExlc3MgPSBzY3JlZW4gPD0geGwgJiYgc2NyZWVuID4gbGdcbiAgICAgIHN0YXRlLmxnQW5kTGVzcyA9IHNjcmVlbiA8PSBsZyAmJiBzY3JlZW4gPiBtZFxuICAgICAgc3RhdGUubWRBbmRMZXNzID0gc2NyZWVuIDw9IG1kICYmIHNjcmVlbiA+IHNtXG4gICAgICBzdGF0ZS5zbUFuZExlc3MgPSBzY3JlZW4gPD0gc21cbiAgICB9XG5cbiAgICBjb25zdCBzZXRTaXplcyA9ICgpID0+IHtcbiAgICAgIC8vIHRoZSBcImdsb2JhbFwiIHByb3AgYWxsb3dzIHRvIHRlc3QgdGhlXG4gICAgICAvLyBjb21wb25lbnQgd2l0aG91dCB1c2luZyBtb2NrdXBzXG4gICAgICBjb25zdCBzY3JlZW4gPSBwcm9wcy5nbG9iYWw/LmlubmVyV2lkdGggfHwgd2luZG93LmlubmVyV2lkdGhcblxuICAgICAgc2V0Q3VycmVudEJyZWFrcG9pbnROYW1lKHNjcmVlbilcbiAgICAgIHNldEludGVydmFscyhzY3JlZW4pXG4gICAgfVxuXG4gICAgY29uc3QgdGhyb3R0bGVkUmVzaXplTGlzdGVuZXIgPSB0aHJvdHRsZShcbiAgICAgIHNldFNpemVzLFxuICAgICAgVEhST1RUTElOR19USU1FT1VULFxuICAgICkgYXMgKCkgPT4gdm9pZFxuXG4gICAgY29uc3QgZ2VuQXBwV3JhcHBlciA9ICgpID0+IHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7IGNsYXNzOiAndi1hcHAtLXdyYXBwZXInIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCksXG4gICAgICB9KVxuICAgIH1cblxuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICBzZXRTaXplcygpXG4gICAgfSlcblxuICAgIHJldHVybiAoKSA9PlxuICAgICAgd2l0aERpcmVjdGl2ZXMoXG4gICAgICAgIGgoJ2RpdicsIHsgY2xhc3M6ICd2LWFwcCcgfSwgZ2VuQXBwV3JhcHBlcigpKSxcbiAgICAgICAgW1tyZXNpemUsIHRocm90dGxlZFJlc2l6ZUxpc3RlbmVyXV0sXG4gICAgICApXG4gIH0sXG59KVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGlzQ3NzQ29sb3IoY29sb3I6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gISFjb2xvci5tYXRjaCgvXigjfHZhclxcKC0tfChyZ2J8aHNsKWE/XFwoKS8pO1xufVxuIiwiaW1wb3J0IHsgaXNDc3NDb2xvciB9IGZyb20gJy4uL3V0aWxzL2NvbG9yLXBhcnNlcidcblxuZXhwb3J0IGNvbnN0IGNvbG9yUHJvcHMgPSAoZGVmYXVsdENvbG9yOiBzdHJpbmcgPSAnJykgPT4gKHtcbiAgY29sb3I6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogZGVmYXVsdENvbG9yLFxuICB9LFxufSlcblxuZXhwb3J0IGNvbnN0IHVzZUNvbG9ycyA9ICgpID0+IHtcbiAgY29uc3Qgc2V0VGV4dENsYXNzTmFtZUNvbG9yID0gKGNvbG9yOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBjbGFzc2VzID0ge31cblxuICAgIGlmICghaXNDc3NDb2xvcihjb2xvcikpIHtcbiAgICAgIGNvbnN0IFtjb2xvck5hbWUsIGNvbG9yTW9kaWZpZXJdID0gY29sb3IudHJpbSgpLnNwbGl0KCcgJywgMilcbiAgICAgIGNvbG9yTmFtZSAmJiAoY2xhc3Nlc1tgJHtjb2xvck5hbWV9LS10ZXh0YF0gPSB0cnVlKVxuICAgICAgY29sb3JNb2RpZmllciAmJiAoY2xhc3Nlc1tgdGV4dC0tJHtjb2xvck1vZGlmaWVyfWBdID0gdHJ1ZSlcbiAgICB9XG5cbiAgICByZXR1cm4gY2xhc3Nlc1xuICB9XG5cbiAgY29uc3Qgc2V0VGV4dENzc0NvbG9yID0gKGNvbG9yOiBzdHJpbmcpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0+IHtcbiAgICBjb25zdCBzdHlsZXM6IGFueSA9IHt9XG5cbiAgICBpZiAoaXNDc3NDb2xvcihjb2xvcikpIHtcbiAgICAgIHN0eWxlcy5jb2xvciA9IGNvbG9yXG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlc1xuICB9XG5cbiAgY29uc3Qgc2V0QmFja2dyb3VuZENzc0NvbG9yID0gKGNvbG9yOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBzdHlsZXMgPSB7fVxuXG4gICAgaWYgKGlzQ3NzQ29sb3IoY29sb3IpKSB7XG4gICAgICBzdHlsZXNbJ2JhY2tncm91bmQtY29sb3InXSA9IGNvbG9yXG4gICAgICBzdHlsZXNbJ2JvcmRlci1jb2xvciddID0gY29sb3JcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGVzXG4gIH1cblxuICBjb25zdCBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IgPSAoY29sb3I6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IGNsYXNzZXMgPSB7fVxuXG4gICAgaWYgKCFpc0Nzc0NvbG9yKGNvbG9yKSkge1xuICAgICAgY29uc3QgW2NvbG9yTmFtZSwgY29sb3JNb2RpZmllcl0gPSBjb2xvci50cmltKCkuc3BsaXQoJyAnLCAyKVxuICAgICAgY29sb3JOYW1lICYmIChjbGFzc2VzW2NvbG9yTmFtZV0gPSB0cnVlKVxuICAgICAgY29sb3JNb2RpZmllciAmJiAoY2xhc3Nlc1tjb2xvck1vZGlmaWVyXSA9IHRydWUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGNsYXNzZXNcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2V0VGV4dENzc0NvbG9yLFxuICAgIHNldFRleHRDbGFzc05hbWVDb2xvcixcbiAgICBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IsXG4gICAgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yLFxuICB9XG59XG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyBjb21wdXRlZCwgQ29tcHV0ZWRSZWYgfSBmcm9tICd2dWUnXG5cbnR5cGUgRWxldmV0YWJsZSA9IHtcbiAgZWxldmF0aW9uQ2xhc3NlczogQ29tcHV0ZWRSZWY8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZWxldmF0aW9uUHJvcHMoKSB7XG4gIHJldHVybiB7XG4gICAgZWxldmF0aW9uOiBbU3RyaW5nLCBOdW1iZXJdLFxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VFbGV2YXRpb24ocHJvcHM6IGFueSk6IEVsZXZldGFibGUge1xuICBjb25zdCBlbGV2YXRpb25DbGFzc2VzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBbYGVsZXZhdGlvbi0ke3Byb3BzLmVsZXZhdGlvbn1gXTogISFwcm9wcy5lbGV2YXRpb24sXG4gICAgfVxuICB9KVxuXG4gIHJldHVybiB7IGVsZXZhdGlvbkNsYXNzZXMgfVxufVxuIiwiLy8gVnVlIEFQSVxuaW1wb3J0IHsgY29tcHV0ZWQgfSBmcm9tICd2dWUnXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBDb21wdXRlZFJlZiB9IGZyb20gJ3Z1ZSdcblxudHlwZSBQb3NpdGlvbmFibGUgPSB7XG4gIHBvc2l0aW9uQ2xhc3NlczogQ29tcHV0ZWRSZWY8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+XG59XG5cbmV4cG9ydCBjb25zdCBwb3NpdGlvblByb3BzID0gKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIGFic29sdXRlOiBCb29sZWFuLFxuICAgIGxlZnQ6IEJvb2xlYW4sXG4gICAgcmlnaHQ6IEJvb2xlYW4sXG4gICAgdG9wOiBCb29sZWFuLFxuICAgIGJvdHRvbTogQm9vbGVhbixcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgdXNlUG9zaXRpb24gPSAocHJvcHM6IGFueSk6IFBvc2l0aW9uYWJsZSA9PiB7XG4gIGNvbnN0IHBvc2l0aW9uQ2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgJ3Bvc2l0aW9uLS1hYnNvbHV0ZSc6IHByb3BzLmFic29sdXRlLFxuICAgICAgJ3RvLS1sZWZ0JzogcHJvcHMubGVmdCxcbiAgICAgICd0by0tcmlnaHQnOiBwcm9wcy5yaWdodCxcbiAgICAgICd0by0tdG9wJzogcHJvcHMudG9wLFxuICAgICAgJ3RvLS1ib3R0b20nOiBwcm9wcy5ib3R0b20sXG4gICAgfVxuICB9KVxuXG4gIHJldHVybiB7IHBvc2l0aW9uQ2xhc3NlcyB9XG59XG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGgsIFNsb3RzIH0gZnJvbSAndnVlJ1xuXG5leHBvcnQgY29uc3QgY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCA9IChcbiAgYzogc3RyaW5nLFxuICBlbCA9ICdkaXYnLFxuICBuYW1lOiBzdHJpbmcgPSAnJyxcbikgPT4ge1xuICByZXR1cm4gZGVmaW5lQ29tcG9uZW50KHtcbiAgICBuYW1lOiBuYW1lIHx8IGMucmVwbGFjZSgvX18vZywgJy0nKSxcblxuICAgIHNldHVwKF8sIHsgc2xvdHMgfSkge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgIFtjLnRyaW0oKV06IHRydWUsXG4gICAgICAgIH0sXG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoKSA9PiBoKGVsLCBwcm9wc0RhdGEsIHNsb3RzLmRlZmF1bHQgJiYgc2xvdHMuZGVmYXVsdCgpKVxuICAgIH0sXG4gIH0pXG59XG5cbmV4cG9ydCBjb25zdCBhZGRPbmNlTGlzdGVuZXIgPSAoXG4gIGVsOiBFdmVudFRhcmdldCxcbiAgZXZlbnROYW1lOiBzdHJpbmcsXG4gIGNiOiAoZXZlbnQ6IEV2ZW50KSA9PiB2b2lkLFxuICBvcHRpb25zOiBib29sZWFuIHwgQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnMgPSBmYWxzZSxcbik6IHZvaWQgPT4ge1xuICBjb25zdCBvbmNlID0gKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgIGNiKGV2ZW50KVxuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBvbmNlLCBvcHRpb25zKVxuICB9XG5cbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIG9uY2UsIG9wdGlvbnMpXG59XG5cbmV4cG9ydCBjb25zdCBjb252ZXJ0VG9Vbml0ID0gKFxuICBzdHI6IHN0cmluZyB8IG51bWJlcixcbiAgdW5pdCA9ICdweCcsXG4pOiBzdHJpbmcgPT4ge1xuICBpZiAoaXNOYU4oK3N0ciEpKSB7XG4gICAgcmV0dXJuIFN0cmluZyhzdHIpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGAkeyBOdW1iZXIoc3RyKSB9JHsgdW5pdCB9YFxuICB9XG59XG5cbmV4cG9ydCBjb25zdCB3YXJuaW5nID0gKHdhcm5pbmdUZXh0KSA9PiB7XG4gIGNvbnNvbGUud2Fybih3YXJuaW5nVGV4dClcbn1cblxuZXhwb3J0IGNvbnN0IGNvcHlXaXRob3V0TGluayA9IChvYmopID0+IHtcbiAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSlcbn1cblxuZXhwb3J0IGNvbnN0IGFkZFNjb3BlZFNsb3QgPSAoc2xvdE5hbWU6IHN0cmluZywgc2xvdHM6IFNsb3RzKSA9PiB7XG4gIHJldHVybiAoc2NvcGVkKSA9PiB7XG4gICAgY29uc3QgYXJnOiBhbnkgPSB7IC4uLnNjb3BlZCB9XG5cbiAgICByZXR1cm4gc2xvdHNbc2xvdE5hbWVdICYmIHNsb3RzW3Nsb3ROYW1lXSEoYXJnKVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBnZXRLZXlWYWx1ZUZyb21UYXJnZXQgPSA8VD4oXG4gIHZhbHVlS2V5OiBzdHJpbmcsXG4gIHRhcmdldDogVCxcbik6IHN0cmluZyA9PiB7XG4gIHJldHVybiB2YWx1ZUtleS5zcGxpdCgnLicpLnJlZHVjZSgoYWNjLCBpdCkgPT4gYWNjW2l0XSwgdGFyZ2V0KVxufVxuXG5leHBvcnQgY29uc3QgbWFwVG9WYWxBcnJheSA9IChtYXApOiBhbnlbXSA9PiBBcnJheS5mcm9tKG1hcC52YWx1ZXMoKSlcblxuZXhwb3J0IGNvbnN0IHVuaXF1ZUFycmF5ID0gPFQ+KGFycik6IEFycmF5PFQ+ID0+IHtcbiAgcmV0dXJuIE9iamVjdC52YWx1ZXMoYXJyLnJlZHVjZSgobWFwLCBpdCkgPT4ge1xuICAgIGlmICghbWFwW2l0Lm5hbWVdKSBtYXBbaXQubmFtZV0gPSBpdFxuICAgIHJldHVybiBtYXBcbiAgfSwge30pKVxufVxuXG5leHBvcnQgY29uc3QgZ2V0U3RyaW5nS2V5c1ZhbHVlID0gKHN0cjogc3RyaW5nLCB2YWx1ZTogYW55KSA9PiB7XG4gIHJldHVybiBzdHIuc3BsaXQoJy4nKS5yZWR1Y2UoKGFjYywgaXQpID0+IGFjY1tpdF0sIHZhbHVlKVxufVxuXG5leHBvcnQgY29uc3QgdG9DYW1lbENhc2UgPSAoLi4uYXJnczogc3RyaW5nW10pOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gYXJncy5yZWR1Y2UoKHJlcywgcywgaSkgPT4ge1xuICAgIGlmIChpID09PSAwKSByZXMgKz0gc1xuICAgIGVsc2UgcmVzICs9IHNbMF0udG9VcHBlckNhc2UoKSArIHMuc2xpY2UoMSlcbiAgICByZXR1cm4gcmVzXG4gIH0sICcnKVxufVxuIiwiaW1wb3J0IHsgaCwgY29tcHV0ZWQsIGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSdcblxuLy8gRWZmZWN0c1xuaW1wb3J0IHsgY29sb3JQcm9wcywgdXNlQ29sb3JzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtY29sb3JzJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0IH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtcHJvZ3Jlc3MtY2lyY3VsYXInLFxuICBwcm9wczoge1xuICAgIGluZGV0ZXJtaW5hdGU6IEJvb2xlYW4sXG4gICAgc2l6ZToge1xuICAgICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICAgIGRlZmF1bHQ6IDMyLFxuICAgIH0sXG4gICAgd2lkdGg6IHtcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgICBkZWZhdWx0OiA0LFxuICAgIH0sXG4gICAgdmFsdWU6IHtcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgICBkZWZhdWx0OiAwLFxuICAgIH0sXG4gICAgcm90YXRlOiB7XG4gICAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgICAgZGVmYXVsdDogMCxcbiAgICB9LFxuICAgIC4uLmNvbG9yUHJvcHMoKSxcbiAgfSxcbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSkge1xuICAgIGNvbnN0IHJhZGl1cyA9IDIwXG5cbiAgICBjb25zdCB7IHNldFRleHRDbGFzc05hbWVDb2xvciwgc2V0VGV4dENzc0NvbG9yIH0gPSB1c2VDb2xvcnMoKVxuXG4gICAgY29uc3Qgbm9ybWFsaXplZFZhbHVlID0gY29tcHV0ZWQ8bnVtYmVyPigoKSA9PiB7XG4gICAgICBpZiAocHJvcHMudmFsdWUgPCAwKSByZXR1cm4gMFxuXG4gICAgICBpZiAocHJvcHMudmFsdWUgPiAxMDApIHJldHVybiAxMDBcblxuICAgICAgcmV0dXJuIHBhcnNlRmxvYXQocHJvcHMudmFsdWUgYXMgc3RyaW5nKVxuICAgIH0pXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1wcm9ncmVzcy1jaXJjdWxhcic6IHRydWUsXG4gICAgICAndi1wcm9ncmVzcy1jaXJjdWxhci0taW5kZXRlcm1pbmF0ZSc6IHByb3BzLmluZGV0ZXJtaW5hdGUsXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3QgY2lyY3VtZmVyZW5jZSA9IGNvbXB1dGVkPG51bWJlcj4oKCkgPT4ge1xuICAgICAgcmV0dXJuIDIgKiBNYXRoLlBJICogcmFkaXVzXG4gICAgfSlcblxuICAgIGNvbnN0IHN0cm9rZURhc2hBcnJheSA9IGNvbXB1dGVkPG51bWJlcj4oKCkgPT4ge1xuICAgICAgcmV0dXJuIE1hdGgucm91bmQoY2lyY3VtZmVyZW5jZS52YWx1ZSAqIDEwMDApIC8gMTAwMFxuICAgIH0pXG5cbiAgICBjb25zdCBzdHJva2VEYXNoT2Zmc2V0ID0gY29tcHV0ZWQ8c3RyaW5nPigoKSA9PiB7XG4gICAgICByZXR1cm4gKCgxMDAgLSBub3JtYWxpemVkVmFsdWUudmFsdWUpIC8gMTAwKSAqIGNpcmN1bWZlcmVuY2UudmFsdWUgKyAncHgnXG4gICAgfSlcblxuICAgIGNvbnN0IHZpZXdCb3hTaXplID0gY29tcHV0ZWQ8bnVtYmVyPigoKSA9PiB7XG4gICAgICByZXR1cm4gcmFkaXVzIC8gKDEgLSBOdW1iZXIocHJvcHMud2lkdGgpIC8gK3Byb3BzLnNpemUpXG4gICAgfSlcblxuICAgIGNvbnN0IHN0cm9rZVdpZHRoID0gY29tcHV0ZWQ8bnVtYmVyPigoKSA9PiB7XG4gICAgICByZXR1cm4gKE51bWJlcihwcm9wcy53aWR0aCkgLyArcHJvcHMuc2l6ZSkgKiB2aWV3Qm94U2l6ZS52YWx1ZSAqIDJcbiAgICB9KVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQ8b2JqZWN0PigoKSA9PiAoe1xuICAgICAgd2lkdGg6IGNvbnZlcnRUb1VuaXQocHJvcHMuc2l6ZSksXG4gICAgICBoZWlnaHQ6IGNvbnZlcnRUb1VuaXQocHJvcHMuc2l6ZSksXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRUZXh0Q3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3Qgc3ZnU3R5bGUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0cmFuc2Zvcm06IGByb3RhdGUoJHsrcHJvcHMucm90YXRlfWRlZylgLFxuICAgICAgfVxuICAgIH0pXG5cbiAgICBmdW5jdGlvbiBnZW5DaXJjbGUobmFtZTogc3RyaW5nLCBvZmZzZXQ6IHN0cmluZyB8IG51bWJlcik6IFZOb2RlIHtcbiAgICAgIHJldHVybiBoKCdjaXJjbGUnLCB7XG4gICAgICAgIGNsYXNzOiBgdi1wcm9ncmVzcy1jaXJjdWxhcl9fJHtuYW1lfWAsXG4gICAgICAgIGZpbGw6ICd0cmFuc3BhcmVudCcsXG4gICAgICAgIGN4OiAyICogdmlld0JveFNpemUudmFsdWUsXG4gICAgICAgIGN5OiAyICogdmlld0JveFNpemUudmFsdWUsXG4gICAgICAgIHI6IHJhZGl1cyxcbiAgICAgICAgJ3N0cm9rZS13aWR0aCc6IHN0cm9rZVdpZHRoLnZhbHVlLFxuICAgICAgICAnc3Ryb2tlLWRhc2hhcnJheSc6IHN0cm9rZURhc2hBcnJheS52YWx1ZSxcbiAgICAgICAgJ3N0cm9rZS1kYXNob2Zmc2V0Jzogb2Zmc2V0LFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5TdmcgPSAoKSA9PiB7XG4gICAgICBjb25zdCBjaGlsZHJlbiA9IFtcbiAgICAgICAgcHJvcHMuaW5kZXRlcm1pbmF0ZSB8fCBnZW5DaXJjbGUoJ3VuZGVybGF5JywgMCksXG4gICAgICAgIGdlbkNpcmNsZSgnb3ZlcmxheScsIHN0cm9rZURhc2hPZmZzZXQudmFsdWUpLFxuICAgICAgXVxuXG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIHhtbG5zOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLFxuICAgICAgICB2aWV3Qm94OiBgJHt2aWV3Qm94U2l6ZS52YWx1ZX0gJHt2aWV3Qm94U2l6ZS52YWx1ZX0gJHtcbiAgICAgICAgICAyICogdmlld0JveFNpemUudmFsdWVcbiAgICAgICAgfSAkezIgKiB2aWV3Qm94U2l6ZS52YWx1ZX1gLFxuXG4gICAgICAgIHN0eWxlOiBzdmdTdHlsZS52YWx1ZSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ3N2ZycsIHByb3BzRGF0YSwgY2hpbGRyZW4pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuSW5mbyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6ICd2LXByb2dyZXNzLWNpcmN1bGFyX19pbmZvJyxcbiAgICAgIH1cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIHNsb3RzLmRlZmF1bHQgJiYgc2xvdHMuZGVmYXVsdCgpKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgICBzdHlsZTogc3R5bGVzLnZhbHVlLFxuICAgICAgfVxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgW2dlblN2ZygpLCBnZW5JbmZvKCldKVxuICAgIH1cbiAgfSxcbn0pXG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGgsIGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuXG4vLyBDb21wb3NhYmxlXG5pbXBvcnQgeyB1c2VDb2xvcnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG5pbXBvcnQgeyBlbGV2YXRpb25Qcm9wcywgdXNlRWxldmF0aW9uIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtZWxldmF0aW9uJ1xuaW1wb3J0IHsgdXNlUG9zaXRpb24gfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1wb3NpdGlvbidcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVlByb2dyZXNzQ2lyY3VsYXIgfSBmcm9tICcuLi9WUHJvZ3Jlc3NDaXJjdWxhcidcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuXG4vLyBIZWxwZXJzXG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0IH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtYnV0dG9uJyxcbiAgcHJvcHM6IHtcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICBvdXRsaW5lZDogQm9vbGVhbixcbiAgICByb3VuZGVkOiBCb29sZWFuLFxuICAgIHJvdW5kOiBCb29sZWFuLFxuICAgIGFic29sdXRlOiBCb29sZWFuLFxuICAgIGxvYWRpbmc6IEJvb2xlYW4sXG4gICAgbGVmdDogQm9vbGVhbixcbiAgICByaWdodDogQm9vbGVhbixcbiAgICB0ZXh0OiBCb29sZWFuLFxuICAgIGRhcms6IEJvb2xlYW4sXG4gICAgbGFiZWw6IFN0cmluZyxcbiAgICB3aWR0aDogW1N0cmluZywgTnVtYmVyXSxcbiAgICBoZWlnaHQ6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgY29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdncmV5IGxpZ2h0ZW4tMScsXG4gICAgfSxcbiAgICAuLi5lbGV2YXRpb25Qcm9wcygpLFxuICB9IGFzIGFueSxcbiAgZW1pdHM6IFsnY2xpY2snXSxcblxuICBzZXR1cChwcm9wcywgeyBzbG90cywgZW1pdCB9KTogKCkgPT4gVk5vZGUge1xuICAgIGNvbnN0IHtcbiAgICAgIHNldFRleHRDbGFzc05hbWVDb2xvcixcbiAgICAgIHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcixcbiAgICAgIHNldEJhY2tncm91bmRDc3NDb2xvcixcbiAgICAgIHNldFRleHRDc3NDb2xvcixcbiAgICB9ID0gdXNlQ29sb3JzKClcblxuICAgIGNvbnN0IHsgZWxldmF0aW9uQ2xhc3NlcyB9ID0gdXNlRWxldmF0aW9uKHByb3BzKVxuICAgIGNvbnN0IHsgcG9zaXRpb25DbGFzc2VzIH0gPSB1c2VQb3NpdGlvbihwcm9wcylcblxuICAgIGNvbnN0IGlzRmxhdCA9IGNvbXB1dGVkPGJvb2xlYW4+KCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy50ZXh0IHx8IHByb3BzLm91dGxpbmVkXG4gICAgfSlcblxuICAgIGNvbnN0IGlzTG9hZGFibGUgPSBjb21wdXRlZDxib29sZWFuPigoKSA9PiB7XG4gICAgICByZXR1cm4gIXByb3BzLnRleHQgJiYgIXByb3BzLm91dGxpbmVkICYmIHByb3BzLmxvYWRpbmdcbiAgICB9KVxuXG4gICAgY29uc3QgaXNFbGV2ZXRhYmxlID0gY29tcHV0ZWQ8Ym9vbGVhbj4oKCkgPT4ge1xuICAgICAgcmV0dXJuICFpc0xvYWRhYmxlLnZhbHVlICYmICFwcm9wcy5kaXNhYmxlZFxuICAgIH0pXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+IHtcbiAgICAgIGNvbnN0IGVsZXZhdGlvbnMgPSBpc0VsZXZldGFibGUudmFsdWUgPyBlbGV2YXRpb25DbGFzc2VzLnZhbHVlIDoge31cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgJ3YtYnV0dG9uJzogdHJ1ZSxcbiAgICAgICAgJ3YtYnV0dG9uLS10ZXh0JzogcHJvcHMudGV4dCB8fCBwcm9wcy5vdXRsaW5lZCxcbiAgICAgICAgJ3YtYnV0dG9uLS1vdXRsaW5lZCc6IHByb3BzLm91dGxpbmVkLFxuICAgICAgICAndi1idXR0b24tLXJvdW5kZWQnOiAhcHJvcHMucm91bmQgJiYgcHJvcHMucm91bmRlZCxcbiAgICAgICAgJ3YtYnV0dG9uLS1yb3VuZCc6IHByb3BzLnJvdW5kLFxuICAgICAgICAndi1idXR0b24tLWRpc2FibGVkJzogcHJvcHMuZGlzYWJsZWQgfHwgaXNMb2FkYWJsZS52YWx1ZSxcbiAgICAgICAgJ3YtYnV0dG9uLS1sb2FkaW5nJzogcHJvcHMubG9hZGluZyxcbiAgICAgICAgLi4uZWxldmF0aW9ucyxcbiAgICAgICAgLi4ucG9zaXRpb25DbGFzc2VzLnZhbHVlLFxuICAgICAgICAuLi4ocHJvcHMuY29sb3IgJiYgaXNGbGF0LnZhbHVlXG4gICAgICAgICAgPyBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpXG4gICAgICAgICAgOiB7fSksXG4gICAgICAgIC4uLihwcm9wcy5jb2xvciAmJiAhaXNGbGF0LnZhbHVlXG4gICAgICAgICAgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpXG4gICAgICAgICAgOiB7fSksXG4gICAgICB9XG4gICAgfSlcblxuICAgIGNvbnN0IHN0eWxlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGFueT4+KCgpID0+IHtcbiAgICAgIGNvbnN0IHdpZHRoID0gcHJvcHMud2lkdGggfHwgNDBcbiAgICAgIGNvbnN0IGhlaWdodCA9IHByb3BzLnJvdW5kID8gd2lkdGg6IHByb3BzLmhlaWdodCA/IHByb3BzLmhlaWdodCA6ICcnXG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoOiAocHJvcHMud2lkdGggfHwgcHJvcHMucm91bmQpICYmIGNvbnZlcnRUb1VuaXQod2lkdGgpLFxuICAgICAgICBoZWlnaHQ6ICEhaGVpZ2h0ICYmIGNvbnZlcnRUb1VuaXQoaGVpZ2h0KSxcbiAgICAgICAgLi4uKHByb3BzLmNvbG9yICYmIGlzRmxhdC52YWx1ZSA/IHNldFRleHRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgICAgIC4uLihwcm9wcy5jb2xvciAmJiAhaXNGbGF0LnZhbHVlXG4gICAgICAgICAgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMuY29sb3IpXG4gICAgICAgICAgOiB7fSksXG4gICAgICB9XG4gICAgfSlcblxuICAgIGNvbnN0IGdlbkxvYWRlciA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3M6ICd2LWJ1dHRvbl9fbG9hZGVyJyxcbiAgICAgICAgfSxcbiAgICAgICAgKHNsb3RzLmxvYWRpbmcgJiYgc2xvdHMubG9hZGluZygpKSB8fFxuICAgICAgICBoKFZQcm9ncmVzc0NpcmN1bGFyLCB7XG4gICAgICAgICAgaW5kZXRlcm1pbmF0ZTogdHJ1ZSxcbiAgICAgICAgICBzaXplOiAyMyxcbiAgICAgICAgICB3aWR0aDogMixcbiAgICAgICAgfSksXG4gICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuTGFiZWwgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoJ3NwYW4nLCB7XG4gICAgICAgIGNsYXNzOiAndi1idXR0b25fX2xhYmVsJyxcbiAgICAgIH0sIHByb3BzLmxhYmVsKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkNvbnRlbnQgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2RpdicsIHsgY2xhc3M6ICd2LWJ1dHRvbl9fY29udGVudCcgfSxcbiAgICAgICAgWyhzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKSkgfHwgKHByb3BzLmxhYmVsICYmIGdlbkxhYmVsKCkpXSxcbiAgICAgIClcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT5cbiAgICAgIGgoJ2J1dHRvbicsIHtcbiAgICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgICBzdHlsZTogc3R5bGVzLnZhbHVlLFxuICAgICAgICAgIG9uQ2xpY2s6ICgpID0+ICFwcm9wcy5kaXNhYmxlZCAmJiBlbWl0KCdjbGljaycpLFxuICAgICAgICB9LFxuICAgICAgICBbZ2VuQ29udGVudCgpLCBwcm9wcy5sb2FkaW5nICYmIGdlbkxvYWRlcigpXSxcbiAgICAgIClcbiAgfSxcbn0pXG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGNvbXB1dGVkLCBoIH0gZnJvbSAndnVlJ1xuXG4vLyBDb21wb3NpdGlvbnNcbmltcG9ydCB7IHVzZUNvbG9ycyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1vdmVybGF5JyxcblxuICBwcm9wczoge1xuICAgIGhpZGU6IEJvb2xlYW4sXG4gICAgYWN0aXZlOiBCb29sZWFuLFxuICAgIGNvbG9yOiBTdHJpbmcsXG4gICAgZml4ZWQ6IEJvb2xlYW4sXG4gIH0gYXMgYW55LFxuXG4gIHNldHVwKHByb3BzKTogKCkgPT4gVk5vZGUge1xuICAgIGNvbnN0IHsgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yLCBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IgfSA9IHVzZUNvbG9ycygpXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgJ3Ytb3ZlcmxheSc6IHRydWUsXG4gICAgICAgICd2LW92ZXJsYXktLWhpZGRlbic6IHByb3BzLmhpZGUsXG4gICAgICAgICd2LW92ZXJsYXktLWFjdGl2ZSc6IHByb3BzLmFjdGl2ZSxcbiAgICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICByZXR1cm4gKCkgPT4gaCgnZGl2Jywge1xuICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICBzdHlsZTogc3R5bGVzLnZhbHVlLFxuICAgICAgcmVmOiAnb3ZlcmxheScsXG4gICAgfSlcbiAgfSxcbn0pXG4iLCJpbXBvcnQgeyByZW5kZXIsIGggfSBmcm9tICd2dWUnXG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZPdmVybGF5IH0gZnJvbSAnLi4vY29tcG9uZW50cy9WT3ZlcmxheSdcbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vLi4vdHlwZXMvYmFzZSdcblxuLy8gSGVscGVyc1xuaW1wb3J0IHsgYWRkT25jZUxpc3RlbmVyIH0gZnJvbSAnLi4vaGVscGVycydcblxuaW50ZXJmYWNlIE92ZXJsYXlDb250cm9sbGVyIHtcbiAgY3JlYXRlT3ZlcmxheTogKCkgPT4gdm9pZFxuICByZW1vdmVPdmVybGF5OiAoKSA9PiB2b2lkXG59XG5cbmV4cG9ydCBjb25zdCBvdmVybGF5UHJvcHMgPSAoKSA9PiAoe1xuICBvdmVybGF5OiBCb29sZWFuLFxuICBvdmVybGF5Q29sb3I6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJyMwMDAwMDAnXG4gIH1cbn0pXG5cbmV4cG9ydCBjb25zdCB1c2VPdmVybGF5ID0gKHByb3BzOiBhbnksIG92ZXJsYXlPbj86IEhUTUxFbGVtZW50KTogT3ZlcmxheUNvbnRyb2xsZXIgPT4ge1xuICBjb25zdCBjb250YWluZXI6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcblxuICBsZXQgb3ZlcmxheUVsZW1lbnQ6IE1heWJlPEhUTUxFbGVtZW50PiA9IG51bGxcblxuICBjb25zdCByZW5kZXJPdmVybGF5ID0gKCkgPT4gcmVuZGVyKFxuICAgIGgoVk92ZXJsYXksIHsgYWN0aXZlOiBmYWxzZSwgY29sb3I6IHByb3BzLm92ZXJsYXlDb2xvciB9KSxcbiAgICBjb250YWluZXIhXG4gIClcblxuICBjb25zdCBjcmVhdGVPdmVybGF5ID0gKCkgPT4ge1xuICAgIG92ZXJsYXlFbGVtZW50IS5zdHlsZS56SW5kZXggPSBgJHsgcHJvcHMuekluZGV4IC0gMSB9YFxuICAgIG92ZXJsYXlPbiEuc3R5bGUuekluZGV4ID0gYCR7IHByb3BzLnpJbmRleCB9YFxuXG4gICAgb3ZlcmxheU9uPy5wYXJlbnROb2RlPy5pbnNlcnRCZWZvcmUob3ZlcmxheUVsZW1lbnQhLCBvdmVybGF5T24pXG4gICAgb3ZlcmxheUVsZW1lbnQ/LmNsYXNzTGlzdC5yZW1vdmUoJ3Ytb3ZlcmxheS0taGlkZGVuJylcblxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBvdmVybGF5RWxlbWVudD8uY2xhc3NMaXN0LmFkZCgndi1vdmVybGF5LS1hY3RpdmUnKVxuICAgIH0pXG4gIH1cblxuICBjb25zdCByZW1vdmVPdmVybGF5ID0gKCkgPT4ge1xuICAgIG92ZXJsYXlFbGVtZW50IS5jbGFzc0xpc3QucmVtb3ZlKCd2LW92ZXJsYXktLWFjdGl2ZScpXG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgb3ZlcmxheUVsZW1lbnQ/LmNsYXNzTGlzdC5hZGQoJ3Ytb3ZlcmxheS0taGlkZGVuJylcbiAgICB9KVxuXG4gICAgY29uc3QgcmVtb3ZlID0gKCkgPT4ge1xuICAgICAgb3ZlcmxheUVsZW1lbnQ/LnBhcmVudE5vZGU/LnJlbW92ZUNoaWxkKG92ZXJsYXlFbGVtZW50ISlcbiAgICB9XG5cbiAgICBhZGRPbmNlTGlzdGVuZXIob3ZlcmxheUVsZW1lbnQhLCAndHJhbnNpdGlvbmVuZCcsIHJlbW92ZSlcbiAgfVxuXG4gIHJlbmRlck92ZXJsYXkoKVxuICBvdmVybGF5RWxlbWVudCA9IGNvbnRhaW5lci5maXJzdENoaWxkIGFzIEhUTUxFbGVtZW50XG5cbiAgcmV0dXJuIHtcbiAgICBjcmVhdGVPdmVybGF5LFxuICAgIHJlbW92ZU92ZXJsYXlcbiAgfVxufVxuIiwiaW1wb3J0IHsgVHJhbnNpdGlvbiwgVk5vZGUsIGggfSBmcm9tICd2dWUnXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2l0aW9uUHJvcHMoKSB7XG4gIHJldHVybiB7XG4gICAgdHJhbnNpdGlvbjogU3RyaW5nXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVRyYW5zaXRpb24oXG4gIHZOb2RlOiBWTm9kZSxcbiAgdHJhbnNpdGlvbjogc3RyaW5nLFxuICBtb2RlOiBzdHJpbmcgPSAnJ1xuKTogVk5vZGUge1xuICBjb25zdCBwcm9wcyA9IHsgbmFtZTogdHJhbnNpdGlvbiwgbW9kZSB9XG4gIHJldHVybiBoKFRyYW5zaXRpb24sIHByb3BzLCB7XG4gICAgZGVmYXVsdDogKCkgPT4gdk5vZGVcbiAgfSlcbn1cbiIsIi8vIFZ1ZSBBUElcbmltcG9ydCB7IHJlZiwgd2F0Y2ggfSBmcm9tICd2dWUnXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBSZWYgfSBmcm9tICd2dWUnXG5cbnR5cGUgVG9nZ2xlYWJsZSA9IHtcbiAgaXNBY3RpdmU6IFJlZjxib29sZWFuPlxufVxuXG4vKioqXG4gKlxuICogQHBhcmFtIHByb3BzIHtvYmplY3R9IC0gcHJvcHMgb2JqZWN0IG9mIHRoZSBjb21wb25lbnRcbiAqIEBwYXJhbSBwcm9wTmFtZSB7c3RyaW5nfSAtIHRoZSBwcm9wIG5hbWUgd2hpY2ggaXMgdHJhY2tlZCBmb3IgY2hhbmdlc1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VUb2dnbGUocHJvcHM6IGFueSwgcHJvcE5hbWU/OiBzdHJpbmcpOiBUb2dnbGVhYmxlIHtcbiAgY29uc3QgaXNBY3RpdmUgPSByZWY8Ym9vbGVhbj4oZmFsc2UpXG4gIGNvbnN0IHByb3AgPSBwcm9wTmFtZSA/IHByb3BOYW1lIDogJ21vZGVsVmFsdWUnXG5cbiAgd2F0Y2goXG4gICAgKCkgPT4gcHJvcHNbcHJvcF0sXG4gICAgKHRvKSA9PiAoaXNBY3RpdmUudmFsdWUgPSAhIXRvKSxcbiAgICB7IGltbWVkaWF0ZTogdHJ1ZSB9XG4gIClcblxuICByZXR1cm4ge1xuICAgIGlzQWN0aXZlLFxuICB9XG59XG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQge1xuICBoLFxuICBzaGFsbG93UmVmLFxuICB3YXRjaCxcbiAgd2l0aERpcmVjdGl2ZXMsXG4gIGRlZmluZUNvbXBvbmVudCxcbiAgdlNob3csXG4gIG9uTW91bnRlZCxcbn0gZnJvbSAndnVlJ1xuXG4vLyBFZmZlY3RzXG5pbXBvcnQgeyBvdmVybGF5UHJvcHMsIHVzZU92ZXJsYXkgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1vdmVybGF5J1xuaW1wb3J0IHsgdHJhbnNpdGlvblByb3BzLCB1c2VUcmFuc2l0aW9uIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtdHJhbnNpdGlvbidcbmltcG9ydCB7IHVzZVRvZ2dsZSB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXRvZ2dsZSdcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LW1vZGFsJyxcblxuICBwcm9wczoge1xuICAgIG1vZGVsVmFsdWU6IEJvb2xlYW4sXG4gICAgekluZGV4OiB7XG4gICAgICB0eXBlOiBbIE51bWJlciwgU3RyaW5nIF0sXG4gICAgICBkZWZhdWx0OiAxMCxcbiAgICB9LFxuICAgIHdpZHRoOiB7XG4gICAgICB0eXBlOiBbIE51bWJlciwgU3RyaW5nIF0sXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gICAgLi4ub3ZlcmxheVByb3BzKCksXG4gICAgLi4udHJhbnNpdGlvblByb3BzKCksXG4gIH0gYXMgYW55LFxuXG4gIGVtaXRzOiBbICd1cGRhdGU6bW9kZWxWYWx1ZScgXSxcblxuICBzZXR1cChwcm9wcywgeyBzbG90cywgZW1pdCB9KSB7XG4gICAgY29uc3QgeyBpc0FjdGl2ZSB9ID0gdXNlVG9nZ2xlKHByb3BzKVxuICAgIGNvbnN0IG1vZGFsUmVmID0gc2hhbGxvd1JlZihudWxsKVxuXG4gICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgIGlmIChwcm9wcy5vdmVybGF5KSB7XG5cbiAgICAgICAgY29uc3QgeyBjcmVhdGVPdmVybGF5LCByZW1vdmVPdmVybGF5IH0gPSB1c2VPdmVybGF5KFxuICAgICAgICAgIHByb3BzLFxuICAgICAgICAgIG1vZGFsUmVmLnZhbHVlISxcbiAgICAgICAgKVxuXG4gICAgICAgIGlzQWN0aXZlLnZhbHVlICYmIGNyZWF0ZU92ZXJsYXkoKVxuXG4gICAgICAgIHdhdGNoKFxuICAgICAgICAgICgpID0+IGlzQWN0aXZlLnZhbHVlLFxuICAgICAgICAgICh0bykgPT4ge1xuICAgICAgICAgICAgdG8gJiYgY3JlYXRlT3ZlcmxheSgpXG4gICAgICAgICAgICAhdG8gJiYgcmVtb3ZlT3ZlcmxheSgpXG4gICAgICAgICAgfSxcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBjb25zdCBnZW5Db250ZW50ID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6ICd2LW1vZGFsX19jb250ZW50JyxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICB3aWR0aDogcHJvcHMud2lkdGggPyBjb252ZXJ0VG9Vbml0KHByb3BzLndpZHRoKSA6ICcnLFxuICAgICAgICB9LFxuICAgICAgfVxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCkpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuTW9kYWwgPSAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiAndi1tb2RhbCcsXG4gICAgICAgIHJlZjogbW9kYWxSZWYsXG4gICAgICAgIFsnb25VcGRhdGU6bW9kZWxWYWx1ZSddOiAodmFsKSA9PiBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIHZhbCksXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB3aXRoRGlyZWN0aXZlcyhcbiAgICAgICAgaCgnZGl2JywgcHJvcHNEYXRhLCBnZW5Db250ZW50KCkpLFxuICAgICAgICBbIFsgdlNob3csIGlzQWN0aXZlLnZhbHVlIF0gXVxuICAgICAgKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB1c2VUcmFuc2l0aW9uKGdlbk1vZGFsKCksIHByb3BzLnRyYW5zaXRpb24pXG4gIH0sXG59KVxuIiwiaW1wb3J0IHsgcmVmLCByZWFjdGl2ZSwgY29tcHV0ZWQgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyBEaW1lbnNpb25zIH0gZnJvbSAnLi4vLi4vdHlwZXMnXG5cbnR5cGUgTWFpbkRpbWVuc2lvbnMgPSB7XG4gIGFjdGl2YXRvcjogRGltZW5zaW9uc1xuICBjb250ZW50OiBEaW1lbnNpb25zXG4gIHBhZ2VZT2Zmc2V0OiBudW1iZXJcbiAgcGFnZVdpZHRoOiBudW1iZXJcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF1dG9Qb3NpdGlvblByb3BzKCl7XG4gIHJldHVybiB7XG4gICAgcG9zaXRpb25YOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICBkZWZhdWx0OiAwXG4gICAgfSxcbiAgICBwb3NpdGlvblk6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIGRlZmF1bHQ6IDBcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUF1dG9Qb3NpdGlvbihwcm9wcyl7XG4gIGNvbnN0IGRpbWVuc2lvbnMgPSByZWFjdGl2ZTxNYWluRGltZW5zaW9ucz4oe1xuICAgIGFjdGl2YXRvcjoge1xuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDBcbiAgICB9LFxuICAgIGNvbnRlbnQ6IHtcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwXG4gICAgfSxcbiAgICBwYWdlWU9mZnNldDogMCxcbiAgICBwYWdlV2lkdGg6IDBcbiAgfSlcblxuICBjb25zdCBjb250ZW50UmVmID0gcmVmPEhUTUxFbGVtZW50IHwgbnVsbD4obnVsbClcbiAgY29uc3Qgb2Zmc2V0WTogbnVtYmVyID0gK3Byb3BzLm9mZnNldFlcbiAgLy8gY29uc3Qgb2Zmc2V0WDogbnVtYmVyID0gK3Byb3BzLm9mZnNldFhcblxuICBsZXQgYWN0aXZhdG9yOiBIVE1MRWxlbWVudFxuICBsZXQgY29udGVudDogSFRNTEVsZW1lbnRcbiAgbGV0IGNvbnRlbnRCb3R0b21Cb3JkZXI6IG51bWJlciA9IDBcblxuICBjb25zdCBnZXRSZWN0ID0gKGVsOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgIGNvbnN0IHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogcmVjdC50b3AsXG4gICAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgICBib3R0b206IHJlY3QuYm90dG9tLFxuICAgICAgcmlnaHQ6IHJlY3QucmlnaHQsXG4gICAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICAgIGhlaWdodDogcmVjdC5oZWlnaHRcbiAgICB9XG4gIH1cblxuICBjb25zdCBpc0Fic29sdXRlUG9zaXRpb25lZCA9IGNvbXB1dGVkPGJvb2xlYW4+KCgpID0+IHtcbiAgICByZXR1cm4gISFwcm9wcy5wb3NpdGlvblkgfHwgISFwcm9wcy5wb3NpdGlvblhcbiAgfSlcblxuICBjb25zdCBnZXRJbm5lckhlaWdodCA9ICgpOiBudW1iZXIgPT4ge1xuICAgIGlmICghd2luZG93KSByZXR1cm4gMFxuXG4gICAgcmV0dXJuIGlubmVySGVpZ2h0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHRcbiAgfVxuXG4gIGNvbnN0IGdldFNjcm9sbFRvcCA9ICgpOiBudW1iZXIgPT4ge1xuICAgIGlmICghd2luZG93KSByZXR1cm4gMFxuXG4gICAgcmV0dXJuIHBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3BcbiAgfVxuXG4gIGNvbnN0IGdldFNjcm9sbExlZnQgPSAoKTogbnVtYmVyID0+IHtcbiAgICBpZiAoIXdpbmRvdykgcmV0dXJuIDBcblxuICAgIHJldHVybiBwYWdlWE9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdFxuICB9XG5cbiAgY29uc3QgZ2V0Q29udGVudEFic29sdXRlQm90dG9tUG9pbnQgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGRpbWVuc2lvbnMuY29udGVudC5oZWlnaHQgKyBwcm9wcy5wb3NpdGlvblkgKyBnZXRTY3JvbGxUb3AoKVxuICB9XG5cbiAgY29uc3QgZ2V0Q29udGVudEJvdHRvbUJvcmRlciA9ICgpID0+IHtcbiAgICBjb25zdCB7IGFjdGl2YXRvciwgY29udGVudCB9ID0gZGltZW5zaW9uc1xuXG4gICAgaWYgKHByb3BzLmJvdHRvbSkge1xuICAgICAgcmV0dXJuIGNvbnRlbnQuaGVpZ2h0ICsgYWN0aXZhdG9yLnRvcCArIGFjdGl2YXRvci5oZWlnaHRcbiAgICB9XG5cbiAgICBpZiAocHJvcHMudG9wKSB7XG4gICAgICByZXR1cm4gYWN0aXZhdG9yLnRvcFxuICAgIH1cblxuICAgIHJldHVybiBjb250ZW50LmhlaWdodCArIGFjdGl2YXRvci50b3BcbiAgfVxuXG4gIGNvbnN0IGNhbGNDb250ZW50Qm90dG9tUG9zaXRpb24gPSAoKSA9PiB7XG4gICAgY29uc3QgZnVsbEhlaWdodCA9IGdldFNjcm9sbFRvcCgpICsgZ2V0SW5uZXJIZWlnaHQoKVxuXG4gICAgY29uc3QgY29udGVudEJvdHRvbVBvc2l0aW9uID0gaXNBYnNvbHV0ZVBvc2l0aW9uZWQudmFsdWVcbiAgICAgID8gZ2V0Q29udGVudEFic29sdXRlQm90dG9tUG9pbnQoKVxuICAgICAgOiBnZXRDb250ZW50Qm90dG9tQm9yZGVyKClcblxuICAgIHJldHVybiBmdWxsSGVpZ2h0IC0gY29udGVudEJvdHRvbVBvc2l0aW9uXG4gIH1cblxuICBjb25zdCBjYWxjQWJzb2x1dGVUb3AgPSAoKSA9PiB7XG4gICAgY29uc3QgdG9wUG9zaXRpb24gPSBwcm9wcy5wb3NpdGlvblkgKyBnZXRTY3JvbGxUb3AoKVxuXG4gICAgaWYgKG9mZnNldFkgPj0gY29udGVudEJvdHRvbUJvcmRlcikge1xuICAgICAgcmV0dXJuIHRvcFBvc2l0aW9uICsgY29udGVudEJvdHRvbUJvcmRlciAtIG9mZnNldFlcbiAgICB9XG5cbiAgICByZXR1cm4gdG9wUG9zaXRpb25cbiAgfVxuXG4gIGNvbnN0IGNhbGNCb3R0b21Qb3NpdGlvbiA9ICgpID0+IHtcbiAgICBjb25zdCB7IGFjdGl2YXRvciwgY29udGVudCB9ID0gZGltZW5zaW9uc1xuXG4gICAgaWYgKG9mZnNldFkgPj0gY29udGVudEJvdHRvbUJvcmRlcikge1xuICAgICAgcmV0dXJuIGFjdGl2YXRvci50b3AgLSBjb250ZW50LmhlaWdodCAtIG9mZnNldFlcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aXZhdG9yLnRvcCArIGFjdGl2YXRvci5oZWlnaHQgKyBvZmZzZXRZXG4gIH1cblxuICBjb25zdCBjYWxjVG9wUG9zaXRpb24gPSAoKSA9PiB7XG4gICAgY29uc3QgeyBhY3RpdmF0b3IsIGNvbnRlbnQgfSA9IGRpbWVuc2lvbnNcblxuICAgIGlmIChjb250ZW50LmhlaWdodCArIGdldFNjcm9sbFRvcCgpICsgb2Zmc2V0WSA+IGFjdGl2YXRvci50b3ApIHtcbiAgICAgIHJldHVybiBhY3RpdmF0b3IudG9wICsgYWN0aXZhdG9yLmhlaWdodFxuICAgIH1cblxuICAgIHJldHVybiBhY3RpdmF0b3IudG9wIC0gY29udGVudC5oZWlnaHRcbiAgfVxuXG4gIGNvbnN0IGNhbGNDb250ZW50QXV0b1Bvc2l0aW9uID0gKCkgPT4ge1xuICAgIGlmIChvZmZzZXRZID49IGNvbnRlbnRCb3R0b21Cb3JkZXIpIHtcbiAgICAgIHJldHVybiBkaW1lbnNpb25zLmFjdGl2YXRvci50b3AgKyBjb250ZW50Qm90dG9tQm9yZGVyIC0gb2Zmc2V0WVxuICAgIH1cblxuICAgIHJldHVybiBkaW1lbnNpb25zLmFjdGl2YXRvci50b3BcbiAgfVxuXG4gIGNvbnN0IGNhbGNQb3NpdGlvblkgPSAoKTogbnVtYmVyID0+IHtcbiAgICBjb250ZW50Qm90dG9tQm9yZGVyID0gY2FsY0NvbnRlbnRCb3R0b21Qb3NpdGlvbigpXG5cbiAgICBpZiAocHJvcHMucG9zaXRpb25ZKSByZXR1cm4gY2FsY0Fic29sdXRlVG9wKClcbiAgICBpZiAocHJvcHMuYm90dG9tKSByZXR1cm4gY2FsY0JvdHRvbVBvc2l0aW9uKClcbiAgICBpZiAocHJvcHMudG9wKSByZXR1cm4gY2FsY1RvcFBvc2l0aW9uKClcblxuICAgIHJldHVybiBjYWxjQ29udGVudEF1dG9Qb3NpdGlvbigpXG4gIH1cblxuICBjb25zdCBjYWxjUG9zaXRpb25YID0gKCk6IG51bWJlciA9PiB7XG4gICAgaWYgKHByb3BzLnBvc2l0aW9uWCkgcmV0dXJuIHByb3BzLnBvc2l0aW9uWCArIGdldFNjcm9sbExlZnQoKVxuXG4gICAgcmV0dXJuIGRpbWVuc2lvbnMuYWN0aXZhdG9yLmxlZnRcbiAgfVxuXG4gIGNvbnN0IHNuYXBTaG90ID0gKGNiOiAoKSA9PiBhbnkpID0+IHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgaWYgKCFjb250ZW50IHx8IGNvbnRlbnQuc3R5bGUuZGlzcGxheSAhPT0gJ25vbmUnKSByZXR1cm4gY2IoKVxuICAgICAgY29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jaydcbiAgICAgIGNiKClcbiAgICAgIGNvbnRlbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgIH0pXG4gIH1cblxuICBjb25zdCB1cGRhdGVEaW1lbnNpb25zID0gKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgc25hcFNob3QoKCkgPT4ge1xuICAgICAgICBhY3RpdmF0b3IgJiYgc2V0QWN0aXZhdG9yRGltZW5zaW9ucygpXG4gICAgICAgIGNvbnRlbnQgJiYgc2V0Q29udGVudERpbWVuc2lvbnMoKVxuICAgICAgICByZXNvbHZlKClcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0IHNldEFjdGl2YXRvckRpbWVuc2lvbnMgPSAoKSA9PiB7XG4gICAgZGltZW5zaW9ucy5hY3RpdmF0b3IgPSBnZXRSZWN0KGFjdGl2YXRvcilcblxuICAgIGRpbWVuc2lvbnMuYWN0aXZhdG9yLmhlaWdodCA9IGFjdGl2YXRvci5vZmZzZXRIZWlnaHRcbiAgICBkaW1lbnNpb25zLmFjdGl2YXRvci50b3AgPSBkaW1lbnNpb25zLmFjdGl2YXRvci50b3AgKyBnZXRTY3JvbGxUb3AoKVxuICAgIGRpbWVuc2lvbnMuYWN0aXZhdG9yLmxlZnQgPSBkaW1lbnNpb25zLmFjdGl2YXRvci5sZWZ0ICsgZ2V0U2Nyb2xsTGVmdCgpXG4gIH1cblxuICBjb25zdCBzZXRDb250ZW50RGltZW5zaW9ucyA9ICgpID0+IHtcbiAgICBjb25zdCByZWN0ID0gYWN0aXZhdG9yXG4gICAgICA/IGRpbWVuc2lvbnMuYWN0aXZhdG9yXG4gICAgICA6IGdldFJlY3QoY29udGVudClcblxuICAgIGRpbWVuc2lvbnMuY29udGVudC5oZWlnaHQgPSBjb250ZW50Lm9mZnNldEhlaWdodFxuICAgIGRpbWVuc2lvbnMuY29udGVudC50b3AgPSBjYWxjUG9zaXRpb25ZKClcbiAgICBkaW1lbnNpb25zLmNvbnRlbnQubGVmdCA9IGNhbGNQb3NpdGlvblgoKVxuICAgIGRpbWVuc2lvbnMuY29udGVudC53aWR0aCA9IHJlY3Qud2lkdGhcbiAgfVxuXG4gIGNvbnN0IHNldERpbWVuc2lvbnMgPSAoYWN0aXZhdG9yRWw6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgaWYgKCFhY3RpdmF0b3IgJiYgIWNvbnRlbnQpIHtcbiAgICAgIGFjdGl2YXRvciA9IGFjdGl2YXRvckVsXG4gICAgICBjb250ZW50ID0gY29udGVudFJlZi52YWx1ZSFcbiAgICB9XG5cbiAgICByZXR1cm4gdXBkYXRlRGltZW5zaW9ucygpXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGRpbWVuc2lvbnMsXG4gICAgY29udGVudFJlZixcbiAgICBzZXREaW1lbnNpb25zLFxuICAgIHVwZGF0ZURpbWVuc2lvbnNcbiAgfVxufVxuIiwiaW1wb3J0IHsgcmVmLCBDb21wb25lbnRQdWJsaWNJbnN0YW5jZSB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IEFjdGl2YXRvckxpc3RlbmVycywgRGltZW5zaW9ucyB9IGZyb20gJy4uLy4uL3R5cGVzL2NvbXBvc2FibGVzJ1xuaW1wb3J0IHsgTWF5YmUgfSBmcm9tICcuLi8uLi90eXBlcy9iYXNlJ1xuXG5leHBvcnQgZnVuY3Rpb24gYWN0aXZhdG9yUHJvcHMoKXtcbiAgcmV0dXJuIHtcbiAgICBhY3RpdmF0b3I6IHtcbiAgICAgIHR5cGU6IFsgT2JqZWN0LCBTdHJpbmcgXVxuICAgIH0sXG4gICAgaW50ZXJuYWxBY3RpdmF0b3I6IEJvb2xlYW5cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgdXNlQWN0aXZhdG9yID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IGFjdGl2YXRvclJlZiA9IHJlZjxNYXliZTxIVE1MRWxlbWVudCB8IENvbXBvbmVudFB1YmxpY0luc3RhbmNlPGFueT4+PihudWxsKVxuICBjb25zdCBhY3RpdmF0b3JTaXplczogUGFydGlhbDxEaW1lbnNpb25zPiA9IHt9XG4gIGNvbnN0IGxpc3RlbmVyczogUGFydGlhbDxBY3RpdmF0b3JMaXN0ZW5lcnM+ID0ge31cblxuICBjb25zdCBnZXRBY3RpdmF0b3IgPSAoZXZlbnQ/OiBFdmVudCk6IE1heWJlPEhUTUxFbGVtZW50PiA9PiB7XG4gICAgaWYgKGFjdGl2YXRvclJlZi52YWx1ZSkgcmV0dXJuIGFjdGl2YXRvclJlZi52YWx1ZT8uJGVsIHx8IGFjdGl2YXRvclJlZi52YWx1ZVxuXG4gICAgY29uc3QgdGFyZ2V0ID0gcHJvcHMuaW50ZXJuYWxBY3RpdmF0b3IgPyBwcm9wcy5hY3RpdmF0b3IuJGVsIDogZG9jdW1lbnRcblxuICAgIGlmIChwcm9wcy5pbnB1dEFjdGl2YXRvcikge1xuICAgICAgcmV0dXJuIChhY3RpdmF0b3JSZWYudmFsdWUgPSB0YXJnZXQucXVlcnlTZWxlY3Rvcihwcm9wcy5pbnB1dEFjdGl2YXRvcikpXG4gICAgfVxuXG4gICAgaWYgKHByb3BzLmFjdGl2YXRvcikge1xuICAgICAgaWYgKHR5cGVvZiBwcm9wcy5hY3RpdmF0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiAoYWN0aXZhdG9yUmVmLnZhbHVlID0gdGFyZ2V0LnF1ZXJ5U2VsZWN0b3IocHJvcHMuYWN0aXZhdG9yKSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIChhY3RpdmF0b3JSZWYudmFsdWUgPSBwcm9wcy5hY3RpdmF0b3IpXG4gICAgfVxuXG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICByZXR1cm4gKGFjdGl2YXRvclJlZi52YWx1ZSA9IChldmVudC50YXJnZXQgfHwgZXZlbnQuY3VycmVudFRhcmdldCkgYXMgSFRNTEVsZW1lbnQpXG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGNvbnN0IGdldEFjdGl2YXRvclNpemVzID0gKCkgPT4ge1xuICAgIGNvbnN0IGVsID0gYWN0aXZhdG9yUmVmLnZhbHVlIS4kZWwgfHwgYWN0aXZhdG9yUmVmLnZhbHVlIVxuXG4gICAgYWN0aXZhdG9yU2l6ZXMubGVmdCA9IGVsLm9mZnNldExlZnRcbiAgICBhY3RpdmF0b3JTaXplcy50b3AgPSBlbC5vZmZzZXRUb3BcbiAgICBhY3RpdmF0b3JTaXplcy5oZWlnaHQgPSBlbC5vZmZzZXRIZWlnaHRcbiAgICBhY3RpdmF0b3JTaXplcy53aWR0aCA9IGVsLm9mZnNldFdpZHRoXG5cbiAgICByZXR1cm4gYWN0aXZhdG9yU2l6ZXNcbiAgfVxuXG4gIGNvbnN0IGdlbkFjdGl2YXRvckxpc3RlbmVycyA9IChwcm9wcywgaGFuZGxlcnMpID0+IHtcbiAgICBpZiAocHJvcHMub3Blbk9uSG92ZXIpIHtcbiAgICAgIGxpc3RlbmVycy5tb3VzZWVudGVyID0gKGUpID0+IGhhbmRsZXJzLm1vdXNlZW50ZXIoZSlcbiAgICAgIGxpc3RlbmVycy5tb3VzZWxlYXZlID0gKGUpID0+IGhhbmRsZXJzLm1vdXNlbGVhdmUoZSlcbiAgICB9XG5cbiAgICBpZiAocHJvcHMub3Blbk9uQ2xpY2spIHtcbiAgICAgIGxpc3RlbmVycy5jbGljayA9IChlKSA9PiBoYW5kbGVycy5jbGljayhlKVxuICAgIH1cblxuICAgIGlmIChwcm9wcy5vcGVuT25Db250ZXh0bWVudSkge1xuICAgICAgbGlzdGVuZXJzLmNvbnRleHRtZW51ID0gKGUpID0+IGhhbmRsZXJzLmNvbnRleHRtZW51KGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGxpc3RlbmVyc1xuICB9XG5cbiAgY29uc3QgYWRkQWN0aXZhdG9yRXZlbnRzID0gKCkgPT4ge1xuICAgIGNvbnN0IGV2ZW50cyA9IE9iamVjdC5rZXlzKGxpc3RlbmVycylcblxuICAgIGlmIChhY3RpdmF0b3JSZWYudmFsdWUpIHtcbiAgICAgIGV2ZW50cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgY29uc3QgZWwgPSBhY3RpdmF0b3JSZWYudmFsdWUuJGVsIHx8IGFjdGl2YXRvclJlZi52YWx1ZVxuICAgICAgICBlbCEuYWRkRXZlbnRMaXN0ZW5lcihrZXksIGxpc3RlbmVyc1trZXldKVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBjb25zdCByZW1vdmVBY3RpdmF0b3JFdmVudHMgPSAoKSA9PiB7XG4gICAgY29uc3QgZXZlbnRzID0gT2JqZWN0LmtleXMobGlzdGVuZXJzKVxuXG4gICAgaWYgKGFjdGl2YXRvclJlZi52YWx1ZSkge1xuICAgICAgZXZlbnRzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBjb25zdCBlbCA9IGFjdGl2YXRvclJlZi52YWx1ZS4kZWwgfHwgYWN0aXZhdG9yUmVmLnZhbHVlXG4gICAgICAgIGVsIS5yZW1vdmVFdmVudExpc3RlbmVyKGtleSwgbGlzdGVuZXJzW2tleV0pXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYWN0aXZhdG9yUmVmLFxuICAgIGdldEFjdGl2YXRvcixcbiAgICBnZXRBY3RpdmF0b3JTaXplcyxcbiAgICBhZGRBY3RpdmF0b3JFdmVudHMsXG4gICAgcmVtb3ZlQWN0aXZhdG9yRXZlbnRzLFxuICAgIGdlbkFjdGl2YXRvckxpc3RlbmVyc1xuICB9XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gdXNlRGV0YWNoKCkge1xuICBsZXQgdGFyZ2V0XG5cbiAgY29uc3Qgc2V0RGV0YWNoZWQgPSAoZWw6IEhUTUxFbGVtZW50LCBzZWxlY3Rvcjogc3RyaW5nID0gJycpID0+IHtcbiAgICBpZiAoc2VsZWN0b3IpIHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXG4gICAgaWYgKCFzZWxlY3RvcikgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnYtYXBwJylcbiAgICBpZiAoIXRhcmdldCkgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2FwcCcpXG4gICAgaWYgKCF0YXJnZXQpIHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKGVsKVxuICB9XG5cbiAgY29uc3QgcmVtb3ZlRGV0YWNoZWQgPSAoZWw6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgdGFyZ2V0LnJlbW92ZUNoaWxkKGVsKVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXREZXRhY2hlZCxcbiAgICByZW1vdmVEZXRhY2hlZCxcbiAgfVxufVxuIiwiLy8gVnVlIEFQSVxuaW1wb3J0IHtcbiAgZGVmaW5lQ29tcG9uZW50LFxuICB3YXRjaCxcbiAgaCxcbiAgd2l0aERpcmVjdGl2ZXMsXG4gIGNvbXB1dGVkLFxuICBvbk1vdW50ZWQsXG4gIG9uQmVmb3JlVW5tb3VudCxcbiAgdlNob3csXG4gIFZOb2RlLFxuICBEaXJlY3RpdmVBcmd1bWVudHMsXG59IGZyb20gJ3Z1ZSdcblxuLy8gQ29tcG9zYWJsZVxuaW1wb3J0IHtcbiAgYXV0b1Bvc2l0aW9uUHJvcHMsXG4gIHVzZUF1dG9Qb3NpdGlvbixcbn0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtYXV0by1wb3NpdGlvbidcbmltcG9ydCB7IGFjdGl2YXRvclByb3BzLCB1c2VBY3RpdmF0b3IgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1hY3RpdmF0b3InXG5pbXBvcnQgeyB1c2VEZXRhY2ggfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1kZXRhY2gnXG5pbXBvcnQgeyB1c2VFbGV2YXRpb24gfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1lbGV2YXRpb24nXG5pbXBvcnQgeyB1c2VUb2dnbGUgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS10b2dnbGUnXG5pbXBvcnQgeyB1c2VUcmFuc2l0aW9uIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtdHJhbnNpdGlvbidcbmltcG9ydCB7IHBvc2l0aW9uUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1wb3NpdGlvbidcblxuLy8gSGVscGVyc1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5cbi8vIERpcmVjdGl2ZXNcbmltcG9ydCB7IGNsaWNrT3V0c2lkZSwgcmVzaXplIH0gZnJvbSAnLi4vLi4vZGlyZWN0aXZlcydcblxuaW1wb3J0IHsgTWF5YmUgfSBmcm9tICcuLi8uLi8uLi90eXBlcy9iYXNlJ1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1tZW51JyxcbiAgZGlyZWN0aXZlczoge1xuICAgIGNsaWNrT3V0c2lkZSxcbiAgICByZXNpemUsXG4gIH0sXG4gIHByb3BzOiB7XG4gICAgbWF4SGVpZ2h0OiB7XG4gICAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgICAgZGVmYXVsdDogMjAwLFxuICAgIH0sXG4gICAgd2lkdGg6IHtcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgICBkZWZhdWx0OiAwLFxuICAgIH0sXG4gICAgekluZGV4OiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogMTAsXG4gICAgfSxcbiAgICBvcGVuT25Ib3ZlcjogQm9vbGVhbixcbiAgICBvcGVuT25DbGljazogQm9vbGVhbixcbiAgICBvcGVuT25Db250ZXh0bWVudTogQm9vbGVhbixcbiAgICBjbG9zZU9uQ2xpY2s6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlLFxuICAgIH0sXG4gICAgZWxldmF0aW9uOiB7XG4gICAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgICAgZGVmYXVsdDogMTAsXG4gICAgfSxcbiAgICBvZmZzZXRYOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogMjAsXG4gICAgfSxcbiAgICBvZmZzZXRZOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogMjAsXG4gICAgfSxcbiAgICBtb2RlbFZhbHVlOiBCb29sZWFuLFxuICAgIGlucHV0QWN0aXZhdG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJyxcbiAgICB9LFxuICAgIC4uLnBvc2l0aW9uUHJvcHMoKSxcbiAgICAuLi5hdXRvUG9zaXRpb25Qcm9wcygpLFxuICAgIC4uLmFjdGl2YXRvclByb3BzKCksXG4gIH0sXG5cbiAgZW1pdHM6IFsnc2hvdycsICdoaWRlJ10sXG5cbiAgc2V0dXAocHJvcHMsIHsgZW1pdCwgc2xvdHMgfSkge1xuICAgIGNvbnN0IHsgZWxldmF0aW9uQ2xhc3NlcyB9ID0gdXNlRWxldmF0aW9uKHByb3BzKVxuICAgIGNvbnN0IHsgaXNBY3RpdmUgfSA9IHVzZVRvZ2dsZShwcm9wcylcbiAgICBjb25zdCB7IGNvbnRlbnRSZWYsIHNldERpbWVuc2lvbnMsIGRpbWVuc2lvbnMgfSA9IHVzZUF1dG9Qb3NpdGlvbihwcm9wcylcbiAgICBjb25zdCB7IHNldERldGFjaGVkLCByZW1vdmVEZXRhY2hlZCB9ID0gdXNlRGV0YWNoKClcbiAgICBjb25zdCB7XG4gICAgICBhY3RpdmF0b3JSZWYsXG4gICAgICBnZXRBY3RpdmF0b3IsXG4gICAgICBnZW5BY3RpdmF0b3JMaXN0ZW5lcnMsXG4gICAgICBhZGRBY3RpdmF0b3JFdmVudHMsXG4gICAgICByZW1vdmVBY3RpdmF0b3JFdmVudHMsXG4gICAgfSA9IHVzZUFjdGl2YXRvcihwcm9wcylcblxuICAgIGNvbnN0IHNldERpbWVuc2lvbnNPbiA9IChlLCBmbGFnKSA9PiB7XG4gICAgICBzZXREaW1lbnNpb25zKGdldEFjdGl2YXRvcihlKSEpLnRoZW4oKCkgPT4ge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gKGlzQWN0aXZlLnZhbHVlID0gZmxhZykpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGhhbmRsZXJzID0ge1xuICAgICAgY2xpY2s6IChlKSA9PiBzZXREaW1lbnNpb25zT24oZSwgcHJvcHMub3Blbk9uQ2xpY2spLFxuICAgICAgbW91c2VlbnRlcjogKGUpID0+IHNldERpbWVuc2lvbnNPbihlLCBwcm9wcy5vcGVuT25Ib3ZlciksXG4gICAgICBtb3VzZWxlYXZlOiAoZSkgPT4gc2V0RGltZW5zaW9uc09uKGUsICFwcm9wcy5vcGVuT25Ib3ZlciksXG4gICAgICBjb250ZXh0bWVudTogKGUpID0+IHNldERpbWVuc2lvbnNPbihlLCBwcm9wcy5vcGVuT25Db250ZXh0bWVudSksXG4gICAgfVxuXG4gICAgY29uc3QgbGlzdGVuZXJzID0gZ2VuQWN0aXZhdG9yTGlzdGVuZXJzKHByb3BzLCBoYW5kbGVycylcblxuICAgIGNvbnN0IGRpcmVjdGl2ZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBpc0FjdGl2ZS52YWx1ZVxuICAgICAgICA/IHtcbiAgICAgICAgICBoYW5kbGVyOiAoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBwcm9wcy5pbnRlcm5hbEFjdGl2YXRvciAmJlxuICAgICAgICAgICAgICBhY3RpdmF0b3JSZWYudmFsdWUuY29udGFpbnMoZS50YXJnZXQpXG4gICAgICAgICAgICApIHJldHVyblxuICAgICAgICAgICAgaXNBY3RpdmUudmFsdWUgPSBmYWxzZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbG9zZUNvbmRpdGlvbmFsOiBwcm9wcy5jbG9zZU9uQ2xpY2ssXG4gICAgICAgICAgfVxuICAgICAgICA6IHVuZGVmaW5lZFxuICAgIH0pXG5cbiAgICBjb25zdCBjYWxjV2lkdGggPSBjb21wdXRlZDxudW1iZXIgfCBzdHJpbmc+KCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy53aWR0aCB8fCArZGltZW5zaW9ucy5jb250ZW50LndpZHRoXG4gICAgfSlcblxuICAgIHdhdGNoKGlzQWN0aXZlLCAodG8pID0+IHtcbiAgICAgIHRvICYmIGVtaXQoJ3Nob3cnKVxuICAgICAgIXRvICYmIGVtaXQoJ2hpZGUnKVxuICAgIH0pXG5cbiAgICB3YXRjaChcbiAgICAgICgpID0+IFtwcm9wcy5wb3NpdGlvblksIHByb3BzLnBvc2l0aW9uWF0sXG4gICAgICAoKSA9PiBzZXREaW1lbnNpb25zKGFjdGl2YXRvclJlZi52YWx1ZSEpXG4gICAgKVxuXG4gICAgd2F0Y2goXG4gICAgICAoKSA9PiBwcm9wcy5tb2RlbFZhbHVlLFxuICAgICAgKHRvKSA9PiB7XG4gICAgICAgIGlzQWN0aXZlLnZhbHVlID0gZmFsc2VcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiAoaXNBY3RpdmUudmFsdWUgPSB0bykpXG4gICAgICB9XG4gICAgKVxuXG4gICAgY29uc3QgY29udGVudENsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LW1lbnVfX2NvbnRlbnQnOiB0cnVlLFxuICAgICAgLi4uZWxldmF0aW9uQ2xhc3Nlcy52YWx1ZSxcbiAgICB9KSlcblxuICAgIGNvbnN0IGNvbnRlbnRTdHlsZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBudW1iZXI+PigoKSA9PiAoe1xuICAgICAgdG9wOiBjb252ZXJ0VG9Vbml0KGRpbWVuc2lvbnMuY29udGVudC50b3ApISxcbiAgICAgIGxlZnQ6IGNvbnZlcnRUb1VuaXQoZGltZW5zaW9ucy5jb250ZW50LmxlZnQpISxcbiAgICAgIHpJbmRleDogcHJvcHMuekluZGV4LFxuICAgIH0pKSBhcyBhbnlcblxuICAgIGNvbnN0IG9uQ29udGVudENsaWNrID0gKCkgPT4ge1xuICAgICAgaXNBY3RpdmUudmFsdWUgPSAhcHJvcHMuY2xvc2VPbkNsaWNrXG4gICAgfVxuXG4gICAgY29uc3Qgb25SZXNpemUgPSAoKSA9PiB7XG4gICAgICBpZiAoIWlzQWN0aXZlLnZhbHVlKSByZXR1cm5cbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiBzZXREaW1lbnNpb25zKGFjdGl2YXRvclJlZi52YWx1ZSEpKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkFjdGl2YXRvclNsb3QgPSAoKTogTWF5YmU8Vk5vZGU+ID0+IHtcbiAgICAgIGlmIChzbG90cy5hY3RpdmF0b3IpIHtcbiAgICAgICAgY29uc3Qgc2xvdENvbnRlbnQgPSBzbG90cy5hY3RpdmF0b3IoeyBvbjogbGlzdGVuZXJzIH0pXG5cbiAgICAgICAgaWYgKHR5cGVvZiBzbG90Q29udGVudCFbMF0udHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICByZXR1cm4gaCgnZGl2JywgeyByZWY6IGFjdGl2YXRvclJlZiB9LCBoKHNsb3RDb250ZW50IVswXSkpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaChzbG90Q29udGVudCFbMF0sIHsgcmVmOiBhY3RpdmF0b3JSZWYgfSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBjb25zdCBnZW5Db250ZW50U2xvdCA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIHJlZjogY29udGVudFJlZixcbiAgICAgICAgY2xhc3M6IGNvbnRlbnRDbGFzc2VzLnZhbHVlLFxuICAgICAgICBzdHlsZTogY29udGVudFN0eWxlcy52YWx1ZSxcbiAgICAgICAgb25DbGljazogb25Db250ZW50Q2xpY2ssXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNsb3RDb250ZW50ID0gaChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzczogJ3YtbWVudV9fc2xvdCcsXG4gICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIG1heEhlaWdodDogY29udmVydFRvVW5pdChwcm9wcy5tYXhIZWlnaHQpLFxuICAgICAgICAgICAgd2lkdGg6IGNvbnZlcnRUb1VuaXQoY2FsY1dpZHRoLnZhbHVlKSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBbc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCldXG4gICAgICApXG5cbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBoKCdkaXYnLCBwcm9wc0RhdGEsIHNsb3RDb250ZW50KVxuXG4gICAgICBjb25zdCBkaXJlY3RpdmVzOiBEaXJlY3RpdmVBcmd1bWVudHMgPSBbXG4gICAgICAgIFt2U2hvdywgaXNBY3RpdmUudmFsdWVdLFxuICAgICAgICBbcmVzaXplLCBvblJlc2l6ZV0sXG4gICAgICAgIFtjbGlja091dHNpZGUsIGRpcmVjdGl2ZS52YWx1ZV0sXG4gICAgICBdXG5cbiAgICAgIHJldHVybiB3aXRoRGlyZWN0aXZlcyhjb250ZW50LCBkaXJlY3RpdmVzKVxuICAgIH1cblxuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICBhY3RpdmF0b3JSZWYudmFsdWUgPSBnZXRBY3RpdmF0b3IoKVxuXG4gICAgICBhZGRBY3RpdmF0b3JFdmVudHMoKVxuICAgICAgc2V0RGV0YWNoZWQoY29udGVudFJlZi52YWx1ZSEpXG4gICAgfSlcblxuICAgIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgICByZW1vdmVBY3RpdmF0b3JFdmVudHMoKVxuICAgICAgcmVtb3ZlRGV0YWNoZWQoY29udGVudFJlZi52YWx1ZSEpXG4gICAgfSlcblxuICAgIHJldHVybiAoKSA9PiBbXG4gICAgICBoKCdkaXYnLCB7IGNsYXNzOiB7ICd2LW1lbnUnOiB0cnVlIH0gfSksXG4gICAgICBzbG90cy5hY3RpdmF0b3IgJiYgZ2VuQWN0aXZhdG9yU2xvdCgpLFxuICAgICAgdXNlVHJhbnNpdGlvbihnZW5Db250ZW50U2xvdCgpLCAnZmFkZScpLFxuICAgIF1cbiAgfSxcbn0pXG4iLCJpbXBvcnQgeyByZWFjdGl2ZSwgY29tcHV0ZWQgfSBmcm9tICd2dWUnXG4vLyBUeXBlc1xuaW1wb3J0IHsgUHJvcFR5cGUgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyBNYXliZSB9IGZyb20gJy4uLy4uL3R5cGVzL2Jhc2UnXG5cbnR5cGUgRXJyb3JzU3RhdGUgPSB7XG4gIGlubmVyRXJyb3I6IE1heWJlPG9iamVjdD5cbiAgaW5uZXJFcnJvck1lc3NhZ2U6IE1heWJlPHN0cmluZz5cbiAgaXNEaXJ0eTogYm9vbGVhblxufVxuXG5leHBvcnQgY29uc3QgdmFsaWRhdGlvblByb3BzID0gKCkgPT4gKHtcbiAgcnVsZXM6IHtcbiAgICB0eXBlOiBBcnJheSBhcyBQcm9wVHlwZTxBcnJheTwodmFsOiBhbnkpID0+IGJvb2xlYW4+PixcbiAgICBkZWZhdWx0OiBudWxsLFxuICB9LFxuICB2YWx1ZTogW1N0cmluZywgTnVtYmVyLCBEYXRlLCBPYmplY3RdLFxufSlcblxuZXhwb3J0IGNvbnN0IHVzZVZhbGlkYXRpb24gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgZXJyb3JTdGF0ZSA9IHJlYWN0aXZlPEVycm9yc1N0YXRlPih7XG4gICAgaW5uZXJFcnJvcjogbnVsbCxcbiAgICBpbm5lckVycm9yTWVzc2FnZTogbnVsbCxcbiAgICBpc0RpcnR5OiBmYWxzZSxcbiAgfSlcblxuICBjb25zdCB2YWxpZGF0aW9uQ2xhc3NlcyA9ICgpID0+ICh7XG4gICAgJ2UtdmFsaWRhdGFibGUnOiB0cnVlLFxuICB9KVxuXG4gIGNvbnN0IGNvbXB1dGVkQ29sb3IgPSBjb21wdXRlZDxNYXliZTxzdHJpbmc+PigoKSA9PiB7XG4gICAgcmV0dXJuIHByb3BzLmRpc2FibGVkID8gJ2Rpc2FibGVkJyA6ICdwcmltYXJ5J1xuICB9KVxuXG4gIGNvbnN0IGhhc1J1bGVzID0gY29tcHV0ZWQ8Ym9vbGVhbj4oKCkgPT4ge1xuICAgIHJldHVybiAhIXByb3BzLnJ1bGVzICYmIHByb3BzLnJ1bGVzLmxlbmd0aCA+IDBcbiAgfSlcblxuICBjb25zdCBkaXJ0eSA9ICgpID0+IChlcnJvclN0YXRlLmlzRGlydHkgPSB0cnVlKVxuXG4gIGNvbnN0IHVwZGF0ZSA9IChlcnIsIG1zZyA9IG51bGwpID0+IHtcbiAgICBpZiAoZXJyb3JTdGF0ZS5pbm5lckVycm9yICE9PSBlcnIpIHtcbiAgICAgIGVycm9yU3RhdGUuaW5uZXJFcnJvciA9IGVyclxuICAgIH1cblxuICAgIGlmIChtc2cgJiYgZXJyb3JTdGF0ZS5pbm5lckVycm9yTWVzc2FnZSAhPT0gbXNnKSB7XG4gICAgICBlcnJvclN0YXRlLmlubmVyRXJyb3JNZXNzYWdlID0gbXNnXG4gICAgfVxuXG4gICAgaWYgKCFtc2cpIGVycm9yU3RhdGUuaW5uZXJFcnJvck1lc3NhZ2UgPSBtc2dcblxuICAgIHJldHVybiBlcnJvclN0YXRlLmlubmVyRXJyb3JcbiAgfVxuXG4gIGNvbnN0IHZhbGlkYXRlID0gKHZhbCA9IHByb3BzLnZhbHVlKTogYm9vbGVhbiB8IHZvaWQgPT4ge1xuICAgIGlmICghaGFzUnVsZXMudmFsdWUpIHJldHVybiB0cnVlXG5cbiAgICBkaXJ0eSgpXG5cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcHJvcHMucnVsZXMubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHJ1bGUgPSBwcm9wcy5ydWxlc1tpXVxuXG4gICAgICBsZXQgcmVzdWx0XG5cbiAgICAgIGlmICh0eXBlb2YgcnVsZSA9PT0gJ2Z1bmN0aW9uJykgcmVzdWx0ID0gcnVsZSh2YWwpXG5cbiAgICAgIGlmIChyZXN1bHQgPT09IGZhbHNlIHx8IHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHVwZGF0ZSh0cnVlLCByZXN1bHQpXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSAmJiBpID09PSBsZW4gLSAxKSB7XG4gICAgICAgIHVwZGF0ZShmYWxzZSlcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGVycm9yU3RhdGUsXG4gICAgY29tcHV0ZWRDb2xvcixcbiAgICB2YWxpZGF0aW9uQ2xhc3NlcyxcbiAgICB2YWxpZGF0ZSxcbiAgICBkaXJ0eSxcbiAgfVxufVxuIiwiaW1wb3J0IHsgY29tcHV0ZWQsIHJlYWN0aXZlLCB3YXRjaCB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IHVzZVZhbGlkYXRpb24gfSBmcm9tICdAL2NvbXBvc2FibGUvdXNlLXZhbGlkYXRpb24nXG5cbnR5cGUgU3RhdGUgPSB7XG4gIHZhbHVlOiBzdHJpbmcgfCBudW1iZXJcbiAgZm9jdXNlZDogYm9vbGVhblxufVxuXG5leHBvcnQgY29uc3QgdXNlSW5wdXRTdGF0ZXMgPSAocHJvcHMsIHsgYXR0cnMsIGVtaXQgfSkgPT4ge1xuICBjb25zdCBpbnB1dFN0YXRlID0gcmVhY3RpdmU8U3RhdGU+KHtcbiAgICB2YWx1ZTogJycsXG4gICAgZm9jdXNlZDogZmFsc2UsXG4gIH0pXG5cbiAgY29uc3QgeyBlcnJvclN0YXRlLCB2YWxpZGF0ZSB9ID0gdXNlVmFsaWRhdGlvbihwcm9wcylcblxuICBjb25zdCBpc0Rpc2FibGVkID0gY29tcHV0ZWQ8Ym9vbGVhbj4oKCkgPT4ge1xuICAgIGlmIChwcm9wcy5kaXNhYmxlZCkgcmV0dXJuIHRydWVcblxuICAgIGlmICh0eXBlb2YgYXR0cnMuZGlzYWJsZWQgPT09ICdib29sZWFuJykgcmV0dXJuIGF0dHJzLmRpc2FibGVkXG5cbiAgICByZXR1cm4gYXR0cnMuZGlzYWJsZWQgIT09IHVuZGVmaW5lZFxuICB9KVxuXG4gIGNvbnN0IGlzUmVhZG9ubHkgPSBjb21wdXRlZDxib29sZWFuPigoKSA9PiB7XG4gICAgaWYgKHByb3BzLnJlYWRvbmx5KSByZXR1cm4gdHJ1ZVxuXG4gICAgaWYgKHR5cGVvZiBhdHRycy5yZWFkb25seSA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gYXR0cnMucmVhZG9ubHlcblxuICAgIHJldHVybiBhdHRycy5yZWFkb25seSAhPT0gdW5kZWZpbmVkXG4gIH0pXG5cbiAgY29uc3Qgc3RhdGVDbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgJ3ByaW1hcnktLXRleHQnOiBpbnB1dFN0YXRlLmZvY3VzZWQsXG4gICAgJ2Vycm9yLS10ZXh0JzogISFlcnJvclN0YXRlLmlubmVyRXJyb3JcbiAgfSkpXG5cbiAgd2F0Y2goKCkgPT4gaW5wdXRTdGF0ZS5mb2N1c2VkLCAoZm9jdXNlZCkgPT4ge1xuICAgIGlmICghZm9jdXNlZCAmJiBwcm9wcy5ydWxlcykgcmV0dXJuIHZhbGlkYXRlKGlucHV0U3RhdGUudmFsdWUpXG4gIH0pXG5cbiAgd2F0Y2goKCkgPT4gaW5wdXRTdGF0ZS52YWx1ZSwgKHZhbCkgPT4ge1xuICAgIGlmIChwcm9wcy5ydWxlcykgcmV0dXJuIHZhbGlkYXRlKHZhbClcbiAgfSlcblxuICBjb25zdCBvbkZvY3VzID0gKGUpID0+IHtcbiAgICBpZiAoaXNSZWFkb25seS52YWx1ZSkgcmV0dXJuXG5cbiAgICBpbnB1dFN0YXRlLmZvY3VzZWQgPSB0cnVlXG4gICAgZW1pdCgnZm9jdXMnLCBlKVxuICB9XG5cbiAgY29uc3Qgb25DaGFuZ2UgPSAoKSA9PiB7XG4gICAgaWYgKGlzUmVhZG9ubHkudmFsdWUpIHJldHVyblxuXG4gICAgZW1pdCgnY2hhbmdlJylcbiAgfVxuXG4gIGNvbnN0IG9uQmx1ciA9IChlKSA9PiB7XG4gICAgaWYgKGlzUmVhZG9ubHkudmFsdWUpIHJldHVyblxuXG4gICAgaW5wdXRTdGF0ZS5mb2N1c2VkID0gZmFsc2VcbiAgICBlbWl0KCdibHVyJywgZSlcbiAgfVxuXG4gIGNvbnN0IG9uU2VsZWN0ID0gKHZhbCkgPT4ge1xuICAgIGlucHV0U3RhdGUuZm9jdXNlZCA9IGZhbHNlXG5cbiAgICBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIHZhbClcbiAgICBlbWl0KCdzZWxlY3QnLCB2YWwpXG5cbiAgICBvbkNoYW5nZSgpXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGlucHV0U3RhdGUsXG4gICAgZXJyb3JTdGF0ZSxcbiAgICBpc1JlYWRvbmx5LFxuICAgIGlzRGlzYWJsZWQsXG4gICAgc3RhdGVDbGFzc2VzLFxuICAgIG9uRm9jdXMsXG4gICAgb25CbHVyLFxuICAgIG9uQ2hhbmdlLFxuICAgIG9uU2VsZWN0LFxuICAgIHZhbGlkYXRlXG4gIH1cbn1cbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaCwgY29tcHV0ZWQgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyB1c2VDb2xvcnMsIGNvbG9yUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWxhYmVsJyxcbiAgcHJvcHM6IHtcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICBmb2N1c2VkOiBCb29sZWFuLFxuICAgIC4uLmNvbG9yUHJvcHMoKSxcbiAgfSxcbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSkge1xuICAgIGNvbnN0IHsgc2V0VGV4dENsYXNzTmFtZUNvbG9yLCBzZXRUZXh0Q3NzQ29sb3IgfSA9IHVzZUNvbG9ycygpXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1sYWJlbCc6IHRydWUsXG4gICAgICAndi1sYWJlbC0tZGlzYWJsZWQnOiBwcm9wcy5kaXNhYmxlZCxcbiAgICAgICd2LWxhYmVsLS1mb2N1c2VkJzogcHJvcHMuZm9jdXNlZCxcbiAgICAgIC4uLighcHJvcHMuZGlzYWJsZWQgPyBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgc3RyaW5nPj4oKCkgPT4gKHtcbiAgICAgIC4uLighcHJvcHMuZGlzYWJsZWQgPyBzZXRUZXh0Q3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgcmV0dXJuICgpID0+IGgoJ2xhYmVsJywge1xuICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgc3R5bGU6IHN0eWxlcy52YWx1ZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IHNsb3RzLmRlZmF1bHQ/LigpLFxuICAgICAgfSxcbiAgICApXG4gIH0sXG59KVxuIiwiaW1wb3J0IHsgY29tcHV0ZWQgfSBmcm9tICd2dWUnXG4vLyBpbXBvcnQgeyBzaXplcyB9IGZyb20gJy4uL3NlcnZpY2VzL3NpemUuc2VydmljZSdcblxuZXhwb3J0IGNvbnN0IHNpemVQcm9wcyA9IChkZWZhdWx0U2l6ZTogc3RyaW5nID0gJycpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBzbToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGRlZmF1bHRTaXplID09PSAnc20nLFxuICAgIH0sXG4gICAgbWQ6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBkZWZhdWx0U2l6ZSA9PT0gJ21kJyxcbiAgICB9LFxuICAgIGxnOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZGVmYXVsdFNpemUgPT09ICdsZycsXG4gICAgfSxcbiAgICB4bDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGRlZmF1bHRTaXplID09PSAneGwnLFxuICAgIH0sXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHVzZVNpemUgPSAocHJvcHMpID0+IHtcbiAgY29uc3Qgc2l6ZXMgPSBPYmplY3Qua2V5cyhzaXplUHJvcHMoKSlcblxuICBjb25zdCBzaXplID0gY29tcHV0ZWQ8c3RyaW5nPigoKSA9PiBzaXplcy5maW5kKChzKSA9PiBwcm9wc1tzXSkhKVxuXG4gIHJldHVybiB7XG4gICAgc2l6ZSxcbiAgfVxufVxuIiwiZXhwb3J0IGVudW0gc2l6ZXMge1xuICBzbSA9IDE2LFxuICBtZCA9IDIwLFxuICBsZyA9IDI0LFxuICB4bCA9IDMyXG59XG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGgsIGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuXG4vLyBDb21wb3NhYmxlXG5pbXBvcnQgeyB1c2VDb2xvcnMsIGNvbG9yUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG5pbXBvcnQgeyBzaXplUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1zaXplJ1xuXG4vLyBIZWxwZXJzXG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0IH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuXG4vLyBTZXJ2aWNlc1xuaW1wb3J0IHsgc2l6ZXMgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9zaXplcydcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtaWNvbicsXG5cbiAgcHJvcHM6IHtcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICBjbGlja2FibGU6IEJvb2xlYW4sXG4gICAgc2l6ZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICBpY29uOiBTdHJpbmcsXG4gICAgdGFnOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnaScsXG4gICAgfSxcbiAgICAuLi5jb2xvclByb3BzKCksXG4gICAgLi4uc2l6ZVByb3BzKCdzbScpLFxuICB9IGFzIGFueSxcblxuICBlbWl0czogWydjbGljayddLFxuXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzLCBlbWl0IH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3QgeyBzZXRUZXh0Q3NzQ29sb3IsIHNldFRleHRDbGFzc05hbWVDb2xvciB9ID0gdXNlQ29sb3JzKClcbiAgICBjb25zdCBpY29uVGFnID0gcHJvcHMuY2xpY2thYmxlID8gJ2J1dHRvbicgOiBwcm9wcy50YWdcblxuICAgIGNvbnN0IGNvbXB1dGVkSWNvbiA9IGNvbXB1dGVkPHN0cmluZz4oKCkgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgcHJvcHMuaWNvbiB8fFxuICAgICAgICAoc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KClbMF0uY2hpbGRyZW4pXG4gICAgICApPy50cmltKClcbiAgICB9KVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtaWNvbic6IHRydWUsXG4gICAgICAndi1pY29uLS1kaXNhYmxlZCc6IHByb3BzLmRpc2FibGVkLFxuICAgICAgJ3YtaWNvbi0tY2xpY2thYmxlJzogcHJvcHMuY2xpY2thYmxlLFxuICAgICAgW2NvbXB1dGVkSWNvbi52YWx1ZV06ICEhY29tcHV0ZWRJY29uLnZhbHVlLFxuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0VGV4dENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IHN0eWxlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIHN0cmluZz4+KCgpID0+ICh7XG4gICAgICBmb250U2l6ZTogZ2V0U2l6ZXMoKSxcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldFRleHRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBnZXRTaXplcyA9ICgpOiBzdHJpbmcgPT4ge1xuICAgICAgY29uc3Qgc2l6ZVByb3BzID0ge1xuICAgICAgICBzbTogcHJvcHMuc20sXG4gICAgICAgIG1kOiBwcm9wcy5tZCxcbiAgICAgICAgbGc6IHByb3BzLmxnLFxuICAgICAgICB4bDogcHJvcHMueGwsXG4gICAgICB9XG4gICAgICBjb25zdCBleHBsaWNpdFNpemUgPSBPYmplY3Qua2V5cyhzaXplUHJvcHMpLmZpbmQoKGtleSkgPT4gc2l6ZVByb3BzW2tleV0pIVxuXG4gICAgICByZXR1cm4gY29udmVydFRvVW5pdChwcm9wcy5zaXplIHx8IChleHBsaWNpdFNpemUgJiYgc2l6ZXNbZXhwbGljaXRTaXplXSkpIVxuICAgIH1cblxuICAgIGNvbnN0IG9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICBpZiAoIXByb3BzLmRpc2FibGVkICYmIHByb3BzLmNsaWNrYWJsZSkgZW1pdCgnY2xpY2snKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PlxuICAgICAgaChpY29uVGFnLCB7XG4gICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgICBzdHlsZTogc3R5bGVzLnZhbHVlLFxuICAgICAgICBvbkNsaWNrLFxuICAgICAgfSlcbiAgfSxcbn0pXG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQge1xuICBkZWZpbmVDb21wb25lbnQsXG4gIGgsXG4gIHdhdGNoLFxuICBpbmplY3QsXG4gIGNvbXB1dGVkLFxuICBvbkJlZm9yZU1vdW50LFxuICBvbkJlZm9yZVVubW91bnQsXG4gIFZOb2RlLFxufSBmcm9tICd2dWUnXG5cbi8vIENvbXBvc2FibGVcbmltcG9ydCB7IHZhbGlkYXRpb25Qcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXZhbGlkYXRpb24nXG5pbXBvcnQgeyB1c2VDb2xvcnMsIGNvbG9yUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG5pbXBvcnQgeyB1c2VJbnB1dFN0YXRlcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWlucHV0LXN0YXRlcydcbmltcG9ydCB7IHVzZVRyYW5zaXRpb24gfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS10cmFuc2l0aW9uJ1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWTGFiZWwgfSBmcm9tICcuLi9WTGFiZWwnXG5pbXBvcnQgeyBWSWNvbiB9IGZyb20gJy4uL1ZJY29uJ1xuXG5pbXBvcnQgeyBNYXliZSB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL2Jhc2UnXG5cbnR5cGUgRm9ybSA9IHtcbiAgYWRkOiAoaXRlbTogKHZhbD86IGFueSkgPT4gYm9vbGVhbiB8IHZvaWQpID0+IHZvaWRcbiAgcmVtb3ZlOiAoaXRlbTogKHZhbD86IGFueSkgPT4gYm9vbGVhbiB8IHZvaWQpID0+IHZvaWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtaW5wdXQnLFxuICBjb21wb25lbnRzOiB7XG4gICAgVkxhYmVsLFxuICAgIFZJY29uLFxuICB9LFxuICBpbmhlcml0QXR0cnM6IGZhbHNlLFxuICBwcm9wczoge1xuICAgIGxhYmVsOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJyxcbiAgICB9LFxuICAgIHByZXBlbmRJY29uOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJyxcbiAgICB9LFxuICAgIGFwcGVuZEljb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnLFxuICAgIH0sXG4gICAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gICAgZm9jdXNlZDogQm9vbGVhbixcbiAgICByZWFkb25seTogQm9vbGVhbixcbiAgICBmaWxlOiBCb29sZWFuLFxuICAgIGhpbnRzOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB9LFxuICAgIGhpbnRNZXNzYWdlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJyxcbiAgICB9LFxuICAgIHRleHRDb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJycsXG4gICAgfSxcbiAgICAuLi52YWxpZGF0aW9uUHJvcHMoKSxcbiAgICAuLi5jb2xvclByb3BzKCksXG4gIH0sXG5cbiAgc2V0dXAocHJvcHMsIHsgYXR0cnMsIGVtaXQsIHNsb3RzLCBleHBvc2UgfSkge1xuICAgIGNvbnN0IHsgc2V0VGV4dENzc0NvbG9yLCBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IgfSA9IHVzZUNvbG9ycygpXG4gICAgY29uc3Qge1xuICAgICAgaW5wdXRTdGF0ZSxcbiAgICAgIGVycm9yU3RhdGUsXG4gICAgICBpc0Rpc2FibGVkLFxuICAgICAgaXNSZWFkb25seSxcbiAgICAgIHN0YXRlQ2xhc3NlcyxcbiAgICAgIHZhbGlkYXRlLFxuICAgICAgb25Gb2N1cyxcbiAgICAgIG9uQmx1clxuICAgIH0gPSB1c2VJbnB1dFN0YXRlcyhwcm9wcywgeyBhdHRycywgZW1pdCB9KVxuXG4gICAgY29uc3QgZm9ybTogTWF5YmU8Rm9ybT4gPSBpbmplY3QoJ2Zvcm0nLCBudWxsIGFzIGFueSlcblxuICAgIGNvbnN0IHRleHRDbGFzc0NvbG9yID0gc2V0VGV4dENsYXNzTmFtZUNvbG9yKHByb3BzLnRleHRDb2xvcilcbiAgICBjb25zdCB0ZXh0Q3NzQ29sb3IgPSBzZXRUZXh0Q3NzQ29sb3IocHJvcHMudGV4dENvbG9yKVxuXG4gICAgY29uc3QgaGFzUHJlcGVuZEljb24gPSBjb21wdXRlZDxib29sZWFuPigoKSA9PiB7XG4gICAgICByZXR1cm4gISFwcm9wcy5wcmVwZW5kSWNvbiB8fCAhIXNsb3RzWydwcmVwZW5kLWljb24nXVxuICAgIH0pXG5cbiAgICBjb25zdCBoYXNBcHBlbmRJY29uID0gY29tcHV0ZWQ8Ym9vbGVhbj4oKCkgPT4ge1xuICAgICAgcmV0dXJuICEhcHJvcHMuYXBwZW5kSWNvbiB8fCAhIXNsb3RzWydhcHBlbmQtaWNvbiddXG4gICAgfSlcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LWlucHV0JzogdHJ1ZSxcbiAgICAgICd2LWlucHV0LS1mb2N1c2VkJzogaW5wdXRTdGF0ZS5mb2N1c2VkICYmICFpc1JlYWRvbmx5LnZhbHVlLFxuICAgICAgJ3YtaW5wdXQtLWRpc2FibGVkJzogaXNEaXNhYmxlZC52YWx1ZSxcbiAgICAgICd2LWlucHV0LS1yZWFkb25seSc6IGlzUmVhZG9ubHkudmFsdWUsXG4gICAgICAndi1pbnB1dC0tZmlsZSc6IHByb3BzLmZpbGUsXG4gICAgICAndi1pbnB1dC0taGFzLXByZXBlbmQtaWNvbic6IGhhc1ByZXBlbmRJY29uLnZhbHVlLFxuICAgICAgJ3YtaW5wdXQtLWhhcy1hcHBlbmQtaWNvbic6IGhhc0FwcGVuZEljb24udmFsdWUsXG4gICAgICAndi1pbnB1dC0tbm90LXZhbGlkJzogISFlcnJvclN0YXRlLmlubmVyRXJyb3IsXG4gICAgICAuLi5zdGF0ZUNsYXNzZXMudmFsdWUsXG4gICAgICAuLi4oIXByb3BzLmRpc2FibGVkICYmICFlcnJvclN0YXRlLmlubmVyRXJyb3IgPyBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgICAgLi4uKGF0dHJzLmNsYXNzIGFzIG9iamVjdCksXG4gICAgfSkpXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PigoKSA9PiAoe1xuICAgICAgLi4uKCFwcm9wcy5kaXNhYmxlZCAmJiAhZXJyb3JTdGF0ZS5pbm5lckVycm9yID8gc2V0VGV4dENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICAgIC4uLihhdHRycy5zdHlsZSBhcyBvYmplY3QpLFxuICAgIH0pKVxuXG4gICAgd2F0Y2goXG4gICAgICAoKSA9PiBwcm9wcy52YWx1ZSxcbiAgICAgICh0bykgPT4gaW5wdXRTdGF0ZS52YWx1ZSA9IHRvIGFzIHN0cmluZyxcbiAgICApXG5cbiAgICBjb25zdCBnZW5MYWJlbCA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICBjb25zdCBsYWJlbCA9IGgoVkxhYmVsLCB7XG4gICAgICAgICAgY2xhc3M6ICd2LWxhYmVsLS1vbi1pbnB1dCcsXG4gICAgICAgICAgZGlzYWJsZWQ6IGlzRGlzYWJsZWQudmFsdWUsXG4gICAgICAgICAgZm9jdXNlZDogaW5wdXRTdGF0ZS5mb2N1c2VkLFxuICAgICAgICAgIGNvbG9yOiAhZXJyb3JTdGF0ZS5pbm5lckVycm9yID8gcHJvcHMuY29sb3IgOiAnJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IHByb3BzLmxhYmVsLFxuICAgICAgICB9LFxuICAgICAgKVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgeyBjbGFzczogJ3YtaW5wdXRfX2xhYmVsJyB9LCBbbGFiZWxdKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkljb24gPSAoaWNvbk5hbWUsIGNsaWNrYWJsZSA9IGZhbHNlKTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoVkljb24sIHtcbiAgICAgICAgaWNvbjogaWNvbk5hbWUsXG4gICAgICAgIHNpemU6IDE2LFxuICAgICAgICBkaXNhYmxlZDogcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIGNsaWNrYWJsZSxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuUHJlcGVuZEljb24gPSAoKTogTWF5YmU8Vk5vZGU+ID0+IHtcbiAgICAgIGxldCBjb250ZW50XG5cbiAgICAgIGlmIChwcm9wcy5wcmVwZW5kSWNvbikge1xuICAgICAgICBjb250ZW50ID0gZ2VuSWNvbihwcm9wcy5wcmVwZW5kSWNvbilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRlbnQgPSBzbG90c1sncHJlcGVuZC1pY29uJ10/LigpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50ID9cbiAgICAgICAgaCgnZGl2JywgeyBjbGFzczogJ3YtaW5wdXRfX3ByZXBlbmQtaWNvbicgfSwgY29udGVudClcbiAgICAgICAgOiBudWxsXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQXBwZW5kSWNvbiA9ICgpOiBNYXliZTxWTm9kZT4gPT4ge1xuICAgICAgbGV0IGNvbnRlbnRcblxuICAgICAgaWYgKHByb3BzLmFwcGVuZEljb24pIHtcbiAgICAgICAgY29udGVudCA9IGdlbkljb24ocHJvcHMuYXBwZW5kSWNvbilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRlbnQgPSBzbG90c1snYXBwZW5kLWljb24nXT8uKClcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQgP1xuICAgICAgICBoKCdkaXYnLCB7IGNsYXNzOiAndi1pbnB1dF9fYXBwZW5kLWljb24nIH0sIGNvbnRlbnQpXG4gICAgICAgIDogbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IGdlblRleHRGaWVsZFNsb3QgPSAoKSA9PiB7XG4gICAgICBjb25zdCBwcmVwZW5kSWNvbkNvbnRlbnQgPSBnZW5QcmVwZW5kSWNvbigpXG4gICAgICBjb25zdCBhcHBlbmRJY29uQ29udGVudCA9IGdlbkFwcGVuZEljb24oKVxuICAgICAgY29uc3QgeyBkaXNhYmxlZCB9ID0gcHJvcHNcblxuICAgICAgY29uc3QgdGV4dEZpZWxkQ29udGVudCA9IHNsb3RzWyd0ZXh0LWZpZWxkJ10/Lih7XG4gICAgICAgIHRleHRDc3NDb2xvcixcbiAgICAgICAgdGV4dENsYXNzQ29sb3IsXG4gICAgICAgIGRpc2FibGVkLFxuICAgICAgfSlcblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHsgY2xhc3M6ICd2LWlucHV0X190ZXh0LWZpZWxkJyB9LFxuICAgICAgICBbcHJlcGVuZEljb25Db250ZW50LCB0ZXh0RmllbGRDb250ZW50LCBhcHBlbmRJY29uQ29udGVudF0sXG4gICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuSGludE1lc3NhZ2UgPSAoKTogTWF5YmU8Vk5vZGU+ID0+IHtcbiAgICAgIHJldHVybiAhIWVycm9yU3RhdGUuaW5uZXJFcnJvck1lc3NhZ2UgPyBoKFxuICAgICAgICAnc3BhbicsXG4gICAgICAgIHsgY2xhc3M6ICd2LWlucHV0X19oaW50cy1tZXNzYWdlJyB9LFxuICAgICAgICBbZXJyb3JTdGF0ZS5pbm5lckVycm9yTWVzc2FnZV0sXG4gICAgICApIDogbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IGdlbkhpbnRzID0gKCk6IE1heWJlPFZOb2RlPiA9PiB7XG4gICAgICByZXR1cm4gaChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgY2xhc3M6ICd2LWlucHV0X19oaW50cycgfSxcbiAgICAgICAgdXNlVHJhbnNpdGlvbihnZW5IaW50TWVzc2FnZSgpISwgJ2ZhZGUnKSxcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5TZWxlY3RTbG90ID0gKCk6IE1heWJlPFZOb2RlPiA9PiB7XG4gICAgICByZXR1cm4gc2xvdHMuc2VsZWN0ID9cbiAgICAgICAgaCgnZGl2JywgeyBjbGFzczogJ3YtaW5wdXRfX3NlbGVjdHMnIH0sIHNsb3RzLnNlbGVjdD8uKCkpXG4gICAgICAgIDogbnVsbFxuICAgIH1cblxuICAgIG9uQmVmb3JlTW91bnQoKCkgPT4ge1xuICAgICAgaWYgKHByb3BzLnJ1bGVzKSBmb3JtPy5hZGQodmFsaWRhdGUpXG4gICAgfSlcblxuICAgIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgICBmb3JtPy5yZW1vdmUodmFsaWRhdGUpXG4gICAgfSlcblxuICAgIGV4cG9zZSh7XG4gICAgICBvbkZvY3VzLFxuICAgICAgb25CbHVyLFxuICAgIH0pXG5cbiAgICByZXR1cm4gKCkgPT4gaCgnZGl2JywgeyBjbGFzczogY2xhc3Nlcy52YWx1ZSwgc3R5bGU6IHN0eWxlcy52YWx1ZSB9LFxuICAgICAgW1xuICAgICAgICBnZW5MYWJlbCgpLFxuICAgICAgICBnZW5UZXh0RmllbGRTbG90KCksXG4gICAgICAgIGdlbkhpbnRzKCksXG4gICAgICAgIGdlblNlbGVjdFNsb3QoKSxcbiAgICAgIF0sXG4gICAgKVxuICB9LFxufSlcbiIsIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaCwgY29tcHV0ZWQsIHJlZiB9IGZyb20gJ3Z1ZSdcbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZJbnB1dCB9IGZyb20gJy4uL1ZJbnB1dCdcbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VJbnB1dFN0YXRlcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWlucHV0LXN0YXRlcydcbmltcG9ydCB7IHZhbGlkYXRpb25Qcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXZhbGlkYXRpb24nXG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LXRleHQtZmllbGQnLFxuICBjb21wb25lbnRzOiB7XG4gICAgVklucHV0LFxuICB9LFxuICBpbmhlcml0QXR0cnM6IHRydWUsXG4gIHByb3BzOiB7XG4gICAgbW9kZWxWYWx1ZToge1xuICAgICAgdHlwZTogWyBTdHJpbmcsIE51bWJlciBdLFxuICAgICAgZGVmYXVsdDogJycsXG4gICAgfSxcbiAgICAuLi52YWxpZGF0aW9uUHJvcHMoKSxcbiAgfSxcbiAgZW1pdHM6IFsgJ3VwZGF0ZTptb2RlbFZhbHVlJywgJ2lucHV0JywgJ2JsdXInLCAnZm9jdXMnLCAnY2hhbmdlJyBdLFxuXG4gIHNldHVwKHByb3BzLCB7IGVtaXQsIGF0dHJzIH0pIHtcbiAgICBjb25zdCBpbnB1dFJlZiA9IHJlZihudWxsKVxuICAgIGNvbnN0IHtcbiAgICAgIGlzUmVhZG9ubHksXG4gICAgICBpc0Rpc2FibGVkLFxuICAgICAgb25DaGFuZ2VcbiAgICB9ID0gdXNlSW5wdXRTdGF0ZXMocHJvcHMsIHsgZW1pdCwgYXR0cnMgfSlcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LXRleHQtZmllbGQnOiB0cnVlLFxuICAgICAgJ3YtdGV4dC1maWVsZC0tZGlzYWJsZWQnOiBpc0Rpc2FibGVkLnZhbHVlLFxuICAgICAgJ3YtdGV4dC1maWVsZC0tcmVhZG9ubHknOiBpc1JlYWRvbmx5LnZhbHVlLFxuICAgIH0pKVxuXG4gICAgY29uc3QgY29tcHV0ZWRWYWx1ZSA9IGNvbXB1dGVkKHtcbiAgICAgIGdldDogKCkgPT4gcHJvcHMubW9kZWxWYWx1ZSxcblxuICAgICAgc2V0OiAodmFsOiBzdHJpbmcpID0+IHtcbiAgICAgICAgZW1pdCgnaW5wdXQnLCB2YWwpXG4gICAgICAgIGVtaXQoJ3VwZGF0ZTptb2RlbFZhbHVlJywgdmFsKVxuICAgICAgfSxcbiAgICB9KVxuXG4gICAgY29uc3Qgb25Gb2N1cyA9ICgpID0+IHtcbiAgICAgIChpbnB1dFJlZi52YWx1ZSBhcyBhbnkpIS5vbkZvY3VzKClcbiAgICB9XG5cbiAgICBjb25zdCBvbkJsdXIgPSAoKSA9PiB7XG4gICAgICAoaW5wdXRSZWYudmFsdWUgYXMgYW55KSEub25CbHVyKClcbiAgICB9XG5cbiAgICBjb25zdCBvbklucHV0ID0gKGUpID0+IHtcbiAgICAgIGNvbXB1dGVkVmFsdWUudmFsdWUgPSBlLnRhcmdldC52YWx1ZVxuICAgIH1cblxuICAgIGNvbnN0IGdlbklucHV0RmllbGQgPSAodGV4dENsYXNzQ29sb3IsIHRleHRDc3NDb2xvcikgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2lucHV0Jywge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LXRleHQtZmllbGRfX2lucHV0JzogdHJ1ZSxcbiAgICAgICAgICAuLi4oIWF0dHJzLmRpc2FibGVkICYmIHRleHRDbGFzc0NvbG9yKSxcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAuLi4oIWF0dHJzLmRpc2FibGVkID8gdGV4dENzc0NvbG9yIDoge30pLFxuICAgICAgICB9LFxuICAgICAgICBkaXNhYmxlZDogYXR0cnMuZGlzYWJsZWQsXG4gICAgICAgIHR5cGU6IGF0dHJzLnR5cGUgPyBhdHRycy50eXBlIDogJ3RleHQnLFxuICAgICAgICBwbGFjZWhvbGRlcjogYXR0cnMucGxhY2Vob2xkZXIsXG4gICAgICAgIHJlYWRvbmx5OiBhdHRycy5yZWFkb25seSxcbiAgICAgICAgdmFsdWU6IGNvbXB1dGVkVmFsdWUudmFsdWUsXG4gICAgICAgIG9uSW5wdXQsXG4gICAgICAgIG9uRm9jdXMsXG4gICAgICAgIG9uQmx1cixcbiAgICAgICAgb25DaGFuZ2UsXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlblRleHRGaWVsZFdyYXBwZXIgPSAoY2xzQ29sb3IsIGNzc0NvbG9yKSA9PiB7XG4gICAgICByZXR1cm4gaChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgZ2VuSW5wdXRGaWVsZChjbHNDb2xvciwgY3NzQ29sb3IpXG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IGgoVklucHV0LCB7XG4gICAgICB2YWx1ZTogY29tcHV0ZWRWYWx1ZS52YWx1ZSxcbiAgICAgIHJ1bGVzOiBwcm9wcy5ydWxlcyxcbiAgICAgIHJlZjogaW5wdXRSZWZcbiAgICB9LCB7XG4gICAgICBbJ3RleHQtZmllbGQnXTogKHsgdGV4dENsYXNzQ29sb3IsIHRleHRDc3NDb2xvciB9KSA9PiB7XG4gICAgICAgIHJldHVybiBnZW5UZXh0RmllbGRXcmFwcGVyKHRleHRDbGFzc0NvbG9yLCB0ZXh0Q3NzQ29sb3IpXG4gICAgICB9LFxuICAgIH0pXG4gIH0sXG59KVxuIiwiZXhwb3J0IGVudW0gRmFJY29ucyB7XG4gICRhZGQgPSAnZmFzIGZhLXBsdXMnLFxuICAkZGVsZXRlID0gJ2ZhcyBmYS10cmFzaC1hbHQnLFxuICAkc2xpZGVycyA9ICdmYXMgZmEtc2xpZGVycy1oJyxcbiAgJGVkaXQgPSAnZmFzIGZhLXBlbicsXG4gICRtZW51ID0gJ2ZhcyBmYS1iYXJzJyxcbiAgJGNoZXZyb25Eb3duID0gJ2ZhcyBmYS1jaGV2cm9uLWRvd24nLFxuICAkY2FyZXREb3duID0gJ2ZhcyBmYS1jYXJldC1kb3duJyxcbiAgJHJhZGlvT24gPSAnZmFyIGZhLWRvdC1jaXJjbGUnLFxuICAkcmFkaW9PZmYgPSAnZmFyIGZhLWNpcmNsZScsXG4gICRib3ggPSAnZmFyIGZhLXNxdWFyZScsXG4gICRjaGVja2JveCA9ICdmYXIgZmEtY2hlY2stc3F1YXJlJyxcbiAgJGFycm93UmlnaHQgPSAnZmFzIGZhLWNoZXZyb24tcmlnaHQnLFxuICAkYXJyb3dMZWZ0ID0gJ2ZhcyBmYS1jaGV2cm9uLWxlZnQnLFxuICAkYXJyb3dVcCA9ICdmYXMgZmEtYXJyb3ctdXAnLFxuICAkZmlsdGVyID0gJ2ZhcyBmYS1hbGlnbi1qdXN0aWZ5JyxcbiAgJG1hcmtlciA9ICdmYXMgZmEtbWFwLW1hcmtlci1hbHQnLFxuICAkc2VhcmNoID0gJ2ZhcyBmYS1zZWFyY2gnLFxuICAkY2xvc2UgPSAnZmFzIGZhLXRpbWVzJyxcbiAgJHBhcGVyY2xpcCA9ICdmYXMgZmEtcGFwZXJjbGlwJ1xufVxuXG5leHBvcnQgZW51bSBNYXRlcmlhbEljb25zIHtcbiAgJGFkZCA9ICdhZGQnLFxuICAkZGVsZXRlID0gJ2RlbGV0ZV9mb3JldmVyJyxcbiAgJHNsaWRlcnMgPSAnZmFzIGZhLXNsaWRlcnMtaCcsXG4gICRlZGl0ID0gJ2ZhcyBmYS1wZW4nLFxuICAkbWVudSA9ICdmYXMgZmEtYmFycycsXG4gICRleHBhbmQgPSAnZXhwYW5kX21vcmUnLFxuICAkZ3JvdXAgPSAnZXhwYW5kX21vcmUnLFxuICAkc3ViZ3JvdXAgPSAnYXJyb3dfZHJvcF9kb3duJyxcbiAgJGRyb3Bkb3duID0gJ2ZhcyBmYS1jYXJldC1kb3duJyxcbiAgJHJhZGlvT24gPSAnZmFyIGZhLWRvdC1jaXJjbGUnLFxuICAkcmFkaW9PZmYgPSAnZmFyIGZhLWNpcmNsZScsXG4gICRib3ggPSAnY2hlY2tfYm94JyxcbiAgJGNoZWNrYm94ID0gJ2NoZWNrX2JveF9vdXRsaW5lX2JsYW5rJyxcbiAgJGFycm93UmlnaHQgPSAnY2hldnJvbl9yaWdodCcsXG4gICRhcnJvd0xlZnQgPSAnY2hldnJvbl9sZWZ0JyxcbiAgJGFycm93VXAgPSAnYXJyb3dfdXB3YXJkJyxcbiAgJGZpbHRlciA9ICdmaWx0ZXJfbGlzdCcsXG4gICRtYXJrZXIgPSAnZmFzIGZhLW1hcC1tYXJrZXItYWx0JyxcbiAgJHNlYXJjaCA9ICdzZWFyY2gnLFxuICAkY2xvc2UgPSAnY2xlYXInLFxufVxuXG5leHBvcnQgZW51bSBNYXRlcmlhbFNpemVzIHtcbiAgJ3hzJyA9IDE0LFxuICAncycgPSAxOCxcbiAgJ21kJyA9IDIwLFxuICAnbCcgPSAyOCxcbiAgJ3hsJyA9IDM2XG59XG5cbmV4cG9ydCBlbnVtIEZhU2l6ZXMge1xuICAneHMnID0gMTIsXG4gICdzJyA9IDE0LFxuICAnbWQnID0gMTgsXG4gICdsJyA9IDI0LFxuICAneGwnID0gMzJcbn1cbiIsImltcG9ydCB7IGluamVjdCB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7XG4gIEZhSWNvbnMsXG4gIE1hdGVyaWFsSWNvbnMsXG59IGZyb20gJy4uL3NlcnZpY2VzL2ljb25zJ1xuaW1wb3J0IHsgTWF5YmUgfSBmcm9tICcuLi8uLi90eXBlcy9iYXNlJ1xuaW1wb3J0IHsgVXNlck9wdGlvbnMgfSBmcm9tICcuLi8uLi90eXBlcydcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUljb25zKCkge1xuICBjb25zdCBvcHRpb25zOiBNYXliZTxVc2VyT3B0aW9ucz4gPSBpbmplY3QoJyRvcHRpb25zJywgKCkgPT4gbnVsbCkgYXMgVXNlck9wdGlvbnNcblxuICBsZXQgaWNvbnM6IGFueSA9IEZhSWNvbnNcblxuICBpZiAob3B0aW9ucz8uaWNvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5pY29ucy5pbmNsdWRlcygnbWF0ZXJpYWwtaWNvbnMnKSkge1xuICAgICAgaWNvbnMgPSBNYXRlcmlhbEljb25zXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHsgaWNvbnMgfVxufVxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcblxuaW1wb3J0IHsgVkljb24gfSBmcm9tICcuLi9WSWNvbidcblxuaW1wb3J0IHsgdXNlQ29sb3JzLCBjb2xvclByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtY29sb3JzJ1xuaW1wb3J0IHsgdXNlSWNvbnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1pY29ucydcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtY2hpcCcsXG4gIHByb3BzOiB7XG4gICAgdGl0bGU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfSxcbiAgICB0ZXh0Q29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcjZmZmZmZmJ1xuICAgIH0sXG4gICAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gICAgY2xvc2FibGU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICAuLi5jb2xvclByb3BzKCdwcmltYXJ5JylcbiAgfSxcbiAgZW1pdHM6IFsgJ2Nsb3NlJywgJ2NsaWNrJyBdLFxuICBzZXR1cChwcm9wcywgeyBzbG90cywgZW1pdCB9KSB7XG4gICAgY29uc3Qge1xuICAgICAgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yLFxuICAgICAgc2V0QmFja2dyb3VuZENzc0NvbG9yLFxuICAgICAgc2V0VGV4dENzc0NvbG9yLFxuICAgICAgc2V0VGV4dENsYXNzTmFtZUNvbG9yXG4gICAgfSA9IHVzZUNvbG9ycygpXG4gICAgY29uc3QgeyBpY29ucyB9ID0gdXNlSWNvbnMoKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtY2hpcCc6IHRydWUsXG4gICAgICAndi1jaGlwLS1kaXNhYmxlZCc6IHByb3BzLmRpc2FibGVkLFxuICAgICAgLi4uKCFwcm9wcy5kaXNhYmxlZCA/IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgICAuLi5zZXRUZXh0Q2xhc3NOYW1lQ29sb3IocHJvcHMudGV4dENvbG9yKVxuICAgIH0pKVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgc3RyaW5nPj4oKCkgPT4gKHtcbiAgICAgIC4uLighcHJvcHMuZGlzYWJsZWQgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgICAgLi4uc2V0VGV4dENzc0NvbG9yKHByb3BzLnRleHRDb2xvcilcbiAgICB9KSlcblxuICAgIGNvbnN0IGdlbkNsb3NlSWNvbiA9ICgpID0+IHtcbiAgICAgIHJldHVybiBoKFZJY29uLCB7XG4gICAgICAgIGljb246IGljb25zLiRjbG9zZSxcbiAgICAgICAgY2xpY2thYmxlOiAhcHJvcHMuZGlzYWJsZWRcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuSWNvbldyYXBwZXIgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogJ3YtY2hpcF9faWNvbi13cmFwcGVyJyxcbiAgICAgICAgb25DbGljazogKCkgPT4gZW1pdCgnY2xvc2UnKVxuICAgICAgfSwgZ2VuQ2xvc2VJY29uKCkpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQ2hpcENvbnRlbnQgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogJ3YtY2hpcF9fY29udGVudCcsXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IGVtaXQoJ2NsaWNrJylcbiAgICAgIH0sIHNsb3RzLmRlZmF1bHQ/LigpIHx8IHByb3BzLnRpdGxlKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiBoKCdzcGFuJywge1xuICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICBzdHlsZTogc3R5bGVzLnZhbHVlXG4gICAgfSwgW1xuICAgICAgZ2VuQ2hpcENvbnRlbnQoKSxcbiAgICAgIHByb3BzLmNsb3NhYmxlID8gZ2VuSWNvbldyYXBwZXIoKSA6IG51bGxcbiAgICBdKVxuICB9XG59KVxuIiwiLy8gVnVlIEFQSVxuaW1wb3J0IHsgaCwgZGVmaW5lQ29tcG9uZW50LCByZWYsIGNvbXB1dGVkLCBQcm9wVHlwZSB9IGZyb20gJ3Z1ZSdcbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZJbnB1dCB9IGZyb20gJy4uL1ZJbnB1dCdcbmltcG9ydCB7IFZDaGlwIH0gZnJvbSAnLi4vVkNoaXAnXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlSWNvbnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1pY29ucydcbmltcG9ydCB7IHVzZUlucHV0U3RhdGVzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtaW5wdXQtc3RhdGVzJ1xuLy8gSGVscGVyc1xuaW1wb3J0IHsgdW5pcXVlQXJyYXkgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuLy8gVHlwZXNcbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvYmFzZSdcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtZmlsZS1pbnB1dCcsXG4gIHByb3BzOiB7XG4gICAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gICAgbXVsdGlwbGU6IEJvb2xlYW4sXG4gICAgY2hpcENvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAncHJpbWFyeScsXG4gICAgfSxcbiAgICB2YWx1ZToge1xuICAgICAgdHlwZTogQXJyYXkgYXMgUHJvcFR5cGU8QXJyYXk8RmlsZT4+LFxuICAgICAgZGVmYXVsdDogKCkgPT4gW10sXG4gICAgfSxcbiAgfSxcbiAgZW1pdHM6IFsndXBkYXRlOnZhbHVlJywgJ2RlbGV0ZSddLFxuICBzZXR1cChwcm9wcywgeyBlbWl0LCBhdHRycyB9KSB7XG4gICAgY29uc3QgeyBpY29ucyB9ID0gdXNlSWNvbnMoKVxuICAgIGNvbnN0IHsgaXNEaXNhYmxlZCwgaXNSZWFkb25seSB9ID0gdXNlSW5wdXRTdGF0ZXMocHJvcHMsIHsgZW1pdCwgYXR0cnMgfSlcblxuICAgIGNvbnN0IGlucHV0UmVmID0gcmVmPE1heWJlPEhUTUxJbnB1dEVsZW1lbnQ+PihudWxsKVxuICAgIGNvbnN0IHNyY1JlZiA9IHJlZjxNYXliZTxIVE1MRWxlbWVudD4+KG51bGwpXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgICd2LWZpbGUtaW5wdXQnOiB0cnVlLFxuICAgICAgJ3YtZmlsZS1pbnB1dC0tZGlzYWJsZWQnOiBpc0Rpc2FibGVkLnZhbHVlLFxuICAgICAgJ3YtZmlsZS1pbnB1dC0tcmVhZG9ubHknOiBpc1JlYWRvbmx5LnZhbHVlLFxuICAgICAgJ3YtZmlsZS1pbnB1dC0tbXVsdGlwbGUnOiBwcm9wcy5tdWx0aXBsZSxcbiAgICB9KSlcblxuICAgIGNvbnN0IG9uQ2hhbmdlID0gKGV2ZW50KSA9PiB7XG4gICAgICBsZXQgZmlsZXMgPSBBcnJheS5mcm9tKGV2ZW50LnRhcmdldC5maWxlcykgYXMgRmlsZVtdXG5cbiAgICAgIGlmIChwcm9wcy5tdWx0aXBsZSkge1xuICAgICAgICBmaWxlcyA9IHVuaXF1ZUFycmF5PEZpbGU+KHByb3BzLnZhbHVlLmNvbmNhdChmaWxlcykpXG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnRhcmdldC52YWx1ZSA9ICcnXG4gICAgICBlbWl0KCd1cGRhdGU6dmFsdWUnLCBmaWxlcylcbiAgICB9XG5cbiAgICBjb25zdCBvbkNsb3NlID0gKGZpbGUpID0+IHtcbiAgICAgIGNvbnN0IGZpbGVzID0gcHJvcHMudmFsdWUuZmlsdGVyKGl0ID0+IHtcbiAgICAgICAgcmV0dXJuIGZpbGUubmFtZSAhPT0gaXQubmFtZVxuICAgICAgfSlcblxuICAgICAgZW1pdCgndXBkYXRlOnZhbHVlJywgZmlsZXMpXG4gICAgICBlbWl0KCdkZWxldGUnLCBmaWxlKVxuICAgIH1cblxuICAgIGNvbnN0IG9uQ2xpY2sgPSAoeyBzcmNFbGVtZW50IH0pID0+IHtcbiAgICAgIGlmIChzcmNFbGVtZW50ICE9PSBzcmNSZWYudmFsdWUpIHJldHVyblxuICAgICAgaW5wdXRSZWYudmFsdWUhLmNsaWNrKClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5GaWxlSW5wdXQgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gaCgnaW5wdXQnLCB7XG4gICAgICAgIGNsYXNzOiAndi1maWxlLWlucHV0X19maWVsZCcsXG4gICAgICAgIHR5cGU6ICdmaWxlJyxcbiAgICAgICAgbXVsdGlwbGU6IHByb3BzLm11bHRpcGxlLFxuICAgICAgICByZWY6IGlucHV0UmVmLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nLFxuICAgICAgICB9LFxuICAgICAgICBvbkNoYW5nZSxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQ2hpcHMgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gdW5pcXVlQXJyYXk8RmlsZT4ocHJvcHMudmFsdWUpXG4gICAgICAgIC5tYXAoZmlsZSA9PiBoKFZDaGlwLCB7XG4gICAgICAgICAgICB0aXRsZTogZmlsZS5uYW1lLFxuICAgICAgICAgICAgY2xhc3M6ICdtYS0xJyxcbiAgICAgICAgICAgIGNvbG9yOiBwcm9wcy5jaGlwQ29sb3IsXG4gICAgICAgICAgICBvbkNsb3NlOiAoKSA9PiBvbkNsb3NlKGZpbGUpLFxuICAgICAgICAgIH0pLFxuICAgICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQ2hpcHNDb250YWluZXIgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogJ3YtZmlsZS1pbnB1dF9fY29udGFpbmVyJyxcbiAgICAgICAgcmVmOiBzcmNSZWYsXG4gICAgICB9LCBnZW5DaGlwcygpKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkNvbXBvbmVudCA9ICgpID0+IGgoJ2RpdicsIHtcbiAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgb25DbGljayxcbiAgICB9LCBbXG4gICAgICBnZW5GaWxlSW5wdXQoKSxcbiAgICAgIGdlbkNoaXBzQ29udGFpbmVyKCksXG4gICAgXSlcblxuICAgIHJldHVybiAoKSA9PiBoKFZJbnB1dCwge1xuICAgICAgcHJlcGVuZEljb246IGljb25zLiRwYXBlcmNsaXAsXG4gICAgICBmaWxlOiB0cnVlLFxuICAgICAgZGlzYWJsZWQ6IGlzRGlzYWJsZWQudmFsdWUsXG4gICAgfSwge1xuICAgICAgJ3RleHQtZmllbGQnOiAoKSA9PiBnZW5Db21wb25lbnQoKSxcbiAgICB9KVxuICB9LFxufSlcbiIsImltcG9ydCB7XG4gIGRlZmluZUNvbXBvbmVudCxcbiAgaCxcbiAgaW5qZWN0LFxuICByZWYsXG4gIGNvbXB1dGVkLFxuICBvbkJlZm9yZVVubW91bnQsXG4gIG9uQmVmb3JlTW91bnQsXG59IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IExpc3QgfSBmcm9tICcuLi8uLi8uLi90eXBlcy9jb21wb25lbnRzJ1xuaW1wb3J0IHsgTWF5YmUgfSBmcm9tICcuLi8uLi8uLi90eXBlcy9iYXNlJ1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1saXN0LWl0ZW0nLFxuICBlbWl0czogWydjbGljayddLFxuXG4gIHNldHVwKF8sIHsgZW1pdCwgc2xvdHMgfSkge1xuICAgIGNvbnN0IGl0ZW1SZWYgPSByZWY8TWF5YmU8SFRNTEVsZW1lbnQ+PihudWxsKVxuICAgIGNvbnN0IGlzQWN0aXZlID0gcmVmPGJvb2xlYW4+KGZhbHNlKVxuICAgIGNvbnN0IGxpc3Q6IExpc3QgPSBpbmplY3QoJ2xpc3QnLCBudWxsIGFzIGFueSlcblxuICAgIGNvbnN0IGl0ZW0gPSB7IGl0ZW1SZWYsIGlzQWN0aXZlIH1cblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LWxpc3QtaXRlbSc6IHRydWUsXG4gICAgICAndi1saXN0LWl0ZW0tLXNlbGVjdGVkJzogIWxpc3QuYWN0aXZlQ2xhc3MgJiYgaXNBY3RpdmUudmFsdWUsXG4gICAgICBbbGlzdD8uYWN0aXZlQ2xhc3NdOiBpc0FjdGl2ZS52YWx1ZSxcbiAgICB9KSlcblxuICAgIGNvbnN0IG9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICBsaXN0Py5jbGljayhpdGVtKVxuICAgICAgZW1pdCgnY2xpY2snKVxuICAgIH1cblxuICAgIG9uQmVmb3JlTW91bnQoKCkgPT4ge1xuICAgICAgbGlzdD8uYWRkKGl0ZW0pXG4gICAgfSlcblxuICAgIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgICBsaXN0Py5yZW1vdmUoaXRlbSlcbiAgICB9KVxuXG4gICAgcmV0dXJuICgpID0+XG4gICAgICBoKFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgICAgIHJlZjogaXRlbVJlZixcbiAgICAgICAgICBvbkNsaWNrLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KHsgYWN0aXZlOiBpc0FjdGl2ZSB9KSxcbiAgICAgICAgfSxcbiAgICAgIClcbiAgfSxcbn0pXG4iLCJpbXBvcnQgeyBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsIH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCgndi1saXN0LWl0ZW1fX3RpdGxlJylcbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaCwgcHJvdmlkZSwgd2F0Y2gsIHJlZiwgdG9SYXcsIGNvbXB1dGVkLCBvbk1vdW50ZWQgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyB1c2VDb2xvcnMsIGNvbG9yUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG5pbXBvcnQgeyBtYXBUb1ZhbEFycmF5IH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtbGlzdCcsXG4gIHByb3BzOiB7XG4gICAgdmFsdWU6IHtcbiAgICAgIHR5cGU6IFtOdW1iZXIsIEFycmF5XSxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgfSxcbiAgICBtdWx0aXBsZTogQm9vbGVhbixcbiAgICBhY3RpdmU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB9LFxuICAgIGFjdGl2ZUNsYXNzOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJyxcbiAgICB9LFxuICAgIHRleHRDb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJycsXG4gICAgfSxcbiAgICAuLi5jb2xvclByb3BzKCksXG4gIH0sXG4gIGVtaXRzOiBbJ3VwZGF0ZTp2YWx1ZSddLFxuICBzZXR1cChwcm9wcywgeyBlbWl0LCBzbG90cyB9KSB7XG4gICAgY29uc3Qge1xuICAgICAgc2V0VGV4dENsYXNzTmFtZUNvbG9yLFxuICAgICAgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yLFxuICAgICAgc2V0VGV4dENzc0NvbG9yLFxuICAgICAgc2V0QmFja2dyb3VuZENzc0NvbG9yLFxuICAgIH0gPSB1c2VDb2xvcnMoKVxuXG4gICAgY29uc3QgaXRlbXMgPSByZWY8TWFwPGFueSwgYW55Pj4obmV3IE1hcCgpKVxuICAgIGxldCBpc1RydXN0ZWRTZWxlY3QgPSBmYWxzZVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtbGlzdCc6IHRydWUsXG4gICAgICAndi1saXN0LS1hY3RpdmUnOiBwcm9wcy5hY3RpdmUsXG4gICAgICAuLi5zZXRUZXh0Q2xhc3NOYW1lQ29sb3IocHJvcHMudGV4dENvbG9yKSxcbiAgICAgIC4uLnNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvciksXG4gICAgfSkpXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PigoKSA9PiAoe1xuICAgICAgLi4uc2V0VGV4dENzc0NvbG9yKHByb3BzLnRleHRDb2xvciksXG4gICAgICAuLi5zZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMuY29sb3IpLFxuICAgIH0pKVxuXG4gICAgY29uc3QgcmVnaXN0ZXIgPSAoaXRlbSkgPT4ge1xuICAgICAgIWl0ZW1zLnZhbHVlLmhhcyhpdGVtKSAmJiBpdGVtcy52YWx1ZS5zZXQoaXRlbSwgaXRlbSlcbiAgICB9XG5cbiAgICBjb25zdCB1bnJlZ2lzdGVyID0gKGl0ZW0pID0+IHtcbiAgICAgIGl0ZW1zLnZhbHVlLmhhcyhpdGVtKSAmJiBpdGVtcy52YWx1ZS5kZWxldGUoaXRlbSlcbiAgICB9XG5cbiAgICBjb25zdCBkaXNwYXRjaEV2ZW50ID0gKHZhbCkgPT4ge1xuICAgICAgaXNUcnVzdGVkU2VsZWN0ID0gdHJ1ZVxuICAgICAgZW1pdCgndXBkYXRlOnZhbHVlJywgdmFsKVxuICAgIH1cblxuICAgIGNvbnN0IHNldEFjdGl2ZUl0ZW0gPSAoaXRlbSkgPT4ge1xuICAgICAgbWFwVG9WYWxBcnJheSh0b1JhdyhpdGVtcy52YWx1ZSkpLmZvckVhY2goKGl0KSA9PiB7XG4gICAgICAgIGl0LmlzQWN0aXZlLnZhbHVlID0gaXQgPT09IGl0ZW1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgdG9nZ2xlSXRlbSA9IChpdGVtKSA9PiB7XG4gICAgICBpdGVtLmlzQWN0aXZlLnZhbHVlID0gIWl0ZW0uaXNBY3RpdmUudmFsdWVcbiAgICB9XG5cbiAgICBjb25zdCBwcmVwYXJlSW5kZXhlcyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlcyA9IG1hcFRvVmFsQXJyYXkodG9SYXcoaXRlbXMudmFsdWUpKVxuICAgICAgY29uc3QgeyBtdWx0aXBsZSB9ID0gcHJvcHNcblxuICAgICAgbGV0IHZhbCA9IG11bHRpcGxlID8gW10gOiAwXG5cbiAgICAgIHZhbHVlcy5mb3JFYWNoKChpdCwgaSkgPT4ge1xuICAgICAgICBpZiAoaXQuaXNBY3RpdmUudmFsdWUpIHtcbiAgICAgICAgICBtdWx0aXBsZSAmJiAodmFsIGFzIG51bWJlcltdKS5wdXNoKGkpXG4gICAgICAgICAgIW11bHRpcGxlICYmICh2YWwgPSBpKVxuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICByZXR1cm4gdmFsXG4gICAgfVxuXG4gICAgY29uc3Qgb25DbGljayA9IChpdGVtKSA9PiB7XG4gICAgICBpZiAoIXByb3BzLmFjdGl2ZSkgcmV0dXJuXG5cbiAgICAgIHByb3BzLm11bHRpcGxlICYmIHRvZ2dsZUl0ZW0oaXRlbSlcbiAgICAgICFwcm9wcy5tdWx0aXBsZSAmJiBzZXRBY3RpdmVJdGVtKGl0ZW0pXG5cbiAgICAgIGRpc3BhdGNoRXZlbnQocHJlcGFyZUluZGV4ZXMoKSlcbiAgICB9XG5cbiAgICBjb25zdCBzZXRJdGVtU3RhdGUgPSAodmFsdWUpID0+IHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuIHNldEFjdGl2ZUl0ZW0odmFsdWUpXG4gICAgICBjb25zdCB2YWx1ZXMgPSBtYXBUb1ZhbEFycmF5KHRvUmF3KGl0ZW1zLnZhbHVlKSlcblxuICAgICAgaWYgKHZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHByb3BzLm11bHRpcGxlKSB7XG4gICAgICAgICAgOyh2YWx1ZSBhcyBudW1iZXJbXSkuZm9yRWFjaCgoaW5kKSA9PiB0b2dnbGVJdGVtKHZhbHVlc1tpbmRdKSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRBY3RpdmVJdGVtKHZhbHVlc1t2YWx1ZSBhcyBudW1iZXJdKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgd2F0Y2goKCkgPT4gcHJvcHMudmFsdWUsICh0bykgPT4ge1xuICAgICAgICBpZiAoIWlzVHJ1c3RlZFNlbGVjdCkgc2V0SXRlbVN0YXRlKHRvKVxuICAgICAgICBpc1RydXN0ZWRTZWxlY3QgJiYgKGlzVHJ1c3RlZFNlbGVjdCA9IGZhbHNlKVxuICAgICAgfSxcbiAgICApXG5cbiAgICAvLyB0aGlzIHBhcnQgaXMgZm9yIGZpeGluZ1xuICAgIC8vIGFzeW5jIGNvbXBvbmVudHMgbW91bnRpbmcgc2VxdWVuY2VcbiAgICBjb25zdCBzdG9wID0gd2F0Y2goaXRlbXMsICgpID0+IHtcbiAgICAgIHNldEl0ZW1TdGF0ZShwcm9wcy52YWx1ZSlcbiAgICAgIHN0b3AoKVxuICAgIH0sIHsgZGVlcDogdHJ1ZSB9KVxuXG4gICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgIHNldEl0ZW1TdGF0ZShwcm9wcy52YWx1ZSlcbiAgICB9KVxuXG4gICAgcHJvdmlkZSgnbGlzdCcsIHtcbiAgICAgIGFkZDogcmVnaXN0ZXIsXG4gICAgICByZW1vdmU6IHVucmVnaXN0ZXIsXG4gICAgICBjbGljazogb25DbGljayxcbiAgICAgIGFjdGl2ZUNsYXNzOiBwcm9wcy5hY3RpdmVDbGFzcyxcbiAgICB9KVxuXG4gICAgcmV0dXJuICgpID0+IGgoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgY2xhc3M6IGNsYXNzZXMudmFsdWUsIHN0eWxlOiBzdHlsZXMudmFsdWUgfSxcbiAgICAgIHsgZGVmYXVsdDogKCkgPT4gc2xvdHMuZGVmYXVsdD8uKCkgfSxcbiAgICApXG4gIH0sXG59KVxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZMaXN0LCBWTGlzdEl0ZW0sIFZMaXN0SXRlbVRpdGxlIH0gZnJvbSAnLi4vVkxpc3QnXG4vLyBIZWxwZXJzXG5pbXBvcnQgeyBnZXRTdHJpbmdLZXlzVmFsdWUgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuLy8gVHlwZXNcbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvYmFzZSdcblxuZXhwb3J0IGNvbnN0IFZTZWxlY3RMaXN0ID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3Ytc2VsZWN0LWxpc3QnLFxuICBwcm9wczoge1xuICAgIGl0ZW1zOiB7XG4gICAgICB0eXBlOiBBcnJheSxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgfSxcbiAgICBjb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJyNmZmZmZmYnLFxuICAgIH0sXG4gICAgdGV4dENvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJyxcbiAgICB9LFxuICAgIHZhbHVlS2V5OiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJyxcbiAgICB9LFxuICAgIHNlbGVjdGVkOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXIsIE9iamVjdF0sXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gICAgYWN0aXZlQ2xhc3M6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnLFxuICAgIH1cbiAgfSxcbiAgZW1pdHM6IFsnc2VsZWN0J10sXG4gIHNldHVwKHByb3BzLCB7IGVtaXQgfSkge1xuICAgIGNvbnN0IGNvbXB1dGVkU2VsZWN0ID0gY29tcHV0ZWQ8TWF5YmU8bnVtYmVyPj4oe1xuICAgICAgZ2V0KCkge1xuICAgICAgICBjb25zdCBrZXkgPSBwcm9wcy52YWx1ZUtleVxuXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkVmFsdWUgPSBrZXkgPyBwcm9wcy5zZWxlY3RlZCA/IGdldFN0cmluZ0tleXNWYWx1ZShcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgcHJvcHMuc2VsZWN0ZWQsXG4gICAgICAgICkgOiBudWxsIDogcHJvcHMuc2VsZWN0ZWRcblxuICAgICAgICByZXR1cm4gcHJvcHMuc2VsZWN0ZWQgPyBwcm9wcy5pdGVtcy5maW5kSW5kZXgoKGl0KSA9PiB7XG4gICAgICAgICAgY29uc3QgaXRlbVZhbHVlID0ga2V5ID8gZ2V0U3RyaW5nS2V5c1ZhbHVlKGtleSwgaXQpIDogaXRcblxuICAgICAgICAgIHJldHVybiBpdGVtVmFsdWUgPT09IHNlbGVjdGVkVmFsdWVcbiAgICAgICAgfSkgOiBudWxsXG4gICAgICB9LFxuXG4gICAgICBzZXQodmFsOiBudW1iZXIpIHtcbiAgICAgICAgZW1pdCgnc2VsZWN0JywgcHJvcHMuaXRlbXNbdmFsXSlcbiAgICAgIH0sXG4gICAgfSlcblxuICAgIGNvbnN0IGdlbkl0ZW1zID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLml0ZW1zLnJlZHVjZSgoYWNjLCBpdCwgaSkgPT4ge1xuICAgICAgICBjb25zdCBjb250ZW50ID0gcHJvcHMudmFsdWVLZXkgP1xuICAgICAgICAgIGdldFN0cmluZ0tleXNWYWx1ZShwcm9wcy52YWx1ZUtleSwgaXQpIDogaXQgYXMgYW55XG5cbiAgICAgICAgKGFjYyBhcyBhbnlbXSkucHVzaChcbiAgICAgICAgICBoKFZMaXN0SXRlbSwgeyBrZXk6IGkgfSwge1xuICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gaChWTGlzdEl0ZW1UaXRsZSwge30sIHtcbiAgICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gY29udGVudCxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pKVxuXG4gICAgICAgIHJldHVybiBhY2NcbiAgICAgIH0sIFtdKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkl0ZW1zTGlzdCA9ICgpID0+IHtcbiAgICAgIHJldHVybiBoKFZMaXN0LCB7XG4gICAgICAgIHZhbHVlOiBjb21wdXRlZFNlbGVjdC52YWx1ZSBhcyBudW1iZXIsXG4gICAgICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICAgICAgY29sb3I6ICcjZmZmZmZmJyxcbiAgICAgICAgYWN0aXZlQ2xhc3M6IHByb3BzLmFjdGl2ZUNsYXNzLFxuICAgICAgICBbJ29uVXBkYXRlOnZhbHVlJ106IHZhbCA9PiBjb21wdXRlZFNlbGVjdC52YWx1ZSA9IHZhbCxcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gZ2VuSXRlbXMoKSxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IGgoJ2RpdicsIHtcbiAgICAgIGNsYXNzOiAndi1zZWxlY3QtbGlzdCcsXG4gICAgfSwgW3Byb3BzLml0ZW1zID8gZ2VuSXRlbXNMaXN0KCkgOiBudWxsXSlcbiAgfSxcbn0pXG5cbiIsImltcG9ydCB7IGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQsIGgsIHJlZiwgVk5vZGUgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyB1c2VJbnB1dFN0YXRlcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWlucHV0LXN0YXRlcydcbmltcG9ydCB7IGdldFN0cmluZ0tleXNWYWx1ZSB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZJbnB1dCB9IGZyb20gJy4uL1ZJbnB1dCdcbmltcG9ydCB7IFZNZW51IH0gZnJvbSAnLi4vVk1lbnUnXG5pbXBvcnQgeyBWSWNvbiB9IGZyb20gJy4uL1ZJY29uJ1xuaW1wb3J0IHsgVlNlbGVjdExpc3QgfSBmcm9tICcuL1ZTZWxlY3RMaXN0J1xuaW1wb3J0IHsgVlByb2dyZXNzQ2lyY3VsYXIgfSBmcm9tICcuLi9WUHJvZ3Jlc3NDaXJjdWxhcidcblxuLy8gU2VydmljZXNcbmltcG9ydCB7IEZhSWNvbnMgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9pY29ucydcbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvYmFzZSdcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3Ytc2VsZWN0JyxcbiAgcHJvcHM6IHtcbiAgICBtb2RlbFZhbHVlOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXIsIE9iamVjdF0sXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gICAgaXRlbXM6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICB9LFxuICAgIHZhbHVlS2V5OiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJyxcbiAgICB9LFxuICAgIGFjdGl2ZUNsYXNzOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAncHJpbWFyeSB3aGl0ZS0tdGV4dCB0ZXh0LS1iYXNlJyxcbiAgICB9LFxuICAgIGxvYWRpbmc6IEJvb2xlYW4sXG4gIH0sXG4gIGVtaXRzOiBbJ2NsaWNrJywgJ2ZvY3VzJywgJ3NlbGVjdCcsICdibHVyJywgJ2NoYW5nZScsICd1cGRhdGU6bW9kZWxWYWx1ZSddLFxuICBzZXR1cChwcm9wcywgeyBhdHRycywgZW1pdCB9KSB7XG4gICAgY29uc3QgeyBpc0Rpc2FibGVkLCBpc1JlYWRvbmx5LCBpbnB1dFN0YXRlLCBvbkJsdXIsIG9uU2VsZWN0LCBvbkZvY3VzIH0gPVxuICAgICAgdXNlSW5wdXRTdGF0ZXMocHJvcHMsIHsgYXR0cnMsIGVtaXQgfSlcblxuICAgIGNvbnN0IGFjdGl2YXRvciA9IHJlZjxNYXliZTxIVE1MRWxlbWVudD4+KG51bGwpXG5cbiAgICBjb25zdCBjb21wdXRlZFZhbHVlID0gY29tcHV0ZWQ8c3RyaW5nIHwgbnVtYmVyPigoKSA9PiB7XG4gICAgICBpZiAoISFwcm9wcy5tb2RlbFZhbHVlICYmIHR5cGVvZiBwcm9wcy5tb2RlbFZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZ2V0U3RyaW5nS2V5c1ZhbHVlKHByb3BzLnZhbHVlS2V5LCBwcm9wcy5tb2RlbFZhbHVlKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvcHMubW9kZWxWYWx1ZVxuICAgIH0pXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1zZWxlY3QnOiB0cnVlLFxuICAgICAgJ3Ytc2VsZWN0LS1leHBhbmRlZCc6IGlucHV0U3RhdGUuZm9jdXNlZCxcbiAgICAgICd2LXNlbGVjdC0tcmVhZG9ubHknOiBpc1JlYWRvbmx5LnZhbHVlLFxuICAgICAgJ3Ytc2VsZWN0LS1kaXNhYmxlZCc6IGlzRGlzYWJsZWQudmFsdWUsXG4gICAgfSkpXG5cbiAgICBjb25zdCBnZW5JbnB1dCA9ICh7IHRleHRDc3NDb2xvciwgdGV4dENsYXNzQ29sb3IsIGRpc2FibGVkIH0pID0+IHtcbiAgICAgIHJldHVybiBoKCdpbnB1dCcsIHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1zZWxlY3RfX2lucHV0JzogdHJ1ZSxcbiAgICAgICAgICAuLi4oZGlzYWJsZWQgPyB0ZXh0Q2xhc3NDb2xvciA6IHt9KSxcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAuLi4oIWRpc2FibGVkID8gdGV4dENzc0NvbG9yIDoge30pLFxuICAgICAgICB9LFxuICAgICAgICBkaXNhYmxlZDogaXNEaXNhYmxlZC52YWx1ZSxcbiAgICAgICAgdHlwZTogYXR0cnMudHlwZSB8fCAndGV4dCcsXG4gICAgICAgIHBsYWNlaG9sZGVyOiBhdHRycy5wbGFjZWhvbGRlcixcbiAgICAgICAgdmFsdWU6IGNvbXB1dGVkVmFsdWUudmFsdWUsXG4gICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5MaXN0UHJlbG9hZGVyID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcbiAgICAgICAgY2xhc3M6ICd2LXNlbGVjdF9fcHJlbG9hZGVyJ1xuICAgICAgfSwgaChWUHJvZ3Jlc3NDaXJjdWxhciwge1xuICAgICAgICBpbmRldGVybWluYXRlOiB0cnVlLFxuICAgICAgICB3aWR0aDogMixcbiAgICAgICAgc2l6ZTogMzAsXG4gICAgICAgIGNvbG9yOiAoYXR0cnMuY29sb3IgfHwgJ3ByaW1hcnknKSBhcyBzdHJpbmdcbiAgICAgIH0pKVxuICAgIH1cblxuICAgIGNvbnN0IGdlblNlbGVjdExpc3QgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoVk1lbnUsIHtcbiAgICAgICAgaW50ZXJuYWxBY3RpdmF0b3I6IHRydWUsXG4gICAgICAgIGFjdGl2YXRvcjogYWN0aXZhdG9yLnZhbHVlISxcbiAgICAgICAgaW5wdXRBY3RpdmF0b3I6ICcudi1pbnB1dF9fdGV4dC1maWVsZCcsXG4gICAgICAgIG9wZW5PbkNsaWNrOiB0cnVlLFxuICAgICAgICBtYXhIZWlnaHQ6IDI0MCxcbiAgICAgICAgekluZGV4OiAxMixcbiAgICAgICAgb25TaG93OiBvbkZvY3VzLFxuICAgICAgICBvbkhpZGU6IG9uQmx1cixcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gcHJvcHMubG9hZGluZyA/IGdlbkxpc3RQcmVsb2FkZXIoKSA6IGgoVlNlbGVjdExpc3QsIHtcbiAgICAgICAgICBpdGVtczogcHJvcHMuaXRlbXMsXG4gICAgICAgICAgc2VsZWN0ZWQ6IHByb3BzLm1vZGVsVmFsdWUsXG4gICAgICAgICAgdmFsdWVLZXk6IHByb3BzLnZhbHVlS2V5LFxuICAgICAgICAgIGFjdGl2ZUNsYXNzOiBwcm9wcy5hY3RpdmVDbGFzcyxcbiAgICAgICAgICBvblNlbGVjdCxcbiAgICAgICAgfSksXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkV4cGFuZEljb24gPSAoKTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoVkljb24sIHtcbiAgICAgICAgaWNvbjogRmFJY29ucy4kY2hldnJvbkRvd24sXG4gICAgICAgIGNvbG9yOiAhaXNEaXNhYmxlZC52YWx1ZSA/IGF0dHJzLmNvbG9yIDogJycsXG4gICAgICAgIHNpemU6IDE2LFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5TZWxlY3QgPSAoeyB0ZXh0Q3NzQ29sb3IsIHRleHRDbGFzc0NvbG9yLCBkaXNhYmxlZCB9KSA9PiB7XG4gICAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgIH0sIGdlbklucHV0KHsgdGV4dENzc0NvbG9yLCB0ZXh0Q2xhc3NDb2xvciwgZGlzYWJsZWQgfSkpXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IGgoVklucHV0LCB7XG4gICAgICByZWY6IGFjdGl2YXRvcixcbiAgICAgIHZhbHVlOiBjb21wdXRlZFZhbHVlLnZhbHVlLFxuICAgICAgZm9jdXNlZDogaW5wdXRTdGF0ZS5mb2N1c2VkLFxuICAgIH0sIHtcbiAgICAgIFsndGV4dC1maWVsZCddOiAoeyB0ZXh0Q3NzQ29sb3IsIHRleHRDbGFzc0NvbG9yLCBkaXNhYmxlZCB9KSA9PiB7XG4gICAgICAgIHJldHVybiBnZW5TZWxlY3QoeyB0ZXh0Q3NzQ29sb3IsIHRleHRDbGFzc0NvbG9yLCBkaXNhYmxlZCB9KVxuICAgICAgfSxcbiAgICAgIFsnYXBwZW5kLWljb24nXTogKCkgPT4gZ2VuRXhwYW5kSWNvbigpLFxuICAgICAgc2VsZWN0OiAoKSA9PiBhY3RpdmF0b3IudmFsdWU/IGdlblNlbGVjdExpc3QoKSA6IG51bGwsXG4gICAgfSlcbiAgfSxcbn0pXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIHByb3ZpZGUsIGggfSBmcm9tICd2dWUnXG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWZvcm0nLFxuICBzZXR1cChfLCB7IHNsb3RzIH0pIHtcbiAgICBsZXQgZmllbGRzOiBBcnJheTwoLi4uYXJnczogYW55KSA9PiBQcm9taXNlPGJvb2xlYW4+PiA9IFtdXG5cbiAgICBjb25zdCBhZGRGaWVsZFZhbGlkYXRvciA9IChpdGVtKSA9PiB7XG4gICAgICBmaWVsZHMucHVzaChpdGVtKVxuICAgIH1cblxuICAgIGNvbnN0IHJlbW92ZUZpZWxkVmFsaWRhdG9yID0gKGl0ZW0pID0+IHtcbiAgICAgIGZpZWxkcyA9IGZpZWxkcy5maWx0ZXIoKHYpID0+IHYgIT09IGl0ZW0pXG4gICAgfVxuXG4gICAgcHJvdmlkZSgnZm9ybScsIHtcbiAgICAgIGFkZDogYWRkRmllbGRWYWxpZGF0b3IsXG4gICAgICByZW1vdmU6IHJlbW92ZUZpZWxkVmFsaWRhdG9yLFxuICAgIH0pXG5cbiAgICBjb25zdCB2YWxpZGF0ZSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHByb21pc2VzOiBBcnJheTxQcm9taXNlPGJvb2xlYW4+PiA9IFtdXG5cbiAgICAgIGZpZWxkcy5mb3JFYWNoKCh2OiAoLi4uYXJnczogYW55KSA9PiBQcm9taXNlPGJvb2xlYW4+KSA9PiB7XG4gICAgICAgIHByb21pc2VzLnB1c2godigpKVxuICAgICAgfSlcblxuICAgICAgcmV0dXJuICFwcm9taXNlcy5zb21lKChmKSA9PiAhZikgPyBQcm9taXNlLnJlc29sdmUoKSA6IFByb21pc2UucmVqZWN0KClcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4gaCgnZm9ybScsIHtcbiAgICAgICAgY2xhc3M6ICd2LWZvcm0nLFxuICAgICAgICBvblN1Ym1pdDogKGUpID0+IGUucHJldmVudERlZmF1bHQoKSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IHNsb3RzLmRlZmF1bHQgJiYgc2xvdHMuZGVmYXVsdCh7IHZhbGlkYXRlIH0pLFxuICAgICAgfSxcbiAgICApXG4gIH0sXG59KVxuIiwiLy8gVnVlIEFQSVxuaW1wb3J0IHsgdlNob3csIGgsIGNvbXB1dGVkLCB3aXRoRGlyZWN0aXZlcywgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJ1xuXG4vLyBFZmZlY3RzXG5pbXBvcnQgeyBwb3NpdGlvblByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtcG9zaXRpb24nXG5pbXBvcnQgeyB1c2VDb2xvcnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG5pbXBvcnQgeyB1c2VUb2dnbGUgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS10b2dnbGUnXG5pbXBvcnQgeyB1c2VFbGV2YXRpb24sIGVsZXZhdGlvblByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtZWxldmF0aW9uJ1xuaW1wb3J0IHsgdXNlVHJhbnNpdGlvbiB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXRyYW5zaXRpb24nXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvYmFzZSdcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtYmFkZ2UnLFxuXG4gIHByb3BzOiB7XG4gICAgZG90OiBCb29sZWFuLFxuICAgIGF2YXRhcjogQm9vbGVhbixcbiAgICBib3JkZXI6IEJvb2xlYW4sXG4gICAgdG9nZ2xlOiBCb29sZWFuLFxuICAgIGNvbnRlbnQ6IHtcbiAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICB9LFxuICAgIGNvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAncHJpbWFyeScsXG4gICAgfSxcbiAgICB0cmFuc2l0aW9uOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnc2NhbGVJbicsXG4gICAgfSxcbiAgICBvZmZzZXRZOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogMFxuICAgIH0sXG4gICAgb2Zmc2V0WDoge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IDBcbiAgICB9LFxuICAgIC4uLnBvc2l0aW9uUHJvcHMoKSxcbiAgICAuLi5lbGV2YXRpb25Qcm9wcygpLFxuICB9IGFzIGFueSxcblxuICBzZXR1cChwcm9wcywgeyBzbG90cyB9KTogKCkgPT4gVk5vZGUge1xuICAgIGNvbnN0IHsgZWxldmF0aW9uQ2xhc3NlcyB9ID0gdXNlRWxldmF0aW9uKHByb3BzKVxuICAgIGNvbnN0IHsgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yLCBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IgfSA9IHVzZUNvbG9ycygpXG5cbiAgICBjb25zdCBvZmZzZXQgPSBjb21wdXRlZDxudW1iZXI+KCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5kb3QgPyA0IDogMTJcbiAgICB9KVxuXG4gICAgY29uc3QgY2FsY1Bvc2l0aW9uID0gKG9mZnNldFZhbDogc3RyaW5nIHwgbnVtYmVyID0gMCk6IHN0cmluZyA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG9mZnNldC52YWx1ZSAtIE51bWJlcihvZmZzZXRWYWwpXG4gICAgICByZXR1cm4gYCR7dmFsdWV9cHhgXG4gICAgfVxuXG4gICAgY29uc3QgY29tcHV0ZWRMZWZ0ID0gY29tcHV0ZWQ8c3RyaW5nIHwgYm9vbGVhbj4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLmxlZnQgJiYgY2FsY1Bvc2l0aW9uKHByb3BzLm9mZnNldFgpXG4gICAgfSlcblxuICAgIGNvbnN0IGNvbXB1dGVkUmlnaHQgPSBjb21wdXRlZDxzdHJpbmcgfCBib29sZWFuPigoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMucmlnaHQgJiYgY2FsY1Bvc2l0aW9uKHByb3BzLm9mZnNldFgpXG4gICAgfSlcblxuICAgIGNvbnN0IGNvbXB1dGVkVG9wID0gY29tcHV0ZWQ8c3RyaW5nIHwgYm9vbGVhbj4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLnRvcCAmJiBjYWxjUG9zaXRpb24ocHJvcHMub2Zmc2V0WSlcbiAgICB9KVxuXG4gICAgY29uc3QgY29tcHV0ZWRCb3R0b20gPSBjb21wdXRlZDxzdHJpbmcgfCBib29sZWFuPigoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMuYm90dG9tICYmIGNhbGNQb3NpdGlvbihwcm9wcy5vZmZzZXRZKVxuICAgIH0pXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1iYWRnZSc6IHRydWUsXG4gICAgICAndi1iYWRnZS0tYm9yZGVyJzogcHJvcHMuYm9yZGVyLFxuICAgICAgJ3YtYmFkZ2UtLWRvdCc6IHByb3BzLmRvdCxcbiAgICAgICd2LWJhZGdlLS1hdmF0YXInOiBwcm9wcy5hdmF0YXIsXG4gICAgfSkpXG5cbiAgICBjb25zdCBiYWRnZUNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LWJhZGdlX19iYWRnZSc6IHRydWUsXG4gICAgICAuLi5lbGV2YXRpb25DbGFzc2VzLnZhbHVlLFxuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IHN0eWxlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgdG9wOiBjb21wdXRlZFRvcC52YWx1ZSxcbiAgICAgIHJpZ2h0OiBjb21wdXRlZFJpZ2h0LnZhbHVlLFxuICAgICAgYm90dG9tOiBjb21wdXRlZEJvdHRvbS52YWx1ZSxcbiAgICAgIGxlZnQ6IGNvbXB1dGVkTGVmdC52YWx1ZSxcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBhZGRDb250ZW50ID0gKCk6IHN0cmluZyB8IHVuZGVmaW5lZCA9PiB7XG4gICAgICBpZiAocHJvcHMuZG90KSByZXR1cm4gdW5kZWZpbmVkXG4gICAgICBpZiAocHJvcHMuY29udGVudCkgcmV0dXJuIFN0cmluZyhwcm9wcy5jb250ZW50KVxuXG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQmFkZ2VTbG90ID0gKCk6IE1heWJlPFZOb2RlPiA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgJ3YtYmFkZ2VfX2JhZGdlLXNsb3QnOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2xvdHMuYmFkZ2UgPyBoKCdkaXYnLCBwcm9wc0RhdGEsIHNsb3RzLmJhZGdlKCkpIDogbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IGdlbkNvbnRlbnQgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LWJhZGdlX19jb250ZW50JzogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgW2FkZENvbnRlbnQoKSwgZ2VuQmFkZ2VTbG90KCldKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkJhZGdlID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzOiBiYWRnZUNsYXNzZXMudmFsdWUsXG4gICAgICAgICAgc3R5bGU6IHN0eWxlcy52YWx1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgZ2VuQ29udGVudCgpXG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGxldCBiYWRnZSA9IGdlbkJhZGdlKClcblxuICAgICAgaWYgKHByb3BzLnRvZ2dsZSAmJiAhc2xvdHMuYmFkZ2UpIHtcbiAgICAgICAgY29uc3QgeyBpc0FjdGl2ZSB9ID0gdXNlVG9nZ2xlKHByb3BzLCAnY29udGVudCcpXG4gICAgICAgIGJhZGdlID0gd2l0aERpcmVjdGl2ZXMoYmFkZ2UsIFtbdlNob3csIGlzQWN0aXZlLnZhbHVlXV0pXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gW1xuICAgICAgICB1c2VUcmFuc2l0aW9uKGJhZGdlLCBwcm9wcy50cmFuc2l0aW9uKSxcbiAgICAgICAgc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCksXG4gICAgICBdXG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIGNoaWxkcmVuKVxuICAgIH1cbiAgfSxcbn0pXG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyBoLCB3aXRoQ3R4LCBjcmVhdGVCbG9jaywgVHJhbnNpdGlvbiB9IGZyb20gJ3Z1ZSdcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbihcbiAgaG9va3M6IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gIG1vZGU6IHN0cmluZyA9ICdpbi1vdXQnXG4pIHtcbiAgcmV0dXJuICh2Tm9kZTogVk5vZGUpID0+IHtcbiAgICByZXR1cm4gY3JlYXRlQmxvY2soXG4gICAgICBUcmFuc2l0aW9uLFxuICAgICAge1xuICAgICAgICBtb2RlLFxuICAgICAgICAuLi5ob29rcyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGRlZmF1bHQ6IHdpdGhDdHgoKCkgPT4gWyB2Tm9kZSAmJiBoKHZOb2RlKSBdKSxcbiAgICAgIH1cbiAgICApXG4gIH1cbn1cbiIsImludGVyZmFjZSBJbml0aWFsU3R5bGVzIHtcbiAgdHJhbnNpdGlvbjogc3RyaW5nIHwgbnVsbDtcbiAgcHJvcFNpemU6IHN0cmluZztcbiAgaGVpZ2h0PzogbnVtYmVyO1xuICB3aWR0aD86IG51bWJlcjtcbn1cblxuY29uc3QgaW5pdDogSW5pdGlhbFN0eWxlcyA9IHtcbiAgdHJhbnNpdGlvbjogbnVsbCxcbiAgcHJvcFNpemU6ICcnLFxuICBoZWlnaHQ6IDAsXG4gIHdpZHRoOiAwXG59XG5cbmNvbnN0IFBSSU1BUllfVFJBTlNJVElPTiA9ICdjdWJpYy1iZXppZXIoLjI1LCAuOCwgLjUsIDEpJ1xuXG5jb25zdCByZXNldFN0eWxlcyA9IChlbCkgPT4ge1xuICBlbC5zdHlsZVtpbml0LnByb3BTaXplXSA9ICcnXG4gIGVsLnN0eWxlLnRyYW5zaXRpb24gPSAnJ1xufVxuXG5jb25zdCBnZXRDaGlsZHJlblNpemVzID0gKGVsKSA9PiB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUucmVkdWNlLmNhbGwoXG4gICAgZWwuY2hpbGRyZW4sXG4gICAgKGFjYzogbnVtYmVyLCBpdDogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgIGNvbnN0IHNpemUgPSBnZXRDb21wdXRlZFN0eWxlKGl0KVtpbml0LnByb3BTaXplXVxuXG4gICAgICByZXR1cm4gKGFjYyArPSBwYXJzZUZsb2F0KHNpemUpKVxuICAgIH0sIDApIGFzIG51bWJlclxufVxuXG5jb25zdCBzZXRJbml0U3R5bGVzID0gKGVsLHgpID0+IHtcbiAgaW5pdC5wcm9wU2l6ZSA9IHggPyAnd2lkdGgnIDogJ2hlaWdodCdcbiAgaW5pdC50cmFuc2l0aW9uID0gZ2V0Q29tcHV0ZWRTdHlsZShlbCkudHJhbnNpdGlvblxuICBpbml0W2luaXQucHJvcFNpemVdID0gZ2V0Q2hpbGRyZW5TaXplcyhlbClcbn1cblxuZXhwb3J0IGNvbnN0IGV4cGFuZEhvb2tzID0gKFxuICBleHBhbmRlZFBhcmVudENsYXNzOiBzdHJpbmcsXG4gIHg6IGJvb2xlYW4gPSBmYWxzZVxuKSA9PiB7XG4gIHJldHVybiB7XG4gICAgb25CZWZvcmVFbnRlcihlbCkge1xuICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbiA9ICcnXG4gICAgfSxcblxuICAgIG9uRW50ZXIoZWwpIHtcbiAgICAgIHNldEluaXRTdHlsZXMoZWwsIHgpXG4gICAgICBlbC5zdHlsZVtpbml0LnByb3BTaXplXSA9ICcwJ1xuICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbiA9IGAuMnMgJHsgaW5pdC5wcm9wU2l6ZSB9ICR7IFBSSU1BUllfVFJBTlNJVElPTiB9YFxuXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBlbC5zdHlsZVtpbml0LnByb3BTaXplXSA9IGAkeyBpbml0W2luaXQucHJvcFNpemVdIH1weGBcbiAgICAgIH0pXG5cbiAgICAgIGlmIChleHBhbmRlZFBhcmVudENsYXNzKSB7XG4gICAgICAgIGVsLnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZChleHBhbmRlZFBhcmVudENsYXNzKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBvbkFmdGVyRW50ZXIoZWwpIHtcbiAgICAgIGVsLnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZShleHBhbmRlZFBhcmVudENsYXNzKVxuICAgICAgcmVzZXRTdHlsZXMoZWwpXG4gICAgfSxcblxuICAgIG9uQmVmb3JlTGVhdmUoZWwpIHtcbiAgICAgIHNldEluaXRTdHlsZXMoZWwsIHgpXG4gICAgfSxcblxuICAgIG9uTGVhdmUoZWwpIHtcbiAgICAgIHNldEluaXRTdHlsZXMoZWwsIHgpXG5cbiAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb24gPSBgLjJzICR7IGluaXQucHJvcFNpemUgfSAkeyBQUklNQVJZX1RSQU5TSVRJT04gfWBcbiAgICAgIGVsLnN0eWxlW2luaXQucHJvcFNpemVdID0gYCR7IGluaXRbaW5pdC5wcm9wU2l6ZV0gfXB4YFxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IChlbC5zdHlsZVtpbml0LnByb3BTaXplXSA9ICcwJykpXG4gICAgfSxcblxuICAgIG9uQWZ0ZXJMZWF2ZShlbCkge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHJlc2V0U3R5bGVzKGVsKSlcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IGNyZWF0ZVRyYW5zaXRpb24gfSBmcm9tICcuL2hlbHBlcnMnXG5cbmltcG9ydCB7IGV4cGFuZEhvb2tzIH0gZnJvbSAnLi9leHBhbmQtdHJhbnNpdGlvbidcblxuZXhwb3J0IGNvbnN0IEV4cGFuZFRyYW5zaXRpb24gPSBjcmVhdGVUcmFuc2l0aW9uKGV4cGFuZEhvb2tzKCdleHBhbmQtdHJhbnNpdGlvbicpKVxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoLCB3aXRoRGlyZWN0aXZlcywgcmVmLCB3YXRjaCwgY29tcHV0ZWQsIHZTaG93LCBWTm9kZSB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IEV4cGFuZFRyYW5zaXRpb24gfSBmcm9tICcuLi90cmFuc2l0aW9ucydcblxuaW1wb3J0IHsgVkljb24gfSBmcm9tICcuLi9WSWNvbidcblxuaW1wb3J0IHsgdXNlQ29sb3JzLCBjb2xvclByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtY29sb3JzJ1xuaW1wb3J0IHsgdXNlSWNvbnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1pY29ucydcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtZ3JvdXAnLFxuICBwcm9wczoge1xuICAgIGV4cGFuZDogQm9vbGVhbixcbiAgICBzdWJncm91cDogQm9vbGVhbixcbiAgICB0aXRsZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJycsXG4gICAgfSxcbiAgICBhY3RpdmVDbGFzczoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJycsXG4gICAgfSxcbiAgICBwcmVwZW5kSWNvbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJycsXG4gICAgfSxcbiAgICBhcHBlbmRJY29uOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJyxcbiAgICB9LFxuICAgIC4uLmNvbG9yUHJvcHMoKSxcbiAgfSxcbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSk6ICgpID0+IFZOb2RlIHtcbiAgICBjb25zdCB7IGljb25zIH0gPSB1c2VJY29ucygpXG4gICAgY29uc3QgeyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IsIHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvciB9ID0gdXNlQ29sb3JzKClcblxuICAgIGNvbnN0IGlzQWN0aXZlID0gcmVmPGJvb2xlYW4+KGZhbHNlKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtZ3JvdXAnOiB0cnVlLFxuICAgICAgJ3YtZ3JvdXAtLXN1Ymdyb3VwJzogcHJvcHMuc3ViZ3JvdXAsXG4gICAgICAndi1ncm91cC0tYWN0aXZlJzogaXNBY3RpdmUudmFsdWUsXG4gICAgICAndi1ncm91cC0tZGVmYXVsdCc6ICFpc0FjdGl2ZS52YWx1ZSxcbiAgICAgIFtwcm9wcy5hY3RpdmVDbGFzc106ICEhcHJvcHMuYWN0aXZlQ2xhc3MgJiYgaXNBY3RpdmUudmFsdWUsXG4gICAgICAuLi5zZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpLFxuICAgIH0pKVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgIC4uLnNldEJhY2tncm91bmRDc3NDb2xvcihwcm9wcy5jb2xvciksXG4gICAgfSkpXG5cbiAgICBjb25zdCBnZW5IZWFkZXJDb250ZW50ID0gKCkgPT4ge1xuICAgICAgY29uc3QgY29udGVudDogYW55ID0gcHJvcHMudGl0bGUgfHwgc2xvdHMuaGVhZGVyPy4oKVxuXG4gICAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogJ3YtZ3JvdXBfX2hlYWRlci1jb250ZW50JyxcbiAgICAgIH0sIGNvbnRlbnQpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuRXhwYW5kSWNvbiA9IChpY29uOiBWTm9kZSk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzOiAndi1ncm91cF9fZXhwYW5kLWljb24nLFxuICAgICAgfSwgaWNvbilcbiAgICB9XG5cbiAgICBjb25zdCBnZW5TdWJFeHBhbmRJY29uID0gKGljb246IFZOb2RlKTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcbiAgICAgICAgY2xhc3M6ICd2LWdyb3VwX19zdWItZXhwYW5kLWljb24nLFxuICAgICAgfSwgaWNvbilcbiAgICB9XG5cbiAgICBjb25zdCBnZW5QcmVwZW5kSWNvbiA9IChpY29uOiBWTm9kZSk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzOiAndi1ncm91cF9fcHJlcGVuZC1pY29uJyxcbiAgICAgIH0sIGljb24pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQXBwZW5kSWNvbiA9IChpY29uOiBWTm9kZSk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzOiAndi1ncm91cF9fYXBwZW5kLWljb24nLFxuICAgICAgfSwgaWNvbilcbiAgICB9XG5cbiAgICBjb25zdCBnZW5JY29uID0gKGljb25OYW1lOiBzdHJpbmcpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaChWSWNvbiwge1xuICAgICAgICBpY29uOiBpY29uTmFtZSxcbiAgICAgICAgc2l6ZTogMTYsXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkdyb3VwSGVhZGVyID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICAgICAgY2xhc3M6ICd2LWdyb3VwX19oZWFkZXInLFxuICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IGlzQWN0aXZlLnZhbHVlID0gIWlzQWN0aXZlLnZhbHVlLFxuICAgICAgICB9LFxuICAgICAgICBbXG4gICAgICAgICAgcHJvcHMuc3ViZ3JvdXAgJiYgZ2VuU3ViRXhwYW5kSWNvbihnZW5JY29uKGljb25zLiRjYXJldERvd24pKSxcbiAgICAgICAgICBwcm9wcy5wcmVwZW5kSWNvbiAmJiBnZW5QcmVwZW5kSWNvbihnZW5JY29uKHByb3BzLnByZXBlbmRJY29uKSksXG4gICAgICAgICAgZ2VuSGVhZGVyQ29udGVudCgpLFxuICAgICAgICAgIHByb3BzLmFwcGVuZEljb24gJiYgZ2VuQXBwZW5kSWNvbihnZW5JY29uKHByb3BzLmFwcGVuZEljb24pKSxcbiAgICAgICAgICAhcHJvcHMuc3ViZ3JvdXAgJiYgZ2VuRXhwYW5kSWNvbihnZW5JY29uKGljb25zLiRjaGV2cm9uRG93bikpLFxuICAgICAgICBdLFxuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkdyb3VwQ2hpbGRDb250ZW50ID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiB3aXRoRGlyZWN0aXZlcyhoKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzOiAndi1ncm91cF9fY29udGVudCcsXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IHNsb3RzLmRlZmF1bHQ/LigpLFxuICAgICAgfSksIFtbdlNob3csIGlzQWN0aXZlLnZhbHVlXV0pXG4gICAgfVxuXG4gICAgd2F0Y2goKCkgPT4gcHJvcHMuZXhwYW5kLCB0byA9PiBpc0FjdGl2ZS52YWx1ZSA9IHRvLCB7IGltbWVkaWF0ZTogdHJ1ZSB9KVxuXG4gICAgcmV0dXJuICgpID0+IGgoJ2RpdicsIHtcbiAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgc3R5bGU6IHN0eWxlcy52YWx1ZSxcbiAgICB9LCBbXG4gICAgICBnZW5Hcm91cEhlYWRlcigpLFxuICAgICAgRXhwYW5kVHJhbnNpdGlvbihnZW5Hcm91cENoaWxkQ29udGVudCgpKSxcbiAgICBdKVxuICB9LFxufSlcbiIsIi8vIFZ1ZSBBUElcbmltcG9ydCB7XG4gIGgsXG4gIHJlZixcbiAgY29tcHV0ZWQsXG4gIHJlYWN0aXZlLFxuICBkZWZpbmVDb21wb25lbnQsXG4gIG9uTW91bnRlZCxcbiAgb25CZWZvcmVVbm1vdW50LFxufSBmcm9tICd2dWUnXG5cbi8vIEVmZmVjdHNcbmltcG9ydCB7IHBvc2l0aW9uUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1wb3NpdGlvbidcbmltcG9ydCB7IHVzZUNvbG9ycyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuXG50eXBlIFJlc2l6ZURhdGEgPSB7XG4gIHBhcmVudE5vZGU6IEhUTUxFbGVtZW50IHwgbnVsbFxuICBzdGFydE9mZnNldDogbnVtYmVyIHwgbnVsbFxuICBvZmZzZXRUb3A6IG51bWJlclxuICBvZmZzZXRMZWZ0OiBudW1iZXJcbiAgcGFyZW50SGVpZ2h0OiBudW1iZXJcbiAgcGFyZW50V2lkdGg6IG51bWJlclxuICBtYXJnaW5MZWZ0OiBudW1iZXJcbiAgbWFyZ2luVG9wOiBudW1iZXJcbiAgbGVmdDogbnVtYmVyXG4gIHRvcDogbnVtYmVyXG4gIGlzQWN0aXZlOiBib29sZWFuXG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LXJlc2l6ZScsXG5cbiAgcHJvcHM6IHtcbiAgICBlbWl0OiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgfSxcblxuICAgIGN1c3RvbUNsYXNzOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgfSxcblxuICAgIG1pblNpemU6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiA1MCxcbiAgICB9LFxuICAgIGNvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAncHJpbWFyeScsXG4gICAgfSxcbiAgICAuLi5wb3NpdGlvblByb3BzKCksXG4gIH0gYXMgYW55LFxuXG4gIGVtaXRzOiBbJ3Jlc2l6ZSddLFxuXG4gIHNldHVwKHByb3BzLCB7IGVtaXQgfSk6ICgpID0+IFZOb2RlIHtcbiAgICBjb25zdCBkYXRhOiBSZXNpemVEYXRhID0gcmVhY3RpdmUoe1xuICAgICAgcGFyZW50Tm9kZTogbnVsbCxcbiAgICAgIHN0YXJ0T2Zmc2V0OiBudWxsLFxuICAgICAgb2Zmc2V0VG9wOiAwLFxuICAgICAgb2Zmc2V0TGVmdDogMCxcbiAgICAgIHBhcmVudEhlaWdodDogMCxcbiAgICAgIHBhcmVudFdpZHRoOiAwLFxuICAgICAgbWFyZ2luTGVmdDogMCxcbiAgICAgIG1hcmdpblRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICBpc0FjdGl2ZTogZmFsc2UsXG4gICAgfSlcblxuICAgIGNvbnN0IHJlc2l6ZVJlZiA9IHJlZjxIVE1MRWxlbWVudCB8IG51bGw+KG51bGwpXG5cbiAgICBjb25zdCB7IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvciwgc2V0QmFja2dyb3VuZENzc0NvbG9yIH0gPSB1c2VDb2xvcnMoKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAndi1yZXNpemUnOiB0cnVlLFxuICAgICAgICAndi1yZXNpemUtLWFjdGl2ZSc6IGRhdGEuaXNBY3RpdmUsXG4gICAgICAgICd2LXJlc2l6ZS0tdG9wJzogcHJvcHMudG9wLFxuICAgICAgICAndi1yZXNpemUtLWJvdHRvbSc6IHByb3BzLmJvdHRvbSxcbiAgICAgICAgJ3YtcmVzaXplLS1yaWdodCc6IHByb3BzLnJpZ2h0LFxuICAgICAgICAndi1yZXNpemUtLWxlZnQnOiBwcm9wcy5sZWZ0LFxuICAgICAgICBbcHJvcHMuY3VzdG9tQ2xhc3NdOiAhIXByb3BzLmN1c3RvbUNsYXNzLFxuICAgICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgICAgfVxuICAgIH0pXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0QmFja2dyb3VuZENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IGlzRGlyZWN0WSA9IGNvbXB1dGVkPGJvb2xlYW4+KCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy50b3AgfHwgcHJvcHMuYm90dG9tXG4gICAgfSlcblxuICAgIGNvbnN0IGlzTmVlZFJldmVyc2UgPSBjb21wdXRlZDxib29sZWFuPigoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMudG9wIHx8IHByb3BzLmxlZnRcbiAgICB9KVxuXG4gICAgY29uc3QgY3VycmVudFNpemUgPSBjb21wdXRlZDxudW1iZXI+KCgpID0+IHtcbiAgICAgIHJldHVybiBpc0RpcmVjdFkudmFsdWUgPyBkYXRhLnBhcmVudEhlaWdodCEgOiBkYXRhLnBhcmVudFdpZHRoIVxuICAgIH0pXG5cbiAgICBjb25zdCBzaXplUHJvcCA9IGNvbXB1dGVkPHN0cmluZz4oKCkgPT4ge1xuICAgICAgcmV0dXJuIGlzRGlyZWN0WS52YWx1ZSA/ICdoZWlnaHQnIDogJ3dpZHRoJ1xuICAgIH0pXG5cbiAgICBjb25zdCByZXZlcnNlRGlyZWN0aW9uID0gY29tcHV0ZWQ8c3RyaW5nPigoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMudG9wID8gJ3RvcCcgOiAnbGVmdCdcbiAgICB9KVxuXG4gICAgY29uc3QgcmV2ZXJzZU9mZnNldEtleSA9IGNvbXB1dGVkPHN0cmluZz4oKCkgPT4ge1xuICAgICAgY29uc3Qgc2lkZSA9IHJldmVyc2VEaXJlY3Rpb24udmFsdWVcbiAgICAgIHJldHVybiAnb2Zmc2V0JyArIHNpZGVbMF0udG9VcHBlckNhc2UoKSArIHNpZGUuc2xpY2UoMSlcbiAgICB9KVxuXG4gICAgY29uc3Qgb2Zmc2V0ID0gY29tcHV0ZWQ8bnVtYmVyPigoKSA9PiB7XG4gICAgICByZXR1cm4gaXNEaXJlY3RZLnZhbHVlID8gZGF0YS5vZmZzZXRUb3AhIDogZGF0YS5vZmZzZXRMZWZ0IVxuICAgIH0pXG5cbiAgICBjb25zdCBkaXJlY3Rpb24gPSBjb21wdXRlZDxzdHJpbmc+KCgpID0+IHtcbiAgICAgIHJldHVybiBpc0RpcmVjdFkudmFsdWUgPyAnY2xpZW50WScgOiAnY2xpZW50WCdcbiAgICB9KVxuXG4gICAgZnVuY3Rpb24gbW92ZVJldmVyc2Uoc2l6ZSkge1xuICAgICAgY29uc3QgeyBwYXJlbnROb2RlLCBsZWZ0LCB0b3AgfSA9IGRhdGFcbiAgICAgIGNvbnN0IHJldmVyc2VUbyA9IHJldmVyc2VEaXJlY3Rpb24udmFsdWVcblxuICAgICAgY29uc3QgdmFsdWUgPSAhaXNEaXJlY3RZLnZhbHVlXG4gICAgICAgID8gY3VycmVudFNpemUudmFsdWUgLSBzaXplICsgbGVmdFxuICAgICAgICA6IGN1cnJlbnRTaXplLnZhbHVlIC0gc2l6ZSArIHRvcFxuXG4gICAgICBwYXJlbnROb2RlIS5zdHlsZVtyZXZlcnNlVG9dID0gYCR7dmFsdWV9cHhgXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T3JFbWl0U2l6ZShzaXplKSB7XG4gICAgICBpZiAocHJvcHMuZW1pdCkgcmV0dXJuIGVtaXQoJ3Jlc2l6ZScsIHNpemUpXG5cbiAgICAgIGRhdGEucGFyZW50Tm9kZSEuc3R5bGVbc2l6ZVByb3AudmFsdWVdID0gYCR7c2l6ZX1weGBcblxuICAgICAgaXNOZWVkUmV2ZXJzZS52YWx1ZSAmJiBtb3ZlUmV2ZXJzZShzaXplKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc2l6ZShlKSB7XG4gICAgICBsZXQgc2l6ZVxuXG4gICAgICBpZiAoaXNOZWVkUmV2ZXJzZS52YWx1ZSkge1xuICAgICAgICBzaXplID1cbiAgICAgICAgICBjdXJyZW50U2l6ZS52YWx1ZSAtXG4gICAgICAgICAgKGVbZGlyZWN0aW9uLnZhbHVlXSAtIG9mZnNldC52YWx1ZSkgK1xuICAgICAgICAgIGRhdGEuc3RhcnRPZmZzZXQhXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaXplID1cbiAgICAgICAgICBjdXJyZW50U2l6ZS52YWx1ZSArXG4gICAgICAgICAgKGVbZGlyZWN0aW9uLnZhbHVlXSAtXG4gICAgICAgICAgICBjdXJyZW50U2l6ZS52YWx1ZSAtXG4gICAgICAgICAgICBvZmZzZXQudmFsdWUgLVxuICAgICAgICAgICAgZGF0YS5zdGFydE9mZnNldCEpXG4gICAgICB9XG5cbiAgICAgIHNpemUgPiBwcm9wcy5taW5TaXplICYmIHNldE9yRW1pdFNpemUoc2l6ZSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNldE1pbk1heFN0eWxlcygpIHtcbiAgICAgIGlmIChpc0RpcmVjdFkudmFsdWUpIHtcbiAgICAgICAgZGF0YS5wYXJlbnROb2RlIS5zdHlsZS5tYXhIZWlnaHQgPSAnJ1xuICAgICAgICBkYXRhLnBhcmVudE5vZGUhLnN0eWxlLm1pbkhlaWdodCA9ICcnXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhLnBhcmVudE5vZGUhLnN0eWxlLm1heFdpZHRoID0gJydcbiAgICAgICAgZGF0YS5wYXJlbnROb2RlIS5zdHlsZS5taW5XaWR0aCA9ICcnXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0UGFyZW50KCkge1xuICAgICAgY29uc3QgcGFyZW50ID0gcmVzaXplUmVmLnZhbHVlIS5wYXJlbnROb2RlXG4gICAgICBkYXRhLnBhcmVudE5vZGUgPSBwYXJlbnQgYXMgSFRNTEVsZW1lbnRcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wdXRlU2l6ZXMoKSB7XG4gICAgICBjb25zdCB7IHRvcCwgbGVmdCwgaGVpZ2h0LCB3aWR0aCwgbWFyZ2luTGVmdCwgbWFyZ2luVG9wIH0gPVxuICAgICAgICBnZXRDb21wdXRlZFN0eWxlKGRhdGEucGFyZW50Tm9kZSEpXG5cbiAgICAgIGRhdGEub2Zmc2V0VG9wID0gZGF0YS5wYXJlbnROb2RlIS5vZmZzZXRUb3BcbiAgICAgIGRhdGEub2Zmc2V0TGVmdCA9IGRhdGEucGFyZW50Tm9kZSEub2Zmc2V0TGVmdFxuICAgICAgZGF0YS5tYXJnaW5MZWZ0ID0gcGFyc2VGbG9hdChtYXJnaW5MZWZ0KVxuICAgICAgZGF0YS5tYXJnaW5Ub3AgPSBwYXJzZUZsb2F0KG1hcmdpblRvcClcbiAgICAgIGRhdGEucGFyZW50SGVpZ2h0ID0gcGFyc2VGbG9hdChoZWlnaHQpXG4gICAgICBkYXRhLnBhcmVudFdpZHRoID0gcGFyc2VGbG9hdCh3aWR0aClcbiAgICAgIGRhdGEudG9wID0gcGFyc2VGbG9hdCh0b3ApXG4gICAgICBkYXRhLmxlZnQgPSBwYXJzZUZsb2F0KGxlZnQpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0U3RhcnRQb3NpdGlvbnMoKSB7XG4gICAgICBjb25zdCBzaWRlID0gcmV2ZXJzZURpcmVjdGlvbi52YWx1ZVxuICAgICAgY29uc3Qgb2Zmc2V0ID0gcmV2ZXJzZU9mZnNldEtleS52YWx1ZVxuXG4gICAgICBpZiAoZGF0YVtzaWRlXSA9PT0gZGF0YVtvZmZzZXRdKSB7XG4gICAgICAgIGRhdGEucGFyZW50Tm9kZSEuc3R5bGVbc2lkZV0gPSBgJHtkYXRhW29mZnNldF19cHhgXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlzYWJsZVNlbGVjdGlvbihlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbml0UmVzaXplKGUpIHtcbiAgICAgIGlmICghZGF0YS5pc0FjdGl2ZSkge1xuICAgICAgICBkYXRhLmlzQWN0aXZlID0gdHJ1ZVxuICAgICAgICBjb21wdXRlU2l6ZXMoKVxuICAgICAgICByZXNldE1pbk1heFN0eWxlcygpXG4gICAgICAgIHNldFN0YXJ0UG9zaXRpb25zKClcbiAgICAgICAgc2V0U3RhcnRPZmZzZXQoZSlcbiAgICAgIH1cblxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHJlc2l6ZShlKSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRTdGFydE9mZnNldChlKSB7XG4gICAgICBpZiAoaXNOZWVkUmV2ZXJzZS52YWx1ZSkgZGF0YS5zdGFydE9mZnNldCA9IGVbZGlyZWN0aW9uLnZhbHVlXVxuICAgICAgZWxzZSBkYXRhLnN0YXJ0T2Zmc2V0ID0gZVtkaXJlY3Rpb24udmFsdWVdIC0gY3VycmVudFNpemUudmFsdWVcblxuICAgICAgZGF0YS5zdGFydE9mZnNldCEgLT0gb2Zmc2V0LnZhbHVlXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICBkYXRhLmlzQWN0aXZlID0gZmFsc2VcbiAgICAgIHJlc2V0TWluTWF4U3R5bGVzKClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbk1vdXNldXAoKSB7XG4gICAgICByZXNldCgpXG4gICAgICByZW1vdmVIYW5kbGVycygpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25Nb3VzZWRvd24oKSB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBpbml0UmVzaXplKVxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG9uTW91c2V1cClcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdHN0YXJ0JywgZGlzYWJsZVNlbGVjdGlvbilcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVIYW5kbGVycygpIHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGluaXRSZXNpemUpXG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25Nb3VzZXVwKVxuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2VsZWN0c3RhcnQnLCBkaXNhYmxlU2VsZWN0aW9uKVxuICAgIH1cblxuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICBzZXRQYXJlbnQoKVxuICAgIH0pXG5cbiAgICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgb25Nb3VzZWRvd24pXG4gICAgfSlcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgICBzdHlsZTogc3R5bGVzLnZhbHVlLFxuICAgICAgICBrZXk6ICdyZXNpemUnLFxuICAgICAgICByZWY6IHJlc2l6ZVJlZixcbiAgICAgICAgb25Nb3VzZWRvd24sXG4gICAgICB9XG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhKVxuICAgIH1cbiAgfSxcbn0pXG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQge1xuICBoLFxuICByZWYsXG4gIHdhdGNoLFxuICBkZWZpbmVDb21wb25lbnQsXG4gIGluamVjdCxcbiAgdG9SYXcsXG4gIGNvbXB1dGVkLFxuICBvbkJlZm9yZU1vdW50LFxuICBvbkJlZm9yZVVubW91bnQsXG59IGZyb20gJ3Z1ZSdcblxuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZVZhbGlkYXRpb24gfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS12YWxpZGF0aW9uJ1xuaW1wb3J0IHsgdXNlSWNvbnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1pY29ucydcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkljb24gfSBmcm9tICcuLi9WSWNvbidcbmltcG9ydCB7IFZMYWJlbCB9IGZyb20gJy4uL1ZMYWJlbCdcblxuLy8gU2VydmljZXNcbmltcG9ydCB7IHNpemVzIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvc2l6ZXMnXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvYmFzZSdcblxudHlwZSBGb3JtID0ge1xuICBhZGQ6IChpdGVtKSA9PiB2b2lkXG4gIHJlbW92ZTogKGl0ZW0pID0+IHZvaWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtY2hlY2tib3gnLFxuICBwcm9wczoge1xuICAgIG1vZGVsVmFsdWU6IHtcbiAgICAgIHR5cGU6IFtBcnJheSwgQm9vbGVhbl0sXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gICAgbGFiZWw6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnLFxuICAgIH0sXG4gICAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gICAgdmFsaWRhdGU6IEJvb2xlYW4sXG4gICAgdmFsdWU6IHtcbiAgICAgIHR5cGU6IFtBcnJheSwgT2JqZWN0LCBTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gICAgY29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdwcmltYXJ5JyxcbiAgICB9LFxuICB9LFxuICBlbWl0czogWydjaGFuZ2UnLCAndXBkYXRlOm1vZGVsVmFsdWUnXSxcbiAgc2V0dXAocHJvcHMsIHsgZW1pdCB9KTogKCkgPT4gVk5vZGUge1xuICAgIGNvbnN0IGlzQ2hlY2tlZCA9IHJlZihmYWxzZSlcbiAgICBjb25zdCBmb3JtID0gaW5qZWN0PE1heWJlPEZvcm0+PignZm9ybScsIG51bGwpXG4gICAgY29uc3QgdmFsdWVzTWFwOiBNYXA8YW55LCBhbnk+ID0gbmV3IE1hcCgpXG5cbiAgICBjb25zdCB7IHZhbGlkYXRlIH0gPSB1c2VWYWxpZGF0aW9uKHByb3BzKVxuICAgIGNvbnN0IHsgaWNvbnMgfSA9IHVzZUljb25zKClcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LWNoZWNrYm94JzogdHJ1ZSxcbiAgICAgICd2LWNoZWNrYm94LS1kaXNhYmxlZCc6IHByb3BzLmRpc2FibGVkLFxuICAgICAgJ3YtY2hlY2tib3gtLWNoZWNrZWQnOiBpc0NoZWNrZWQudmFsdWUsXG4gICAgICAndi12YWxpZGF0YWJsZSc6IHByb3BzLnZhbGlkYXRlLFxuICAgIH0pKVxuXG4gICAgd2F0Y2goKCkgPT4gcHJvcHMubW9kZWxWYWx1ZSwgdG8gPT4ge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodG8pKSB7XG4gICAgICAgIHZhbHVlc01hcC5jbGVhcigpXG4gICAgICAgIHRvLmZvckVhY2goaXQgPT4gdmFsdWVzTWFwLnNldCh0b1JhdyhpdCksIHRvUmF3KGl0KSkpXG4gICAgICAgIGlzQ2hlY2tlZC52YWx1ZSA9ICEhdmFsdWVzTWFwLmdldCh0b1Jhdyhwcm9wcy52YWx1ZSkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpc0NoZWNrZWQudmFsdWUgPSAhIXByb3BzLm1vZGVsVmFsdWVcbiAgICAgIH1cbiAgICB9LCB7IGltbWVkaWF0ZTogdHJ1ZSB9KVxuXG4gICAgY29uc3QgdmFsaWRhdGVWYWx1ZSA9ICgpOiBib29sZWFuIHwgdm9pZCA9PiB7XG4gICAgICByZXR1cm4gdmFsaWRhdGUoaXNDaGVja2VkLnZhbHVlKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkxhYmVsID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgYWJzb2x1dGU6IGZhbHNlLFxuICAgICAgICBkaXNhYmxlZDogcHJvcHMuZGlzYWJsZWQsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKFZMYWJlbCwgcHJvcHNEYXRhLCB7IGRlZmF1bHQ6ICgpID0+IHByb3BzLmxhYmVsIH0pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuTGFiZWxXcmFwcGVyID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2RpdicsIHsgY2xhc3M6ICd2LWNoZWNrYm94X19sYWJlbCcgfSwgZ2VuTGFiZWwoKSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5JY29uID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIGNvbnN0IGljb24gPSBpc0NoZWNrZWQudmFsdWUgPyBpY29ucy4kY2hlY2tib3ggOiBpY29ucy4kYm94XG5cbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgaWNvbixcbiAgICAgICAgc2l6ZTogc2l6ZXMuc20sXG4gICAgICAgIGNvbG9yOiBwcm9wcy5jb2xvcixcbiAgICAgICAgZGlzYWJsZWQ6IHByb3BzLmRpc2FibGVkLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaChWSWNvbiwgcHJvcHNEYXRhKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkNoZWNrYm94ID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7IGNsYXNzOiAndi1jaGVja2JveF9fc3F1YXJlJyB9LCBnZW5JY29uKCkpXG4gICAgfVxuXG4gICAgY29uc3QgY29tcHV0ZVZhbHVlID0gKCk6IGFueVtdIHwgYm9vbGVhbiA9PiB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wcy5tb2RlbFZhbHVlKSkge1xuICAgICAgICBpZiAoaXNDaGVja2VkLnZhbHVlKSB7XG4gICAgICAgICAgdmFsdWVzTWFwLmRlbGV0ZSh0b1Jhdyhwcm9wcy52YWx1ZSkpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWVzTWFwLnNldCh0b1Jhdyhwcm9wcy52YWx1ZSksIHRvUmF3KHByb3BzLnZhbHVlKSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHZhbHVlc01hcC52YWx1ZXMoKSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIChpc0NoZWNrZWQudmFsdWUgPSAhaXNDaGVja2VkLnZhbHVlKVxuICAgIH1cblxuICAgIGNvbnN0IG9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICBpZiAocHJvcHMuZGlzYWJsZWQpIHJldHVyblxuXG4gICAgICBjb25zdCB2YWx1ZSA9IGNvbXB1dGVWYWx1ZSgpXG5cbiAgICAgIHByb3BzLnZhbGlkYXRlICYmIHZhbGlkYXRlVmFsdWUoKVxuICAgICAgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCB2YWx1ZSlcbiAgICAgIGVtaXQoJ2NoYW5nZScsIHZhbHVlKVxuICAgIH1cblxuICAgIG9uQmVmb3JlTW91bnQoKCkgPT4ge1xuICAgICAgZm9ybT8uYWRkKHZhbGlkYXRlVmFsdWUpXG4gICAgfSlcblxuICAgIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgICBmb3JtPy5yZW1vdmUodmFsaWRhdGVWYWx1ZSlcbiAgICB9KVxuXG4gICAgcmV0dXJuICgpID0+IGgoJ2RpdicsXG4gICAgICB7IGNsYXNzOiBjbGFzc2VzLnZhbHVlLCBvbkNsaWNrIH0sXG4gICAgICBbZ2VuQ2hlY2tib3goKSwgcHJvcHMubGFiZWwgJiYgZ2VuTGFiZWxXcmFwcGVyKCldLFxuICAgIClcbiAgfSxcbn0pXG4iLCJleHBvcnQgZW51bSB0cmFuc2l0aW9ucyB7XG4gIEZBREUgPSBcImZhZGVcIixcbiAgRkFERV9JTl9ET1dOID0gXCJmYWRlLWluLWRvd25cIixcbiAgRkFERV9JTl9VUCA9IFwiZmFkZS1pbi11cFwiLFxuICBTQ0FMRV9JTiA9IFwic2NhbGUtaW5cIixcbiAgU0NBTEVfSU5fT1VUID0gXCJzY2FsZS1pbi1vdXRcIixcbiAgU0xJREVfSU5fTEVGVCA9IFwic2xpZGUtaW4tbGVmdFwiLFxufVxuIiwiLy8gVnVlIEFQSVxuaW1wb3J0IHtcbiAgaCxcbiAgc2hhbGxvd1JlZixcbiAgcmVhY3RpdmUsXG4gIHdhdGNoLFxuICB3aXRoRGlyZWN0aXZlcyxcbiAgZGVmaW5lQ29tcG9uZW50LFxuICBjb21wdXRlZCxcbiAgb25Nb3VudGVkLFxuICB2U2hvdyxcbn0gZnJvbSAndnVlJ1xuXG4vLyBFZmZlY3RzXG5pbXBvcnQgeyB1c2VUb2dnbGUgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS10b2dnbGUnXG5pbXBvcnQgeyB1c2VDb2xvcnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG5pbXBvcnQgeyB1c2VBY3RpdmF0b3IgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1hY3RpdmF0b3InXG5pbXBvcnQgeyB1c2VUcmFuc2l0aW9uIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtdHJhbnNpdGlvbidcbmltcG9ydCB7IGVsZXZhdGlvblByb3BzLCB1c2VFbGV2YXRpb24gfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1lbGV2YXRpb24nXG5pbXBvcnQgeyBwb3NpdGlvblByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtcG9zaXRpb24nXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBPZmZzZXRTaXplcyB9IGZyb20gJy4uLy4uLy4uL3R5cGVzJ1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tICd2dWUnXG5cbi8vIEhlbHBlcnNcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG4vLyBTZXJ2aWNlc1xuaW1wb3J0IHsgdHJhbnNpdGlvbnMgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy90cmFuc2l0aW9ucydcblxuLy8gVE9ETyBmaXggYmVoYXZpb3Igb24gd2luZG93IHJlc2l6ZSBpZiB2LW1vZGVsIHVzZWQgb24gY29tcG9uZW50XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LXRvb2x0aXAnLFxuXG4gIHByb3BzOiB7XG4gICAgb3Blbk9uSG92ZXI6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlLFxuICAgIH0sXG4gICAgY29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdncmV5IGxpZ2h0ZW4tMScsXG4gICAgfSxcbiAgICB6SW5kZXg6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgbWF4V2lkdGg6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgbWluV2lkdGg6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgbW9kZWxWYWx1ZTogQm9vbGVhbixcbiAgICBvZmZzZXRYOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogMjAsXG4gICAgfSxcbiAgICBvZmZzZXRZOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogMjAsXG4gICAgfSxcbiAgICAuLi5lbGV2YXRpb25Qcm9wcygpLFxuICAgIC4uLnBvc2l0aW9uUHJvcHMoKSxcbiAgfSBhcyBhbnksXG5cbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSkge1xuICAgIGNvbnN0IHRvb2x0aXAgPSByZWFjdGl2ZTxQYXJ0aWFsPE9mZnNldFNpemVzPj4oe30pXG4gICAgY29uc3QgYWN0aXZhdG9yID0gcmVhY3RpdmU8UGFydGlhbDxPZmZzZXRTaXplcz4+KHt9KVxuXG4gICAgY29uc3QgdG9vbHRpcFJlZiA9IHNoYWxsb3dSZWY8SFRNTEVsZW1lbnQgfCBudWxsPihudWxsKVxuXG4gICAgY29uc3QgeyBpc0FjdGl2ZSB9ID0gdXNlVG9nZ2xlKHByb3BzKVxuICAgIGNvbnN0IHsgZWxldmF0aW9uQ2xhc3NlcyB9ID0gdXNlRWxldmF0aW9uKHByb3BzKVxuICAgIGNvbnN0IHsgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yLCBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IgfSA9IHVzZUNvbG9ycygpXG4gICAgY29uc3QgeyBhY3RpdmF0b3JSZWYsIGdldEFjdGl2YXRvclNpemVzLCBnZW5BY3RpdmF0b3JMaXN0ZW5lcnMgfSA9XG4gICAgICB1c2VBY3RpdmF0b3IocHJvcHMpXG5cbiAgICBjb25zdCBoYW5kbGVycyA9IHtcbiAgICAgIG1vdXNlZW50ZXI6ICgpID0+IChpc0FjdGl2ZS52YWx1ZSA9IHRydWUpLFxuICAgICAgbW91c2VsZWF2ZTogKCkgPT4gKGlzQWN0aXZlLnZhbHVlID0gZmFsc2UpLFxuICAgIH1cblxuICAgIGNvbnN0IGxpc3RlbmVycyA9IGdlbkFjdGl2YXRvckxpc3RlbmVycyhwcm9wcywgaGFuZGxlcnMpXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi10b29sdGlwJzogdHJ1ZSxcbiAgICAgICd2LXRvb2x0aXAtLXRvcCc6IHByb3BzLnRvcCxcbiAgICAgICd2LXRvb2x0aXAtLXJpZ2h0JzogcHJvcHMucmlnaHQsXG4gICAgICAndi10b29sdGlwLS1sZWZ0JzogcHJvcHMubGVmdCxcbiAgICAgICd2LXRvb2x0aXAtLWJvdHRvbSc6IHByb3BzLmJvdHRvbSxcbiAgICAgIC4uLmVsZXZhdGlvbkNsYXNzZXMudmFsdWUsXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3QgY29tcHV0ZVRvcFBvc2l0aW9uID0gY29tcHV0ZWQ8bnVtYmVyPigoKSA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICAocHJvcHMudG9wXG4gICAgICAgICAgPyBhY3RpdmF0b3IhLnRvcCEgLSB0b29sdGlwLmhlaWdodCFcbiAgICAgICAgICA6IHByb3BzLmJvdHRvbVxuICAgICAgICAgID8gYWN0aXZhdG9yLnRvcCEgKyBhY3RpdmF0b3IuaGVpZ2h0IVxuICAgICAgICAgIDogYWN0aXZhdG9yLnRvcCEgKyAoYWN0aXZhdG9yLmhlaWdodCEgLSB0b29sdGlwLmhlaWdodCEpIC8gMikgK1xuICAgICAgICArcHJvcHMub2Zmc2V0WVxuICAgICAgKVxuICAgIH0pXG5cbiAgICBjb25zdCBjb21wdXRlTGVmdFBvc2l0aW9uID0gY29tcHV0ZWQ8bnVtYmVyPigoKSA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICAocHJvcHMubGVmdFxuICAgICAgICAgID8gYWN0aXZhdG9yLmxlZnQhIC0gdG9vbHRpcC53aWR0aCFcbiAgICAgICAgICA6IHByb3BzLnJpZ2h0XG4gICAgICAgICAgPyBhY3RpdmF0b3IubGVmdCEgKyBhY3RpdmF0b3Iud2lkdGghXG4gICAgICAgICAgOiBhY3RpdmF0b3IubGVmdCEgKyAoYWN0aXZhdG9yLndpZHRoISAtIHRvb2x0aXAud2lkdGghKSAvIDIpICtcbiAgICAgICAgK3Byb3BzLm9mZnNldFhcbiAgICAgIClcbiAgICB9KVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgc3RyaW5nPj4oKCkgPT4gKHtcbiAgICAgIHRvcDogdG9vbHRpcC50b3AgPyAoY29udmVydFRvVW5pdCh0b29sdGlwLnRvcCkgYXMgc3RyaW5nKSA6ICcnLFxuICAgICAgbGVmdDogdG9vbHRpcC50b3AgPyAoY29udmVydFRvVW5pdCh0b29sdGlwLmxlZnQhKSBhcyBzdHJpbmcpIDogJycsXG4gICAgICBtYXhXaWR0aDogISFwcm9wcy5tYXhXaWR0aCA/IGAke3Byb3BzLm1heFdpZHRofXB4YCA6ICcnLFxuICAgICAgbWluV2lkdGg6ICEhcHJvcHMubWluV2lkdGggPyBgJHtwcm9wcy5taW5XaWR0aH1weGAgOiAnJyxcbiAgICAgIHpJbmRleDogcHJvcHMuekluZGV4LFxuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0QmFja2dyb3VuZENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGZ1bmN0aW9uIGdlbkFjdGl2YXRvcigpOiBWTm9kZSB8IG51bGwge1xuICAgICAgY29uc3Qgc2xvdENvbnRlbnQgPVxuICAgICAgICBzbG90cy5hY3RpdmF0b3IgJiZcbiAgICAgICAgc2xvdHMuYWN0aXZhdG9yKHtcbiAgICAgICAgICBvbjogbGlzdGVuZXJzLFxuICAgICAgICB9KVxuXG4gICAgICByZXR1cm4gaChzbG90Q29udGVudCFbMF0sIHsgcmVmOiBhY3RpdmF0b3JSZWYgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5Db250ZW50KCk6IFZOb2RlIHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgIHN0eWxlOiBzdHlsZXMudmFsdWUsXG4gICAgICAgIHJlZjogdG9vbHRpcFJlZixcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHdpdGhEaXJlY3RpdmVzKFxuICAgICAgICBoKCdzcGFuJywgcHJvcHNEYXRhLCBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKSksXG4gICAgICAgIFtbdlNob3csIGlzQWN0aXZlLnZhbHVlXV1cbiAgICAgIClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRUb29sdGlwUG9zaXRpb24oKSB7XG4gICAgICBpZiAodG9vbHRpcFJlZi52YWx1ZSkge1xuICAgICAgICB0b29sdGlwLndpZHRoID0gdG9vbHRpcFJlZi52YWx1ZSEub2Zmc2V0V2lkdGhcbiAgICAgICAgdG9vbHRpcC5oZWlnaHQgPSB0b29sdGlwUmVmLnZhbHVlIS5vZmZzZXRIZWlnaHRcbiAgICAgICAgdG9vbHRpcC50b3AgPSBjb21wdXRlVG9wUG9zaXRpb24udmFsdWVcbiAgICAgICAgdG9vbHRpcC5sZWZ0ID0gY29tcHV0ZUxlZnRQb3NpdGlvbi52YWx1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICB3YXRjaChcbiAgICAgICAgKCkgPT4gaXNBY3RpdmUudmFsdWUsXG4gICAgICAgICh0bykgPT4ge1xuICAgICAgICAgIGlmICh0bykge1xuICAgICAgICAgICAgY29uc3QgeyBsZWZ0LCB0b3AsIGhlaWdodCwgd2lkdGggfSA9IGdldEFjdGl2YXRvclNpemVzKClcblxuICAgICAgICAgICAgYWN0aXZhdG9yLmxlZnQgPSBsZWZ0IGFzIG51bWJlclxuICAgICAgICAgICAgYWN0aXZhdG9yLnRvcCA9IHRvcCBhcyBudW1iZXJcbiAgICAgICAgICAgIGFjdGl2YXRvci5oZWlnaHQgPSBoZWlnaHQgYXMgbnVtYmVyXG4gICAgICAgICAgICBhY3RpdmF0b3Iud2lkdGggPSB3aWR0aCBhcyBudW1iZXJcblxuICAgICAgICAgICAgdG9vbHRpcC50b3AgPSAwXG4gICAgICAgICAgICB0b29sdGlwLmxlZnQgPSAwXG5cbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShzZXRUb29sdGlwUG9zaXRpb24pXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7IGltbWVkaWF0ZTogdHJ1ZSB9XG4gICAgICApXG4gICAgfSlcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBjb250ZW50ID0gdXNlVHJhbnNpdGlvbihcbiAgICAgICAgZ2VuQ29udGVudCgpIGFzIFZOb2RlLFxuICAgICAgICBpc0FjdGl2ZS52YWx1ZSA/IHRyYW5zaXRpb25zLlNDQUxFX0lOIDogdHJhbnNpdGlvbnMuRkFERVxuICAgICAgKVxuXG4gICAgICByZXR1cm4gW2NvbnRlbnQsIGdlbkFjdGl2YXRvcigpXVxuICAgIH1cbiAgfSxcbn0pXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGgsIHJlZiwgY29tcHV0ZWQsIFZOb2RlIH0gZnJvbSAndnVlJ1xuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZUNvbG9ycywgY29sb3JQcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcbi8vIEhlbHBlcnNcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1uYXZpZ2F0aW9uJyxcbiAgcHJvcHM6IHtcbiAgICBmaXhlZDogQm9vbGVhbixcbiAgICByaWdodDogQm9vbGVhbixcbiAgICBsZWZ0OiBCb29sZWFuLFxuICAgIG9uSG92ZXI6IEJvb2xlYW4sXG4gICAgbWluaVZhcmlhbnQ6IEJvb2xlYW4sXG4gICAgZXhwYW5kOiBCb29sZWFuLFxuICAgIG9mZnNldFRvcDoge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IDAsXG4gICAgfSxcbiAgICBtaW5pVmFyaWFudFdpZHRoOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogNTYsXG4gICAgfSxcbiAgICBtYXhWYXJpYW50V2lkdGg6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiAyMzcsXG4gICAgfSxcbiAgICAuLi5jb2xvclByb3BzKCcjZmZmZmZmJyksXG4gIH0sXG4gIGVtaXRzOiBbJ3VwZGF0ZTpleHBhbmQnXSxcblxuICBzZXR1cChwcm9wcywgeyBzbG90cywgZW1pdCB9KTogKCkgPT4gVk5vZGUge1xuICAgIGNvbnN0IHsgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yLCBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IgfSA9IHVzZUNvbG9ycygpXG4gICAgY29uc3QgaXNIb3ZlcmVkID0gcmVmPGJvb2xlYW4+KGZhbHNlKVxuXG4gICAgY29uc3QgaXNFeHBhbmRlZCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGlmIChwcm9wcy5vbkhvdmVyICYmIGlzSG92ZXJlZC52YWx1ZSkgcmV0dXJuIHRydWVcbiAgICAgIGlmIChwcm9wcy5leHBhbmQpIHJldHVybiB0cnVlXG4gICAgICBpZiAoIXByb3BzLmV4cGFuZCAmJiBwcm9wcy5taW5pVmFyaWFudCkgcmV0dXJuIGZhbHNlXG4gICAgICBpZiAoIXByb3BzLmV4cGFuZCAmJiAhcHJvcHMubWluaVZhcmlhbnQpIHJldHVybiBmYWxzZVxuICAgICAgcmV0dXJuICFwcm9wcy5taW5pVmFyaWFudFxuICAgIH0pXG5cbiAgICBjb25zdCBjb21wdXRlZFdpZHRoID0gY29tcHV0ZWQ8bnVtYmVyIHwgc3RyaW5nPigoKSA9PiB7XG4gICAgICBpZiAoIWlzRXhwYW5kZWQudmFsdWUpIHJldHVybiBwcm9wcy5taW5pVmFyaWFudFdpZHRoXG4gICAgICByZXR1cm4gcHJvcHMubWF4VmFyaWFudFdpZHRoXG4gICAgfSlcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LW5hdmlnYXRpb24nOiB0cnVlLFxuICAgICAgJ3YtbmF2aWdhdGlvbi0tZXhwYW5kZWQnOiBpc0V4cGFuZGVkLnZhbHVlLFxuICAgICAgJ3YtbmF2aWdhdGlvbi0tZml4ZWQnOiBwcm9wcy5maXhlZCxcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PigoKSA9PiAoe1xuICAgICAgd2lkdGg6IGNvbnZlcnRUb1VuaXQoY29tcHV0ZWRXaWR0aC52YWx1ZSksXG4gICAgICBtYXhIZWlnaHQ6IGBjYWxjKDEwMHZoIC0gJHsgY29udmVydFRvVW5pdChwcm9wcy5vZmZzZXRUb3ApIH0pYCxcbiAgICAgIHRvcDogcHJvcHMuZml4ZWQgPyBjb252ZXJ0VG9Vbml0KHByb3BzLm9mZnNldFRvcCkgOiAnJyxcbiAgICAgIGxlZnQ6ICFwcm9wcy5yaWdodCAmJiBwcm9wcy5maXhlZCA/IGNvbnZlcnRUb1VuaXQoMCkgOiAnJyxcbiAgICAgIHJpZ2h0OiBwcm9wcy5yaWdodCAmJiBwcm9wcy5maXhlZCA/IGNvbnZlcnRUb1VuaXQoMCkgOiAnJyxcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBnZW5OYXZpZ2F0aW9uQ29udGVudCA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogJ3YtbmF2aWdhdGlvbl9fY29udGVudCcsXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IHNsb3RzLmRlZmF1bHQ/LigpLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBvbk1vdXNlZW50ZXIgPSAoKSA9PiB7XG4gICAgICBpZiAoIXByb3BzLm9uSG92ZXIgfHwgcHJvcHMubWluaVZhcmlhbnQpIHJldHVyblxuICAgICAgaXNIb3ZlcmVkLnZhbHVlID0gdHJ1ZVxuICAgICAgZW1pdCgndXBkYXRlOmV4cGFuZCcsIHRydWUpXG4gICAgfVxuXG4gICAgY29uc3Qgb25Nb3VzZWxlYXZlID0gKCkgPT4ge1xuICAgICAgaWYgKCFwcm9wcy5vbkhvdmVyIHx8IHByb3BzLm1pbmlWYXJpYW50KSByZXR1cm5cbiAgICAgIGlzSG92ZXJlZC52YWx1ZSA9IGZhbHNlXG4gICAgICBlbWl0KCd1cGRhdGU6ZXhwYW5kJywgZmFsc2UpXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IGgoJ2FzaWRlJywge1xuICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICBzdHlsZTogc3R5bGVzLnZhbHVlLFxuICAgICAgb25Nb3VzZWVudGVyLFxuICAgICAgb25Nb3VzZWxlYXZlLFxuICAgIH0sIGdlbk5hdmlnYXRpb25Db250ZW50KCkpXG4gIH0sXG59KVxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoIH0gZnJvbSAndnVlJ1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1tYWluJyxcbiAgc2V0dXAoXywgeyBzbG90cyB9KSB7XG4gICAgcmV0dXJuICgpID0+IGgoJ2RpdicsIHtcbiAgICAgIGNsYXNzOiAndi1tYWluJyxcbiAgICB9LCB7XG4gICAgICBkZWZhdWx0OiAoKSA9PiBzbG90cy5kZWZhdWx0Py4oKSxcbiAgICB9KVxuICB9LFxufSlcbiIsIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGgsIGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSdcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVlRleHRGaWVsZCB9IGZyb20gJy4uL1ZUZXh0RmllbGQnXG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LXRleHRhcmVhJyxcblxuICBzZXR1cCgpIHtcbiAgICByZXR1cm4gKCkgPT5cbiAgICAgIGgoVlRleHRGaWVsZCwge1xuICAgICAgICB0YWc6ICd0ZXh0YXJlYScsXG4gICAgICAgIGNsYXNzOiAndi10ZXh0YXJlYScsXG4gICAgICB9KVxuICB9LFxufSlcbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaCB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1za2VsZXRvbicsXG4gIHByb3BzOiB7XG4gICAgdGFnOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnZGl2JyxcbiAgICB9LFxuICAgIHdpZHRoOiB7XG4gICAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICB9LFxuICAgIGhlaWdodDoge1xuICAgICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICAgIGRlZmF1bHQ6IDIwLFxuICAgIH0sXG4gICAgcmFkaXVzOiB7XG4gICAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgICAgZGVmYXVsdDogNSxcbiAgICB9LFxuICAgIGxpZ2h0OiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB9LFxuICAgIGR5bmFtaWM6IEJvb2xlYW4sXG4gIH0sXG4gIHNldHVwKHByb3BzKSB7XG4gICAgcmV0dXJuICgpID0+IGgocHJvcHMudGFnLCB7XG4gICAgICBjbGFzczoge1xuICAgICAgICAndi1za2VsZXRvbic6IHRydWUsXG4gICAgICAgICd2LXNrZWxldG9uLS1saWdodCc6IHByb3BzLmxpZ2h0LFxuICAgICAgICAndi1za2VsZXRvbi0tZHluYW1pYyc6IHByb3BzLmR5bmFtaWMsXG4gICAgICB9LFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgd2lkdGg6IHByb3BzLndpZHRoICYmIGNvbnZlcnRUb1VuaXQocHJvcHMud2lkdGgpLFxuICAgICAgICBmbGV4QmFzaXM6IHByb3BzLndpZHRoICYmIGNvbnZlcnRUb1VuaXQocHJvcHMud2lkdGgpIHx8ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiBjb252ZXJ0VG9Vbml0KHByb3BzLmhlaWdodCksXG4gICAgICAgIGJvcmRlclJhZGl1czogY29udmVydFRvVW5pdChwcm9wcy5yYWRpdXMpXG4gICAgICB9LFxuICAgIH0pXG4gIH0sXG59KVxuIiwiLy8gVnVlIEFQSVxuaW1wb3J0IHsgaCwgY29tcHV0ZWQsIGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSdcblxuLy8gRWZmZWN0c1xuaW1wb3J0IHsgY29sb3JQcm9wcywgdXNlQ29sb3JzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtY29sb3JzJ1xuXG4vLyBIZWxwZXJzXG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0IH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVlJlc2l6ZSB9IGZyb20gJy4uL1ZSZXNpemUnXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gJ3Z1ZSdcblxuZXhwb3J0IGNvbnN0IFZEYXRhVGFibGVDZWxsID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtZGF0YS10YWJsZS1jZWxsJyxcbiAgcHJvcHM6IHtcbiAgICBkYXJrOiBCb29sZWFuLFxuICAgIHJlc2l6ZWFibGU6IEJvb2xlYW4sXG4gICAgYWxpZ246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdzdGFydCcsXG4gICAgfSxcbiAgICB3aWR0aDoge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IDc1LFxuICAgIH0sXG4gICAgcmVzaXplckNvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAncHJpbWFyeScsXG4gICAgfSxcbiAgICBjb250ZW50Q29sb3I6IFN0cmluZyxcbiAgICAuLi5jb2xvclByb3BzKCksXG4gIH0gYXMgYW55LFxuXG4gIGVtaXRzOiBbJ3Jlc2l6ZSddLFxuXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzLCBlbWl0IH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3Qge1xuICAgICAgc2V0VGV4dENsYXNzTmFtZUNvbG9yLFxuICAgICAgc2V0VGV4dENzc0NvbG9yLFxuICAgICAgc2V0QmFja2dyb3VuZENzc0NvbG9yLFxuICAgICAgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yLFxuICAgIH0gPSB1c2VDb2xvcnMoKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtZGF0YS10YWJsZV9fY2VsbCc6IHRydWUsXG4gICAgICAuLi4ocHJvcHMuY29udGVudENvbG9yID8gc2V0VGV4dENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbnRlbnRDb2xvcikgOiB7fSksXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgIHdpZHRoOiBjb252ZXJ0VG9Vbml0KCtwcm9wcy53aWR0aCksXG4gICAgICAuLi4ocHJvcHMuY29udGVudENvbG9yID8gc2V0VGV4dENzc0NvbG9yKHByb3BzLmNvbnRlbnRDb2xvcikgOiB7fSksXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3QgZ2VuUmVzaXplID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgcmlnaHQ6IHRydWUsXG4gICAgICAgIGVtaXQ6IHRydWUsXG4gICAgICAgIGNvbG9yOiBwcm9wcy5yZXNpemVyQ29sb3IsXG4gICAgICAgIG9uUmVzaXplOiAoJHNpemUpID0+IGVtaXQoJ3Jlc2l6ZScsICRzaXplKSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoVlJlc2l6ZSwgcHJvcHNEYXRhKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkNlbGxDb250ZW50ID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1kYXRhLXRhYmxlX19jZWxsLWNvbnRlbnQnOiB0cnVlLFxuICAgICAgICAgIFtgdGV4dC1hbGlnbi0tJHsgcHJvcHMuYWxpZ24gfWBdOiAhIXByb3BzLmFsaWduLFxuICAgICAgICB9LFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKSlcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgc3R5bGU6IHN0eWxlcy52YWx1ZSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgW1xuICAgICAgICBnZW5DZWxsQ29udGVudCgpLFxuICAgICAgICBwcm9wcy5yZXNpemVhYmxlICYmIGdlblJlc2l6ZSgpLFxuICAgICAgXSlcbiAgICB9XG4gIH0sXG59KVxuIiwiLy8gVnVlIEFQSVxuaW1wb3J0IHsgaCwgY29tcHV0ZWQsIHdpdGhEaXJlY3RpdmVzLCBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnXG5cbi8vIEVmZmVjdHNcbmltcG9ydCB7IHVzZUNvbG9ycyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcbmltcG9ydCB7IHVzZUljb25zIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtaWNvbnMnXG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZJY29uIH0gZnJvbSAnLi4vVkljb24nXG5pbXBvcnQgeyBWQ2hlY2tib3ggfSBmcm9tICcuLi9WQ2hlY2tib3gnXG5pbXBvcnQgeyBWRGF0YVRhYmxlQ2VsbCB9IGZyb20gJy4vVkRhdGFUYWJsZUNlbGwnXG5pbXBvcnQgeyBWVGV4dEZpZWxkIH0gZnJvbSAnLi4vVlRleHRGaWVsZCdcblxuLy8gRGlyZWN0aXZlc1xuaW1wb3J0IHsgdlNob3cgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyBjbGlja091dHNpZGUgfSBmcm9tICcuLi8uLi9kaXJlY3RpdmVzL3YtY2xpY2stb3V0c2lkZSdcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgRGF0YUNvbHVtbiB9IGZyb20gJy4uLy4uLy4uL3R5cGVzJ1xuaW1wb3J0IHsgdXNlVHJhbnNpdGlvbiB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXRyYW5zaXRpb24nXG5pbXBvcnQgeyB0cmFuc2l0aW9ucyB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3RyYW5zaXRpb25zJ1xuXG5leHBvcnQgY29uc3QgVkRhdGFUYWJsZUhlYWRlciA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWRhdGEtdGFibGUtaGVhZGVyJyxcblxuICBwcm9wczoge1xuICAgIHNob3dTZXF1ZW5jZTogQm9vbGVhbixcbiAgICBzaG93Q2hlY2tib3g6IEJvb2xlYW4sXG4gICAgY29sczogQXJyYXksXG4gICAgY29sV2lkdGg6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiAxMjUsXG4gICAgfSxcbiAgICBhbGlnbjogU3RyaW5nLFxuICAgIG9wdGlvbnM6IE9iamVjdCxcbiAgfSBhcyBhbnksXG5cbiAgZW1pdHM6IFsnc29ydCcsICdmaWx0ZXInLCAnc2VsZWN0LWFsbCcsICd1cGRhdGU6Y29scyddLFxuXG4gIHNldHVwKHByb3BzLCB7IGVtaXQsIHNsb3RzIH0pIHtcbiAgICBjb25zdCB7IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvciwgc2V0QmFja2dyb3VuZENzc0NvbG9yIH0gPSB1c2VDb2xvcnMoKVxuICAgIGNvbnN0IHsgaWNvbnMgfSA9IHVzZUljb25zKClcbiAgICBjb25zdCBfY2FjaGUgPSB7fVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtZGF0YS10YWJsZV9faGVhZGVyJzogdHJ1ZSxcbiAgICAgIC4uLihwcm9wcy5vcHRpb25zLmNvbG9yXG4gICAgICAgID8gc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yKHByb3BzLm9wdGlvbnMuY29sb3IpXG4gICAgICAgIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgIC4uLihwcm9wcy5vcHRpb25zLmNvbG9yXG4gICAgICAgID8gc2V0QmFja2dyb3VuZENzc0NvbG9yKHByb3BzLm9wdGlvbnMuY29sb3IpXG4gICAgICAgIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3QgY29tcHV0ZWRDb250ZW50Q29sb3IgPSBjb21wdXRlZDxzdHJpbmc+KCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5vcHRpb25zLmRhcmtcbiAgICAgICAgPyBwcm9wcy5vcHRpb25zPy5jb250ZW50Q29sb3IgfHwgJ3doaXRlJ1xuICAgICAgICA6IHByb3BzLm9wdGlvbnM/LmNvbnRlbnRDb2xvclxuICAgIH0pXG5cbiAgICBjb25zdCBjb2xzID0gY29tcHV0ZWQ8RGF0YUNvbHVtbltdPigoKSA9PiBbLi4ucHJvcHMuY29sc10pXG5cbiAgICBjb25zdCBvblNvcnQgPSAoaXRlbSkgPT4ge1xuICAgICAgZW1pdCgnc29ydCcsIGl0ZW0pXG4gICAgfVxuXG4gICAgY29uc3Qgb25JbnB1dCA9ICgkdmFsdWUsIGNvbCkgPT4ge1xuICAgICAgY29sLmZpbHRlcmVkID0gISEkdmFsdWVcbiAgICAgIF9jYWNoZVtjb2wudGl0bGVdID0gJHZhbHVlXG4gICAgICBjb25zb2xlLmxvZyhfY2FjaGUpXG4gICAgICBlbWl0KCdmaWx0ZXInLCB7IHZhbHVlOiAkdmFsdWUsIGNvbCB9KVxuICAgIH1cblxuICAgIGNvbnN0IHNob3dGaWx0ZXIgPSAoaXRlbSkgPT4ge1xuICAgICAgaWYgKGl0ZW0uc2hvd0ZpbHRlcikgcmV0dXJuXG4gICAgICBpdGVtLnNob3dGaWx0ZXIgPSB0cnVlXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuU29ydEJ1dHRvbiA9IChpdGVtKSA9PiB7XG4gICAgICBjb25zdCBjbGFzc2VzID0ge1xuICAgICAgICAndi1kYXRhLXRhYmxlLWNvbF9fYWN0aW9ucy1zb3J0JzogdHJ1ZSxcbiAgICAgICAgJ3YtZGF0YS10YWJsZS1jb2xfX2FjdGlvbnMtc29ydC0tYWN0aXZlJzogaXRlbS5zb3J0ZWQsXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICBjbGFzczogY2xhc3NlcyxcbiAgICAgICAgaWNvbjogaWNvbnMuJGFycm93VXAsXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IG9uU29ydChpdGVtKSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoVkljb24sIHByb3BzRGF0YSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5GaWx0ZXJCdXR0b24gPSAoaXRlbSkgPT4ge1xuICAgICAgY29uc3QgY2xhc3NlcyA9IHtcbiAgICAgICAgJ3YtZGF0YS10YWJsZS1jb2xfX2FjdGlvbnMtZmlsdGVyJzogdHJ1ZSxcbiAgICAgICAgJ3YtZGF0YS10YWJsZS1jb2xfX2FjdGlvbnMtZmlsdGVyLS1hY3RpdmUnOiBpdGVtLmZpbHRlcmVkLFxuICAgICAgfVxuXG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMsXG4gICAgICAgIGljb246IGljb25zLiRmaWx0ZXIsXG4gICAgICAgIGNvbG9yOiAhaXRlbS5jZWxsQ2xhc3MgPyBjb21wdXRlZENvbnRlbnRDb2xvci52YWx1ZSA6ICcnLFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiBzaG93RmlsdGVyKGl0ZW0pLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaChWSWNvbiwgcHJvcHNEYXRhKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkhlYWRlckFjdGlvbnMgPSAoaXRlbSkgPT4ge1xuICAgICAgcmV0dXJuIGgoJ3NwYW4nLCB7IGNsYXNzOiAndi1kYXRhLXRhYmxlLWNvbF9fYWN0aW9ucycgfSwgW1xuICAgICAgICBpdGVtLnNvcnRhYmxlICYmIGdlblNvcnRCdXR0b24oaXRlbSksXG4gICAgICAgIGl0ZW0uZmlsdGVyYWJsZSAmJiBnZW5GaWx0ZXJCdXR0b24oaXRlbSksXG4gICAgICBdKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkZpbHRlcklucHV0ID0gKGNvbCkgPT4ge1xuICAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgbW9kZWxWYWx1ZTogX2NhY2hlW2NvbC50aXRsZV0sXG4gICAgICAgIGxhYmVsOiAnc2VhcmNoJyxcbiAgICAgICAgZGFyazogcHJvcHMub3B0aW9ucy5kYXJrLFxuICAgICAgICBjb2xvcjogIWNvbC5jZWxsQ2xhc3MgPyBjb21wdXRlZENvbnRlbnRDb2xvci52YWx1ZSA6ICcnLFxuICAgICAgICBwcmVwZW5kSWNvbjogaWNvbnMuJHNlYXJjaCxcbiAgICAgICAgY2xlYXJhYmxlOiB0cnVlLFxuICAgICAgICBvbklucHV0OiAoJHZhbHVlKSA9PiBvbklucHV0KCR2YWx1ZSwgY29sKSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoVlRleHRGaWVsZCwgcHJvcHNEYXRhKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkZpbHRlcldyYXBwZXIgPSAoY29sKSA9PiB7XG4gICAgICBjb25zdCBjb2xvciA9IHByb3BzLm9wdGlvbnMuZGFya1xuICAgICAgICA/IHByb3BzLm9wdGlvbnM/LmNvbG9yIHx8ICdncmV5IGRhcmtlbi0zJ1xuICAgICAgICA6IHByb3BzLm9wdGlvbnM/LmNvbG9yIHx8ICd3aGl0ZSdcblxuICAgICAgY29uc3Qgc2xvdE5hbWUgPSBgJHsgY29sLmtleSB9LWZpbHRlcmBcblxuICAgICAgY29uc3QgZmlsdGVyU2xvdCA9IHNsb3RzW3Nsb3ROYW1lXSAmJiBzbG90c1tzbG90TmFtZV0hKHtcbiAgICAgICAgZmlsdGVyOiAoZXZlbnQpID0+IG9uSW5wdXQoZXZlbnQsIGNvbCksXG4gICAgICB9KVxuXG4gICAgICBjb25zdCBkaXJlY3RpdmUgPSBjb2wuc2hvd0ZpbHRlclxuICAgICAgICA/IHtcbiAgICAgICAgICBoYW5kbGVyOiAoKSA9PiBzZXRUaW1lb3V0KCgpID0+IChjb2wuc2hvd0ZpbHRlciA9IGZhbHNlKSksXG4gICAgICAgICAgY2xvc2VDb25kaXRpb25hbDogZmFsc2UsXG4gICAgICAgIH1cbiAgICAgICAgOiB1bmRlZmluZWRcblxuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LWRhdGEtdGFibGUtY29sX19maWx0ZXInOiAhZmlsdGVyU2xvdCxcbiAgICAgICAgICAndi1kYXRhLXRhYmxlLWNvbF9fY3VzdG9tLWZpbHRlcic6ICEhZmlsdGVyU2xvdCxcbiAgICAgICAgICAnZWxldmF0aW9uLTUnOiB0cnVlLFxuICAgICAgICAgIFtjb2wuY2VsbENsYXNzXTogISFjb2wuY2VsbENsYXNzLFxuICAgICAgICAgIC4uLihjb2xvciA/IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihjb2xvcikgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgLi4uKGNvbG9yID8gc2V0QmFja2dyb3VuZENzc0NvbG9yKGNvbG9yKSA6IHt9KSxcbiAgICAgICAgfSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgY29sLmZpbHRlcmFibGUgJiZcbiAgICAgICAgd2l0aERpcmVjdGl2ZXMoaCgnZGl2JywgcHJvcHNEYXRhLCBmaWx0ZXJTbG90IHx8IGdlbkZpbHRlcklucHV0KGNvbCkpLCBbXG4gICAgICAgICAgW2NsaWNrT3V0c2lkZSwgZGlyZWN0aXZlXSxcbiAgICAgICAgICBbdlNob3csIGNvbC5zaG93RmlsdGVyXSxcbiAgICAgICAgXSlcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5IZWFkZXJUaXRsZSA9IChjb2wpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaCgnZGl2JywgeyBjbGFzczogJ3YtZGF0YS10YWJsZS1jb2xfX3RpdGxlJyB9LCBjb2wudGl0bGUpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuTnVtYmVyQ2VsbCA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1kYXRhLXRhYmxlLWNvbF9fbnVtYmVyJzogdHJ1ZSxcbiAgICAgICAgICBbcHJvcHMuY2VsbENsYXNzXTogISFwcm9wcy5jZWxsQ2xhc3MsXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRlbnRDb2xvcjogY29tcHV0ZWRDb250ZW50Q29sb3IudmFsdWUsXG4gICAgICAgIGNvbG9yOiBwcm9wcy5vcHRpb25zLmNvbG9yLFxuICAgICAgICB3aWR0aDogNTAsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKFZEYXRhVGFibGVDZWxsLCBwcm9wc0RhdGEsIHsgZGVmYXVsdDogKCkgPT4gJ+KElicgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5DaGVja2JveENlbGwgPSAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1kYXRhLXRhYmxlLWNvbF9fY2hlY2tib3gnOiB0cnVlLFxuICAgICAgICAgIFtwcm9wcy5jZWxsQ2xhc3NdOiAhIXByb3BzLmNlbGxDbGFzcyxcbiAgICAgICAgfSxcbiAgICAgICAgZGFyazogcHJvcHMub3B0aW9ucy5kYXJrLFxuICAgICAgICBjb250ZW50Q29sb3I6IGNvbXB1dGVkQ29udGVudENvbG9yLnZhbHVlLFxuICAgICAgICBjb2xvcjogcHJvcHMub3B0aW9ucy5jb2xvcixcbiAgICAgICAgd2lkdGg6IDUwLFxuICAgICAgfVxuXG4gICAgICBjb25zdCBjb250ZW50ID0ge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PlxuICAgICAgICAgIGgoVkNoZWNrYm94LCB7XG4gICAgICAgICAgICBjb2xvcjogY29tcHV0ZWRDb250ZW50Q29sb3IudmFsdWUsXG4gICAgICAgICAgICBvbkNoYW5nZTogKGUpID0+IGVtaXQoJ3NlbGVjdC1hbGwnLCBlKSxcbiAgICAgICAgICB9KSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoVkRhdGFUYWJsZUNlbGwsIHByb3BzRGF0YSwgY29udGVudClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5IZWFkZXJDZWxsID0gKGNvbCkgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBkYXJrOiBwcm9wcy5vcHRpb25zLmRhcmssXG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgJ3YtZGF0YS10YWJsZS1jb2wnOiB0cnVlLFxuICAgICAgICAgICd2LWRhdGEtdGFibGUtY29sLS1zb3J0ZWQnOiBjb2wuc29ydGVkLFxuICAgICAgICAgIFtjb2wuY2VsbENsYXNzXTogISFjb2wuY2VsbENsYXNzLFxuICAgICAgICB9LFxuICAgICAgICBjb250ZW50Q29sb3I6ICFjb2wuY2VsbENsYXNzID8gY29tcHV0ZWRDb250ZW50Q29sb3IudmFsdWUgOiAnJyxcbiAgICAgICAgY29sb3I6ICFjb2wuY2VsbENsYXNzID8gcHJvcHMub3B0aW9ucy5jb2xvciA6ICcnLFxuICAgICAgICB3aWR0aDogY29sLndpZHRoLFxuICAgICAgICByZXNpemVhYmxlOiBjb2wucmVzaXplYWJsZSxcbiAgICAgICAgcmVzaXplckNvbG9yOiBwcm9wcy5vcHRpb25zPy5yZXNpemVyQ29sb3IsXG4gICAgICAgIGFsaWduOiBjb2wuYWxpZ24gfHwgcHJvcHMuYWxpZ24sXG4gICAgICAgIG9uUmVzaXplOiAoJHNpemUpID0+IChjb2wud2lkdGggPSAkc2l6ZSksXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKFZEYXRhVGFibGVDZWxsLCBwcm9wc0RhdGEsIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW1xuICAgICAgICAgIGdlbkhlYWRlclRpdGxlKGNvbCksXG4gICAgICAgICAgZ2VuSGVhZGVyQWN0aW9ucyhjb2wpLFxuICAgICAgICAgIHVzZVRyYW5zaXRpb24oZ2VuRmlsdGVyV3JhcHBlcihjb2wpLCB0cmFuc2l0aW9ucy5GQURFKSxcbiAgICAgICAgXSxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuSGVhZGVyQ2hpbGRyZW4gPSAoKSA9PiB7XG4gICAgICBjb25zdCBjaGlsZHJlbjogVk5vZGVbXSA9IFtdXG4gICAgICBjb25zdCBoZWFkZXJTbG90ID0gc2xvdHMuaGVhZGVyICYmIHNsb3RzLmhlYWRlcihwcm9wcylcblxuICAgICAgcHJvcHMuc2hvd1NlcXVlbmNlICYmIGNoaWxkcmVuLnB1c2goZ2VuTnVtYmVyQ2VsbCgpKVxuICAgICAgcHJvcHMuc2hvd0NoZWNrYm94ICYmIGNoaWxkcmVuLnB1c2goZ2VuQ2hlY2tib3hDZWxsKCkpXG5cbiAgICAgIGNvbHMudmFsdWUhLmZvckVhY2goKGNvbDogRGF0YUNvbHVtbikgPT4ge1xuICAgICAgICBjb2wud2lkdGggPSBjb2wud2lkdGggfHwgcHJvcHMuY29sV2lkdGhcblxuICAgICAgICBpZiAoIWNvbC5oYXNPd25Qcm9wZXJ0eSgnc2hvdycpKSB7XG4gICAgICAgICAgY29sLnNob3cgPSAhY29sLnNob3dcbiAgICAgICAgfVxuXG4gICAgICAgICFoZWFkZXJTbG90IVswXS5jaGlsZHJlbiAmJlxuICAgICAgICBjb2wuc2hvdyAmJlxuICAgICAgICBjaGlsZHJlbi5wdXNoKGdlbkhlYWRlckNlbGwoY29sKSlcbiAgICAgIH0pXG5cbiAgICAgIGhlYWRlclNsb3QhWzBdLmNoaWxkcmVuICYmIGNoaWxkcmVuLnB1c2goaGVhZGVyU2xvdCBhcyBhbnkpXG5cbiAgICAgIHJldHVybiBjaGlsZHJlblxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgICBzdHlsZTogc3R5bGVzLnZhbHVlLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBnZW5IZWFkZXJDaGlsZHJlbigpKVxuICAgIH1cbiAgfSxcbn0pXG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyBoLCByZWYsIHdhdGNoLCBjb21wdXRlZCwgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJ1xuXG4vLyBFZmZlY3RzXG5pbXBvcnQgeyBjb2xvclByb3BzLCB1c2VDb2xvcnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZEYXRhVGFibGVDZWxsIH0gZnJvbSAnLi9WRGF0YVRhYmxlQ2VsbCdcbmltcG9ydCB7IFZDaGVja2JveCB9IGZyb20gJy4uL1ZDaGVja2JveCdcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuXG5leHBvcnQgY29uc3QgVkRhdGFUYWJsZUJvZHkgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1kYXRhLXRhYmxlLWJvZHknLFxuXG4gIHByb3BzOiB7XG4gICAgY29sczogQXJyYXksXG4gICAgcm93czogQXJyYXksXG4gICAgZGFyazogQm9vbGVhbixcbiAgICBzaG93U2VxdWVuY2U6IEJvb2xlYW4sXG4gICAgc2hvd0NoZWNrYm94OiBCb29sZWFuLFxuICAgIGNoZWNrQWxsUm93czogQm9vbGVhbixcbiAgICBhbGlnbjogU3RyaW5nLFxuICAgIGNvbFdpZHRoOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogMTI1LFxuICAgIH0sXG4gICAgcGFnZTogTnVtYmVyLFxuICAgIHJvd3NPblBhZ2U6IE51bWJlcixcbiAgICAuLi5jb2xvclByb3BzKCksXG4gIH0gYXMgYW55LFxuXG4gIGVtaXRzOiBbJ3NlbGVjdCcsICdjbGljazpyb3cnLCAnZGJsY2xpY2s6cm93JywgJ2NvbnRleHRtZW51OnJvdyddLFxuXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzLCBlbWl0IH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3QgY2hlY2tlZFJvd3MgPSByZWYoW10pXG5cbiAgICBjb25zdCB7IHNldEJhY2tncm91bmRDc3NDb2xvciwgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yIH0gPSB1c2VDb2xvcnMoKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtZGF0YS10YWJsZV9fYm9keSc6IHRydWUsXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCByb3dzT25UYWJsZSA9IGNvbXB1dGVkPGFueVtdPigoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMucm93cz8uc2xpY2UoXG4gICAgICAgIChwcm9wcy5wYWdlIC0gMSkgKiBwcm9wcy5yb3dzT25QYWdlLFxuICAgICAgICBwcm9wcy5wYWdlICogcHJvcHMucm93c09uUGFnZSxcbiAgICAgIClcbiAgICB9KVxuXG4gICAgd2F0Y2goXG4gICAgICAoKSA9PiBwcm9wcy5jaGVja0FsbFJvd3MsXG4gICAgICAodG8pID0+IHtcbiAgICAgICAgaWYgKHRvKSBvblNlbGVjdFJvd3MocHJvcHMucm93cylcbiAgICAgICAgZWxzZSBvblNlbGVjdFJvd3MoW10pXG4gICAgICB9LFxuICAgIClcblxuICAgIGNvbnN0IG9uU2VsZWN0Um93cyA9IChyb3dzKSA9PiB7XG4gICAgICBjaGVja2VkUm93cy52YWx1ZSA9IHJvd3NcbiAgICAgIGVtaXQoJ3NlbGVjdCcsIGNoZWNrZWRSb3dzLnZhbHVlKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbk51bWJlckNlbGwgPSAoY291bnQpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaChcbiAgICAgICAgVkRhdGFUYWJsZUNlbGwsXG4gICAgICAgIHtcbiAgICAgICAgICB3aWR0aDogNTAsXG4gICAgICAgICAgYWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgIGRhcms6IHByb3BzLmRhcmssXG4gICAgICAgICAgY29sb3I6IHByb3BzLmNvbG9yLFxuICAgICAgICAgIGNsYXNzOiAndi1kYXRhLXRhYmxlX19yb3ctbnVtYmVyJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IGNvdW50ICsgMSxcbiAgICAgICAgfSxcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5DaGVja2JveENlbGwgPSAocm93KTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoXG4gICAgICAgIFZEYXRhVGFibGVDZWxsLFxuICAgICAgICB7XG4gICAgICAgICAgd2lkdGg6IDUwLFxuICAgICAgICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICBkYXJrOiBwcm9wcy5kYXJrLFxuICAgICAgICAgIGNvbG9yOiBwcm9wcy5jb2xvcixcbiAgICAgICAgICBjbGFzczogJ3YtZGF0YS10YWJsZV9fcm93LWNoZWNrYm94JyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGRlZmF1bHQ6ICgpID0+XG4gICAgICAgICAgICBoKFZDaGVja2JveCwge1xuICAgICAgICAgICAgICBtb2RlbFZhbHVlOiBjaGVja2VkUm93cy52YWx1ZSxcbiAgICAgICAgICAgICAgY29sb3I6IHByb3BzLmRhcmsgPyAnd2hpdGUnIDogJycsXG4gICAgICAgICAgICAgIHZhbHVlOiByb3csXG4gICAgICAgICAgICAgIG9uQ2hhbmdlOiBvblNlbGVjdFJvd3MsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSxcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5Sb3dDZWxsID0gKGNvbCwgcm93KTogVk5vZGUgPT4ge1xuICAgICAgY29uc3QgeyBmb3JtYXQgfSA9IGNvbFxuICAgICAgY29uc3Qgc2xvdENvbnRlbnQgPVxuICAgICAgICBzbG90c1tjb2wua2V5XSAmJlxuICAgICAgICBzbG90c1tjb2wua2V5XSEoe1xuICAgICAgICAgIHJvdyxcbiAgICAgICAgICBmb3JtYXQsXG4gICAgICAgIH0pXG5cbiAgICAgIHJldHVybiBoKFxuICAgICAgICBWRGF0YVRhYmxlQ2VsbCxcbiAgICAgICAge1xuICAgICAgICAgIHdpZHRoOiBjb2wud2lkdGgsXG4gICAgICAgICAgYWxpZ246IGNvbC5hbGlnbiB8fCBwcm9wcy5hbGlnbixcbiAgICAgICAgICBkYXJrOiBwcm9wcy5kYXJrLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT5cbiAgICAgICAgICAgIHNsb3RDb250ZW50XG4gICAgICAgICAgICAgID8gc2xvdENvbnRlbnRcbiAgICAgICAgICAgICAgOiBmb3JtYXRcbiAgICAgICAgICAgICAgPyBmb3JtYXQocm93KVxuICAgICAgICAgICAgICA6IFN0cmluZyhyb3dbY29sLmtleV0pLFxuICAgICAgICB9LFxuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IGdlblRhYmxlUm93ID0gKHJvdywgcm93Q291bnQ6IG51bWJlcik6IFZOb2RlID0+IHtcbiAgICAgIGNvbnN0IHJvd0NlbGxzOiBWTm9kZVtdID0gW11cblxuICAgICAgcHJvcHMuc2hvd1NlcXVlbmNlICYmIHJvd0NlbGxzLnB1c2goZ2VuTnVtYmVyQ2VsbChyb3dDb3VudCkpXG4gICAgICBwcm9wcy5zaG93Q2hlY2tib3ggJiYgcm93Q2VsbHMucHVzaChnZW5DaGVja2JveENlbGwocm93KSlcblxuICAgICAgcHJvcHMuY29scy5mb3JFYWNoKChjb2wpID0+IHtcbiAgICAgICAgY29sLnNob3cgJiYgcm93Q2VsbHMucHVzaChnZW5Sb3dDZWxsKGNvbCwgcm93KSlcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiBoKFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzOiB7ICd2LWRhdGEtdGFibGVfX3Jvdyc6IHRydWUgfSxcbiAgICAgICAgICBvbkNsaWNrOiAoKSA9PiBlbWl0KCdjbGljazpyb3cnLCByb3cpLFxuICAgICAgICAgIG9uRGJsY2xpY2s6ICgpID0+IGVtaXQoJ2RibGNsaWNrOnJvdycsIHJvdyksXG4gICAgICAgICAgb25Db250ZXh0bWVudTogKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgICAgZW1pdCgnY29udGV4dG1lbnU6cm93Jywgcm93KVxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHJvd0NlbGxzLFxuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IGdlblRhYmxlUm93cyA9ICgpOiBWTm9kZVtdID0+IHtcbiAgICAgIGNvbnN0IHRhYmxlUm93czogVk5vZGVbXSA9IFtdXG4gICAgICBjb25zdCByb3dzTGVuZ3RoID0gcm93c09uVGFibGUudmFsdWU/Lmxlbmd0aFxuICAgICAgY29uc3QgY291bnQgPSAocHJvcHMucGFnZSAtIDEpICogcHJvcHMucm93c09uUGFnZVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd3NMZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB0YWJsZVJvd3MucHVzaChnZW5UYWJsZVJvdyhyb3dzT25UYWJsZS52YWx1ZVtpXSwgY291bnQgKyBpKSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRhYmxlUm93c1xuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiBoKCdkaXYnLCB7XG4gICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgIHN0eWxlOiBzdHlsZXMudmFsdWUsXG4gICAgfSwgZ2VuVGFibGVSb3dzKCkpXG4gIH0sXG59KVxuIiwiLy8gVnVlIEFQSVxuaW1wb3J0IHsgd2F0Y2gsIGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQsIGgsIHJlZiwgUHJvcFR5cGUgfSBmcm9tICd2dWUnXG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZJY29uIH0gZnJvbSAnLi4vVkljb24nXG5pbXBvcnQgeyBWQnV0dG9uIH0gZnJvbSAnLi4vVkJ1dHRvbidcbmltcG9ydCB7IFZNZW51IH0gZnJvbSAnLi4vVk1lbnUnXG5cbi8vIEVmZmVjdHNcbmltcG9ydCB7IHVzZUNvbG9ycyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcblxuaW1wb3J0IHsgdXNlSWNvbnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1pY29ucydcbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvYmFzZSdcbmltcG9ydCB7IElEYXRhVGFibGVGb290ZXJPcHRpb25zIH0gZnJvbSAnLi90eXBlcydcblxuZXhwb3J0IGNvbnN0IFZEYXRhVGFibGVGb290ZXIgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1kYXRhLXRhYmxlLWZvb3RlcicsXG4gIHByb3BzOiB7XG4gICAgcGFnZXM6IE51bWJlcixcbiAgICBwYWdlOiBOdW1iZXIsXG4gICAgZmlyc3RPblBhZ2U6IE51bWJlcixcbiAgICBsYXN0T25QYWdlOiBOdW1iZXIsXG4gICAgcGFnZUNvcnJlY3Rpb246IE51bWJlcixcbiAgICByb3dzTGVuZ3RoOiBOdW1iZXIsXG4gICAgcm93c09uUGFnZTogTnVtYmVyLFxuICAgIG9wdGlvbnM6IE9iamVjdCBhcyBQcm9wVHlwZTxJRGF0YVRhYmxlRm9vdGVyT3B0aW9ucz4sXG4gIH0gYXMgYW55LFxuXG4gIGVtaXRzOiBbXG4gICAgJ2xhc3QtcGFnZScsXG4gICAgJ2NvcnJlY3QtcGFnZScsXG4gICAgJ3NlbGVjdC1yb3dzLWNvdW50JyxcbiAgICAnbmV4dC1wYWdlJyxcbiAgICAncHJldi1wYWdlJyxcbiAgXSxcblxuICBzZXR1cChwcm9wcywgeyBlbWl0LCBzbG90cyB9KTogKCkgPT4gVk5vZGUge1xuICAgIGNvbnN0IHtcbiAgICAgIHNldEJhY2tncm91bmRDc3NDb2xvcixcbiAgICAgIHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcixcbiAgICAgIHNldFRleHRDbGFzc05hbWVDb2xvcixcbiAgICAgIHNldFRleHRDc3NDb2xvcixcbiAgICB9ID0gdXNlQ29sb3JzKClcbiAgICBjb25zdCB7IGljb25zIH0gPSB1c2VJY29ucygpXG5cbiAgICBjb25zdCBhY3RpdmF0b3IgPSByZWY8TWF5YmU8SFRNTEVsZW1lbnQ+PihudWxsKVxuXG4gICAgY29uc3QgcGFnaW5hdGlvbkRpc3BsYXlUZXh0ID0gY29tcHV0ZWQ8c3RyaW5nPigoKSA9PiB7XG4gICAgICByZXR1cm4gYCR7IHByb3BzLmZpcnN0T25QYWdlIH0gLSAkeyBwcm9wcy5sYXN0T25QYWdlIH1cbiAgICAgICAgb2YgJHsgcHJvcHMucm93c0xlbmd0aCB9YFxuICAgIH0pXG5cbiAgICBjb25zdCBpc0xhc3RQYWdlID0gY29tcHV0ZWQ8Ym9vbGVhbj4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLnBhZ2UgPj0gcHJvcHMucGFnZXNcbiAgICB9KVxuXG4gICAgd2F0Y2goXG4gICAgICAoKSA9PiBpc0xhc3RQYWdlLnZhbHVlLFxuICAgICAgKHRvKSA9PiB0byAmJiBlbWl0KCdsYXN0LXBhZ2UnKSxcbiAgICApXG5cbiAgICBmdW5jdGlvbiBjaGFuZ2VUYWJsZVJvd3NQYWdlKGlzTmV4dCkge1xuICAgICAgaWYgKHByb3BzLnBhZ2UgPT09IHByb3BzLnBhZ2VzICYmIGlzTmV4dCkgcmV0dXJuXG5cbiAgICAgIGNvbnN0IGV2ZW50ID0gaXNOZXh0ID8gJ25leHQtcGFnZScgOiAncHJldi1wYWdlJ1xuICAgICAgZW1pdChldmVudCwgaXNOZXh0ID8gMSA6IC0xKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlblBhZ2luYXRpb25CdXR0b24oaXNOZXh0ID0gZmFsc2UpOiBWTm9kZSB7XG4gICAgICBjb25zdCBidG5Db2xvciA9IHByb3BzLm9wdGlvbnM/LnBhZ2luYXRpb24/LmJ1dHRvbnNDb2xvciB8fCAncHJpbWFyeSdcbiAgICAgIGNvbnN0IGNvbnRlbnRDb2xvciA9IHByb3BzLm9wdGlvbnMuY29udGVudENvbG9yIHx8ICd3aGl0ZSdcblxuICAgICAgY29uc3QgZGlzYWJsZUlmID1cbiAgICAgICAgKGlzTmV4dCAmJiBwcm9wcy5sYXN0T25QYWdlID49IHByb3BzLnJvd3NMZW5ndGgpIHx8XG4gICAgICAgICghaXNOZXh0ICYmIHByb3BzLmZpcnN0T25QYWdlID09PSAxKVxuXG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIHdpZHRoOiA0MixcbiAgICAgICAgY29sb3I6IGJ0bkNvbG9yLFxuICAgICAgICBlbGV2YXRpb246IDMsXG4gICAgICAgIGRpc2FibGVkOiBkaXNhYmxlSWYsXG4gICAgICAgIHRleHQ6IGRpc2FibGVJZixcbiAgICAgICAgb25DbGljazogKCkgPT4gY2hhbmdlVGFibGVSb3dzUGFnZShpc05leHQpLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaChWQnV0dG9uLCBwcm9wc0RhdGEsIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT5cbiAgICAgICAgICBoKFZJY29uLCB7XG4gICAgICAgICAgICBpY29uOiBpc05leHQgPyBpY29ucy4kYXJyb3dSaWdodCA6IGljb25zLiRhcnJvd0xlZnQsXG4gICAgICAgICAgICBjb2xvcjogZGlzYWJsZUlmID8gJ2dyZXkgbGlnaHRlbi0xJyA6IGNvbnRlbnRDb2xvcixcbiAgICAgICAgICB9KSxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuUGFnaW5hdGlvblBhZ2VEaXNwbGF5KCk6IFZOb2RlIHtcbiAgICAgIGNvbnN0IGRpc3BsYXlDb2xvciA9IHByb3BzLm9wdGlvbnM/LnBhZ2luYXRpb24/LmRpc3BsYXlDb2xvciB8fCAncHJpbWFyeSdcblxuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICB3aWR0aDogNDIsXG4gICAgICAgIHN0eWxlOiB7IG1hcmdpbjogJzAgMTBweCcgfSxcbiAgICAgICAgY29sb3I6IGRpc3BsYXlDb2xvcixcbiAgICAgICAgZWxldmF0aW9uOiAzLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaChWQnV0dG9uLCBwcm9wc0RhdGEsIHsgZGVmYXVsdDogKCkgPT4gcHJvcHMucGFnZSB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlblJvd3NDb3VudFNlbGVjdExpc3QgPSAoKSA9PiB7XG4gICAgICBjb25zdCBvcHRpb25zID0gcHJvcHMub3B0aW9ucy5jb3VudHM/LnJvd3NQZXJQYWdlT3B0aW9ucyB8fCBbNSwgMTAsIDE1LCAyMF1cbiAgICAgIGNvbnN0IGNvbG9yID0gcHJvcHMub3B0aW9ucz8uY291bnRzPy5kaXNwbGF5Q29sb3IgfHwgJ3ByaW1hcnknXG4gICAgICBjb25zdCBjb250ZW50Q29sb3IgPSBwcm9wcy5vcHRpb25zLmNvbnRlbnRDb2xvciB8fCAnd2hpdGUnXG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAgICd2LWRhdGEtdGFibGVfX3Jvd3MtY291bnQtbGlzdCc6IHRydWUsXG4gICAgICAgICAgICAuLi4oY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IoY29sb3IpIDoge30pLFxuICAgICAgICAgICAgLi4uKGNvbnRlbnRDb2xvciA/IHNldFRleHRDbGFzc05hbWVDb2xvcihjb250ZW50Q29sb3IpIDoge30pLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIC4uLihjb2xvciA/IHNldEJhY2tncm91bmRDc3NDb2xvcihjb2xvcikgOiB7fSksXG4gICAgICAgICAgICAuLi4oY29udGVudENvbG9yID8gc2V0VGV4dENzc0NvbG9yKGNvbnRlbnRDb2xvcikgOiB7fSksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSwgb3B0aW9ucy5tYXAoKGl0KSA9PiBoKCdkaXYnLCB7XG4gICAgICAgICAgY2xhc3M6ICd2LWRhdGEtdGFibGVfX3Jvd3MtY291bnQtaXRlbScsXG4gICAgICAgICAgb25DbGljazogKCkgPT4gZW1pdCgnc2VsZWN0LXJvd3MtY291bnQnLCBpdCksXG4gICAgICAgIH0sIFtpdF0pKSxcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5NZW51ID0gKCkgPT4ge1xuXG4gICAgICByZXR1cm4gaChWTWVudSwge1xuICAgICAgICBhY3RpdmF0b3I6IGFjdGl2YXRvci52YWx1ZSEsXG4gICAgICAgIG1heEhlaWdodDogMjQwLFxuICAgICAgICB6SW5kZXg6IDEyLFxuICAgICAgICBvcGVuT25DbGljazogdHJ1ZSxcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gZ2VuUm93c0NvdW50U2VsZWN0TGlzdCgpLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5Sb3dzQ291bnRGaWVsZCA9ICgpID0+IHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzOiAndi1kYXRhLXRhYmxlX19yb3dzLWNvdW50LXZhbHVlJyxcbiAgICAgICAgdGV4dENvbG9yOiBwcm9wcy5vcHRpb25zLmNvbnRlbnRDb2xvcixcbiAgICAgIH0sIHByb3BzLnJvd3NPblBhZ2UpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuUm93c0NvdW50U2VsZWN0ID0gKCkgPT4ge1xuICAgICAgY29uc3QgZGlzcGxheUNvbG9yID0gcHJvcHMub3B0aW9ucz8uY291bnRzPy5kaXNwbGF5Q29sb3IgfHwgJ3ByaW1hcnknXG5cbiAgICAgIHJldHVybiBoKFZCdXR0b24sIHtcbiAgICAgICAgY29sb3I6IGRpc3BsYXlDb2xvcixcbiAgICAgICAgcmVmOiBhY3RpdmF0b3IsXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtcbiAgICAgICAgICBnZW5Sb3dzQ291bnRGaWVsZCgpLFxuICAgICAgICAgIGFjdGl2YXRvci52YWx1ZSAmJiBnZW5NZW51KCksXG4gICAgICAgIF0sXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlblJvd3NDb3VudFNlbGVjdENhcHRpb24gPSAoKTogVk5vZGUgPT4ge1xuICAgICAgY29uc3QgY29sb3IgPSBwcm9wcy5vcHRpb25zLmNvbnRlbnRDb2xvclxuXG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgJ3YtZGF0YS10YWJsZV9fcGFnaW5hdGlvbi1sYWJlbCc6IHRydWUsXG4gICAgICAgICAgLi4uKGNvbG9yID8gc2V0VGV4dENsYXNzTmFtZUNvbG9yKGNvbG9yKSA6IHt9KSxcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAuLi4oY29sb3IgPyBzZXRUZXh0Q3NzQ29sb3IoY29sb3IpIDoge30pLFxuICAgICAgICB9LFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICBwcm9wc0RhdGEsXG4gICAgICAgIHByb3BzLm9wdGlvbnM/LmNvdW50cz8ucm93c1BlclBhZ2VUZXh0IHx8ICdSb3dzIHBlciBwYWdlJyxcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5Sb3dzQ291bnRTZWxlY3RCbG9jayA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaCgnZGl2JywgeyBjbGFzczogJ3YtZGF0YS10YWJsZV9fcGFnaW5hdGlvbi1zZWxlY3QnIH0sIFtcbiAgICAgICAgZ2VuUm93c0NvdW50U2VsZWN0Q2FwdGlvbigpLFxuICAgICAgICBnZW5Sb3dzQ291bnRTZWxlY3QoKSxcbiAgICAgIF0pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuUGFnZXNDb3VudERpc3BsYXkgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgY29uc3QgY29sb3IgPSBwcm9wcy5vcHRpb25zLmNvbnRlbnRDb2xvclxuXG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgJ3YtZGF0YS10YWJsZV9fcGFnaW5hdGlvbi1wYWdlcyc6IHRydWUsXG4gICAgICAgICAgLi4uKGNvbG9yID8gc2V0VGV4dENsYXNzTmFtZUNvbG9yKGNvbG9yKSA6IHt9KSxcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAuLi4oY29sb3IgPyBzZXRUZXh0Q3NzQ29sb3IoY29sb3IpIDoge30pLFxuICAgICAgICB9LFxuICAgICAgfVxuXG4gICAgICBwcm9wcy5wYWdlQ29ycmVjdGlvbiAmJiBlbWl0KCdjb3JyZWN0LXBhZ2UnLCAtcHJvcHMucGFnZUNvcnJlY3Rpb24pXG5cbiAgICAgIHJldHVybiBoKFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgcHJvcHNEYXRhLFxuICAgICAgICAocHJvcHMucm93c0xlbmd0aCAmJiBzbG90c1sncGFnaW5hdGlvbi10ZXh0J10/LigpKSB8fFxuICAgICAgICAocHJvcHMucm93c0xlbmd0aCAmJiBwYWdpbmF0aW9uRGlzcGxheVRleHQudmFsdWUpIHx8XG4gICAgICAgICctJyxcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5QYWdpbmF0aW9uQnV0dG9uc0Jsb2NrID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7IGNsYXNzOiB7ICd2LWRhdGEtdGFibGVfX3BhZ2luYXRpb24tcm91dGUnOiB0cnVlIH0gfSwgW1xuICAgICAgICBnZW5QYWdpbmF0aW9uQnV0dG9uKCksXG4gICAgICAgIGdlblBhZ2luYXRpb25QYWdlRGlzcGxheSgpLFxuICAgICAgICBnZW5QYWdpbmF0aW9uQnV0dG9uKHRydWUpLFxuICAgICAgXSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5QYWdpbmF0aW9uQmxvY2sgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2RpdicsIHsgY2xhc3M6ICd2LWRhdGEtdGFibGVfX3BhZ2luYXRpb24nIH0sIFtcbiAgICAgICAgZ2VuUm93c0NvdW50U2VsZWN0QmxvY2soKSxcbiAgICAgICAgZ2VuUGFnZXNDb3VudERpc3BsYXkoKSxcbiAgICAgICAgZ2VuUGFnaW5hdGlvbkJ1dHRvbnNCbG9jaygpLFxuICAgICAgXSlcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LWRhdGEtdGFibGVfX2Zvb3Rlcic6IHRydWUsXG4gICAgICAgICAgLi4uKHByb3BzLm9wdGlvbnMuY29sb3JcbiAgICAgICAgICAgID8gc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yKHByb3BzLm9wdGlvbnMuY29sb3IpXG4gICAgICAgICAgICA6IHt9KSxcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAuLi4ocHJvcHMub3B0aW9ucy5jb2xvclxuICAgICAgICAgICAgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMub3B0aW9ucy5jb2xvcilcbiAgICAgICAgICAgIDoge30pLFxuICAgICAgICB9LFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBnZW5QYWdpbmF0aW9uQmxvY2soKSlcbiAgICB9XG4gIH0sXG59KVxuIiwiLy8gVnVlIEFQSVxuaW1wb3J0IHsgaCwgd2F0Y2gsIGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQsIHJlYWN0aXZlIH0gZnJvbSAndnVlJ1xuXG4vLyBFZmZlY3RzXG5pbXBvcnQgeyB1c2VDb2xvcnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG4vLyBpbXBvcnQgeyB1c2VUaGVtZSB9IGZyb20gJy4uLy4uL2VmZmVjdHMvdXNlLXRoZW1lJ1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWRGF0YVRhYmxlSGVhZGVyIH0gZnJvbSAnLi9WRGF0YVRhYmxlSGVhZGVyJ1xuaW1wb3J0IHsgVkRhdGFUYWJsZUJvZHkgfSBmcm9tICcuL1ZEYXRhVGFibGVCb2R5J1xuaW1wb3J0IHsgVkRhdGFUYWJsZUZvb3RlciB9IGZyb20gJy4vVkRhdGFUYWJsZUZvb3RlcidcblxuLy8gSGVscGVyc1xuaW1wb3J0IHsgYWRkU2NvcGVkU2xvdCB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSwgUHJvcFR5cGUgfSBmcm9tICd2dWUnXG5pbXBvcnQge1xuICBEYXRhQ29sdW1uLFxuICBEYXRhQ29sdW1uUHJvcHMsXG4gIEZvb3Rlck9wdGlvbnMsXG4gIEhlYWRlck9wdGlvbnMsXG4gIFRhYmxlRmlsdGVyLFxufSBmcm9tICcuLi8uLi8uLi90eXBlcydcblxudHlwZSBUYWJsZVN0YXRlID0ge1xuICBjb2xzOiBEYXRhQ29sdW1uW11cbiAgcm93czogeyBba2V5OiBzdHJpbmddOiBhbnkgfVtdXG4gIGNoZWNrZWRSb3dzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9W11cbiAgcm93c09uUGFnZTogbnVtYmVyXG4gIHBhZ2U6IG51bWJlclxuICBpc0FsbFJvd3NDaGVja2VkOiBib29sZWFuXG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWRhdGEtdGFibGUnLFxuICBwcm9wczoge1xuICAgIGNvbHM6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgZGVmYXVsdDogKCkgPT4gW10sXG4gICAgfSxcbiAgICByb3dzOiB7XG4gICAgICB0eXBlOiBBcnJheSxcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFtdLFxuICAgIH0sXG4gICAgZGFyazogQm9vbGVhbixcbiAgICBzaG93U2VxdWVuY2U6IEJvb2xlYW4sXG4gICAgc2hvd0NoZWNrYm94OiBCb29sZWFuLFxuICAgIGFsaWduOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICB2YWxpZGF0b3I6ICh2YWwpID0+IFsnbGVmdCcsICdjZW50ZXInLCAncmlnaHQnXS5pbmNsdWRlcyh2YWwpLFxuICAgIH0sXG4gICAgY29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICd3aGl0ZScsXG4gICAgfSxcbiAgICBoZWFkZXJPcHRpb25zOiB7XG4gICAgICB0eXBlOiBPYmplY3QgYXMgUHJvcFR5cGU8SGVhZGVyT3B0aW9ucz4sXG4gICAgICBkZWZhdWx0OiAoKSA9PiAoe30pLFxuICAgIH0sXG4gICAgZm9vdGVyT3B0aW9uczoge1xuICAgICAgdHlwZTogT2JqZWN0IGFzIFByb3BUeXBlPEZvb3Rlck9wdGlvbnM+LFxuICAgICAgZGVmYXVsdDogKCkgPT4gKHt9KSxcbiAgICB9LFxuICAgIGN1c3RvbUZpbHRlcjogRnVuY3Rpb24sXG4gIH0gYXMgYW55LFxuXG4gIGVtaXRzOiBbXG4gICAgJ2xhc3QtcGFnZScsXG4gICAgJ3NlbGVjdDpyb3cnLFxuICAgICdjbGljazpyb3cnLFxuICAgICdkYmxjbGljazpyb3cnLFxuICAgICdjb250ZXh0bWVudTpyb3cnLFxuICBdLFxuXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzLCBlbWl0IH0pIHtcbiAgICBjb25zdCBkYXRhID0gcmVhY3RpdmU8VGFibGVTdGF0ZT4oe1xuICAgICAgY29sczogW10sXG4gICAgICByb3dzOiBbXSxcbiAgICAgIGNoZWNrZWRSb3dzOiBbXSxcbiAgICAgIHJvd3NPblBhZ2U6IDIwLFxuICAgICAgcGFnZTogMSxcbiAgICAgIGlzQWxsUm93c0NoZWNrZWQ6IGZhbHNlLFxuICAgIH0pXG5cbiAgICBjb25zdCB7IHNldEJhY2tncm91bmRDc3NDb2xvciwgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yIH0gPSB1c2VDb2xvcnMoKVxuXG4gICAgY29uc3QgZmlsdGVycyA9IHt9XG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1kYXRhLXRhYmxlJzogdHJ1ZSxcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0QmFja2dyb3VuZENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IGhlYWRlck9wdGlvbnMgPSBjb21wdXRlZDxIZWFkZXJPcHRpb25zPigoKSA9PiAoe1xuICAgICAgY29sb3I6IHByb3BzLmNvbG9yLFxuICAgICAgZGFyazogcHJvcHMuZGFyayxcbiAgICAgIC4uLnByb3BzLmhlYWRlck9wdGlvbnMsXG4gICAgfSkpXG5cbiAgICBjb25zdCBmb290ZXJPcHRpb25zID0gY29tcHV0ZWQ8Rm9vdGVyT3B0aW9ucz4oKCkgPT4gKHtcbiAgICAgIGNvbG9yOiBwcm9wcy5jb2xvcixcbiAgICAgIGRhcms6IHByb3BzLmRhcmssXG4gICAgICAuLi5wcm9wcy5mb290ZXJPcHRpb25zLFxuICAgIH0pKVxuXG4gICAgY29uc3QgcGFnZXMgPSBjb21wdXRlZDxudW1iZXI+KCgpID0+IHtcbiAgICAgIHJldHVybiBNYXRoLmNlaWwoZGF0YS5yb3dzPy5sZW5ndGggLyBkYXRhLnJvd3NPblBhZ2UpXG4gICAgfSlcblxuICAgIGNvbnN0IGZpcnN0T25QYWdlID0gY29tcHV0ZWQ8bnVtYmVyPigoKSA9PiB7XG4gICAgICByZXR1cm4gZGF0YS5wYWdlID09PSAxID8gMSA6IChkYXRhLnBhZ2UgLSAxKSAqIGRhdGEucm93c09uUGFnZSArIDFcbiAgICB9KVxuXG4gICAgY29uc3QgbGFzdE9uUGFnZSA9IGNvbXB1dGVkPG51bWJlcj4oKCkgPT4ge1xuICAgICAgcmV0dXJuIGRhdGEucGFnZSAqIGRhdGEucm93c09uUGFnZSA+IGRhdGEucm93cz8ubGVuZ3RoXG4gICAgICAgID8gZGF0YS5yb3dzPy5sZW5ndGhcbiAgICAgICAgOiBkYXRhLnBhZ2UgKiBkYXRhLnJvd3NPblBhZ2VcbiAgICB9KVxuXG4gICAgY29uc3QgcGFnZUNvcnJlY3Rpb24gPSBjb21wdXRlZDxudW1iZXIgfCBudWxsPigoKSA9PiB7XG4gICAgICBpZiAoKGRhdGEucGFnZSAtIDEpICogZGF0YS5yb3dzT25QYWdlID4gZGF0YS5yb3dzPy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbChcbiAgICAgICAgICAoZGF0YS5wYWdlICogZGF0YS5yb3dzT25QYWdlIC0gZGF0YS5yb3dzPy5sZW5ndGgpIC8gZGF0YS5yb3dzT25QYWdlLFxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsXG4gICAgfSlcblxuICAgIHdhdGNoKFxuICAgICAgKCkgPT4gcHJvcHMuY29scyxcbiAgICAgICh0bykgPT4gKGRhdGEuY29scyA9IHRvKSxcbiAgICAgIHsgaW1tZWRpYXRlOiB0cnVlIH0sXG4gICAgKVxuXG4gICAgd2F0Y2goXG4gICAgICAoKSA9PiBwcm9wcy5yb3dzLFxuICAgICAgKHRvKSA9PiAoZGF0YS5yb3dzID0gdG8pLFxuICAgICAgeyBpbW1lZGlhdGU6IHRydWUgfSxcbiAgICApXG5cbiAgICBjb25zdCBvblNlbGVjdEFsbCA9ICh2YWx1ZTogYm9vbGVhbikgPT4ge1xuICAgICAgZGF0YS5pc0FsbFJvd3NDaGVja2VkID0gdmFsdWVcbiAgICAgIGRhdGEucm93cy5mb3JFYWNoKChyb3cpID0+IChyb3cuY2hlY2tlZCA9IHZhbHVlKSlcbiAgICB9XG5cbiAgICBjb25zdCBvblNlbGVjdCA9IDxUIGV4dGVuZHMgVGFibGVTdGF0ZVsncm93cyddPihyb3dzOiBUKSA9PiB7XG4gICAgICBkYXRhLmNoZWNrZWRSb3dzID0gcm93c1xuICAgICAgZW1pdCgnc2VsZWN0OnJvdycsIGRhdGEuY2hlY2tlZFJvd3MpXG4gICAgfVxuXG4gICAgY29uc3Qgb25QcmV2UGFnZSA9IChudW06IG51bWJlcikgPT4ge1xuICAgICAgZGF0YS5wYWdlID0gZGF0YS5wYWdlID4gMSA/IGRhdGEucGFnZSArIG51bSA6IGRhdGEucGFnZVxuICAgIH1cblxuICAgIGNvbnN0IG9uTmV4dFBhZ2UgPSAobnVtOiBudW1iZXIpID0+IHtcbiAgICAgIGlmIChkYXRhLnJvd3MubGVuZ3RoIC0gZGF0YS5wYWdlICogZGF0YS5yb3dzT25QYWdlID4gMCkge1xuICAgICAgICBkYXRhLnBhZ2UgKz0gbnVtXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgb25Tb3J0ID0gPFQgZXh0ZW5kcyBEYXRhQ29sdW1uLCBTIGV4dGVuZHMgRGF0YUNvbHVtblByb3BzPihcbiAgICAgIGNvbDogVCAmIFMsXG4gICAgKSA9PiB7XG4gICAgICBpZiAoY29sLnNvcnRlZCkge1xuICAgICAgICBjb2wuc29ydGVkID0gIWNvbC5zb3J0ZWRcbiAgICAgICAgcmV0dXJuIHNvcnRDb2x1bW4oY29sKVxuICAgICAgfVxuXG4gICAgICBkYXRhLmNvbHMuZm9yRWFjaCgoYzogVCAmIFMpID0+IChjLnNvcnRlZCA9IGNvbC5rZXkgPT09IGMua2V5KSlcblxuICAgICAgc29ydENvbHVtbihjb2wpXG4gICAgfVxuXG4gICAgY29uc3Qgc29ydENvbHVtbiA9IDxUIGV4dGVuZHMgRGF0YUNvbHVtbiwgUyBleHRlbmRzIERhdGFDb2x1bW5Qcm9wcz4oXG4gICAgICBjb2w6IFQgJiBTLFxuICAgICkgPT4ge1xuICAgICAgaWYgKCFjb2wuc29ydGVkKSB7XG4gICAgICAgIHJldHVybiBkYXRhLnJvd3M/LnJldmVyc2UoKVxuICAgICAgfVxuXG4gICAgICBjb25zdCBleGVjdXRvciA9XG4gICAgICAgIGNvbC5zb3J0IHx8XG4gICAgICAgICgoYSwgYikgPT4ge1xuICAgICAgICAgIGlmIChjb2wuZm9ybWF0KSByZXR1cm4gY29sLmZvcm1hdChhKSA+IGNvbC5mb3JtYXQoYikgPyAxIDogLTFcbiAgICAgICAgICBpZiAoY29sLnNvcnRlZCkgcmV0dXJuIGFbY29sLmtleV0gPiBiW2NvbC5rZXldID8gMSA6IC0xXG4gICAgICAgIH0pXG5cbiAgICAgIGRhdGEucm93cz8uc29ydChleGVjdXRvciBhcyBhbnkpXG4gICAgfVxuXG4gICAgY29uc3Qgb25GaWx0ZXIgPSAoeyB2YWx1ZSwgY29sIH06IFRhYmxlRmlsdGVyKSA9PiB7XG4gICAgICBpZiAoIXZhbHVlICYmIGZpbHRlcnNbY29sLmtleV0pIGRlbGV0ZSBmaWx0ZXJzW2NvbC5rZXldXG5cbiAgICAgIGlmICh2YWx1ZSkgZmlsdGVyc1tjb2wua2V5XSA9IHZhbHVlXG5cbiAgICAgIGlmIChjb2wuZmlsdGVyKSB7XG4gICAgICAgIHJldHVybiAoZGF0YS5yb3dzID0gY29sLmZpbHRlcih7IHZhbHVlLCBjb2wgfSkpXG4gICAgICB9XG4gICAgICBpZiAocHJvcHMuY3VzdG9tRmlsdGVyKSB7XG4gICAgICAgIHJldHVybiBwcm9wcy5jdXN0b21GaWx0ZXIoZmlsdGVycyBhcyBhbnkpXG4gICAgICB9XG4gICAgICBpZiAoIU9iamVjdC5rZXlzKGZpbHRlcnMpLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gKGRhdGEucm93cyA9IHByb3BzLnJvd3MpXG4gICAgICB9XG5cbiAgICAgIGRhdGEucm93cyA9IGZpbHRlclJvd3MocHJvcHMucm93cywgcHJvcHMuY29scylcbiAgICAgIGRhdGEucGFnZSA9IDFcbiAgICB9XG5cbiAgICBjb25zdCBvblNlbGVjdFJvd3NDb3VudCA9IChjb3VudDogbnVtYmVyKSA9PiB7XG4gICAgICBkYXRhLnJvd3NPblBhZ2UgPSBjb3VudFxuICAgIH1cblxuICAgIGNvbnN0IGZpbHRlclJvd3MgPSA8VCwgQyBleHRlbmRzIERhdGFDb2x1bW4+KHJvd3M6IFRbXSwgY29sczogQ1tdKSA9PiB7XG4gICAgICBjb25zdCBmaWx0ZXJLZXlzID0gT2JqZWN0LmtleXMoZmlsdGVycylcblxuICAgICAgcmV0dXJuIHJvd3MucmVkdWNlKChhY2MsIHJvdykgPT4ge1xuICAgICAgICBjb25zdCByb3dSZXN1bHRzOiBUW10gPSBbXVxuXG4gICAgICAgIGZpbHRlcktleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBmb3JtYXQgfSA9IGNvbHMuZmluZCgoY29sKSA9PiBjb2wua2V5ID09PSBrZXkpIGFzIERhdGFDb2x1bW5cblxuICAgICAgICAgIGNvbnN0IHZhbHVlID0gZm9ybWF0ID8gZm9ybWF0KHJvdykgOiByb3dba2V5XVxuXG4gICAgICAgICAgY29uc3Qgcm93S2V5VmFsdWUgPSBgJHsgdmFsdWUgfWAudG9Mb3dlckNhc2UoKVxuICAgICAgICAgIGNvbnN0IGZpbHRlclZhbHVlID0gYCR7IGZpbHRlcnNba2V5XSB9YC50b0xvd2VyQ2FzZSgpXG5cbiAgICAgICAgICBpZiAocm93S2V5VmFsdWUuaW5jbHVkZXMoZmlsdGVyVmFsdWUpKSB7XG4gICAgICAgICAgICByb3dSZXN1bHRzLnB1c2gocm93W2tleV0pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICByb3dSZXN1bHRzLmxlbmd0aCA9PT0gZmlsdGVyS2V5cy5sZW5ndGggJiZcbiAgICAgICAgICByb3dSZXN1bHRzLmV2ZXJ5KCh2YWx1ZSkgPT4gISF2YWx1ZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgYWNjLnB1c2gocm93KVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFjY1xuICAgICAgfSwgW10gYXMgVFtdKVxuICAgIH1cblxuICAgIGNvbnN0IGdlblRhYmxlVG9vbHMgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0geyBjbGFzczogJ3YtZGF0YS10YWJsZV9fdG9vbGJhcicgfVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IHNsb3RzLnRvb2xiYXIgJiYgc2xvdHMudG9vbGJhcigpLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5UYWJsZUhlYWRlciA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNvbHM6IGRhdGEuY29scyxcbiAgICAgICAgY29sb3I6IHByb3BzLmNvbG9yLFxuICAgICAgICBzaG93Q2hlY2tib3g6IHByb3BzLnNob3dDaGVja2JveCxcbiAgICAgICAgZGFyazogcHJvcHMuZGFyayxcbiAgICAgICAgYWxpZ246IHByb3BzLmFsaWduLFxuICAgICAgICBzaG93U2VxdWVuY2U6IHByb3BzLnNob3dTZXF1ZW5jZSxcbiAgICAgICAgb3B0aW9uczogaGVhZGVyT3B0aW9ucy52YWx1ZSxcbiAgICAgICAgb25GaWx0ZXIsXG4gICAgICAgIG9uU29ydCxcbiAgICAgICAgb25TZWxlY3RBbGwsXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBkYXRhLmNvbHMucmVkdWNlKChhY2MsIGNvbCkgPT4ge1xuICAgICAgICBjb25zdCBzbG90TmFtZSA9IGAkeyBjb2wua2V5IH0tZmlsdGVyYFxuXG4gICAgICAgIGlmIChjb2wgJiYgc2xvdHNbc2xvdE5hbWVdKSB7XG4gICAgICAgICAgYWNjW3Nsb3ROYW1lXSA9IGFkZFNjb3BlZFNsb3Qoc2xvdE5hbWUsIHNsb3RzKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFjY1xuICAgICAgfSwge30gYXMgYW55KVxuXG4gICAgICBjb250ZW50LmhlYWRlciA9IGFkZFNjb3BlZFNsb3QoJ2hlYWRlcicsIHNsb3RzKVxuXG4gICAgICByZXR1cm4gaChWRGF0YVRhYmxlSGVhZGVyLCBwcm9wc0RhdGEsIGNvbnRlbnQpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuVGFibGVCb2R5ID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY29sczogZGF0YS5jb2xzLFxuICAgICAgICByb3dzOiBkYXRhLnJvd3MsXG4gICAgICAgIHBhZ2U6IGRhdGEucGFnZSxcbiAgICAgICAgcm93c09uUGFnZTogZGF0YS5yb3dzT25QYWdlLFxuICAgICAgICBzaG93Q2hlY2tib3g6IHByb3BzLnNob3dDaGVja2JveCxcbiAgICAgICAgY2hlY2tBbGxSb3dzOiBkYXRhLmlzQWxsUm93c0NoZWNrZWQsXG4gICAgICAgIGFsaWduOiBwcm9wcy5hbGlnbixcbiAgICAgICAgZGFyazogcHJvcHMuZGFyayxcbiAgICAgICAgc2hvd1NlcXVlbmNlOiBwcm9wcy5zaG93U2VxdWVuY2UsXG4gICAgICAgIGNvbG9yOiBwcm9wcy5jb2xvcixcbiAgICAgICAgb25TZWxlY3QsXG4gICAgICAgIFsnb25DbGljazpyb3cnXTogKGUpID0+IGVtaXQoJ2NsaWNrOnJvdycsIGUpLFxuICAgICAgICBbJ29uRGJsY2xpY2s6cm93J106IChlKSA9PiBlbWl0KCdkYmxjbGljazpyb3cnLCBlKSxcbiAgICAgICAgWydvbkNvbnRleHRtZW51OnJvdyddOiAoZSkgPT4gZW1pdCgnY29udGV4dG1lbnU6cm93JywgZSksXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBwcm9wcy5jb2xzLnJlZHVjZSgoYWNjLCBjb2wpID0+IHtcbiAgICAgICAgaWYgKGNvbCAmJiBzbG90c1tjb2wua2V5XSkge1xuICAgICAgICAgIGFjY1tjb2wua2V5XSA9IGFkZFNjb3BlZFNsb3QoY29sLmtleSwgc2xvdHMpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjY1xuICAgICAgfSwge30pXG5cbiAgICAgIHJldHVybiBoKFZEYXRhVGFibGVCb2R5LCBwcm9wc0RhdGEsIGNvbnRlbnQpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuVGFibGVGb290ZXIgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBwYWdlczogcGFnZXMudmFsdWUsXG4gICAgICAgIHBhZ2U6IGRhdGEucGFnZSxcbiAgICAgICAgZmlyc3RPblBhZ2U6IGZpcnN0T25QYWdlLnZhbHVlLFxuICAgICAgICBsYXN0T25QYWdlOiBsYXN0T25QYWdlLnZhbHVlLFxuICAgICAgICBwYWdlQ29ycmVjdGlvbjogcGFnZUNvcnJlY3Rpb24udmFsdWUsXG4gICAgICAgIHJvd3NPblBhZ2U6IGRhdGEucm93c09uUGFnZSxcbiAgICAgICAgcm93c0xlbmd0aDogZGF0YS5yb3dzPy5sZW5ndGgsXG4gICAgICAgIG9wdGlvbnM6IGZvb3Rlck9wdGlvbnMudmFsdWUsXG4gICAgICAgIG9uUHJldlBhZ2UsXG4gICAgICAgIG9uTmV4dFBhZ2UsXG4gICAgICAgIG9uU2VsZWN0Um93c0NvdW50LFxuICAgICAgICBvbkxhc3RQYWdlOiAoKSA9PiBlbWl0KCdsYXN0LXBhZ2UnLCBwcm9wcy5yb3dzLmxlbmd0aCksXG4gICAgICAgIG9uQ29ycmVjdFBhZ2U6ICh2YWwpID0+IChkYXRhLnBhZ2UgKz0gdmFsKSxcbiAgICAgIH1cblxuICAgICAgY29uc3QgY29udGVudCA9IHNsb3RzWydwYWdpbmF0aW9uLXRleHQnXVxuICAgICAgICA/IHtcbiAgICAgICAgICBbJ3BhZ2luYXRpb24tdGV4dCddOiAoKSA9PlxuICAgICAgICAgICAgc2xvdHNbJ3BhZ2luYXRpb24tdGV4dCddICYmXG4gICAgICAgICAgICBzbG90c1sncGFnaW5hdGlvbi10ZXh0J10oe1xuICAgICAgICAgICAgICBzdGFydDogZmlyc3RPblBhZ2UudmFsdWUsXG4gICAgICAgICAgICAgIGxhc3Q6IGxhc3RPblBhZ2UudmFsdWUsXG4gICAgICAgICAgICAgIGxlbmd0aDogZGF0YS5yb3dzPy5sZW5ndGgsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfVxuICAgICAgICA6ICcnXG5cbiAgICAgIHJldHVybiBoKFZEYXRhVGFibGVGb290ZXIsIHByb3BzRGF0YSwgY29udGVudClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5UYWJsZUlubmVyID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6ICd2LWRhdGEtdGFibGVfX2lubmVyJyxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgW2dlblRhYmxlSGVhZGVyKCksIGdlblRhYmxlQm9keSgpXSlcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgc3R5bGU6IHN0eWxlcy52YWx1ZSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgW1xuICAgICAgICBzbG90cy50b29sYmFyICYmIGdlblRhYmxlVG9vbHMoKSxcbiAgICAgICAgZ2VuVGFibGVJbm5lcigpLFxuICAgICAgICBnZW5UYWJsZUZvb3RlcigpLFxuICAgICAgXSlcbiAgICB9XG4gIH0sXG59KVxuIiwiLy8gVnVlIEFQSVxuaW1wb3J0IHsgaCwgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJ1xuXG4vLyBFZmZlY3RzXG5pbXBvcnQgeyB1c2VDb2xvcnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG5pbXBvcnQgeyB1c2VJY29ucyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWljb25zJ1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWSWNvbiB9IGZyb20gJy4uL1ZJY29uJ1xuXG5leHBvcnQgY29uc3QgVkRhdGVwaWNrZXJIZWFkZXIgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1kYXRlLXBpY2tlci1oZWFkZXInLFxuXG4gIHByb3BzOiB7XG4gICAgb25OZXh0OiBGdW5jdGlvbixcbiAgICBvblByZXY6IEZ1bmN0aW9uLFxuICAgIGNvbG9yOiBTdHJpbmcsXG4gIH0gYXMgYW55LFxuXG4gIGVtaXRzOiBbJ3RhYmxlJ10sXG5cbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMsIGVtaXQgfSkge1xuICAgIGNvbnN0IHsgc2V0VGV4dENsYXNzTmFtZUNvbG9yLCBzZXRUZXh0Q3NzQ29sb3IgfSA9IHVzZUNvbG9ycygpXG4gICAgY29uc3QgeyBpY29ucyB9ID0gdXNlSWNvbnMoKVxuXG4gICAgY29uc3QgZ2VuSGVhZGVyQnV0dG9uID0gKGlzUmlnaHQpID0+IHtcbiAgICAgIGNvbnN0IGljb24gPSBpc1JpZ2h0ID8gaWNvbnMuJGFycm93UmlnaHQgOiBpY29ucy4kYXJyb3dMZWZ0XG5cbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6ICd2LWRhdGUtcGlja2VyX19oZWFkZXItYnV0dG9uJyxcbiAgICAgIH1cblxuICAgICAgY29uc3QgaWNvblByb3BzRGF0YSA9IHtcbiAgICAgICAgaWNvbixcbiAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICBjbGFzczoge1xuICAgICAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldFRleHRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0VGV4dENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICAgICAgfSxcbiAgICAgICAgb25DbGljazogKCkgPT4gKGlzUmlnaHQgPyBwcm9wcy5vbk5leHQoKSA6IHByb3BzLm9uUHJldigpKSxcbiAgICAgIH1cblxuICAgICAgY29uc3QgYXJyb3dCdG4gPSBoKFZJY29uLCBpY29uUHJvcHNEYXRhKVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBhcnJvd0J0bilcbiAgICB9XG5cbiAgICBjb25zdCBnZW5IZWFkZXJEaXNwbGF5ID0gKCkgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LWRhdGUtcGlja2VyX19oZWFkZXItZGlzcGxheSc6IHRydWUsXG4gICAgICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0VGV4dENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRUZXh0Q3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgICAgICB9LFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiBlbWl0KCd0YWJsZScpLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKSlcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT5cbiAgICAgIGgoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3M6ICd2LWRhdGUtcGlja2VyX19oZWFkZXInLFxuICAgICAgICB9LFxuICAgICAgICBbZ2VuSGVhZGVyQnV0dG9uKGZhbHNlKSwgZ2VuSGVhZGVyRGlzcGxheSgpLCBnZW5IZWFkZXJCdXR0b24odHJ1ZSldXG4gICAgICApXG4gIH0sXG59KVxuIiwiZXhwb3J0IHR5cGUgRGF0ZUxvY2FsZXMgPSB7XG4gIG1vbnRoczogc3RyaW5nW11cbiAgbW9udGhzQWJicjogc3RyaW5nW11cbiAgd2Vlazogc3RyaW5nW11cbn1cblxuZXhwb3J0IHR5cGUgRGF0ZVRyYW5zbGF0aW9ucyA9IHtcbiAgcnU6IERhdGVMb2NhbGVzXG4gIGVuOiBEYXRlTG9jYWxlc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9udGgoZGF0ZTogRGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNb250aCgpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGdWxsWWVhcihkYXRlOiBEYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldEZ1bGxZZWFyKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERhdGUoZGF0ZTogRGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXREYXRlKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERheShkYXRlOiBEYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldERheSgpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRIb3VycyhkYXRlOiBEYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldEhvdXJzKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1pbnV0ZXMoZGF0ZTogRGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNaW51dGVzKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldEZ1bGxZZWFyKGRhdGUsIHZhbHVlKSB7XG4gIHJldHVybiBkYXRlLnNldEZ1bGxZZWFyKHZhbHVlKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0TW9udGgoZGF0ZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRhdGUuc2V0TW9udGgodmFsdWUpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXREYXRlKGRhdGUsIHZhbHVlKSB7XG4gIHJldHVybiBkYXRlLnNldERhdGUodmFsdWUpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkRGF0ZShkYXRlKSB7XG4gIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZGF0ZSkgIT09ICdbb2JqZWN0IERhdGVdJykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHJldHVybiAhaXNOYU4oZGF0ZS5nZXRUaW1lKCkpXG59XG5cbmZ1bmN0aW9uIGdldERheU5hbWVBYmJyKGRhdGUsIGRheXMpIHtcbiAgaWYgKHR5cGVvZiBkYXRlICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IFR5cGVFcnJvcignSW52YWxpZCBUeXBlJylcbiAgfVxuICByZXR1cm4gZGF5c1tnZXREYXkoZGF0ZSldXG59XG5cbmZ1bmN0aW9uIGdldE1vbnRoTmFtZShtb250aDogbnVtYmVyLCBtb250aHM6IHN0cmluZ1tdKSB7XG4gIGlmICghbW9udGhzKSB7XG4gICAgdGhyb3cgRXJyb3IoJ21pc3Npbmcgc2Vjb25kIHBhcmFtZXRlciBNb250aHMgYXJyYXknKVxuICB9XG5cbiAgcmV0dXJuIG1vbnRoc1ttb250aF1cbn1cblxuZnVuY3Rpb24gZ2V0TW9udGhOYW1lQWJicihtb250aCwgbW9udGhzQWJicikge1xuICBpZiAoIW1vbnRoc0FiYnIpIHtcbiAgICB0aHJvdyBFcnJvcignbWlzc2luZyAybmQgcGFyYW10ZXIgTW9udGhzIGFycmF5JylcbiAgfVxuICBpZiAodHlwZW9mIG1vbnRoID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBtb250aHNBYmJyW2dldE1vbnRoKG1vbnRoKV1cbiAgfVxuICBpZiAodHlwZW9mIG1vbnRoID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBtb250aHNBYmJyW21vbnRoXVxuICB9XG4gIHRocm93IFR5cGVFcnJvcignSW52YWxpZCB0eXBlJylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdERhdGUoXG4gIGRhdGU6IERhdGUsXG4gIGZvcm1hdDogc3RyaW5nLFxuICB0cmFuc2xhdGlvbjogRGF0ZUxvY2FsZXNcbikge1xuICBjb25zdCB5ZWFyID0gZ2V0RnVsbFllYXIoZGF0ZSlcbiAgY29uc3QgbW9udGggPSBnZXRNb250aChkYXRlKSArIDFcbiAgY29uc3QgZGF5ID0gZ2V0RGF0ZShkYXRlKVxuXG4gIHJldHVybiBmb3JtYXRcbiAgICAucmVwbGFjZSgvZGQvLCAoJzAnICsgZGF5KS5zbGljZSgtMikpXG4gICAgLnJlcGxhY2UoL2QvLCBgJHtkYXl9YClcbiAgICAucmVwbGFjZSgveXl5eS8sIGAke3llYXJ9YClcbiAgICAucmVwbGFjZSgveXkvLCBTdHJpbmcoeWVhcikuc2xpY2UoMikpXG4gICAgLnJlcGxhY2UoL01NTU0vLCBnZXRNb250aE5hbWUoZ2V0TW9udGgoZGF0ZSksIHRyYW5zbGF0aW9uLm1vbnRocykpXG4gICAgLnJlcGxhY2UoL01NTS8sIGdldE1vbnRoTmFtZUFiYnIoZ2V0TW9udGgoZGF0ZSksIHRyYW5zbGF0aW9uLm1vbnRoc0FiYnIpKVxuICAgIC5yZXBsYWNlKC9NTS8sICgnMCcgKyBtb250aCkuc2xpY2UoLTIpKVxuICAgIC5yZXBsYWNlKC9NKD8hYXzDpHxlKS8sIGAke21vbnRofWApXG4gICAgLnJlcGxhY2UoL0QoPyFlfMOpfGkpLywgZ2V0RGF5TmFtZUFiYnIoZGF0ZSwgdHJhbnNsYXRpb24ud2VlaykpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZURhdGVJbnB1dCh2YWwpIHtcbiAgcmV0dXJuIChcbiAgICB2YWwgPT09IG51bGwgfHxcbiAgICB2YWwgaW5zdGFuY2VvZiBEYXRlIHx8XG4gICAgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgfHxcbiAgICB0eXBlb2YgdmFsID09PSAnbnVtYmVyJ1xuICApXG59XG4iLCJpbXBvcnQgeyBoLCBWTm9kZSB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IGdldEZ1bGxZZWFyLCBnZXRNb250aCwgZ2V0RGF0ZSwgZ2V0RGF5IH0gZnJvbSAnLi91dGlscydcbmltcG9ydCB7IERhdGVQaWNrZXJEYXRlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnXG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5UYWJsZVJvd3MoXG4gIHZOb2Rlc0FycmF5OiBWTm9kZVtdLFxuICByb3dDbGFzc05hbWU6IHN0cmluZyxcbiAgY2VsbHNJblJvdzogbnVtYmVyXG4pIHtcbiAgY29uc3QgdGFibGVSb3dzOiBWTm9kZVtdID0gW11cbiAgbGV0IHZOb2Rlc0luUm93OiBWTm9kZVtdID0gW11cblxuICBjb25zdCBnZW5UYWJsZVJvdyA9IChjZWxsVk5vZGVzKSA9PiB7XG4gICAgcmV0dXJuIGgoJ2RpdicsIHsgY2xhc3M6IHJvd0NsYXNzTmFtZSB9LCBjZWxsVk5vZGVzKVxuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPD0gdk5vZGVzQXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoaSAmJiAhKGkgJSBjZWxsc0luUm93KSkge1xuICAgICAgdGFibGVSb3dzLnB1c2goZ2VuVGFibGVSb3codk5vZGVzSW5Sb3cpKVxuICAgICAgdk5vZGVzSW5Sb3cgPSBbXVxuICAgIH1cblxuICAgIHZOb2Rlc0luUm93LnB1c2godk5vZGVzQXJyYXlbaV0pXG4gIH1cblxuICBpZiAodk5vZGVzSW5Sb3cubGVuZ3RoKSB7XG4gICAgdGFibGVSb3dzLnB1c2goZ2VuVGFibGVSb3codk5vZGVzSW5Sb3cpIGFzIGFueSlcbiAgfVxuXG4gIHJldHVybiB0YWJsZVJvd3Ncbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvRGF0ZVN0cmluZyhkYXRlKSB7XG4gIHJldHVybiBuZXcgRGF0ZShkYXRlLnllYXIsIGRhdGUubW9udGgsIGRhdGUuZGF0ZSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRGF0ZShzZWxlY3RlZERhdGU6IERhdGUgfCBzdHJpbmcpOiBEYXRlUGlja2VyRGF0ZSB7XG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShzZWxlY3RlZERhdGUpXG4gIGNvbnN0IGRheSA9IGdldERheShkYXRlKVxuXG4gIHJldHVybiB7XG4gICAgeWVhcjogZ2V0RnVsbFllYXIoZGF0ZSksXG4gICAgbW9udGg6IGdldE1vbnRoKGRhdGUpLFxuICAgIGRhdGU6IGdldERhdGUoZGF0ZSksXG4gICAgbWxzOiBkYXRlLmdldFRpbWUoKSxcbiAgICBkYXksXG4gIH1cbn1cbiIsIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGgsIHJlZiwgaW5qZWN0LCBjb21wdXRlZCwgd2F0Y2gsIGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSdcblxuLy8gSGVscGVyc1xuaW1wb3J0IHsgZ2VuVGFibGVSb3dzLCBwYXJzZURhdGUsIHRvRGF0ZVN0cmluZyB9IGZyb20gJy4vaGVscGVycydcblxuLy8gRWZmZWN0c1xuaW1wb3J0IHsgdXNlVHJhbnNpdGlvbiB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXRyYW5zaXRpb24nXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSwgUmVmIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgRGF0ZVBpY2tlckJ0bkhhbmRsZXJzLCBEYXRlUGlja2VyRGF0ZSB9IGZyb20gJy4uLy4uLy4uL3R5cGVzJ1xuaW1wb3J0IHsgTWF5YmUgfSBmcm9tICcuLi8uLi8uLi90eXBlcy9iYXNlJ1xuXG50eXBlIFVwZGF0ZVBhcmFtcyA9IHtcbiAgbW9udGg/OiBudW1iZXJcbiAgeWVhcj86IG51bWJlclxufVxuXG5leHBvcnQgY29uc3QgVkRhdGVQaWNrZXJEYXRlcyA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWRhdGUtcGlja2VyLWRhdGVzJyxcblxuICBwcm9wczoge1xuICAgIGxvY2FsZTogQXJyYXksXG4gICAgeWVhcjogW1N0cmluZywgTnVtYmVyXSxcbiAgICBtb250aDogW1N0cmluZywgTnVtYmVyXSxcbiAgICBkYXRlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgIHZhbHVlOiBPYmplY3QsXG4gICAgbW9uZGF5Rmlyc3Q6IEJvb2xlYW4sXG4gICAgZGlzYWJsZWREYXRlczogT2JqZWN0LFxuICB9IGFzIGFueSxcblxuICBlbWl0czogWyd1cGRhdGU6bW9udGgnLCAndXBkYXRlOnZhbHVlJ10sXG5cbiAgc2V0dXAocHJvcHMsIHsgZW1pdCwgc2xvdHMgfSk6ICgpID0+IFZOb2RlIHtcbiAgICBjb25zdCBGSVJTVF9NT05USCA9IDBcbiAgICBjb25zdCBMQVNUX01PTlRIID0gMTFcbiAgICBjb25zdCBEQVlTID0gWzAsIDEsIDIsIDMsIDQsIDUsIDZdXG4gICAgY29uc3QgQU5JTUFUSU9OX1RJTUVPVVQgPSAwXG5cbiAgICBjb25zdCBkYXRlcyA9IHJlZjwoRGF0ZVBpY2tlckRhdGUgfCBudWxsKVtdPihbXSlcbiAgICBjb25zdCBpc0RhdGVzQ2hhbmdlZCA9IHJlZjxib29sZWFuPihmYWxzZSlcbiAgICBjb25zdCB0b2RheSA9IHBhcnNlRGF0ZShuZXcgRGF0ZSgpKVxuXG4gICAgY29uc3QgaGFuZGxlcnMgPSBpbmplY3QoJ2hhbmRsZXJzJykgYXMgUmVmPERhdGVQaWNrZXJCdG5IYW5kbGVycz5cblxuICAgIGhhbmRsZXJzLnZhbHVlID0ge1xuICAgICAgb25OZXh0OiAoKSA9PiB1cGRhdGVNb250aCh0cnVlKSxcbiAgICAgIG9uUHJldjogKCkgPT4gdXBkYXRlTW9udGgoZmFsc2UpLFxuICAgIH1cblxuICAgIGlmIChwcm9wcy5tb25kYXlGaXJzdCkge1xuICAgICAgREFZUy5wdXNoKERBWVMuc3BsaWNlKDAsIDEpWzBdKVxuICAgIH1cblxuICAgIGNvbnN0IGRheXNJbk1vbnRoID0gY29tcHV0ZWQ8bnVtYmVyPigoKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IERhdGUocHJvcHMueWVhciwgcHJvcHMubW9udGggKyAxLCAwKS5nZXREYXRlKClcbiAgICB9KVxuXG4gICAgY29uc3QgdXBkYXRlTW9udGggPSAoaXNOZXh0OiBib29sZWFuKSA9PiB7XG4gICAgICBjb25zdCBwYXJhbXM6IFVwZGF0ZVBhcmFtcyA9IHt9XG5cbiAgICAgIHBhcmFtcy5tb250aCA9IHByb3BzLm1vbnRoICsgKGlzTmV4dCA/IDEgOiAtMSlcblxuICAgICAgaWYgKCFpc05leHQgJiYgcGFyYW1zLm1vbnRoISA8IEZJUlNUX01PTlRIKSBwYXJhbXMubW9udGggPSBMQVNUX01PTlRIXG4gICAgICBpZiAoaXNOZXh0ICYmIHBhcmFtcy5tb250aCEgPiBMQVNUX01PTlRIKSBwYXJhbXMubW9udGggPSBGSVJTVF9NT05USFxuICAgICAgaWYgKGlzTmV4dCAmJiAhcGFyYW1zLm1vbnRoKSBwYXJhbXMueWVhciA9IHByb3BzLnllYXIgKyAxXG4gICAgICBpZiAoIWlzTmV4dCAmJiBwYXJhbXMubW9udGggPT09IExBU1RfTU9OVEgpIHBhcmFtcy55ZWFyID0gcHJvcHMueWVhciAtIDFcblxuICAgICAgaXNEYXRlc0NoYW5nZWQudmFsdWUgPSB0cnVlXG4gICAgICBlbWl0KCd1cGRhdGU6bW9udGgnLCBwYXJhbXMpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuV2Vla0RheXMgPSAoKTogVk5vZGVbXSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiAndi1kYXRlLXBpY2tlci1kYXRlc19fZGF5JyxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIERBWVMubWFwKChkYXkpID0+XG4gICAgICAgIGgoJ3NwYW4nLCBwcm9wc0RhdGEsIHByb3BzLmxvY2FsZSFbZGF5XSBhcyBzdHJpbmcpLFxuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkRhdGVPYmplY3QgPSAoZGF0ZSk6IERhdGVQaWNrZXJEYXRlID0+IHtcbiAgICAgIGNvbnN0IHsgeWVhciwgbW9udGggfSA9IHByb3BzXG4gICAgICByZXR1cm4gcGFyc2VEYXRlKG5ldyBEYXRlKHllYXIsIG1vbnRoLCBkYXRlKSlcbiAgICB9XG5cbiAgICBjb25zdCBzZXRFbXB0aWVzQmVmb3JlRmlyc3REYXRlID0gKGRhdGVPYmplY3QpID0+IHtcbiAgICAgIGNvbnN0IGZpcnN0RGF5ID0gREFZU1swXVxuICAgICAgY29uc3Qgc3RhcnREYXkgPSBmaXJzdERheSAmJiAhZGF0ZU9iamVjdC5kYXkgPyBkYXRlT2JqZWN0LmRheSA6IGZpcnN0RGF5XG4gICAgICBjb25zdCB0aWxsRGF5ID1cbiAgICAgICAgZmlyc3REYXkgJiYgIWRhdGVPYmplY3QuZGF5ID8gREFZUy5sZW5ndGggLSAxIDogZGF0ZU9iamVjdC5kYXlcblxuICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0RGF5OyBpIDw9IHRpbGxEYXk7IGkgKz0gMSkge1xuICAgICAgICBkYXRlcy52YWx1ZVtpXSA9IHsgZGF0ZTogbnVsbCB9IGFzIGFueVxuICAgICAgfVxuXG4gICAgICBkYXRlcy52YWx1ZVt0aWxsRGF5XSA9IGRhdGVPYmplY3RcbiAgICB9XG5cbiAgICBjb25zdCBnZW5UYWJsZURhdGVzID0gKCkgPT4ge1xuICAgICAgZGF0ZXMudmFsdWUgPSBbXVxuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gZGF5c0luTW9udGgudmFsdWU7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBkYXRlT2JqZWN0ID0gZ2VuRGF0ZU9iamVjdChpKVxuXG4gICAgICAgIGlmIChpID09PSAxKSB7XG4gICAgICAgICAgc2V0RW1wdGllc0JlZm9yZUZpcnN0RGF0ZShkYXRlT2JqZWN0KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGVzLnZhbHVlW2RhdGVzLnZhbHVlLmxlbmd0aF0gPSBkYXRlT2JqZWN0IGFzIGFueVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY29tcGFyZURhdGVzID0gKGRhdGUxLCBkYXRlMikgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgZGF0ZTEuZGF0ZSA9PT0gZGF0ZTIuZGF0ZSAmJlxuICAgICAgICBkYXRlMS5tb250aCA9PT0gZGF0ZTIubW9udGggJiZcbiAgICAgICAgZGF0ZTEueWVhciA9PT0gZGF0ZTIueWVhclxuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IHNldERpc2FibGVkID0gKGRhdGU6IERhdGVQaWNrZXJEYXRlKTogYm9vbGVhbiA9PiB7XG4gICAgICBpZiAoIWRhdGUuZGF0ZSkgcmV0dXJuIGZhbHNlXG4gICAgICBpZiAoIXByb3BzLmRpc2FibGVkRGF0ZXMpIHJldHVybiAhIWRhdGUuaXNIb2xpZGF5XG5cbiAgICAgIGNvbnN0IHsgZGlzYWJsZWREYXRlcyB9ID0gcHJvcHNcblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGRpc2FibGVkRGF0ZXMuZGF5c09mTW9udGggJiYgZGlzYWJsZURheXNPZk1vbnRoKGRhdGUpKSB8fFxuICAgICAgICAoZGlzYWJsZWREYXRlcy5mcm9tICYmIGRpc2FibGVGcm9tVG8oZGF0ZSwgZGlzYWJsZWREYXRlcykpIHx8XG4gICAgICAgIChkaXNhYmxlZERhdGVzLmRhdGVzICYmIGRpc2FibGVEYXRlcyhkYXRlKSkgfHxcbiAgICAgICAgKGRpc2FibGVkRGF0ZXMuZGF5cyAmJiBkaXNhYmxlRGF5cyhkYXRlKSkgfHxcbiAgICAgICAgKGRpc2FibGVkRGF0ZXMucmFuZ2VzICYmIGRpc2FibGVSYW5nZXMoZGF0ZSkpIHx8XG4gICAgICAgIChkaXNhYmxlZERhdGVzLmN1c3RvbSAmJiBkaXNhYmxlZERhdGVzLmN1c3RvbShkYXRlKSlcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBkaXNhYmxlRnJvbVRvID0gKGRhdGU6IERhdGVQaWNrZXJEYXRlLCB7IGZyb20sIHRvIH0pOiBib29sZWFuID0+IHtcbiAgICAgIGNvbnN0IGRhdGVGcm9tOiBEYXRlUGlja2VyRGF0ZSA9IHBhcnNlRGF0ZShmcm9tKVxuICAgICAgY29uc3QgZGF0ZVRvOiBEYXRlUGlja2VyRGF0ZSA9IHBhcnNlRGF0ZSh0bylcblxuICAgICAgcmV0dXJuIGRhdGUubWxzID49IGRhdGVGcm9tLm1scyAmJiBkYXRlLm1scyA8PSBkYXRlVG8ubWxzXG4gICAgfVxuXG4gICAgY29uc3QgZGlzYWJsZURheXNPZk1vbnRoID0gKGRhdGU6IERhdGVQaWNrZXJEYXRlKTogYm9vbGVhbiA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMuZGlzYWJsZWREYXRlcy5kYXlzT2ZNb250aC5zb21lKChpdCkgPT4gaXQgPT09IGRhdGUuZGF0ZSlcbiAgICB9XG5cbiAgICBjb25zdCBkaXNhYmxlRGF0ZXMgPSAoZGF0ZTogRGF0ZVBpY2tlckRhdGUpOiBib29sZWFuID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5kaXNhYmxlZERhdGVzLmRhdGVzLmZpbmQoKGQpID0+IHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyhkKSA9PT0gU3RyaW5nKHRvRGF0ZVN0cmluZyhkYXRlKSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgZGlzYWJsZURheXMgPSAoZGF0ZTogRGF0ZVBpY2tlckRhdGUpOiBib29sZWFuID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5kaXNhYmxlZERhdGVzLmRheXMuZmluZCgoZCkgPT4gZCA9PT0gZGF0ZS5kYXkpID49IDBcbiAgICB9XG5cbiAgICBjb25zdCBkaXNhYmxlUmFuZ2VzID0gKGRhdGU6IERhdGVQaWNrZXJEYXRlKSA9PiB7XG4gICAgICBjb25zdCB7IHJhbmdlcyB9ID0gcHJvcHMuZGlzYWJsZWREYXRlc1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmdlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoZGlzYWJsZUZyb21UbyhkYXRlLCByYW5nZXNbaV0pKSByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkRhdGVDZWxsID0gKGRhdGU6IERhdGVQaWNrZXJEYXRlKTogVk5vZGUgPT4ge1xuICAgICAgY29uc3QgaXNTZWxlY3RlZDogYm9vbGVhbiA9IGNvbXBhcmVEYXRlcyhkYXRlLCBwcm9wcy52YWx1ZSlcbiAgICAgIGNvbnN0IGlzVG9kYXk6IGJvb2xlYW4gPSBjb21wYXJlRGF0ZXMoZGF0ZSwgdG9kYXkpXG5cbiAgICAgIGRhdGUuaXNIb2xpZGF5ID0gc2V0RGlzYWJsZWQoZGF0ZSlcblxuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LWRhdGUtcGlja2VyLWRhdGVzX19jZWxsJzogISFkYXRlLmRhdGUsXG4gICAgICAgICAgJ3YtZGF0ZS1waWNrZXItZGF0ZXNfX2NlbGwtLWVtcHR5JzogIWRhdGUuZGF0ZSxcbiAgICAgICAgICAndi1kYXRlLXBpY2tlci1kYXRlc19fY2VsbC0tc2VsZWN0ZWQnOlxuICAgICAgICAgICAgaXNTZWxlY3RlZCAmJiAhcHJvcHMudmFsdWUuZGVmYXVsdCxcbiAgICAgICAgICAndi1kYXRlLXBpY2tlci1kYXRlc19fY2VsbC0tY3VycmVudC1kYXRlJzogaXNUb2RheSxcbiAgICAgICAgICAndi1kYXRlLXBpY2tlci1kYXRlc19fY2VsbC0taG9saWRheSc6IGRhdGUuZGF0ZSAmJiBkYXRlLmlzSG9saWRheSxcbiAgICAgICAgfSxcbiAgICAgICAgb25DbGljazogKCkgPT4gZGF0ZS5kYXRlICYmIGVtaXQoJ3VwZGF0ZTp2YWx1ZScsIGRhdGUpLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBbXG4gICAgICAgIChkYXRlLmRhdGUgJiYgc2xvdHMuZGF0ZSAmJiBzbG90cy5kYXRlKGRhdGUpKSB8fCBkYXRlLmRhdGUsXG4gICAgICBdKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkRhdGVDZWxscyA9ICgpOiBWTm9kZVtdID0+IHtcbiAgICAgIHJldHVybiBkYXRlcy52YWx1ZS5yZWR1Y2UoKGFjYywgZGF0ZU9iamVjdCkgPT4ge1xuICAgICAgICBhY2MucHVzaChnZW5EYXRlQ2VsbChkYXRlT2JqZWN0ISkpXG4gICAgICAgIHJldHVybiBhY2NcbiAgICAgIH0sIFtdIGFzIFZOb2RlW10pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuRGF0ZVJvd3MgPSAoKTogVk5vZGVbXSA9PiB7XG4gICAgICBjb25zdCBkYXRlc1ZOb2RlcyA9IGdlbkRhdGVDZWxscygpXG5cbiAgICAgIHJldHVybiBnZW5UYWJsZVJvd3MoZGF0ZXNWTm9kZXMsICd2LWRhdGUtcGlja2VyLWRhdGVzX19yb3cnLCBEQVlTLmxlbmd0aClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5EYXRlcyA9ICgpOiBNYXliZTxWTm9kZT4gPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgKCFpc0RhdGVzQ2hhbmdlZC52YWx1ZSAmJlxuICAgICAgICAgIGgoJ2RpdicsIHsgY2xhc3M6ICd2LWRhdGUtcGlja2VyLWRhdGVzX19kYXRlcycgfSwgZ2VuRGF0ZVJvd3MoKSkpIHx8XG4gICAgICAgIG51bGxcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5XZWVrID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7IGNsYXNzOiAndi1kYXRlLXBpY2tlci1kYXRlc19fd2VlaycgfSwgZ2VuV2Vla0RheXMoKSlcbiAgICB9XG5cbiAgICB3YXRjaChcbiAgICAgICgpID0+IHByb3BzLm1vbnRoLFxuICAgICAgKCkgPT4gZ2VuVGFibGVEYXRlcygpLFxuICAgICAgeyBpbW1lZGlhdGU6IHRydWUgfSxcbiAgICApXG5cbiAgICB3YXRjaChcbiAgICAgICgpID0+IGlzRGF0ZXNDaGFuZ2VkLnZhbHVlLFxuICAgICAgKCkgPT4gc2V0VGltZW91dCgoKSA9PiAoaXNEYXRlc0NoYW5nZWQudmFsdWUgPSBmYWxzZSksIEFOSU1BVElPTl9USU1FT1VUKSxcbiAgICApXG5cbiAgICByZXR1cm4gKCkgPT5cbiAgICAgIGgoJ2RpdicsIHsgY2xhc3M6ICd2LWRhdGUtcGlja2VyLWRhdGVzJyB9LCBbXG4gICAgICAgIGdlbldlZWsoKSxcbiAgICAgICAgdXNlVHJhbnNpdGlvbihnZW5EYXRlcygpIGFzIGFueSwgJ2ZhZGUnKSxcbiAgICAgIF0pXG4gIH0sXG59KVxuIiwiLy8gVlVlIEFQSVxuaW1wb3J0IHsgaCwgcmVmLCB3YXRjaEVmZmVjdCwgaW5qZWN0LCBjb21wdXRlZCwgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJ1xuXG4vLyBIZWxwZXJzXG5pbXBvcnQgeyBnZW5UYWJsZVJvd3MgfSBmcm9tICcuL2hlbHBlcnMnXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSwgUmVmIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgRGF0ZVBpY2tlckJ0bkhhbmRsZXJzIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnXG5cbi8vIEVmZmVjdHNcbmltcG9ydCB7IHVzZVRyYW5zaXRpb24gfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS10cmFuc2l0aW9uJ1xuXG5leHBvcnQgY29uc3QgVkRhdGVQaWNrZXJZZWFycyA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWRhdGUtcGlja2VyLXllYXJzJyxcblxuICBwcm9wczoge1xuICAgIHllYXI6IFtOdW1iZXIsIFN0cmluZ10sXG4gIH0gYXMgYW55LFxuXG4gIGVtaXRzOiBbJ3VwZGF0ZTp5ZWFyJ10sXG5cbiAgc2V0dXAocHJvcHMsIHsgZW1pdCB9KSB7XG4gICAgY29uc3QgTElNSVQgPSAxMDBcbiAgICBjb25zdCBPTl9UQUJMRSA9IDIwXG4gICAgY29uc3QgQ0VMTFNfSU5fUk9XID0gNFxuICAgIGNvbnN0IENVUlJFTlRfWUVBUiA9IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKVxuICAgIGNvbnN0IEFOSU1BVElPTl9USU1FT1VUID0gMTAwXG5cbiAgICBjb25zdCB5ZWFycyA9IHJlZjxBcnJheTxudW1iZXJbXT4+KFtdKVxuICAgIGNvbnN0IG9uVGFibGVJbmRleCA9IHJlZjxudW1iZXI+KDApXG4gICAgY29uc3QgaXNMaXN0Q2hhbmdlZCA9IHJlZjxib29sZWFuPihmYWxzZSlcbiAgICBjb25zdCB0cmFuc2l0aW9uID0gcmVmPHN0cmluZz4oJycpXG5cbiAgICBjb25zdCBoYW5kbGVycyA9IGluamVjdCgnaGFuZGxlcnMnKSBhcyBSZWY8RGF0ZVBpY2tlckJ0bkhhbmRsZXJzPlxuXG4gICAgd2F0Y2hFZmZlY3QoXG4gICAgICAoKSA9PlxuICAgICAgICBpc0xpc3RDaGFuZ2VkLnZhbHVlICYmXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGlzTGlzdENoYW5nZWQudmFsdWUgPSBmYWxzZVxuICAgICAgICB9LCBBTklNQVRJT05fVElNRU9VVClcbiAgICApXG5cbiAgICBjb25zdCBjb21wdXRlZFllYXIgPSBjb21wdXRlZDxudW1iZXI+KHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuICtwcm9wcy55ZWFyISB8fCBDVVJSRU5UX1lFQVJcbiAgICAgIH0sXG4gICAgICBzZXQodmFsOiBudW1iZXIpIHtcbiAgICAgICAgZW1pdCgndXBkYXRlOnllYXInLCB2YWwpXG4gICAgICB9LFxuICAgIH0pXG5cbiAgICBpZiAoaGFuZGxlcnM/LnZhbHVlKSB7XG4gICAgICBoYW5kbGVycy52YWx1ZSA9IHtcbiAgICAgICAgb25OZXh0OiAoKSA9PiBjaGFuZ2VZZWFyc0xpc3QodHJ1ZSksXG4gICAgICAgIG9uUHJldjogKCkgPT4gY2hhbmdlWWVhcnNMaXN0KGZhbHNlKSxcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZXRDdXJyZW50VHJhbnNpdGlvbiA9IChpc05leHQpID0+IHtcbiAgICAgIHRyYW5zaXRpb24udmFsdWUgPSBpc05leHQgPyAnZmFkZS1pbi1kb3duJyA6ICdmYWRlLWluLXVwJ1xuICAgIH1cblxuICAgIGNvbnN0IHNldFRhYmxlSW5kZXggPSAoKSA9PiB7XG4gICAgICBvblRhYmxlSW5kZXgudmFsdWUgPSB5ZWFycy52YWx1ZS5maW5kSW5kZXgoKHJvdykgPT4ge1xuICAgICAgICByZXR1cm4gcm93LmZpbmQoKHllYXIpID0+IHllYXIgPT09IGNvbXB1dGVkWWVhci52YWx1ZSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgY2hhbmdlWWVhcnNMaXN0ID0gKGlzTmV4dCkgPT4ge1xuICAgICAgY29uc3QgbWF4ID0geWVhcnMudmFsdWUubGVuZ3RoIC0gMVxuICAgICAgY29uc3QgdmFsID0gaXNOZXh0ID8gMSA6IC0xXG5cbiAgICAgIGlmIChcbiAgICAgICAgKG9uVGFibGVJbmRleC52YWx1ZSA9PT0gbWF4ICYmIHZhbCA+IDApIHx8XG4gICAgICAgIChvblRhYmxlSW5kZXgudmFsdWUgPT09IDAgJiYgdmFsIDwgMClcbiAgICAgIClcbiAgICAgICAgcmV0dXJuXG5cbiAgICAgIHNldEN1cnJlbnRUcmFuc2l0aW9uKGlzTmV4dClcblxuICAgICAgb25UYWJsZUluZGV4LnZhbHVlICs9IHZhbFxuICAgICAgaXNMaXN0Q2hhbmdlZC52YWx1ZSA9IHRydWVcbiAgICB9XG5cbiAgICBjb25zdCBnZW5UYWJsZVllYXJzID0gKCkgPT4ge1xuICAgICAgY29uc3QgZnJvbVllYXIgPSBDVVJSRU5UX1lFQVIgLSBMSU1JVFxuICAgICAgY29uc3QgbWF4WWVhcnMgPSBMSU1JVCAqIDJcblxuICAgICAgbGV0IHllYXJzTGlzdDogbnVtYmVyW10gPSBbXVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBtYXhZZWFyczsgaSArPSAxKSB7XG4gICAgICAgIGlmICh5ZWFyc0xpc3QubGVuZ3RoID09PSBPTl9UQUJMRSkge1xuICAgICAgICAgIHllYXJzLnZhbHVlLnB1c2goeWVhcnNMaXN0KVxuICAgICAgICAgIHllYXJzTGlzdCA9IFtdXG4gICAgICAgIH1cbiAgICAgICAgeWVhcnNMaXN0LnB1c2goZnJvbVllYXIgKyBpKVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGdlblllYXJDZWxsID0gKHllYXIpOiBWTm9kZSA9PiB7XG4gICAgICBjb25zdCBpc1NlbGVjdGVkID0geWVhciA9PT0gY29tcHV0ZWRZZWFyLnZhbHVlXG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgJ3YtZGF0ZS1waWNrZXIteWVhcnNfX2NlbGwnOiB0cnVlLFxuICAgICAgICAgICd2LWRhdGUtcGlja2VyLXllYXJzX19jZWxsLS1zZWxlY3RlZCc6IGlzU2VsZWN0ZWQsXG4gICAgICAgICAgJ3YtZGF0ZS1waWNrZXIteWVhcnNfX2NlbGwtLWN1cnJlbnQteWVhcic6IHllYXIgPT09IENVUlJFTlRfWUVBUixcbiAgICAgICAgfSxcbiAgICAgICAgb25DbGljazogKCkgPT4gKGNvbXB1dGVkWWVhci52YWx1ZSA9IHllYXIpLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCB5ZWFyKVxuICAgIH1cblxuICAgIGNvbnN0IGdlblllYXJzUm93cyA9ICgpOiBWTm9kZVtdID0+IHtcbiAgICAgIGNvbnN0IGN1cnJlbnRZZWFycyA9IHllYXJzLnZhbHVlW29uVGFibGVJbmRleC52YWx1ZV1cbiAgICAgIGNvbnN0IHllYXJzVk5vZGVzID0gY3VycmVudFllYXJzLm1hcChnZW5ZZWFyQ2VsbClcblxuICAgICAgcmV0dXJuIGdlblRhYmxlUm93cyh5ZWFyc1ZOb2RlcywgJ3YtZGF0ZS1waWNrZXIteWVhcnNfX3JvdycsIENFTExTX0lOX1JPVylcbiAgICB9XG5cbiAgICBjb25zdCBnZW5ZZWFycyA9ICgpOiBWTm9kZSB8IG51bGwgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0geyBjbGFzczogJ3YtZGF0ZS1waWNrZXIteWVhcnNfX3llYXJzJyB9XG4gICAgICByZXR1cm4gKFxuICAgICAgICAoIWlzTGlzdENoYW5nZWQudmFsdWUgJiYgaCgnZGl2JywgcHJvcHNEYXRhLCBnZW5ZZWFyc1Jvd3MoKSkpIHx8IG51bGxcbiAgICAgIClcbiAgICB9XG5cbiAgICBnZW5UYWJsZVllYXJzKClcbiAgICBzZXRUYWJsZUluZGV4KClcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBjb250ZW50ID0gdXNlVHJhbnNpdGlvbihnZW5ZZWFycygpIGFzIFZOb2RlLCB0cmFuc2l0aW9uLnZhbHVlKVxuICAgICAgY29uc3QgcHJvcHNEYXRhID0geyBjbGFzczogeyAndi1kYXRlLXBpY2tlci15ZWFycyc6IHRydWUgfSB9XG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIGNvbnRlbnQpXG4gICAgfVxuICB9LFxufSlcbiIsIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGgsIGluamVjdCwgY29tcHV0ZWQsIGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSdcblxuLy8gSGVscGVyc1xuaW1wb3J0IHsgZ2VuVGFibGVSb3dzIH0gZnJvbSAnLi9oZWxwZXJzJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyBEYXRlUGlja2VyQnRuSGFuZGxlcnMgfSBmcm9tICcuLi8uLi8uLi90eXBlcydcblxuZXhwb3J0IGNvbnN0IFZEYXRlUGlja2VyTW9udGhzID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtZGF0ZS1waWNrZXItbW9udGhzJyxcblxuICBwcm9wczoge1xuICAgIGxhbmc6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdlbicsXG4gICAgfSxcbiAgICBtb250aDogW1N0cmluZywgTnVtYmVyXSxcbiAgICB5ZWFyOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgIGxvY2FsZTogQXJyYXksXG4gIH0gYXMgYW55LFxuXG4gIGVtaXRzOiBbJ3VwZGF0ZTptb250aCcsICd1cGRhdGU6eWVhciddLFxuXG4gIHNldHVwKHByb3BzLCB7IGVtaXQgfSkge1xuICAgIGNvbnN0IENFTExTX0lOX1JPVyA9IDNcbiAgICBjb25zdCBNT05USFMgPSBbMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExXVxuICAgIGNvbnN0IENVUlJFTlRfTU9OVEggPSBuZXcgRGF0ZSgpLmdldE1vbnRoKClcblxuICAgIGNvbnN0IGhhbmRsZXJzOiBhbnkgPSBpbmplY3QoJ2hhbmRsZXJzJykgYXMgRGF0ZVBpY2tlckJ0bkhhbmRsZXJzXG5cbiAgICBoYW5kbGVycy52YWx1ZSA9IHtcbiAgICAgIG9uTmV4dDogKCkgPT4gdXBkYXRlWWVhcih0cnVlKSxcbiAgICAgIG9uUHJldjogKCkgPT4gdXBkYXRlWWVhcihmYWxzZSksXG4gICAgfVxuXG4gICAgY29uc3QgY29tcHV0ZWRNb250aCA9IGNvbXB1dGVkPG51bWJlcj4oe1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gcHJvcHMubW9udGggIT09IHVuZGVmaW5lZCA/ICtwcm9wcy5tb250aCA6IENVUlJFTlRfTU9OVEhcbiAgICAgIH0sXG4gICAgICBzZXQodmFsKSB7XG4gICAgICAgIGVtaXQoJ3VwZGF0ZTptb250aCcsIHZhbClcbiAgICAgIH0sXG4gICAgfSlcblxuICAgIGNvbnN0IHVwZGF0ZVllYXIgPSAoaXNOZXh0OiBib29sZWFuKSA9PiB7XG4gICAgICBjb25zdCB5ZWFyID0gK3Byb3BzLnllYXIgKyAoaXNOZXh0ID8gMSA6IC0xKVxuICAgICAgZW1pdCgndXBkYXRlOnllYXInLCB5ZWFyKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbk1vbnRoQ2VsbCA9IChtb250aCk6IFZOb2RlID0+IHtcbiAgICAgIGNvbnN0IGlzU2VsZWN0ZWQgPSBtb250aCA9PT0gY29tcHV0ZWRNb250aC52YWx1ZVxuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LWRhdGUtcGlja2VyLW1vbnRoc19fY2VsbCc6IHRydWUsXG4gICAgICAgICAgJ3YtZGF0ZS1waWNrZXItbW9udGhzX19jZWxsLS1zZWxlY3RlZCc6IGlzU2VsZWN0ZWQsXG4gICAgICAgICAgJ3YtZGF0ZS1waWNrZXItbW9udGhzX19jZWxsLS1jdXJyZW50LW1vbnRoJzogbW9udGggPT09IENVUlJFTlRfTU9OVEgsXG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IChjb21wdXRlZE1vbnRoLnZhbHVlID0gbW9udGgpLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBwcm9wcy5sb2NhbGVbbW9udGhdKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbk1vbnRoUm93cyA9ICgpOiBWTm9kZVtdID0+IHtcbiAgICAgIGNvbnN0IG1vbnRoc1ZOb2RlcyA9IE1PTlRIUy5tYXAoZ2VuTW9udGhDZWxsKVxuXG4gICAgICByZXR1cm4gZ2VuVGFibGVSb3dzKFxuICAgICAgICBtb250aHNWTm9kZXMsXG4gICAgICAgICd2LWRhdGUtcGlja2VyLW1vbnRoc19fcm93JyxcbiAgICAgICAgQ0VMTFNfSU5fUk9XXG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6ICd2LWRhdGUtcGlja2VyLW1vbnRocycsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIGdlbk1vbnRoUm93cygpKVxuICAgIH1cbiAgfSxcbn0pXG4iLCJleHBvcnQgY29uc3QgbG9jYWxlID0ge1xuICBydToge1xuICAgIG1vbnRoczogW1xuICAgICAgJ9Cv0L3QstCw0YDRjCcsXG4gICAgICAn0KTQtdCy0LLRgNCw0LvRjCcsXG4gICAgICAn0JzQsNGA0YInLFxuICAgICAgJ9CQ0L/RgNC10LvRjCcsXG4gICAgICAn0JzQsNC5JyxcbiAgICAgICfQmNGO0L3RjCcsXG4gICAgICAn0JjRjtC70YwnLFxuICAgICAgJ9CQ0LLQs9GD0YHRgicsXG4gICAgICAn0KHQtdC90YLRj9Cx0YDRjCcsXG4gICAgICAn0J7QutGC0Y/QsdGA0YwnLFxuICAgICAgJ9Cd0L7Rj9Cx0YDRjCcsXG4gICAgICAn0JTQtdC60LDQsdGA0YwnLFxuICAgIF0sXG4gICAgbW9udGhzQWJicjogW1xuICAgICAgJ9Cv0L3QsicsXG4gICAgICAn0KTQtdCyJyxcbiAgICAgICfQnNCw0YAnLFxuICAgICAgJ9CQ0L/RgCcsXG4gICAgICAn0JzQsNC5JyxcbiAgICAgICfQmNGO0L0nLFxuICAgICAgJ9CY0Y7QuycsXG4gICAgICAn0JDQstCzJyxcbiAgICAgICfQodC10L0nLFxuICAgICAgJ9Ce0LrRgicsXG4gICAgICAn0J3QvtGPJyxcbiAgICAgICfQlNC10LonLFxuICAgIF0sXG4gICAgd2VlazogWyfQktGBJywgJ9Cf0L0nLCAn0JLRgicsICfQodGAJywgJ9Cn0YInLCAn0J/RgicsICfQodCxJ10sXG4gIH0sXG4gIGVuOiB7XG4gICAgbW9udGhzOiBbXG4gICAgICAnSmFudWFyeScsXG4gICAgICAnRmVicnVhcnknLFxuICAgICAgJ01hcmNoJyxcbiAgICAgICdBcHJpbCcsXG4gICAgICAnTWF5JyxcbiAgICAgICdKdW5lJyxcbiAgICAgICdKdWx5JyxcbiAgICAgICdBdWd1c3QnLFxuICAgICAgJ1NlcHRlbWJlcicsXG4gICAgICAnT2N0b2JlcicsXG4gICAgICAnTm92ZW1iZXInLFxuICAgICAgJ0RlY2VtYmVyJyxcbiAgICBdLFxuICAgIG1vbnRoc0FiYnI6IFtcbiAgICAgICdKYW4nLFxuICAgICAgJ0ZlYicsXG4gICAgICAnTWFyJyxcbiAgICAgICdBcHInLFxuICAgICAgJ01heScsXG4gICAgICAnSnVuJyxcbiAgICAgICdKdWwnLFxuICAgICAgJ0F1ZycsXG4gICAgICAnU2VwJyxcbiAgICAgICdPY3QnLFxuICAgICAgJ05vdicsXG4gICAgICAnRGVjJyxcbiAgICBdLFxuICAgIHdlZWs6IFsnU3UnLCAnTW8nLCAnVHUnLCAnV2UnLCAnVGgnLCAnRnInLCAnU2EnXSxcbiAgfSxcbn1cbiIsIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQsIGgsIHByb3ZpZGUsIHJlYWN0aXZlLCByZWYgfSBmcm9tICd2dWUnXG5cbi8vIEVmZmVjdHNcbmltcG9ydCB7IHVzZUNvbG9ycyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcbmltcG9ydCB7IGVsZXZhdGlvblByb3BzLCB1c2VFbGV2YXRpb24gfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1lbGV2YXRpb24nXG5pbXBvcnQgeyB1c2VUcmFuc2l0aW9uIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtdHJhbnNpdGlvbidcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVlRleHRGaWVsZCB9IGZyb20gJy4uL1ZUZXh0RmllbGQnXG5pbXBvcnQgeyBWRGF0ZXBpY2tlckhlYWRlciB9IGZyb20gJy4vVkRhdGVwaWNrZXJIZWFkZXInXG5pbXBvcnQgeyBWRGF0ZVBpY2tlckRhdGVzIH0gZnJvbSAnLi9WRGF0ZVBpY2tlckRhdGVzJ1xuaW1wb3J0IHsgVkRhdGVQaWNrZXJZZWFycyB9IGZyb20gJy4vVkRhdGVQaWNrZXJZZWFycydcbmltcG9ydCB7IFZEYXRlUGlja2VyTW9udGhzIH0gZnJvbSAnLi9WRGF0ZVBpY2tlck1vbnRocydcbmltcG9ydCB7IFZNZW51IH0gZnJvbSAnLi4vVk1lbnUnXG5cbi8vIEhlbHBlcnNcbmltcG9ydCB7IHBhcnNlRGF0ZSB9IGZyb20gJy4vaGVscGVycydcbmltcG9ydCB7IGFkZFNjb3BlZFNsb3QgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG4vLyBVdGlsc1xuaW1wb3J0IHsgZm9ybWF0RGF0ZSB9IGZyb20gJy4vdXRpbHMnXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IERhdGVQaWNrZXJCdG5IYW5kbGVycywgRGF0ZVBpY2tlckRhdGUgfSBmcm9tICcuLi8uLi8uLi90eXBlcydcbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvYmFzZSdcblxuLy8gU2VydmljZXNcbmltcG9ydCB7IGxvY2FsZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2xvY2FsZSdcblxudHlwZSBEYXRlUGlja2VyRGF0YSA9IHtcbiAgeWVhcjogbnVtYmVyIHwgbnVsbFxuICBtb250aDogbnVtYmVyIHwgbnVsbFxuICBkYXRlOiBudW1iZXIgfCBudWxsXG4gIGRheTogbnVtYmVyIHwgbnVsbFxuICBzZWxlY3RlZDogRGF0ZVBpY2tlckRhdGUgfCBudWxsXG4gIHRhYmxlTW9udGg6IG51bWJlciB8IG51bGxcbiAgdGFibGVZZWFyOiBudW1iZXIgfCBudWxsXG4gIGNvbnZlcnRlZERhdGVTdHJpbmc6IHN0cmluZyB8IG51bGxcbiAgaXNZZWFyczogYm9vbGVhblxuICBpc01vbnRoczogYm9vbGVhblxuICBpc0RhdGVzOiBib29sZWFuXG4gIGlzQWN0aXZlOiBib29sZWFuXG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWRhdGUtcGlja2VyJyxcbiAgcHJvcHM6IHtcbiAgICBkYXJrOiBCb29sZWFuLFxuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIGNsZWFyYWJsZTogQm9vbGVhbixcbiAgICByZWFkb25seTogQm9vbGVhbixcbiAgICB0eXBlYWJsZTogQm9vbGVhbixcbiAgICBtb25kYXlGaXJzdDogQm9vbGVhbixcbiAgICB0b2RheTogQm9vbGVhbixcbiAgICB1c2VNbHM6IEJvb2xlYW4sXG4gICAgdXNlVXRjOiBCb29sZWFuLFxuICAgIGxhbmc6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdlbicsXG4gICAgfSxcbiAgICBsYWJlbDogU3RyaW5nLFxuICAgIHByZXBlbmRJY29uOiBTdHJpbmcsXG4gICAgZm9ybWF0OiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAneXl5eSBNTSBkZCBEJyxcbiAgICB9LFxuICAgIHJ1bGVzOiBBcnJheSxcbiAgICB2YWx1ZTogW1N0cmluZywgRGF0ZSwgTnVtYmVyXSxcbiAgICBtb2RlbFZhbHVlOiBbU3RyaW5nLCBEYXRlLCBOdW1iZXJdLFxuICAgIGRpc2FibGVkRGF0ZXM6IE9iamVjdCxcbiAgICBoaWdobGlnaHRlZDogT2JqZWN0LFxuICAgIGNvbnRlbnRDb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3ByaW1hcnknLFxuICAgIH0sXG4gICAgY29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICd3aGl0ZScsXG4gICAgfSxcbiAgICAuLi5lbGV2YXRpb25Qcm9wcygpLFxuICB9IGFzIGFueSxcblxuICBlbWl0czogWyd1cGRhdGU6dmFsdWUnLCAndXBkYXRlOm1vZGVsVmFsdWUnLCAnc2VsZWN0ZWQnXSxcblxuICBzZXR1cChwcm9wcywgeyBlbWl0LCBzbG90cyB9KSB7XG4gICAgY29uc3QgZGF0YTogRGF0ZVBpY2tlckRhdGEgPSByZWFjdGl2ZSh7XG4gICAgICB5ZWFyOiBudWxsLFxuICAgICAgbW9udGg6IG51bGwsXG4gICAgICBkYXRlOiBudWxsLFxuICAgICAgZGF5OiBudWxsLFxuICAgICAgc2VsZWN0ZWQ6IG51bGwsXG4gICAgICB0YWJsZU1vbnRoOiBudWxsLFxuICAgICAgdGFibGVZZWFyOiBudWxsLFxuICAgICAgY29udmVydGVkRGF0ZVN0cmluZzogbnVsbCxcbiAgICAgIGlzWWVhcnM6IGZhbHNlLFxuICAgICAgaXNNb250aHM6IGZhbHNlLFxuICAgICAgaXNEYXRlczogdHJ1ZSxcbiAgICAgIGlzQWN0aXZlOiBmYWxzZSxcbiAgICB9KVxuXG4gICAgY29uc3Qge1xuICAgICAgc2V0VGV4dENsYXNzTmFtZUNvbG9yLFxuICAgICAgc2V0VGV4dENzc0NvbG9yLFxuICAgICAgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yLFxuICAgICAgc2V0QmFja2dyb3VuZENzc0NvbG9yLFxuICAgIH0gPSB1c2VDb2xvcnMoKVxuICAgIGNvbnN0IHsgZWxldmF0aW9uQ2xhc3NlcyB9ID0gdXNlRWxldmF0aW9uKHByb3BzKVxuXG4gICAgY29uc3QgbG9jYWxlTW9udGhzOiBzdHJpbmdbXSA9IGxvY2FsZVtwcm9wcy5sYW5nXS5tb250aHNBYmJyXG4gICAgY29uc3QgbG9jYWxlV2Vlazogc3RyaW5nW10gPSBsb2NhbGVbcHJvcHMubGFuZ10ud2Vla1xuICAgIGNvbnN0IGNvbnRlbnRDb2xvcjogc3RyaW5nID0gcHJvcHMuZGFyayA/ICd3aGl0ZScgOiBwcm9wcy5jb250ZW50Q29sb3JcblxuICAgIGNvbnN0IGhhbmRsZXJzID0gcmVmPERhdGVQaWNrZXJCdG5IYW5kbGVycz4oe30pXG4gICAgY29uc3QgYWN0aXZhdG9yID0gcmVmPE1heWJlPFZOb2RlPj4obnVsbClcbiAgICBjb25zdCBjbG9zZUNvbmRpdGlvbmFsID0gcmVmPGJvb2xlYW4+KGZhbHNlKVxuXG4gICAgcHJvdmlkZSgnaGFuZGxlcnMnLCBoYW5kbGVycylcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LWRhdGUtcGlja2VyJzogdHJ1ZSxcbiAgICAgICd2LWRhdGUtcGlja2VyLS10eXBlYWJsZSc6IHByb3BzLnR5cGVhYmxlLFxuICAgICAgJ3YtZGF0ZS1waWNrZXItLXJlYWRvbmx5JzogIXByb3BzLnR5cGVhYmxlIHx8IHByb3BzLnJlYWRvbmx5LFxuICAgIH0pKVxuXG4gICAgY29uc3QgdGFibGVDbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1kYXRlLXBpY2tlcl9fdGFibGUnOiB0cnVlLFxuICAgICAgLi4uZWxldmF0aW9uQ2xhc3Nlcy52YWx1ZSxcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgICAuLi4oY29udGVudENvbG9yID8gc2V0VGV4dENsYXNzTmFtZUNvbG9yKGNvbnRlbnRDb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCB0YWJsZVN0eWxlcyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgICAgLi4uKGNvbnRlbnRDb2xvciA/IHNldFRleHRDc3NDb2xvcihjb250ZW50Q29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3QgaGVhZGVyVmFsdWUgPSBjb21wdXRlZDxzdHJpbmc+KCgpID0+IHtcbiAgICAgIHJldHVybiBkYXRhLmlzWWVhcnMgfHwgZGF0YS5pc01vbnRoc1xuICAgICAgICA/IGAkeyBkYXRhLnRhYmxlWWVhciB9YFxuICAgICAgICA6IGRhdGEuaXNEYXRlc1xuICAgICAgICAgID8gYCR7IGRhdGEudGFibGVZZWFyIH0gJHsgbG9jYWxlTW9udGhzW2RhdGEudGFibGVNb250aCFdIH1gXG4gICAgICAgICAgOiAnJ1xuICAgIH0pXG5cbiAgICBjb25zdCBkaXNwbGF5RGF0ZSA9IGNvbXB1dGVkPHN0cmluZz4oKCkgPT4ge1xuICAgICAgY29uc3QgeyBtb250aCwgZGF0ZSwgZGF5IH0gPSBkYXRhLnNlbGVjdGVkIGFzIERhdGVQaWNrZXJEYXRlXG4gICAgICByZXR1cm4gYCR7IGxvY2FsZU1vbnRoc1ttb250aF0gfSAkeyBkYXRlIH0gJHsgbG9jYWxlV2Vla1tkYXldIH1gXG4gICAgfSlcblxuICAgIGNvbnN0IGNvbXB1dGVkVmFsdWUgPSBjb21wdXRlZDxzdHJpbmcgfCBudW1iZXIgfCBEYXRlPigoKSA9PiB7XG4gICAgICBjb25zdCB7IHllYXIsIG1vbnRoLCBkYXRlIH0gPSBkYXRhLnNlbGVjdGVkIGFzIERhdGVQaWNrZXJEYXRlXG4gICAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgbW9udGgsIGRhdGUgYXMgbnVtYmVyKVxuICAgIH0pXG5cbiAgICBjb25zdCBzZXRJbml0RGF0ZSA9ICgpID0+IHtcbiAgICAgIGlmIChwcm9wcy52YWx1ZSkgc2V0UGFyc2VkRGF0ZShwcm9wcy52YWx1ZSlcbiAgICAgIGVsc2UgaWYgKHByb3BzLm1vZGVsVmFsdWUpIHNldFBhcnNlZERhdGUocHJvcHMubW9kZWxWYWx1ZSlcbiAgICAgIGVsc2Ugc2V0UGFyc2VkRGF0ZSgpXG5cbiAgICAgIGlmIChwcm9wcy50b2RheSB8fCBwcm9wcy52YWx1ZSB8fCBwcm9wcy5tb2RlbFZhbHVlKSB7XG4gICAgICAgIGRhdGEuY29udmVydGVkRGF0ZVN0cmluZyA9IGNvbnZlcnRUb0Zvcm1hdCgpIGFzIHN0cmluZ1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IG9uVGFibGVDaGFuZ2UgPSAoKTogdW5kZWZpbmVkIHwgYm9vbGVhbiA9PiB7XG4gICAgICBpZiAoZGF0YS5pc1llYXJzKSB7XG4gICAgICAgIGRhdGEuaXNZZWFycyA9IGZhbHNlXG4gICAgICAgIHJldHVybiAoZGF0YS5pc01vbnRocyA9IHRydWUpXG4gICAgICB9XG4gICAgICBpZiAoZGF0YS5pc01vbnRocykge1xuICAgICAgICBkYXRhLmlzTW9udGhzID0gZmFsc2VcbiAgICAgICAgcmV0dXJuIChkYXRhLmlzWWVhcnMgPSB0cnVlKVxuICAgICAgfVxuICAgICAgaWYgKGRhdGEuaXNEYXRlcykge1xuICAgICAgICBkYXRhLmlzRGF0ZXMgPSBmYWxzZVxuICAgICAgICByZXR1cm4gKGRhdGEuaXNNb250aHMgPSB0cnVlKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgY29uc3Qgc2V0RGF0YURhdGUgPSA8VCBleHRlbmRzIERhdGVQaWNrZXJEYXRlPih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHllYXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OiBUKSA9PiB7XG4gICAgICBkYXRhLnRhYmxlTW9udGggPSBtb250aFxuICAgICAgZGF0YS50YWJsZVllYXIgPSB5ZWFyXG5cbiAgICAgIGRhdGEueWVhciA9IHllYXJcbiAgICAgIGRhdGEubW9udGggPSBtb250aFxuICAgICAgZGF0YS5kYXRlID0gZGF0ZVxuICAgICAgZGF0YS5kYXkgPSBkYXlcbiAgICB9XG5cbiAgICBjb25zdCBzZXRQYXJzZWREYXRlID0gKHNlbGVjdGVkRGF0ZTogc3RyaW5nIHwgbnVsbCA9IG51bGwpID0+IHtcbiAgICAgIGNvbnN0IGRhdGVGb3JQYXJzaW5nID0gc2VsZWN0ZWREYXRlIHx8IG5ldyBEYXRlKClcblxuICAgICAgZGF0YS5zZWxlY3RlZCA9IHBhcnNlRGF0ZShkYXRlRm9yUGFyc2luZylcbiAgICAgICFzZWxlY3RlZERhdGUgJiYgKGRhdGEuc2VsZWN0ZWQhLmRlZmF1bHQgPSAhc2VsZWN0ZWREYXRlKVxuXG4gICAgICBzZXREYXRhRGF0ZShkYXRhLnNlbGVjdGVkISlcbiAgICB9XG5cbiAgICBjb25zdCBvblllYXJVcGRhdGUgPSAoeWVhcjogbnVtYmVyKSA9PiB7XG4gICAgICBkYXRhLnRhYmxlWWVhciA9IHllYXJcbiAgICAgIGRhdGEuaXNNb250aHMgPSB0cnVlXG4gICAgICBkYXRhLmlzWWVhcnMgPSBmYWxzZVxuICAgIH1cblxuICAgIGNvbnN0IG9uTW9udGhVcGRhdGUgPSAobW9udGg6IG51bWJlcikgPT4ge1xuICAgICAgZGF0YS50YWJsZU1vbnRoID0gbW9udGhcbiAgICAgIGRhdGEuaXNNb250aHMgPSBmYWxzZVxuICAgICAgZGF0YS5pc1llYXJzID0gZmFsc2VcbiAgICAgIGRhdGEuaXNEYXRlcyA9IHRydWVcbiAgICB9XG5cbiAgICBjb25zdCBvbkRhdGVVcGRhdGUgPSAoZGF0ZTogRGF0ZVBpY2tlckRhdGUpID0+IHtcbiAgICAgIGlmICghZGF0ZSkgcmV0dXJuXG5cbiAgICAgIGNsb3NlQ29uZGl0aW9uYWwudmFsdWUgPSB0cnVlXG5cbiAgICAgIGRhdGEuc2VsZWN0ZWQgPSBkYXRlXG4gICAgICBkYXRhLnRhYmxlTW9udGggPSBkYXRlLm1vbnRoXG4gICAgICBkYXRhLnRhYmxlWWVhciA9IGRhdGUueWVhclxuXG4gICAgICBkYXRhLmNvbnZlcnRlZERhdGVTdHJpbmcgPSBjb252ZXJ0VG9Gb3JtYXQoKSBhcyBzdHJpbmdcblxuICAgICAgZW1pdCgndXBkYXRlOnZhbHVlJywgY29tcHV0ZWRWYWx1ZS52YWx1ZSlcbiAgICAgIGVtaXQoJ3VwZGF0ZTptb2RlbFZhbHVlJywgY29tcHV0ZWRWYWx1ZS52YWx1ZSlcbiAgICAgIGVtaXQoJ3NlbGVjdGVkJywgY29tcHV0ZWRWYWx1ZS52YWx1ZSlcblxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IChjbG9zZUNvbmRpdGlvbmFsLnZhbHVlID0gZmFsc2UpKVxuICAgIH1cblxuICAgIGNvbnN0IG9uRGF0ZU1vbnRoVXBkYXRlID0gKGRhdGVPYmplY3QpID0+IHtcbiAgICAgIGRhdGEudGFibGVNb250aCA9IGRhdGVPYmplY3QubW9udGhcbiAgICAgIGlmIChkYXRlT2JqZWN0LnllYXIpIGRhdGEudGFibGVZZWFyID0gZGF0ZU9iamVjdC55ZWFyXG4gICAgfVxuXG4gICAgY29uc3Qgb25EYXRlSW5wdXQgPSAoZGF0ZTogc3RyaW5nKTogYW55ID0+IHtcbiAgICAgIG9uRGF0ZVVwZGF0ZShzdHJpbmdUb0RhdGUoZGF0ZSkhKVxuICAgIH1cblxuICAgIGNvbnN0IHN0cmluZ1RvRGF0ZSA9IChkYXRlOiBzdHJpbmcpOiBEYXRlUGlja2VyRGF0ZSB8IG51bGwgPT4ge1xuICAgICAgaWYgKGRhdGUubGVuZ3RoID09PSAxMCkge1xuICAgICAgICBjb25zdCBkYXRlQXJyYXkgPSBkYXRlLnRyaW0oKS5zcGxpdCgvXFxXLylcblxuICAgICAgICBpZiAoZGF0ZUFycmF5WzBdLmxlbmd0aCA8IDQpIHtcbiAgICAgICAgICBkYXRlID0gZGF0ZUFycmF5LnJldmVyc2UoKS5qb2luKCcuJylcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXJzZURhdGUobmV3IERhdGUoRGF0ZS5wYXJzZShkYXRlKSkpXG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IGNvbnZlcnRUb0Zvcm1hdCA9ICgpOiBzdHJpbmcgPT4ge1xuICAgICAgaWYgKCFkYXRhLnNlbGVjdGVkKSByZXR1cm4gJydcbiAgICAgIHJldHVybiBmb3JtYXREYXRlKFxuICAgICAgICBuZXcgRGF0ZShcbiAgICAgICAgICBkYXRhLnNlbGVjdGVkIS55ZWFyLFxuICAgICAgICAgIGRhdGEuc2VsZWN0ZWQhLm1vbnRoLFxuICAgICAgICAgIGRhdGEuc2VsZWN0ZWQhLmRhdGUgYXMgbnVtYmVyLFxuICAgICAgICApLFxuICAgICAgICBwcm9wcy5mb3JtYXQsXG4gICAgICAgIGxvY2FsZVtwcm9wcy5sYW5nXSxcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5EaXNwbGF5VmFsdWUgPSAodmFsdWU6IHN0cmluZyB8IG51bWJlcik6IFZOb2RlID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6ICd2LWRhdGUtcGlja2VyX19kaXNwbGF5LXZhbHVlJyxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVzZVRyYW5zaXRpb24oXG4gICAgICAgIGgoJ3NwYW4nLCBwcm9wc0RhdGEsIHZhbHVlKSxcbiAgICAgICAgJ3NjYWxlLWluLW91dCcsXG4gICAgICAgICdvdXQtaW4nLFxuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkRhdGVwaWNrZXJEaXNwbGF5SW5uZXIgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogJ3YtZGF0ZS1waWNrZXJfX2Rpc3BsYXktaW5uZXInLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBbXG4gICAgICAgIGdlbkRpc3BsYXlWYWx1ZShkYXRhLnNlbGVjdGVkPy55ZWFyIGFzIG51bWJlciksXG4gICAgICAgIGdlbkRpc3BsYXlWYWx1ZShkaXNwbGF5RGF0ZS52YWx1ZSksXG4gICAgICBdKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkRhdGVwaWNrZXJEaXNwbGF5ID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1kYXRlLXBpY2tlcl9fZGlzcGxheSc6IHRydWUsXG4gICAgICAgICAgLi4uKGNvbnRlbnRDb2xvciA/IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihjb250ZW50Q29sb3IpIDoge30pLFxuICAgICAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldFRleHRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgLi4uKGNvbnRlbnRDb2xvciA/IHNldEJhY2tncm91bmRDc3NDb2xvcihjb250ZW50Q29sb3IpIDoge30pLFxuICAgICAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldFRleHRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIGdlbkRhdGVwaWNrZXJEaXNwbGF5SW5uZXIoKSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5EYXRlcGlja2VySGVhZGVyID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKFxuICAgICAgICBWRGF0ZXBpY2tlckhlYWRlcixcbiAgICAgICAge1xuICAgICAgICAgIG9uTmV4dDogKCkgPT4gaGFuZGxlcnMudmFsdWUub25OZXh0ISgpLFxuICAgICAgICAgIG9uUHJldjogKCkgPT4gaGFuZGxlcnMudmFsdWUub25QcmV2ISgpLFxuICAgICAgICAgIG9uVGFibGU6IG9uVGFibGVDaGFuZ2UsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBoZWFkZXJWYWx1ZS52YWx1ZSxcbiAgICAgICAgfSxcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5EYXRlcGlja2VyWWVhcnNUYWJsZSA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIHllYXI6IGRhdGEudGFibGVZZWFyLFxuICAgICAgICBbJ29uVXBkYXRlOnllYXInXTogb25ZZWFyVXBkYXRlLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaChWRGF0ZVBpY2tlclllYXJzLCBwcm9wc0RhdGEpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuRGF0ZXBpY2tlck1vbnRoc1RhYmxlID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKFZEYXRlUGlja2VyTW9udGhzLCB7XG4gICAgICAgIGxhbmc6IHByb3BzLmxhbmcsXG4gICAgICAgIG1vbnRoOiBkYXRhLnRhYmxlTW9udGgsXG4gICAgICAgIHllYXI6IGRhdGEudGFibGVZZWFyLFxuICAgICAgICBsb2NhbGU6IGxvY2FsZU1vbnRocyxcbiAgICAgICAgWydvblVwZGF0ZTptb250aCddOiBvbk1vbnRoVXBkYXRlLFxuICAgICAgICBbJ29uVXBkYXRlOnllYXInXTogb25ZZWFyVXBkYXRlLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5EYXRlcGlja2VyRGF0ZXNUYWJsZSA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaChcbiAgICAgICAgVkRhdGVQaWNrZXJEYXRlcyxcbiAgICAgICAge1xuICAgICAgICAgIGxvY2FsZTogbG9jYWxlV2VlayxcbiAgICAgICAgICBtb25kYXlGaXJzdDogcHJvcHMubW9uZGF5Rmlyc3QsXG4gICAgICAgICAgbW9udGg6IGRhdGEudGFibGVNb250aCxcbiAgICAgICAgICB5ZWFyOiBkYXRhLnRhYmxlWWVhcixcbiAgICAgICAgICB2YWx1ZTogZGF0YS5zZWxlY3RlZCxcbiAgICAgICAgICBkaXNhYmxlZERhdGVzOiBwcm9wcy5kaXNhYmxlZERhdGVzLFxuICAgICAgICAgIFsnb25VcGRhdGU6dmFsdWUnXTogb25EYXRlVXBkYXRlLFxuICAgICAgICAgIFsnb25VcGRhdGU6bW9udGgnXTogb25EYXRlTW9udGhVcGRhdGUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkYXRlOiBzbG90cy5kYXRlICYmIGFkZFNjb3BlZFNsb3QoJ2RhdGUnLCBzbG90cyksXG4gICAgICAgIH0sXG4gICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuRGF0ZXBpY2tlckJvZHkgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LWRhdGUtcGlja2VyX19ib2R5JzogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoXG4gICAgICAgICdkaXYnLFxuICAgICAgICBwcm9wc0RhdGEsXG4gICAgICAgIHVzZVRyYW5zaXRpb24oXG4gICAgICAgICAgKChkYXRhLmlzWWVhcnMgJiYgZ2VuRGF0ZXBpY2tlclllYXJzVGFibGUoKSkgfHxcbiAgICAgICAgICAgIChkYXRhLmlzTW9udGhzICYmIGdlbkRhdGVwaWNrZXJNb250aHNUYWJsZSgpKSB8fFxuICAgICAgICAgICAgKGRhdGEuaXNEYXRlcyAmJiBnZW5EYXRlcGlja2VyRGF0ZXNUYWJsZSgpKSkgYXMgVk5vZGUsXG4gICAgICAgICAgJ3NsaWRlLWluLWxlZnQnLFxuICAgICAgICAgICdvdXQtaW4nLFxuICAgICAgICApLFxuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkRhdGVwaWNrZXJJbnB1dCA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaChWVGV4dEZpZWxkLCB7XG4gICAgICAgIG1vZGVsVmFsdWU6IGRhdGEuY29udmVydGVkRGF0ZVN0cmluZyEsXG4gICAgICAgIGRhcms6IHByb3BzLmRhcmssXG4gICAgICAgIGxhYmVsOiBwcm9wcy5sYWJlbCxcbiAgICAgICAgcmVhZG9ubHk6ICFwcm9wcy50eXBlYWJsZSxcbiAgICAgICAgZGlzYWJsZWQ6IHByb3BzLmRpc2FibGVkLFxuICAgICAgICBwcmVwZW5kSWNvbjogcHJvcHMucHJlcGVuZEljb24sXG4gICAgICAgIHJ1bGVzOiBwcm9wcy5ydWxlcyxcbiAgICAgICAgY2xlYXJhYmxlOiBwcm9wcy5jbGVhcmFibGUsXG4gICAgICAgIHJlZjogYWN0aXZhdG9yLFxuICAgICAgICBvbklucHV0OiBvbkRhdGVJbnB1dCxcbiAgICAgICAgb25DbGVhcjogKCkgPT4ge1xuICAgICAgICAgIGRhdGEuY29udmVydGVkRGF0ZVN0cmluZyA9ICcnXG4gICAgICAgICAgZW1pdCgndXBkYXRlOnZhbHVlJywgbnVsbClcbiAgICAgICAgICBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIG51bGwpXG4gICAgICAgICAgZW1pdCgnc2VsZWN0ZWQnLCBudWxsKVxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5EYXRlcGlja2VyVGFibGUgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogdGFibGVDbGFzc2VzLnZhbHVlLFxuICAgICAgICBzdHlsZTogdGFibGVTdHlsZXMudmFsdWUsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIFtcbiAgICAgICAgZ2VuRGF0ZXBpY2tlckRpc3BsYXkoKSxcbiAgICAgICAgZ2VuRGF0ZXBpY2tlckhlYWRlcigpLFxuICAgICAgICBnZW5EYXRlcGlja2VyQm9keSgpLFxuICAgICAgXSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5NZW51ID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGgoXG4gICAgICAgIFZNZW51LFxuICAgICAgICB7XG4gICAgICAgICAgYWN0aXZhdG9yOiBhY3RpdmF0b3IudmFsdWUhLFxuICAgICAgICAgIGludGVybmFsQWN0aXZhdG9yOiB0cnVlLFxuICAgICAgICAgIGlucHV0QWN0aXZhdG9yOiAnLnYtaW5wdXRfX3RleHQtZmllbGQnLFxuICAgICAgICAgIHdpZHRoOiAnYXV0bycsXG4gICAgICAgICAgbWF4SGVpZ2h0OiAnYXV0bycsXG4gICAgICAgICAgYm90dG9tOiBwcm9wcy50eXBlYWJsZSxcbiAgICAgICAgICBvcGVuT25DbGljazogdHJ1ZSxcbiAgICAgICAgICBjbG9zZU9uQ2xpY2s6IGNsb3NlQ29uZGl0aW9uYWwudmFsdWUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBnZW5EYXRlcGlja2VyVGFibGUoKSxcbiAgICAgICAgfSxcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5EYXRlcGlja2VyID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIFtcbiAgICAgICAgZ2VuRGF0ZXBpY2tlcklucHV0KCksXG4gICAgICAgIGFjdGl2YXRvci52YWx1ZSAmJiBnZW5NZW51KCksXG4gICAgICBdKVxuICAgIH1cblxuICAgIHNldEluaXREYXRlKClcblxuICAgIHJldHVybiAoKSA9PiBnZW5EYXRlcGlja2VyKClcbiAgfSxcbn0pXG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyBoLCBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnXG5cbi8vIEVmZmVjdHNcbmltcG9ydCB7IHVzZUNvbG9ycyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtcHJvZ3Jlc3MtbGluZWFyJyxcbiAgcHJvcHM6IHtcbiAgICB2YWx1ZToge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgfSxcbiAgICBtb2RlbFZhbHVlOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICB9LFxuICAgIGJ1ZmZlclZhbHVlOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICB9LFxuICAgIGhlaWdodDoge1xuICAgICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICAgIGRlZmF1bHQ6IDQsXG4gICAgfSxcbiAgICBjb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3ByaW1hcnknLFxuICAgIH0sXG4gICAgYmFja2dyb3VuZENvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAncHJpbWFyeScsXG4gICAgfSxcbiAgICBiYWNrZ3JvdW5kT3BhY2l0eToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJzAuMycsXG4gICAgfSxcbiAgICBpbmRldGVybWluYXRlOiBCb29sZWFuLFxuICAgIHJldmVyc2U6IEJvb2xlYW4sXG4gICAgcm91bmRlZDogQm9vbGVhbixcbiAgICBzdHJlYW06IEJvb2xlYW4sXG4gICAgc3RyaXBlZDogQm9vbGVhbixcbiAgfSxcbiAgc2V0dXAocHJvcHMpIHtcbiAgICBjb25zdCB7IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvciwgc2V0QmFja2dyb3VuZENzc0NvbG9yIH0gPSB1c2VDb2xvcnMoKVxuXG4gICAgY29uc3QgZ2VuUHJvZ3Jlc3NCYXIgPSAodHlwZSA9ICcnKSA9PiB7XG4gICAgICBjb25zdCBiYXJXaWR0aCA9IHByb3BzLnZhbHVlIHx8IHByb3BzLm1vZGVsVmFsdWVcblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1wcm9ncmVzcy1saW5lYXJfX2Jhcic6IHRydWUsXG4gICAgICAgICAgW3R5cGVdOiAhIXR5cGUsXG4gICAgICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICB3aWR0aDogIXByb3BzLmluZGV0ZXJtaW5hdGUgPyBiYXJXaWR0aCArICclJyA6ICcnLFxuICAgICAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlblByb2dyZXNzQnVmZmVyID0gKCkgPT4ge1xuICAgICAgY29uc3QgYnVmZmVyV2lkdGggPSBwcm9wcy52YWx1ZSB8fCBwcm9wcy5tb2RlbFZhbHVlXG5cbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1wcm9ncmVzcy1saW5lYXJfX2J1ZmZlcic6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgd2lkdGg6IGJ1ZmZlcldpZHRoID8gYnVmZmVyV2lkdGggKyAnJScgOiAnJyxcbiAgICAgICAgfSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5Qcm9ncmVzc0JhY2tncm91bmQoKSB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgJ3YtcHJvZ3Jlc3MtbGluZWFyX19iYWNrZ3JvdW5kJzogdHJ1ZSxcbiAgICAgICAgICAuLi4ocHJvcHMuYmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICA/IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihwcm9wcy5iYWNrZ3JvdW5kQ29sb3IpXG4gICAgICAgICAgICA6IHt9KSxcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBvcGFjaXR5OiBwcm9wcy5iYWNrZ3JvdW5kT3BhY2l0eSxcbiAgICAgICAgICAuLi4ocHJvcHMuYmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICA/IHNldEJhY2tncm91bmRDc3NDb2xvcihwcm9wcy5iYWNrZ3JvdW5kQ29sb3IpXG4gICAgICAgICAgICA6IHt9KSxcbiAgICAgICAgfSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5Qcm9ncmVzc0luZGV0ZXJtaW5hdGUoKSB7XG4gICAgICByZXR1cm4gaChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzczogeyAndi1wcm9ncmVzcy1saW5lYXJfX2luZGV0ZXJtaW5hdGUnOiB0cnVlIH0sXG4gICAgICAgIH0sXG4gICAgICAgIFtnZW5Qcm9ncmVzc0JhcignbG9uZycpLCBnZW5Qcm9ncmVzc0Jhcignc2hvcnQnKV1cbiAgICAgIClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5Qcm9ncmVzc0xpbmVhcigpIHtcbiAgICAgIHJldHVybiBoKFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzOiAndi1wcm9ncmVzcy1saW5lYXInLFxuICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBoZWlnaHQ6IGAke3Byb3BzLmhlaWdodH1weGAsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgW1xuICAgICAgICAgIGdlblByb2dyZXNzQmFja2dyb3VuZCgpLFxuICAgICAgICAgIGdlblByb2dyZXNzQnVmZmVyKCksXG4gICAgICAgICAgcHJvcHMuaW5kZXRlcm1pbmF0ZSA/IGdlblByb2dyZXNzSW5kZXRlcm1pbmF0ZSgpIDogZ2VuUHJvZ3Jlc3NCYXIoKSxcbiAgICAgICAgXVxuICAgICAgKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiBnZW5Qcm9ncmVzc0xpbmVhcigpXG4gIH0sXG59KVxuIiwiLy8gVnVlIEFQSVxuaW1wb3J0IHsgaCwgcmVmLCByZWFjdGl2ZSwgY29tcHV0ZWQsIGRlZmluZUNvbXBvbmVudCwgb25CZWZvcmVNb3VudCB9IGZyb20gJ3Z1ZSdcblxuLy8gRWZmZWN0c1xuaW1wb3J0IHsgdmFsaWRhdGlvblByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtdmFsaWRhdGlvbidcbmltcG9ydCB7IHVzZUNvbG9ycyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWSW5wdXQgfSBmcm9tICcuLi9WSW5wdXQnXG5pbXBvcnQgeyBWU2VsZWN0TGlzdCB9IGZyb20gJy4uL1ZTZWxlY3QnXG5pbXBvcnQgeyBWTWVudSB9IGZyb20gJy4uL1ZNZW51J1xuaW1wb3J0IHsgVlByb2dyZXNzTGluZWFyIH0gZnJvbSAnLi4vVlByb2dyZXNzTGluZWFyJ1xuXG4vLyBIZWxwZXJzXG5pbXBvcnQgeyBnZXRLZXlWYWx1ZUZyb21UYXJnZXQgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG50eXBlIFNlbGVjdFN0YXRlID0ge1xuICBmb2N1c2VkOiBib29sZWFuXG4gIGlzTWVudUFjdGl2ZTogYm9vbGVhblxuICBzZWFyY2g6IHN0cmluZ1xuICBzZWxlY3Q6IGFueVxufVxuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1hdXRvY29tcGxldGUnLFxuICBwcm9wczoge1xuICAgIGxhYmVsOiBTdHJpbmcsXG4gICAgaXRlbXM6IEFycmF5LFxuICAgIGRhcms6IEJvb2xlYW4sXG4gICAgdmFsdWVLZXk6IFN0cmluZyxcbiAgICBpZEtleTogU3RyaW5nLFxuICAgIGxpc3RDb2xvcjogU3RyaW5nLFxuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIHR5cGVhYmxlOiBCb29sZWFuLFxuICAgIGxvYWRpbmc6IEJvb2xlYW4sXG4gICAgbW9kZWxWYWx1ZToge1xuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICB9LFxuICAgIGNvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAncHJpbWFyeScsXG4gICAgfSxcbiAgICAuLi52YWxpZGF0aW9uUHJvcHMoKSxcbiAgfSBhcyBhbnksXG5cbiAgZW1pdHM6IFtcbiAgICAnaW5wdXQnLFxuICAgICdibHVyJyxcbiAgICAnZm9jdXMnLFxuICAgICdzZWxlY3QnLFxuICAgICd1cGRhdGU6bW9kZWxWYWx1ZScsXG4gICAgJ3VwZGF0ZTp2YWx1ZScsXG4gIF0sXG5cbiAgc2V0dXAocHJvcHMsIHsgZW1pdCB9KTogKCkgPT4gVk5vZGUge1xuICAgIGNvbnN0IHN0YXRlOiBTZWxlY3RTdGF0ZSA9IHJlYWN0aXZlKHtcbiAgICAgIGZvY3VzZWQ6IGZhbHNlLFxuICAgICAgaXNNZW51QWN0aXZlOiBmYWxzZSxcbiAgICAgIHNlYXJjaDogJycsXG4gICAgICBzZWxlY3Q6IG51bGwsXG4gICAgfSlcblxuICAgIGNvbnN0IHsgc2V0VGV4dENzc0NvbG9yLCBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IgfSA9IHVzZUNvbG9ycygpXG4gICAgY29uc3QgYWN0aXZhdG9yID0gcmVmKG51bGwpXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1hdXRvY29tcGxldGUnOiB0cnVlLFxuICAgICAgJ3YtYXV0b2NvbXBsZXRlLS1kaXNhYmxlZCc6IHByb3BzLmRpc2FibGVkLFxuICAgICAgJ3YtYXV0b2NvbXBsZXRlLS1mb2N1c2VkJzogc3RhdGUuZm9jdXNlZCxcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldFRleHRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PigoKSA9PiAoe1xuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0VGV4dENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IHZhbHVlUHJvcGVydHkgPSBjb21wdXRlZDxhbnk+KCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5tb2RlbFZhbHVlIHx8IHByb3BzLnZhbHVlXG4gICAgfSlcblxuICAgIGNvbnN0IGlucHV0VmFsdWUgPSBjb21wdXRlZDxzdHJpbmc+KCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy52YWx1ZUtleSAmJiB2YWx1ZVByb3BlcnR5LnZhbHVlXG4gICAgICAgID8gZ2V0S2V5VmFsdWVGcm9tVGFyZ2V0KHByb3BzLnZhbHVlS2V5LCB2YWx1ZVByb3BlcnR5LnZhbHVlKVxuICAgICAgICA6IHZhbHVlUHJvcGVydHkudmFsdWVcbiAgICB9KVxuXG4gICAgY29uc3Qgb25Gb2N1cyA9ICgpID0+IHtcbiAgICAgIHN0YXRlLmZvY3VzZWQgPSB0cnVlXG4gICAgICBzdGF0ZS5pc01lbnVBY3RpdmUgPSB0cnVlXG4gICAgICBlbWl0KCdmb2N1cycpXG4gICAgfVxuXG4gICAgY29uc3Qgb25CbHVyID0gKCkgPT4ge1xuICAgICAgaWYgKCF2YWx1ZVByb3BlcnR5LnZhbHVlICYmICFzdGF0ZS5zZWFyY2gpIHN0YXRlLnNlYXJjaCA9ICcnXG4gICAgICBpZiAoIXN0YXRlLnNlYXJjaCAmJiB2YWx1ZVByb3BlcnR5LnZhbHVlKSBzdGF0ZS5zZWFyY2ggPSBpbnB1dFZhbHVlLnZhbHVlXG4gICAgICBzdGF0ZS5mb2N1c2VkID0gZmFsc2VcbiAgICAgIGVtaXQoJ2JsdXInKVxuICAgIH1cblxuICAgIGNvbnN0IG9uSW5wdXQgPSAoZSkgPT4ge1xuICAgICAgc3RhdGUuc2VhcmNoID0gZS50YXJnZXQudmFsdWVcbiAgICAgIGVtaXQoJ2lucHV0JywgZS50YXJnZXQudmFsdWUpXG4gICAgfVxuXG4gICAgY29uc3Qgb25DbGVhciA9ICgpID0+IHtcbiAgICAgIHN0YXRlLnNlYXJjaCA9ICcnXG4gICAgICBzdGF0ZS5zZWxlY3QgPSBudWxsXG4gICAgICBlbWl0KCdzZWxlY3QnLCBudWxsKVxuICAgICAgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCBudWxsKVxuICAgICAgZW1pdCgndXBkYXRlOnZhbHVlJywgbnVsbClcbiAgICB9XG5cbiAgICBjb25zdCBvblNlbGVjdCA9IChpdCkgPT4ge1xuICAgICAgc3RhdGUuc2VhcmNoID0gcHJvcHMudmFsdWVLZXlcbiAgICAgICAgPyBnZXRLZXlWYWx1ZUZyb21UYXJnZXQocHJvcHMudmFsdWVLZXksIGl0KVxuICAgICAgICA6IGl0XG4gICAgICBzdGF0ZS5zZWxlY3QgPSBpdFxuICAgICAgZW1pdCgnc2VsZWN0JywgaXQpXG4gICAgICBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIGl0KVxuICAgICAgZW1pdCgndXBkYXRlOnZhbHVlJywgaXQpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuSW5wdXQgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2lucHV0Jywge1xuICAgICAgICB2YWx1ZTogc3RhdGUuc2VhcmNoLFxuICAgICAgICBkaXNhYmxlZDogcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIHJlYWRvbmx5OiBwcm9wcy5yZWFkb25seSAmJiAhcHJvcHMudHlwZWFibGUsXG4gICAgICAgIHJlZjogYWN0aXZhdG9yLFxuICAgICAgICBjbGFzczogJ3YtYXV0b2NvbXBsZXRlX19pbnB1dCcsXG4gICAgICAgIG9uSW5wdXQsXG4gICAgICAgIG9uRm9jdXMsXG4gICAgICAgIG9uQmx1cixcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQXV0b2NvbXBsZXRlTGlzdCA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaChWU2VsZWN0TGlzdCwge1xuICAgICAgICBpdGVtczogcHJvcHMuaXRlbXMsXG4gICAgICAgIHZhbHVlS2V5OiBwcm9wcy52YWx1ZUtleSxcbiAgICAgICAgaWRLZXk6IHByb3BzLmlkS2V5LFxuICAgICAgICBhY3RpdmU6IHN0YXRlLmlzTWVudUFjdGl2ZSxcbiAgICAgICAgY29sb3I6IHByb3BzLmRhcmsgPyAnd2hpdGUnIDogcHJvcHMuY29sb3IsXG4gICAgICAgIGxpc3RDb2xvcjogcHJvcHMubGlzdENvbG9yLFxuICAgICAgICBzZWxlY3Q6IHN0YXRlLnNlbGVjdCxcbiAgICAgICAgb25TZWxlY3QsXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlbk1lbnUgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoXG4gICAgICAgIFZNZW51LFxuICAgICAgICB7XG4gICAgICAgICAgYWN0aXZhdG9yOiBhY3RpdmF0b3IudmFsdWUhLFxuICAgICAgICAgIG9wZW5PbkNsaWNrOiB0cnVlLFxuICAgICAgICAgIG1heEhlaWdodDogMjQwLFxuICAgICAgICAgIGJvdHRvbTogdHJ1ZSxcbiAgICAgICAgICBvbkhpZGU6ICgpID0+IChzdGF0ZS5pc01lbnVBY3RpdmUgPSBzdGF0ZS5mb2N1c2VkKSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGRlZmF1bHQ6IGdlbkF1dG9jb21wbGV0ZUxpc3QsXG4gICAgICAgIH1cbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5MaW5lYXJQcm9ncmVzcyA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzczogeyAndi1hdXRvY29tcGxldGVfX2xvYWRpbmcnOiB0cnVlIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGgoVlByb2dyZXNzTGluZWFyLCB7XG4gICAgICAgICAgaGVpZ2h0OiAyLFxuICAgICAgICAgIGluZGV0ZXJtaW5hdGU6IHRydWUsXG4gICAgICAgICAgY29sb3I6IHByb3BzLmNvbG9yLFxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcHJvcHMuY29sb3IsXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQXV0b2NvbXBsZXRlID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgICAgIHN0eWxlOiBzdHlsZXMudmFsdWUsXG4gICAgICAgIH0sXG4gICAgICAgIFtcbiAgICAgICAgICBnZW5JbnB1dCgpLFxuICAgICAgICAgIHByb3BzLmxvYWRpbmcgJiYgZ2VuTGluZWFyUHJvZ3Jlc3MoKSxcbiAgICAgICAgICBhY3RpdmF0b3IudmFsdWUgJiYgZ2VuTWVudSgpLFxuICAgICAgICBdXG4gICAgICApXG4gICAgfVxuXG4gICAgb25CZWZvcmVNb3VudCgoKSA9PiB7XG4gICAgICBzdGF0ZS5zZWxlY3QgPSB2YWx1ZVByb3BlcnR5LnZhbHVlXG4gICAgICBzdGF0ZS5zZWFyY2ggPSBpbnB1dFZhbHVlLnZhbHVlXG4gICAgfSlcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGxhYmVsOiBwcm9wcy5sYWJlbCxcbiAgICAgICAgZm9jdXNlZDogc3RhdGUuaXNNZW51QWN0aXZlLFxuICAgICAgICBoYXNTdGF0ZTogISFzdGF0ZS5zZWFyY2gsXG4gICAgICAgIGRhcms6IHByb3BzLmRhcmssXG4gICAgICAgIGRpc2FibGVkOiBwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgY2xlYXJhYmxlOiBwcm9wcy5jbGVhcmFibGUsXG4gICAgICAgIGNvbG9yOiBwcm9wcy5jb2xvcixcbiAgICAgICAgcnVsZXM6IHByb3BzLnJ1bGVzLFxuICAgICAgICB2YWx1ZTogdmFsdWVQcm9wZXJ0eS52YWx1ZSB8fCBzdGF0ZS5zZWFyY2gsXG4gICAgICAgIG9uQ2xlYXIsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKFZJbnB1dCwgcHJvcHNEYXRhLCB7XG4gICAgICAgICd0ZXh0LWZpZWxkJzogKCkgPT4gZ2VuQXV0b2NvbXBsZXRlKCksXG4gICAgICB9KVxuICAgIH1cbiAgfSxcbn0pXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGgsIGNvbXB1dGVkLCBWTm9kZSB9IGZyb20gJ3Z1ZSdcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtbGF5b3V0JyxcbiAgcHJvcHM6IHtcbiAgICBjb2x1bW46IEJvb2xlYW4sXG4gICAgd3JhcDogQm9vbGVhbixcbiAgfSxcbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSk6ICgpID0+IFZOb2RlIHtcbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1sYXlvdXQnOiB0cnVlLFxuICAgICAgJ2ZsZXgtY29sdW1uJzogcHJvcHMuY29sdW1uLFxuICAgICAgJ2ZsZXgtd3JhcCc6IHByb3BzLndyYXAsXG4gICAgfSkpXG5cbiAgICByZXR1cm4gKCkgPT5cbiAgICAgIGgoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKSxcbiAgICAgICAgfVxuICAgICAgKVxuICB9LFxufSlcbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaCwgY29tcHV0ZWQsIFZOb2RlIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgdG9DYW1lbENhc2UgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG5jb25zdCBicmVha3BvaW50cyA9IFsnc20nLCAnbWQnLCAnbGcnLCAneGwnXVxuY29uc3QgcG9zaXRpb25zID0gWydzdGFydCcsICdjZW50ZXInLCAnZW5kJ11cblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3Ytcm93JyxcbiAgcHJvcHM6IHtcbiAgICBhbGlnbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgIHZhbGlkYXRvcjogKHN0cjogc3RyaW5nKSA9PlxuICAgICAgICBbLi4ucG9zaXRpb25zLCAnYmFzZWxpbmUnLCAnc3RyZXRjaCddLmluY2x1ZGVzKHN0ciksXG4gICAgfSxcbiAgICBhbGlnbkNvbnRlbnQ6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICB2YWxpZGF0b3I6IChzdHI6IHN0cmluZykgPT5cbiAgICAgICAgWy4uLnBvc2l0aW9ucywgJ3NwYWNlLWJldHdlZW4nLCAnc3BhY2UtYXJvdW5kJywgJ3N0cmV0Y2gnXS5pbmNsdWRlcyhcbiAgICAgICAgICBzdHJcbiAgICAgICAgKSxcbiAgICB9LFxuICAgIGp1c3RpZnk6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICB2YWxpZGF0b3I6IChzdHI6IHN0cmluZykgPT5cbiAgICAgICAgWy4uLnBvc2l0aW9ucywgJ3NwYWNlLWJldHdlZW4nLCAnc3BhY2UtYXJvdW5kJ10uaW5jbHVkZXMoc3RyKSxcbiAgICB9LFxuICAgIG5vR3V0dGVyOiBCb29sZWFuLFxuICAgIC4uLmJyZWFrcG9pbnRzLnJlZHVjZSgocHJvcHMsIGJwKSA9PiB7XG4gICAgICBwcm9wc1tganVzdGlmeS0ke2JwfWBdID0ge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgIHZhbGlkYXRvcjogKHN0cjogc3RyaW5nKSA9PlxuICAgICAgICAgIFsuLi5wb3NpdGlvbnMsICdzcGFjZS1iZXR3ZWVuJywgJ3NwYWNlLWFyb3VuZCddLmluY2x1ZGVzKHN0ciksXG4gICAgICB9XG4gICAgICBwcm9wc1tgYWxpZ24tJHticH1gXSA9IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICB2YWxpZGF0b3I6IChzdHI6IHN0cmluZykgPT5cbiAgICAgICAgICBbLi4ucG9zaXRpb25zLCAnYmFzZWxpbmUnLCAnc3RyZXRjaCddLmluY2x1ZGVzKHN0ciksXG4gICAgICB9XG4gICAgICBwcm9wc1tgYWxpZ24tY29udGVudC0ke2JwfWBdID0ge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgIHZhbGlkYXRvcjogKHN0cjogc3RyaW5nKSA9PlxuICAgICAgICAgIFsuLi5wb3NpdGlvbnMsICdzcGFjZS1iZXR3ZWVuJywgJ3NwYWNlLWFyb3VuZCcsICdzdHJldGNoJ10uaW5jbHVkZXMoXG4gICAgICAgICAgICBzdHJcbiAgICAgICAgICApLFxuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BzXG4gICAgfSwge30pLFxuICB9LFxuXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3Ytcm93JzogdHJ1ZSxcbiAgICAgICduby1ndXR0ZXInOiBwcm9wcy5ub0d1dHRlcixcbiAgICAgIFtganVzdGlmeS0ke3Byb3BzLmp1c3RpZnl9YF06ICEhcHJvcHMuanVzdGlmeSxcbiAgICAgIFtgYWxpZ24tJHtwcm9wcy5hbGlnbn1gXTogISFwcm9wcy5hbGlnbixcbiAgICAgIFtgYWxpZ24tY29udGVudC0ke3Byb3BzLmFsaWduQ29udGVudH1gXTogISFwcm9wcy5hbGlnbkNvbnRlbnQsXG5cbiAgICAgIC4uLmJyZWFrcG9pbnRzLnJlZHVjZSgoY2xzLCBicCkgPT4ge1xuICAgICAgICA7Wy4uLnBvc2l0aW9ucywgJ3NwYWNlLWJldHdlZW4nLCAnc3BhY2UtYXJvdW5kJ10uZm9yRWFjaCgocG9zKSA9PiB7XG4gICAgICAgICAgY2xzW2BqdXN0aWZ5LSR7YnB9LSR7cG9zfWBdID1cbiAgICAgICAgICAgIHBvcyA9PT0gKHByb3BzW3RvQ2FtZWxDYXNlKCdqdXN0aWZ5JywgYnApXSBhcyBzdHJpbmcpXG4gICAgICAgIH0pXG4gICAgICAgIDtbLi4ucG9zaXRpb25zLCAnYmFzZWxpbmUnLCAnc3RyZXRjaCddLmZvckVhY2goKHBvcykgPT4ge1xuICAgICAgICAgIGNsc1tgYWxpZ24tJHticH0tJHtwb3N9YF0gPVxuICAgICAgICAgICAgcG9zID09PSAocHJvcHNbdG9DYW1lbENhc2UoJ2FsaWduJywgYnApXSBhcyBzdHJpbmcpXG4gICAgICAgIH0pXG4gICAgICAgIDtbLi4ucG9zaXRpb25zLCAnc3BhY2UtYmV0d2VlbicsICdzcGFjZS1hcm91bmQnLCAnc3RyZXRjaCddLmZvckVhY2goXG4gICAgICAgICAgKHBvcykgPT4ge1xuICAgICAgICAgICAgY2xzW2BhbGlnbi1jb250ZW50LSR7YnB9LSR7cG9zfWBdID1cbiAgICAgICAgICAgICAgcG9zID09PSAocHJvcHNbdG9DYW1lbENhc2UoJ2FsaWduJywgJ2NvbnRlbnQnLCBicCldIGFzIHN0cmluZylcbiAgICAgICAgICB9XG4gICAgICAgIClcblxuICAgICAgICByZXR1cm4gY2xzXG4gICAgICB9LCB7fSksXG4gICAgfSkpXG5cbiAgICByZXR1cm4gKCkgPT5cbiAgICAgIGgoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKSxcbiAgICAgICAgfVxuICAgICAgKVxuICB9LFxufSlcbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgY29tcHV0ZWQsIGgsIFZOb2RlIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgdG9DYW1lbENhc2UgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG5jb25zdCBicmVha3BvaW50cyA9IFsnc20nLCAnbWQnLCAnbGcnLCAneGwnXVxuXG5jb25zdCBjb2xQcm9wcyA9IGJyZWFrcG9pbnRzLnJlZHVjZSgocHJvcHMsIHApID0+IHtcbiAgcHJvcHNbcF0gPSB7XG4gICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICBkZWZhdWx0OiBudWxsLFxuICB9XG5cbiAgcmV0dXJuIHByb3BzXG59LCB7fSlcblxuY29uc3Qgb3JkZXJQcm9wcyA9IGJyZWFrcG9pbnRzLnJlZHVjZSgocHJvcHMsIHApID0+IHtcbiAgcHJvcHNbYG9yZGVyLSR7cH1gXSA9IHtcbiAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgIGRlZmF1bHQ6IG51bGwsXG4gIH1cblxuICByZXR1cm4gcHJvcHNcbn0sIHt9KVxuXG5jb25zdCBvZmZzZXRQcm9wcyA9IGJyZWFrcG9pbnRzLnJlZHVjZSgocHJvcHMsIHApID0+IHtcbiAgcHJvcHNbYG9mZnNldC0ke3B9YF0gPSB7XG4gICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICBkZWZhdWx0OiBudWxsLFxuICB9XG5cbiAgcmV0dXJuIHByb3BzXG59LCB7fSlcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtY29sJyxcbiAgcHJvcHM6IHtcbiAgICBvcmRlcjoge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgfSxcbiAgICBjb2xzOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICB9LFxuICAgIG9mZnNldDoge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgfSxcbiAgICAuLi5jb2xQcm9wcyxcbiAgICAuLi5vcmRlclByb3BzLFxuICAgIC4uLm9mZnNldFByb3BzLFxuICB9LFxuICBzZXR1cChwcm9wcywgeyBzbG90cyB9KTogKCkgPT4gVk5vZGUge1xuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LWNvbCc6IHRydWUsXG4gICAgICBbYHYtY29sLSR7cHJvcHMuY29sc31gXTogISFwcm9wcy5jb2xzLFxuICAgICAgLi4uYnJlYWtwb2ludHMucmVkdWNlKChjb2xzLCBwKSA9PiB7XG4gICAgICAgIGNvbHNbYCR7cH0tJHtwcm9wc1twXX1gXSA9ICEhcHJvcHNbcF1cbiAgICAgICAgcmV0dXJuIGNvbHNcbiAgICAgIH0sIHt9KSxcblxuICAgICAgW2BvcmRlci0ke3Byb3BzLm9yZGVyfWBdOiBwcm9wcy5vcmRlciAhPT0gbnVsbCxcblxuICAgICAgLi4uYnJlYWtwb2ludHMucmVkdWNlKChvcmRlcnMsIHApID0+IHtcbiAgICAgICAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbdG9DYW1lbENhc2UoJ29yZGVyJywgcCldXG4gICAgICAgIG9yZGVyc1tgb3JkZXItJHtwfS0ke3Byb3BWYWx1ZX1gXSA9ICEhcHJvcFZhbHVlXG4gICAgICAgIHJldHVybiBvcmRlcnNcbiAgICAgIH0sIHt9KSxcbiAgICAgIFtgb2Zmc2V0LSR7cHJvcHMub2Zmc2V0fWBdOiBwcm9wcy5vZmZzZXQgIT09IG51bGwsXG4gICAgICAuLi5icmVha3BvaW50cy5yZWR1Y2UoKG9mZnNldHMsIHApID0+IHtcbiAgICAgICAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbdG9DYW1lbENhc2UoJ29mZnNldCcsIHApXVxuICAgICAgICBvZmZzZXRzW2BvZmZzZXQtJHtwfS0ke3Byb3BWYWx1ZX1gXSA9ICEhcHJvcFZhbHVlXG4gICAgICAgIHJldHVybiBvZmZzZXRzXG4gICAgICB9LCB7fSksXG4gICAgfSkpXG5cbiAgICByZXR1cm4gKCkgPT5cbiAgICAgIGgoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKSxcbiAgICAgICAgfVxuICAgICAgKVxuICB9LFxufSlcbiIsImltcG9ydCB7IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsKCd2LXNwYWNlcicpXG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGgsIGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuXG4vLyBDb21wb3NpdGlvbnNcbmltcG9ydCB7IGNvbG9yUHJvcHMsIHVzZUNvbG9ycyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcbmltcG9ydCB7IGVsZXZhdGlvblByb3BzLCB1c2VFbGV2YXRpb24gfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1lbGV2YXRpb24nXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gJ3Z1ZSdcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtY2FyZCcsXG5cbiAgcHJvcHM6IHtcbiAgICB3aWR0aDoge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IDM1MCxcbiAgICB9LFxuICAgIC4uLmNvbG9yUHJvcHMoKSxcbiAgICAuLi5lbGV2YXRpb25Qcm9wcygpLFxuICB9IGFzIGFueSxcblxuICBzZXR1cChwcm9wcywgeyBzbG90cyB9KTogKCkgPT4gVk5vZGUge1xuICAgIGNvbnN0IHsgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yLCBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IgfSA9IHVzZUNvbG9ycygpXG4gICAgY29uc3QgeyBlbGV2YXRpb25DbGFzc2VzIH0gPSB1c2VFbGV2YXRpb24ocHJvcHMpXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQoXG4gICAgICAoKTogUmVjb3JkPHN0cmluZywgYm9vbGVhbj4gPT4gKHtcbiAgICAgICAgJ3YtY2FyZCc6IHRydWUsXG4gICAgICAgIC4uLmVsZXZhdGlvbkNsYXNzZXMudmFsdWUsXG4gICAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgICB9KSxcbiAgICApXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgd2lkdGg6IGAkeyBwcm9wcy53aWR0aCB9cHhgLFxuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0QmFja2dyb3VuZENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGZ1bmN0aW9uIGdlbkNhcmQoKSB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgICBzdHlsZTogc3R5bGVzLnZhbHVlLFxuICAgICAgfVxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCkpXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IGdlbkNhcmQoKVxuICB9LFxufSlcbiIsImltcG9ydCB7IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsKCd2LWNhcmRfX3RpdGxlJylcbiIsImltcG9ydCB7IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsKCd2LWNhcmRfX3N1YnRpdGxlJylcbiIsImltcG9ydCB7IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsKCd2LWNhcmRfX2FjdGlvbnMnKVxuIiwiaW1wb3J0IHsgY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwoJ3YtY2FyZF9fY29udGVudCcpXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGgsIGNvbXB1dGVkLCBWTm9kZSB9IGZyb20gJ3Z1ZSdcbi8vIEhlbHBlcnNcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlQ29sb3JzLCBjb2xvclByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtY29sb3JzJ1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi10b29sYmFyJyxcbiAgcHJvcHM6IHtcbiAgICBmaXhlZDogQm9vbGVhbixcbiAgICBoZWlnaHQ6IHtcbiAgICAgIHR5cGU6IFsgU3RyaW5nLCBOdW1iZXIgXSxcbiAgICAgIGRlZmF1bHQ6IDU2XG4gICAgfSxcbiAgICAuLi5jb2xvclByb3BzKCcjZmZmZmZmJylcbiAgfSxcbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSk6ICgpID0+IFZOb2RlIHtcbiAgICBjb25zdCB7IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvciwgc2V0QmFja2dyb3VuZENzc0NvbG9yIH0gPSB1c2VDb2xvcnMoKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtdG9vbGJhcic6IHRydWUsXG4gICAgICAndi10b29sYmFyLS1maXhlZCc6IHByb3BzLmZpeGVkLFxuICAgICAgLi4uc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKVxuICAgIH0pKVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgc3RyaW5nPj4oKCkgPT4gKHtcbiAgICAgIGhlaWdodDogY29udmVydFRvVW5pdChwcm9wcy5oZWlnaHQpLFxuICAgICAgbGVmdDogcHJvcHMuZml4ZWQgPyBjb252ZXJ0VG9Vbml0KDApIDogJycsXG4gICAgICB0b3A6IHByb3BzLmZpeGVkID8gY29udmVydFRvVW5pdCgwKSA6ICcnLFxuICAgICAgLi4uc2V0QmFja2dyb3VuZENzc0NvbG9yKHByb3BzLmNvbG9yKVxuICAgIH0pKVxuXG4gICAgcmV0dXJuICgpID0+IGgoJ2RpdicsIHtcbiAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgc3R5bGU6IHN0eWxlcy52YWx1ZVxuICAgIH0sIHtcbiAgICAgIGRlZmF1bHQ6ICgpID0+IHNsb3RzLmRlZmF1bHQ/LigpXG4gICAgfSlcbiAgfVxufSlcbiIsImltcG9ydCB7IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsKCd2LXRvb2xiYXJfX2xvZ28nKVxuIiwiaW1wb3J0IHsgY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwoJ3YtdG9vbGJhcl9faXRlbXMnKVxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgVkljb24gfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL1ZJY29uJ1xuXG5pbXBvcnQgeyB1c2VJY29ucyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWljb25zJ1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi10b29sYmFyLW5hdi1idG4nLFxuICBlbWl0czogWydjbGljayddLFxuICBzZXR1cChfLCB7IHNsb3RzLCBlbWl0IH0pIHtcbiAgICBjb25zdCB7IGljb25zIH0gPSB1c2VJY29ucygpXG5cbiAgICBjb25zdCBvbkNsaWNrID0gKCkgPT4gZW1pdCgnY2xpY2snKVxuXG4gICAgY29uc3QgZ2VuTmF2QnRuID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGgoVkljb24sIHtcbiAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICBpY29uOiBpY29ucy4kbWVudSxcbiAgICAgICAgb25DbGljayxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBzbG90cy5kZWZhdWx0Py4oKSB8fCBnZW5OYXZCdG4oKVxuXG4gICAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogJ3YtdG9vbGJhcl9fbmF2LWJ0bicsXG4gICAgICB9LCBjb250ZW50KVxuICAgIH1cbiAgfSxcbn0pXG4iLCJpbXBvcnQgeyBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsIH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCgndi10b29sYmFyX19jb250ZW50JylcbiIsImltcG9ydCB7IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsKCd2LWxpc3QtaXRlbV9fY29udGVudCcpXG4iLCJpbXBvcnQgeyBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsIH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCgndi1saXN0LWl0ZW1fX2ljb24nKVxuIiwiaW1wb3J0IHsgY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwoJ3YtbGlzdC1pdGVtX19zdWJ0aXRsZScpXG4iLCJpbXBvcnQgeyBWQXBwIH0gZnJvbSAnLi9WQXBwJ1xuaW1wb3J0IHsgVkJ1dHRvbiB9IGZyb20gJy4vVkJ1dHRvbidcbmltcG9ydCB7IFZPdmVybGF5IH0gZnJvbSAnLi9WT3ZlcmxheSdcbmltcG9ydCB7IFZNb2RhbCB9IGZyb20gJy4vVk1vZGFsJ1xuaW1wb3J0IHsgVk1lbnUgfSBmcm9tICcuL1ZNZW51J1xuaW1wb3J0IHsgVlRleHRGaWVsZCB9IGZyb20gJy4vVlRleHRGaWVsZCdcbmltcG9ydCB7IFZJbnB1dCB9IGZyb20gJy4vVklucHV0J1xuaW1wb3J0IHsgVkZpbGVJbnB1dCB9IGZyb20gJy4vVkZpbGVJbnB1dCdcbmltcG9ydCB7IFZTZWxlY3QgfSBmcm9tICcuL1ZTZWxlY3QnXG5pbXBvcnQgeyBWRm9ybSB9IGZyb20gJy4vVkZvcm0nXG5pbXBvcnQgeyBWTGFiZWwgfSBmcm9tICcuL1ZMYWJlbCdcbmltcG9ydCB7IFZCYWRnZSB9IGZyb20gJy4vVkJhZGdlJ1xuaW1wb3J0IHsgVkdyb3VwIH0gZnJvbSAnLi9WR3JvdXAnXG5pbXBvcnQgeyBWUmVzaXplIH0gZnJvbSAnLi9WUmVzaXplJ1xuaW1wb3J0IHsgVkljb24gfSBmcm9tICcuL1ZJY29uJ1xuaW1wb3J0IHsgVkNoaXAgfSBmcm9tICcuL1ZDaGlwJ1xuaW1wb3J0IHsgVkNoZWNrYm94IH0gZnJvbSAnLi9WQ2hlY2tib3gnXG5pbXBvcnQgeyBWVG9vbHRpcCB9IGZyb20gJy4vVlRvb2x0aXAnXG5pbXBvcnQgeyBWTmF2aWdhdGlvbiB9IGZyb20gJy4vVk5hdmlnYXRpb24nXG5pbXBvcnQgeyBWTWFpbiB9IGZyb20gJy4vVk1haW4nXG5pbXBvcnQgeyBWVGV4dGFyZWEgfSBmcm9tICcuL1ZUZXh0YXJlYSdcbmltcG9ydCB7IFZTa2VsZXRvbiB9IGZyb20gJy4vVlNrZWxldG9uJ1xuaW1wb3J0IHsgVkRhdGFUYWJsZSB9IGZyb20gJy4vVkRhdGFUYWJsZSdcbmltcG9ydCB7IFZEYXRlUGlja2VyIH0gZnJvbSAnLi9WRGF0ZVBpY2tlcidcbmltcG9ydCB7IFZBdXRvY29tcGxldGUgfSBmcm9tICcuL1ZBdXRvY29tcGxldGUnXG5pbXBvcnQgeyBWUHJvZ3Jlc3NMaW5lYXIgfSBmcm9tICcuL1ZQcm9ncmVzc0xpbmVhcidcbmltcG9ydCB7IFZQcm9ncmVzc0NpcmN1bGFyIH0gZnJvbSAnLi9WUHJvZ3Jlc3NDaXJjdWxhcidcbmltcG9ydCB7XG4gIFZMYXlvdXQsXG4gIFZSb3csXG4gIFZDb2wsXG4gIFZTcGFjZXJcbn0gZnJvbSAnLi9WR3JpZCdcbmltcG9ydCB7XG4gIFZDYXJkLFxuICBWQ2FyZFRpdGxlLFxuICBWQ2FyZFN1YnRpdGxlLFxuICBWQ2FyZEFjdGlvbnMsXG4gIFZDYXJkQ29udGVudFxufSBmcm9tICcuL1ZDYXJkJ1xuaW1wb3J0IHtcbiAgVlRvb2xiYXIsXG4gIFZUb29sYmFyTG9nbyxcbiAgVlRvb2xiYXJJdGVtcyxcbiAgVlRvb2xiYXJOYXZCdG4sXG4gIFZUb29sYmFyQ29udGVudFxufSBmcm9tICcuL1ZUb29sYmFyJ1xuaW1wb3J0IHtcbiAgVkxpc3QsXG4gIFZMaXN0SXRlbVRpdGxlLFxuICBWTGlzdEl0ZW0sXG4gIFZMaXN0SXRlbUNvbnRlbnQsXG4gIFZMaXN0SXRlbUljb24sXG4gIFZMaXN0SXRlbVN1YnRpdGxlXG59IGZyb20gJy4vVkxpc3QnXG5cbmV4cG9ydCBjb25zdCBjb21wb25lbnRzID0ge1xuICBWQXBwLFxuICBWQnV0dG9uLFxuICBWQ2FyZCxcbiAgVkNhcmRUaXRsZSxcbiAgVkNhcmRTdWJ0aXRsZSxcbiAgVkNhcmRBY3Rpb25zLFxuICBWQ2FyZENvbnRlbnQsXG4gIFZUb29sYmFyLFxuICBWVG9vbGJhckxvZ28sXG4gIFZUb29sYmFySXRlbXMsXG4gIFZUb29sYmFyTmF2QnRuLFxuICBWVG9vbGJhckNvbnRlbnQsXG4gIFZMaXN0LFxuICBWTGlzdEl0ZW1UaXRsZSxcbiAgVkxpc3RJdGVtLFxuICBWTGlzdEl0ZW1Db250ZW50LFxuICBWTGlzdEl0ZW1JY29uLFxuICBWTGlzdEl0ZW1TdWJ0aXRsZSxcbiAgVkxheW91dCxcbiAgVlJvdyxcbiAgVkNvbCxcbiAgVlNwYWNlcixcbiAgVk92ZXJsYXksXG4gIFZNb2RhbCxcbiAgVk1lbnUsXG4gIFZUZXh0RmllbGQsXG4gIFZJbnB1dCxcbiAgVkZpbGVJbnB1dCxcbiAgVlNlbGVjdCxcbiAgVkZvcm0sXG4gIFZMYWJlbCxcbiAgVkJhZGdlLFxuICBWR3JvdXAsXG4gIFZSZXNpemUsXG4gIFZJY29uLFxuICBWQ2hpcCxcbiAgVkNoZWNrYm94LFxuICBWVG9vbHRpcCxcbiAgVk5hdmlnYXRpb24sXG4gIFZNYWluLFxuICBWVGV4dGFyZWEsXG4gIFZTa2VsZXRvbixcbiAgVkRhdGFUYWJsZSxcbiAgVkRhdGVQaWNrZXIsXG4gIFZBdXRvY29tcGxldGUsXG4gIFZQcm9ncmVzc0xpbmVhcixcbiAgVlByb2dyZXNzQ2lyY3VsYXIsXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudHNcbiIsImltcG9ydCB7IEFwcCwgUGx1Z2luIH0gZnJvbSAndnVlJ1xuaW1wb3J0IFZ1ZWxhbmQgZnJvbSAnLi9saWJyYXJ5J1xuaW1wb3J0ICogYXMgZGlyZWN0aXZlcyBmcm9tICcuL2RpcmVjdGl2ZXMnXG5pbXBvcnQgeyBjb21wb25lbnRzIH0gZnJvbSAnLi9jb21wb25lbnRzJ1xuaW1wb3J0IHsgTGlicmFyeSB9IGZyb20gJy4uL3R5cGVzJ1xuXG5jb25zdCBpbnN0YWxsOiBQbHVnaW5bJ2luc3RhbGwnXSA9IFZ1ZWxhbmQuaW5zdGFsbCFcblxuVnVlbGFuZC5pbnN0YWxsID0gKGFwcDogQXBwLCBhcmdzOiBhbnkpID0+IHtcbiAgaW5zdGFsbC5jYWxsKFZ1ZWxhbmQsIGFwcCwge1xuICAgIGNvbXBvbmVudHMsXG4gICAgZGlyZWN0aXZlcyxcbiAgICAuLi5hcmdzXG4gIH0pXG59XG5cbmV4cG9ydCBkZWZhdWx0IFZ1ZWxhbmQgYXMge2luc3RhbGw6IGFueX0gJiBMaWJyYXJ5XG4iXSwibmFtZXMiOlsiVnVlbGFuZCIsImluc3RhbGwiLCJhcHAiLCJhcmdzIiwiaW5zdGFsbGVkIiwiY29tcG9uZW50cyIsImRpcmVjdGl2ZXMiLCJrZXkiLCJjb21wb25lbnQiLCJkaXJlY3RpdmUiLCJwcm92aWRlIiwib3B0aW9ucyIsInRoZW1lIiwiaWNvbnMiLCJjb25zb2xlIiwibG9nIiwiY2xpY2tIYW5kbGVyIiwiZSIsImVsIiwiY29udGFpbnMiLCJ0YXJnZXQiLCJfYmluZHMiLCJfYSIsInZhbHVlIiwiX2IiLCJjbG9zZUNvbmRpdGlvbmFsIiwiX2MiLCJfZCIsImhhbmRsZXIiLCJyZW1vdmVMaXN0ZW5lciIsImRvY3VtZW50IiwiYm9keSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJfb25DbGljayIsImNsaWNrT3V0c2lkZSIsImJlZm9yZU1vdW50IiwiYmluZGluZyIsIm1vdW50ZWQiLCJhZGRFdmVudExpc3RlbmVyIiwiYmVmb3JlVXBkYXRlIiwiYmVmb3JlVW5tb3VudCIsInJlc2l6ZSIsImNhbGxiYWNrIiwicGFzc2l2ZSIsIndpbmRvdyIsIl9vblJlc2l6ZSIsIm1vZGlmaWVycyIsInF1aWV0IiwiYnJlYWtwb2ludHMiLCJzbSIsIm1kIiwibGciLCJ4bCIsInRocm90dGxlIiwiZm4iLCJ0aW1lb3V0IiwibGFzdFRoaXMiLCJsYXN0QXJncyIsImlzVGhyb3R0bGVkIiwid3JhcHBlciIsImNhbGwiLCJzZXRUaW1lb3V0IiwiYXBwbHkiLCJkZWZpbmVDb21wb25lbnQiLCJyZWFjdGl2ZSIsImgiLCJ3aXRoRGlyZWN0aXZlcyIsIm9uTW91bnRlZCIsIm5hbWUiLCJwcm9wcyIsImdsb2JhbCIsInR5cGUiLCJPYmplY3QiLCJzZXR1cCIsInNsb3RzIiwiVEhST1RUTElOR19USU1FT1VUIiwic3RhdGUiLCJjdXJyZW50IiwieGxBbmRMZXNzIiwibGdBbmRMZXNzIiwibWRBbmRMZXNzIiwic21BbmRMZXNzIiwic2V0Q3VycmVudEJyZWFrcG9pbnROYW1lIiwic2NyZWVuIiwic2V0SW50ZXJ2YWxzIiwic2V0U2l6ZXMiLCJpbm5lcldpZHRoIiwidGhyb3R0bGVkUmVzaXplTGlzdGVuZXIiLCJnZW5BcHBXcmFwcGVyIiwiaXNDc3NDb2xvciIsImNvbG9yIiwibWF0Y2giLCJjb2xvclByb3BzIiwiZGVmYXVsdENvbG9yIiwiU3RyaW5nIiwidXNlQ29sb3JzIiwic2V0VGV4dENsYXNzTmFtZUNvbG9yIiwiY2xhc3NlcyIsInRyaW0iLCJzcGxpdCIsImNvbG9yTmFtZSIsImNvbG9yTW9kaWZpZXIiLCJzZXRUZXh0Q3NzQ29sb3IiLCJzdHlsZXMiLCJzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IiLCJzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IiLCJjb21wdXRlZCIsImVsZXZhdGlvblByb3BzIiwiZWxldmF0aW9uIiwiTnVtYmVyIiwidXNlRWxldmF0aW9uIiwiZWxldmF0aW9uQ2xhc3NlcyIsInBvc2l0aW9uUHJvcHMiLCJhYnNvbHV0ZSIsIkJvb2xlYW4iLCJsZWZ0IiwicmlnaHQiLCJ0b3AiLCJib3R0b20iLCJ1c2VQb3NpdGlvbiIsInBvc2l0aW9uQ2xhc3NlcyIsImNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwiLCJjIiwicmVwbGFjZSIsIl8iLCJwcm9wc0RhdGEiLCJhZGRPbmNlTGlzdGVuZXIiLCJldmVudE5hbWUiLCJjYiIsIm9uY2UiLCJldmVudCIsImNvbnZlcnRUb1VuaXQiLCJzdHIiLCJ1bml0IiwiaXNOYU4iLCJ3YXJuaW5nIiwid2FybmluZ1RleHQiLCJ3YXJuIiwiY29weVdpdGhvdXRMaW5rIiwib2JqIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwiYWRkU2NvcGVkU2xvdCIsInNsb3ROYW1lIiwic2NvcGVkIiwiYXJnIiwiZ2V0S2V5VmFsdWVGcm9tVGFyZ2V0IiwidmFsdWVLZXkiLCJyZWR1Y2UiLCJhY2MiLCJpdCIsIm1hcFRvVmFsQXJyYXkiLCJtYXAiLCJBcnJheSIsImZyb20iLCJ2YWx1ZXMiLCJ1bmlxdWVBcnJheSIsImFyciIsImdldFN0cmluZ0tleXNWYWx1ZSIsInRvQ2FtZWxDYXNlIiwicmVzIiwicyIsImkiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwiaW5kZXRlcm1pbmF0ZSIsInNpemUiLCJ3aWR0aCIsInJvdGF0ZSIsInJhZGl1cyIsIm5vcm1hbGl6ZWRWYWx1ZSIsInBhcnNlRmxvYXQiLCJjaXJjdW1mZXJlbmNlIiwiTWF0aCIsIlBJIiwic3Ryb2tlRGFzaEFycmF5Iiwicm91bmQiLCJzdHJva2VEYXNoT2Zmc2V0Iiwidmlld0JveFNpemUiLCJzdHJva2VXaWR0aCIsImhlaWdodCIsInN2Z1N0eWxlIiwidHJhbnNmb3JtIiwiZ2VuQ2lyY2xlIiwib2Zmc2V0IiwiZmlsbCIsImN4IiwiY3kiLCJyIiwiZ2VuU3ZnIiwiY2hpbGRyZW4iLCJ4bWxucyIsInZpZXdCb3giLCJzdHlsZSIsImdlbkluZm8iLCJWUHJvZ3Jlc3NDaXJjdWxhciIsImRpc2FibGVkIiwib3V0bGluZWQiLCJyb3VuZGVkIiwibG9hZGluZyIsInRleHQiLCJkYXJrIiwibGFiZWwiLCJlbWl0cyIsImVtaXQiLCJpc0ZsYXQiLCJpc0xvYWRhYmxlIiwiaXNFbGV2ZXRhYmxlIiwiZWxldmF0aW9ucyIsImdlbkxvYWRlciIsImdlbkxhYmVsIiwiZ2VuQ29udGVudCIsIm9uQ2xpY2siLCJoaWRlIiwiYWN0aXZlIiwiZml4ZWQiLCJyZWYiLCJyZW5kZXIiLCJWT3ZlcmxheSIsIm92ZXJsYXlQcm9wcyIsIm92ZXJsYXkiLCJvdmVybGF5Q29sb3IiLCJ1c2VPdmVybGF5Iiwib3ZlcmxheU9uIiwiY29udGFpbmVyIiwiY3JlYXRlRWxlbWVudCIsIm92ZXJsYXlFbGVtZW50IiwicmVuZGVyT3ZlcmxheSIsImNyZWF0ZU92ZXJsYXkiLCJ6SW5kZXgiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiYWRkIiwicmVtb3ZlT3ZlcmxheSIsInJlbW92ZUNoaWxkIiwiZmlyc3RDaGlsZCIsIlRyYW5zaXRpb24iLCJ0cmFuc2l0aW9uUHJvcHMiLCJ0cmFuc2l0aW9uIiwidXNlVHJhbnNpdGlvbiIsInZOb2RlIiwibW9kZSIsIndhdGNoIiwidXNlVG9nZ2xlIiwicHJvcE5hbWUiLCJpc0FjdGl2ZSIsInByb3AiLCJ0byIsImltbWVkaWF0ZSIsInNoYWxsb3dSZWYiLCJ2U2hvdyIsIm1vZGVsVmFsdWUiLCJtb2RhbFJlZiIsImdlbk1vZGFsIiwidmFsIiwiYXV0b1Bvc2l0aW9uUHJvcHMiLCJwb3NpdGlvblgiLCJwb3NpdGlvblkiLCJ1c2VBdXRvUG9zaXRpb24iLCJkaW1lbnNpb25zIiwiYWN0aXZhdG9yIiwiY29udGVudCIsInBhZ2VZT2Zmc2V0IiwicGFnZVdpZHRoIiwiY29udGVudFJlZiIsIm9mZnNldFkiLCJjb250ZW50Qm90dG9tQm9yZGVyIiwiZ2V0UmVjdCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJpc0Fic29sdXRlUG9zaXRpb25lZCIsImdldElubmVySGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRIZWlnaHQiLCJnZXRTY3JvbGxUb3AiLCJzY3JvbGxUb3AiLCJnZXRTY3JvbGxMZWZ0IiwicGFnZVhPZmZzZXQiLCJzY3JvbGxMZWZ0IiwiZ2V0Q29udGVudEFic29sdXRlQm90dG9tUG9pbnQiLCJnZXRDb250ZW50Qm90dG9tQm9yZGVyIiwiY2FsY0NvbnRlbnRCb3R0b21Qb3NpdGlvbiIsImZ1bGxIZWlnaHQiLCJjb250ZW50Qm90dG9tUG9zaXRpb24iLCJjYWxjQWJzb2x1dGVUb3AiLCJ0b3BQb3NpdGlvbiIsImNhbGNCb3R0b21Qb3NpdGlvbiIsImNhbGNUb3BQb3NpdGlvbiIsImNhbGNDb250ZW50QXV0b1Bvc2l0aW9uIiwiY2FsY1Bvc2l0aW9uWSIsImNhbGNQb3NpdGlvblgiLCJzbmFwU2hvdCIsImRpc3BsYXkiLCJ1cGRhdGVEaW1lbnNpb25zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRBY3RpdmF0b3JEaW1lbnNpb25zIiwic2V0Q29udGVudERpbWVuc2lvbnMiLCJvZmZzZXRIZWlnaHQiLCJzZXREaW1lbnNpb25zIiwiYWN0aXZhdG9yRWwiLCJhY3RpdmF0b3JQcm9wcyIsImludGVybmFsQWN0aXZhdG9yIiwidXNlQWN0aXZhdG9yIiwiYWN0aXZhdG9yUmVmIiwiYWN0aXZhdG9yU2l6ZXMiLCJsaXN0ZW5lcnMiLCJnZXRBY3RpdmF0b3IiLCIkZWwiLCJpbnB1dEFjdGl2YXRvciIsInF1ZXJ5U2VsZWN0b3IiLCJjdXJyZW50VGFyZ2V0IiwiZ2V0QWN0aXZhdG9yU2l6ZXMiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwib2Zmc2V0V2lkdGgiLCJnZW5BY3RpdmF0b3JMaXN0ZW5lcnMiLCJoYW5kbGVycyIsIm9wZW5PbkhvdmVyIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJvcGVuT25DbGljayIsImNsaWNrIiwib3Blbk9uQ29udGV4dG1lbnUiLCJjb250ZXh0bWVudSIsImFkZEFjdGl2YXRvckV2ZW50cyIsImV2ZW50cyIsImtleXMiLCJmb3JFYWNoIiwicmVtb3ZlQWN0aXZhdG9yRXZlbnRzIiwidXNlRGV0YWNoIiwic2V0RGV0YWNoZWQiLCJzZWxlY3RvciIsImFwcGVuZENoaWxkIiwicmVtb3ZlRGV0YWNoZWQiLCJvbkJlZm9yZVVubW91bnQiLCJtYXhIZWlnaHQiLCJjbG9zZU9uQ2xpY2siLCJvZmZzZXRYIiwic2V0RGltZW5zaW9uc09uIiwiZmxhZyIsInRoZW4iLCJ1bmRlZmluZWQiLCJjYWxjV2lkdGgiLCJjb250ZW50Q2xhc3NlcyIsImNvbnRlbnRTdHlsZXMiLCJvbkNvbnRlbnRDbGljayIsIm9uUmVzaXplIiwiZ2VuQWN0aXZhdG9yU2xvdCIsInNsb3RDb250ZW50Iiwib24iLCJnZW5Db250ZW50U2xvdCIsInZhbGlkYXRpb25Qcm9wcyIsInJ1bGVzIiwiRGF0ZSIsInVzZVZhbGlkYXRpb24iLCJlcnJvclN0YXRlIiwiaW5uZXJFcnJvciIsImlubmVyRXJyb3JNZXNzYWdlIiwiaXNEaXJ0eSIsInZhbGlkYXRpb25DbGFzc2VzIiwiY29tcHV0ZWRDb2xvciIsImhhc1J1bGVzIiwibGVuZ3RoIiwiZGlydHkiLCJ1cGRhdGUiLCJlcnIiLCJtc2ciLCJ2YWxpZGF0ZSIsImxlbiIsInJ1bGUiLCJyZXN1bHQiLCJ1c2VJbnB1dFN0YXRlcyIsImF0dHJzIiwiaW5wdXRTdGF0ZSIsImZvY3VzZWQiLCJpc0Rpc2FibGVkIiwiaXNSZWFkb25seSIsInJlYWRvbmx5Iiwic3RhdGVDbGFzc2VzIiwib25Gb2N1cyIsIm9uQ2hhbmdlIiwib25CbHVyIiwib25TZWxlY3QiLCJzaXplUHJvcHMiLCJkZWZhdWx0U2l6ZSIsInVzZVNpemUiLCJzaXplcyIsImZpbmQiLCJjbGlja2FibGUiLCJpY29uIiwidGFnIiwiaWNvblRhZyIsImNvbXB1dGVkSWNvbiIsImZvbnRTaXplIiwiZ2V0U2l6ZXMiLCJleHBsaWNpdFNpemUiLCJpbmplY3QiLCJvbkJlZm9yZU1vdW50IiwiVkxhYmVsIiwiVkljb24iLCJpbmhlcml0QXR0cnMiLCJwcmVwZW5kSWNvbiIsImFwcGVuZEljb24iLCJmaWxlIiwiaGludHMiLCJoaW50TWVzc2FnZSIsInRleHRDb2xvciIsImV4cG9zZSIsImZvcm0iLCJ0ZXh0Q2xhc3NDb2xvciIsInRleHRDc3NDb2xvciIsImhhc1ByZXBlbmRJY29uIiwiaGFzQXBwZW5kSWNvbiIsImdlbkljb24iLCJpY29uTmFtZSIsImdlblByZXBlbmRJY29uIiwiZ2VuQXBwZW5kSWNvbiIsImdlblRleHRGaWVsZFNsb3QiLCJwcmVwZW5kSWNvbkNvbnRlbnQiLCJhcHBlbmRJY29uQ29udGVudCIsInRleHRGaWVsZENvbnRlbnQiLCJnZW5IaW50TWVzc2FnZSIsImdlbkhpbnRzIiwiZ2VuU2VsZWN0U2xvdCIsInNlbGVjdCIsIlZJbnB1dCIsImlucHV0UmVmIiwiY29tcHV0ZWRWYWx1ZSIsImdldCIsInNldCIsIm9uSW5wdXQiLCJnZW5JbnB1dEZpZWxkIiwicGxhY2Vob2xkZXIiLCJnZW5UZXh0RmllbGRXcmFwcGVyIiwiY2xzQ29sb3IiLCJjc3NDb2xvciIsIkZhSWNvbnMiLCJNYXRlcmlhbEljb25zIiwiTWF0ZXJpYWxTaXplcyIsIkZhU2l6ZXMiLCJ1c2VJY29ucyIsImluY2x1ZGVzIiwidGl0bGUiLCJjbG9zYWJsZSIsImdlbkNsb3NlSWNvbiIsIiRjbG9zZSIsImdlbkljb25XcmFwcGVyIiwiZ2VuQ2hpcENvbnRlbnQiLCJWQ2hpcCIsIm11bHRpcGxlIiwiY2hpcENvbG9yIiwic3JjUmVmIiwiZmlsZXMiLCJjb25jYXQiLCJvbkNsb3NlIiwiZmlsdGVyIiwic3JjRWxlbWVudCIsImdlbkZpbGVJbnB1dCIsInBvc2l0aW9uIiwidmlzaWJpbGl0eSIsImdlbkNoaXBzIiwiZ2VuQ2hpcHNDb250YWluZXIiLCJnZW5Db21wb25lbnQiLCIkcGFwZXJjbGlwIiwiaXRlbVJlZiIsImxpc3QiLCJpdGVtIiwiYWN0aXZlQ2xhc3MiLCJ0b1JhdyIsIml0ZW1zIiwiTWFwIiwiaXNUcnVzdGVkU2VsZWN0IiwicmVnaXN0ZXIiLCJoYXMiLCJ1bnJlZ2lzdGVyIiwiZGlzcGF0Y2hFdmVudCIsInNldEFjdGl2ZUl0ZW0iLCJ0b2dnbGVJdGVtIiwicHJlcGFyZUluZGV4ZXMiLCJwdXNoIiwic2V0SXRlbVN0YXRlIiwiaW5kIiwic3RvcCIsImRlZXAiLCJWTGlzdCIsIlZMaXN0SXRlbSIsIlZMaXN0SXRlbVRpdGxlIiwiVlNlbGVjdExpc3QiLCJzZWxlY3RlZCIsImNvbXB1dGVkU2VsZWN0Iiwic2VsZWN0ZWRWYWx1ZSIsImZpbmRJbmRleCIsIml0ZW1WYWx1ZSIsImdlbkl0ZW1zIiwiZ2VuSXRlbXNMaXN0IiwiVk1lbnUiLCJnZW5JbnB1dCIsImdlbkxpc3RQcmVsb2FkZXIiLCJnZW5TZWxlY3RMaXN0Iiwib25TaG93Iiwib25IaWRlIiwiZ2VuRXhwYW5kSWNvbiIsIiRjaGV2cm9uRG93biIsImdlblNlbGVjdCIsImZpZWxkcyIsImFkZEZpZWxkVmFsaWRhdG9yIiwicmVtb3ZlRmllbGRWYWxpZGF0b3IiLCJ2IiwicHJvbWlzZXMiLCJzb21lIiwiZiIsInJlamVjdCIsIm9uU3VibWl0IiwicHJldmVudERlZmF1bHQiLCJkb3QiLCJhdmF0YXIiLCJib3JkZXIiLCJ0b2dnbGUiLCJyZXF1aXJlZCIsImNhbGNQb3NpdGlvbiIsIm9mZnNldFZhbCIsImNvbXB1dGVkTGVmdCIsImNvbXB1dGVkUmlnaHQiLCJjb21wdXRlZFRvcCIsImNvbXB1dGVkQm90dG9tIiwiYmFkZ2VDbGFzc2VzIiwiYWRkQ29udGVudCIsImdlbkJhZGdlU2xvdCIsImJhZGdlIiwiZ2VuQmFkZ2UiLCJ3aXRoQ3R4IiwiY3JlYXRlQmxvY2siLCJjcmVhdGVUcmFuc2l0aW9uIiwiaG9va3MiLCJpbml0IiwicHJvcFNpemUiLCJQUklNQVJZX1RSQU5TSVRJT04iLCJyZXNldFN0eWxlcyIsImdldENoaWxkcmVuU2l6ZXMiLCJwcm90b3R5cGUiLCJnZXRDb21wdXRlZFN0eWxlIiwic2V0SW5pdFN0eWxlcyIsIngiLCJleHBhbmRIb29rcyIsImV4cGFuZGVkUGFyZW50Q2xhc3MiLCJvbkJlZm9yZUVudGVyIiwib25FbnRlciIsIm9uQWZ0ZXJFbnRlciIsIm9uQmVmb3JlTGVhdmUiLCJvbkxlYXZlIiwib25BZnRlckxlYXZlIiwiRXhwYW5kVHJhbnNpdGlvbiIsImV4cGFuZCIsInN1Ymdyb3VwIiwiZ2VuSGVhZGVyQ29udGVudCIsImhlYWRlciIsImdlblN1YkV4cGFuZEljb24iLCJnZW5Hcm91cEhlYWRlciIsIiRjYXJldERvd24iLCJnZW5Hcm91cENoaWxkQ29udGVudCIsImN1c3RvbUNsYXNzIiwibWluU2l6ZSIsImRhdGEiLCJzdGFydE9mZnNldCIsInBhcmVudEhlaWdodCIsInBhcmVudFdpZHRoIiwibWFyZ2luTGVmdCIsIm1hcmdpblRvcCIsInJlc2l6ZVJlZiIsImlzRGlyZWN0WSIsImlzTmVlZFJldmVyc2UiLCJjdXJyZW50U2l6ZSIsInNpemVQcm9wIiwicmV2ZXJzZURpcmVjdGlvbiIsInJldmVyc2VPZmZzZXRLZXkiLCJzaWRlIiwiZGlyZWN0aW9uIiwibW92ZVJldmVyc2UiLCJyZXZlcnNlVG8iLCJzZXRPckVtaXRTaXplIiwicmVzZXRNaW5NYXhTdHlsZXMiLCJtaW5IZWlnaHQiLCJtYXhXaWR0aCIsIm1pbldpZHRoIiwic2V0UGFyZW50IiwicGFyZW50IiwiY29tcHV0ZVNpemVzIiwic2V0U3RhcnRQb3NpdGlvbnMiLCJkaXNhYmxlU2VsZWN0aW9uIiwiaW5pdFJlc2l6ZSIsInNldFN0YXJ0T2Zmc2V0IiwicmVzZXQiLCJvbk1vdXNldXAiLCJyZW1vdmVIYW5kbGVycyIsIm9uTW91c2Vkb3duIiwiaXNDaGVja2VkIiwidmFsdWVzTWFwIiwiaXNBcnJheSIsImNsZWFyIiwidmFsaWRhdGVWYWx1ZSIsImdlbkxhYmVsV3JhcHBlciIsIiRjaGVja2JveCIsIiRib3giLCJnZW5DaGVja2JveCIsImNvbXB1dGVWYWx1ZSIsInRyYW5zaXRpb25zIiwidG9vbHRpcCIsInRvb2x0aXBSZWYiLCJjb21wdXRlVG9wUG9zaXRpb24iLCJjb21wdXRlTGVmdFBvc2l0aW9uIiwiZ2VuQWN0aXZhdG9yIiwic2V0VG9vbHRpcFBvc2l0aW9uIiwiU0NBTEVfSU4iLCJGQURFIiwib25Ib3ZlciIsIm1pbmlWYXJpYW50IiwibWluaVZhcmlhbnRXaWR0aCIsIm1heFZhcmlhbnRXaWR0aCIsImlzSG92ZXJlZCIsImlzRXhwYW5kZWQiLCJjb21wdXRlZFdpZHRoIiwiZ2VuTmF2aWdhdGlvbkNvbnRlbnQiLCJvbk1vdXNlZW50ZXIiLCJvbk1vdXNlbGVhdmUiLCJWVGV4dEZpZWxkIiwibGlnaHQiLCJkeW5hbWljIiwiZmxleEJhc2lzIiwiYm9yZGVyUmFkaXVzIiwiVlJlc2l6ZSIsIlZEYXRhVGFibGVDZWxsIiwicmVzaXplYWJsZSIsImFsaWduIiwicmVzaXplckNvbG9yIiwiY29udGVudENvbG9yIiwiZ2VuUmVzaXplIiwiJHNpemUiLCJnZW5DZWxsQ29udGVudCIsIlZDaGVja2JveCIsIlZEYXRhVGFibGVIZWFkZXIiLCJzaG93U2VxdWVuY2UiLCJzaG93Q2hlY2tib3giLCJjb2xzIiwiY29sV2lkdGgiLCJfY2FjaGUiLCJjb21wdXRlZENvbnRlbnRDb2xvciIsIm9uU29ydCIsIiR2YWx1ZSIsImNvbCIsImZpbHRlcmVkIiwic2hvd0ZpbHRlciIsImdlblNvcnRCdXR0b24iLCJzb3J0ZWQiLCIkYXJyb3dVcCIsImdlbkZpbHRlckJ1dHRvbiIsIiRmaWx0ZXIiLCJjZWxsQ2xhc3MiLCJnZW5IZWFkZXJBY3Rpb25zIiwic29ydGFibGUiLCJmaWx0ZXJhYmxlIiwiZ2VuRmlsdGVySW5wdXQiLCIkc2VhcmNoIiwiY2xlYXJhYmxlIiwiZ2VuRmlsdGVyV3JhcHBlciIsImZpbHRlclNsb3QiLCJnZW5IZWFkZXJUaXRsZSIsImdlbk51bWJlckNlbGwiLCJnZW5DaGVja2JveENlbGwiLCJnZW5IZWFkZXJDZWxsIiwiZ2VuSGVhZGVyQ2hpbGRyZW4iLCJoZWFkZXJTbG90IiwiaGFzT3duUHJvcGVydHkiLCJzaG93IiwiVkRhdGFUYWJsZUJvZHkiLCJyb3dzIiwiY2hlY2tBbGxSb3dzIiwicGFnZSIsInJvd3NPblBhZ2UiLCJjaGVja2VkUm93cyIsInJvd3NPblRhYmxlIiwib25TZWxlY3RSb3dzIiwiY291bnQiLCJyb3ciLCJnZW5Sb3dDZWxsIiwiZm9ybWF0IiwiZ2VuVGFibGVSb3ciLCJyb3dDb3VudCIsInJvd0NlbGxzIiwib25EYmxjbGljayIsIm9uQ29udGV4dG1lbnUiLCJnZW5UYWJsZVJvd3MiLCJ0YWJsZVJvd3MiLCJyb3dzTGVuZ3RoIiwiVkJ1dHRvbiIsIlZEYXRhVGFibGVGb290ZXIiLCJwYWdlcyIsImZpcnN0T25QYWdlIiwibGFzdE9uUGFnZSIsInBhZ2VDb3JyZWN0aW9uIiwicGFnaW5hdGlvbkRpc3BsYXlUZXh0IiwiaXNMYXN0UGFnZSIsImNoYW5nZVRhYmxlUm93c1BhZ2UiLCJpc05leHQiLCJnZW5QYWdpbmF0aW9uQnV0dG9uIiwiYnRuQ29sb3IiLCJwYWdpbmF0aW9uIiwiYnV0dG9uc0NvbG9yIiwiZGlzYWJsZUlmIiwiJGFycm93UmlnaHQiLCIkYXJyb3dMZWZ0IiwiZ2VuUGFnaW5hdGlvblBhZ2VEaXNwbGF5IiwiZGlzcGxheUNvbG9yIiwibWFyZ2luIiwiZ2VuUm93c0NvdW50U2VsZWN0TGlzdCIsImNvdW50cyIsInJvd3NQZXJQYWdlT3B0aW9ucyIsImdlbk1lbnUiLCJnZW5Sb3dzQ291bnRGaWVsZCIsImdlblJvd3NDb3VudFNlbGVjdCIsImdlblJvd3NDb3VudFNlbGVjdENhcHRpb24iLCJyb3dzUGVyUGFnZVRleHQiLCJnZW5Sb3dzQ291bnRTZWxlY3RCbG9jayIsImdlblBhZ2VzQ291bnREaXNwbGF5IiwiZ2VuUGFnaW5hdGlvbkJ1dHRvbnNCbG9jayIsImdlblBhZ2luYXRpb25CbG9jayIsInZhbGlkYXRvciIsImhlYWRlck9wdGlvbnMiLCJmb290ZXJPcHRpb25zIiwiY3VzdG9tRmlsdGVyIiwiRnVuY3Rpb24iLCJpc0FsbFJvd3NDaGVja2VkIiwiZmlsdGVycyIsImNlaWwiLCJvblNlbGVjdEFsbCIsImNoZWNrZWQiLCJvblByZXZQYWdlIiwibnVtIiwib25OZXh0UGFnZSIsInNvcnRDb2x1bW4iLCJyZXZlcnNlIiwiZXhlY3V0b3IiLCJzb3J0IiwiYSIsImIiLCJvbkZpbHRlciIsImZpbHRlclJvd3MiLCJvblNlbGVjdFJvd3NDb3VudCIsImZpbHRlcktleXMiLCJyb3dSZXN1bHRzIiwicm93S2V5VmFsdWUiLCJ0b0xvd2VyQ2FzZSIsImZpbHRlclZhbHVlIiwiZXZlcnkiLCJnZW5UYWJsZVRvb2xzIiwidG9vbGJhciIsImdlblRhYmxlSGVhZGVyIiwiZ2VuVGFibGVCb2R5IiwiZ2VuVGFibGVGb290ZXIiLCJvbkxhc3RQYWdlIiwib25Db3JyZWN0UGFnZSIsInN0YXJ0IiwibGFzdCIsImdlblRhYmxlSW5uZXIiLCJWRGF0ZXBpY2tlckhlYWRlciIsIm9uTmV4dCIsIm9uUHJldiIsImdlbkhlYWRlckJ1dHRvbiIsImlzUmlnaHQiLCJpY29uUHJvcHNEYXRhIiwiYXJyb3dCdG4iLCJnZW5IZWFkZXJEaXNwbGF5IiwiZ2V0TW9udGgiLCJkYXRlIiwiZ2V0RnVsbFllYXIiLCJnZXREYXRlIiwiZ2V0RGF5IiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwic2V0RnVsbFllYXIiLCJzZXRNb250aCIsInNldERhdGUiLCJpc1ZhbGlkRGF0ZSIsInRvU3RyaW5nIiwiZ2V0VGltZSIsImdldERheU5hbWVBYmJyIiwiZGF5cyIsIlR5cGVFcnJvciIsImdldE1vbnRoTmFtZSIsIm1vbnRoIiwibW9udGhzIiwiRXJyb3IiLCJnZXRNb250aE5hbWVBYmJyIiwibW9udGhzQWJiciIsImZvcm1hdERhdGUiLCJ0cmFuc2xhdGlvbiIsInllYXIiLCJkYXkiLCJ3ZWVrIiwidmFsaWRhdGVEYXRlSW5wdXQiLCJ2Tm9kZXNBcnJheSIsInJvd0NsYXNzTmFtZSIsImNlbGxzSW5Sb3ciLCJ2Tm9kZXNJblJvdyIsImNlbGxWTm9kZXMiLCJ0b0RhdGVTdHJpbmciLCJwYXJzZURhdGUiLCJzZWxlY3RlZERhdGUiLCJtbHMiLCJWRGF0ZVBpY2tlckRhdGVzIiwibG9jYWxlIiwibW9uZGF5Rmlyc3QiLCJkaXNhYmxlZERhdGVzIiwiRklSU1RfTU9OVEgiLCJMQVNUX01PTlRIIiwiREFZUyIsIkFOSU1BVElPTl9USU1FT1VUIiwiZGF0ZXMiLCJpc0RhdGVzQ2hhbmdlZCIsInRvZGF5IiwidXBkYXRlTW9udGgiLCJzcGxpY2UiLCJkYXlzSW5Nb250aCIsInBhcmFtcyIsImdlbldlZWtEYXlzIiwiZ2VuRGF0ZU9iamVjdCIsInNldEVtcHRpZXNCZWZvcmVGaXJzdERhdGUiLCJkYXRlT2JqZWN0IiwiZmlyc3REYXkiLCJzdGFydERheSIsInRpbGxEYXkiLCJnZW5UYWJsZURhdGVzIiwiY29tcGFyZURhdGVzIiwiZGF0ZTEiLCJkYXRlMiIsInNldERpc2FibGVkIiwiaXNIb2xpZGF5IiwiZGF5c09mTW9udGgiLCJkaXNhYmxlRGF5c09mTW9udGgiLCJkaXNhYmxlRnJvbVRvIiwiZGlzYWJsZURhdGVzIiwiZGlzYWJsZURheXMiLCJyYW5nZXMiLCJkaXNhYmxlUmFuZ2VzIiwiY3VzdG9tIiwiZGF0ZUZyb20iLCJkYXRlVG8iLCJkIiwiZ2VuRGF0ZUNlbGwiLCJpc1NlbGVjdGVkIiwiaXNUb2RheSIsImdlbkRhdGVDZWxscyIsImdlbkRhdGVSb3dzIiwiZGF0ZXNWTm9kZXMiLCJnZW5EYXRlcyIsImdlbldlZWsiLCJ3YXRjaEVmZmVjdCIsIlZEYXRlUGlja2VyWWVhcnMiLCJMSU1JVCIsIk9OX1RBQkxFIiwiQ0VMTFNfSU5fUk9XIiwiQ1VSUkVOVF9ZRUFSIiwieWVhcnMiLCJvblRhYmxlSW5kZXgiLCJpc0xpc3RDaGFuZ2VkIiwiY29tcHV0ZWRZZWFyIiwiY2hhbmdlWWVhcnNMaXN0Iiwic2V0Q3VycmVudFRyYW5zaXRpb24iLCJzZXRUYWJsZUluZGV4IiwibWF4IiwiZ2VuVGFibGVZZWFycyIsImZyb21ZZWFyIiwibWF4WWVhcnMiLCJ5ZWFyc0xpc3QiLCJnZW5ZZWFyQ2VsbCIsImdlblllYXJzUm93cyIsImN1cnJlbnRZZWFycyIsInllYXJzVk5vZGVzIiwiZ2VuWWVhcnMiLCJWRGF0ZVBpY2tlck1vbnRocyIsImxhbmciLCJNT05USFMiLCJDVVJSRU5UX01PTlRIIiwidXBkYXRlWWVhciIsImNvbXB1dGVkTW9udGgiLCJnZW5Nb250aENlbGwiLCJnZW5Nb250aFJvd3MiLCJtb250aHNWTm9kZXMiLCJydSIsImVuIiwidHlwZWFibGUiLCJ1c2VNbHMiLCJ1c2VVdGMiLCJoaWdobGlnaHRlZCIsInRhYmxlTW9udGgiLCJ0YWJsZVllYXIiLCJjb252ZXJ0ZWREYXRlU3RyaW5nIiwiaXNZZWFycyIsImlzTW9udGhzIiwiaXNEYXRlcyIsImxvY2FsZU1vbnRocyIsImxvY2FsZVdlZWsiLCJ0YWJsZUNsYXNzZXMiLCJ0YWJsZVN0eWxlcyIsImhlYWRlclZhbHVlIiwiZGlzcGxheURhdGUiLCJzZXRJbml0RGF0ZSIsInNldFBhcnNlZERhdGUiLCJjb252ZXJ0VG9Gb3JtYXQiLCJvblRhYmxlQ2hhbmdlIiwic2V0RGF0YURhdGUiLCJkYXRlRm9yUGFyc2luZyIsIm9uWWVhclVwZGF0ZSIsIm9uTW9udGhVcGRhdGUiLCJvbkRhdGVVcGRhdGUiLCJvbkRhdGVNb250aFVwZGF0ZSIsIm9uRGF0ZUlucHV0Iiwic3RyaW5nVG9EYXRlIiwiZGF0ZUFycmF5Iiwiam9pbiIsImdlbkRpc3BsYXlWYWx1ZSIsImdlbkRhdGVwaWNrZXJEaXNwbGF5SW5uZXIiLCJnZW5EYXRlcGlja2VyRGlzcGxheSIsImdlbkRhdGVwaWNrZXJIZWFkZXIiLCJvblRhYmxlIiwiZ2VuRGF0ZXBpY2tlclllYXJzVGFibGUiLCJnZW5EYXRlcGlja2VyTW9udGhzVGFibGUiLCJnZW5EYXRlcGlja2VyRGF0ZXNUYWJsZSIsImdlbkRhdGVwaWNrZXJCb2R5IiwiZ2VuRGF0ZXBpY2tlcklucHV0Iiwib25DbGVhciIsImdlbkRhdGVwaWNrZXJUYWJsZSIsImdlbkRhdGVwaWNrZXIiLCJidWZmZXJWYWx1ZSIsImJhY2tncm91bmRDb2xvciIsImJhY2tncm91bmRPcGFjaXR5Iiwic3RyZWFtIiwic3RyaXBlZCIsImdlblByb2dyZXNzQmFyIiwiYmFyV2lkdGgiLCJnZW5Qcm9ncmVzc0J1ZmZlciIsImJ1ZmZlcldpZHRoIiwiZ2VuUHJvZ3Jlc3NCYWNrZ3JvdW5kIiwib3BhY2l0eSIsImdlblByb2dyZXNzSW5kZXRlcm1pbmF0ZSIsImdlblByb2dyZXNzTGluZWFyIiwiVlByb2dyZXNzTGluZWFyIiwiaWRLZXkiLCJsaXN0Q29sb3IiLCJpc01lbnVBY3RpdmUiLCJzZWFyY2giLCJ2YWx1ZVByb3BlcnR5IiwiaW5wdXRWYWx1ZSIsImdlbkF1dG9jb21wbGV0ZUxpc3QiLCJnZW5MaW5lYXJQcm9ncmVzcyIsImdlbkF1dG9jb21wbGV0ZSIsImhhc1N0YXRlIiwiY29sdW1uIiwid3JhcCIsInBvc2l0aW9ucyIsImFsaWduQ29udGVudCIsImp1c3RpZnkiLCJub0d1dHRlciIsImJwIiwiY2xzIiwicG9zIiwiY29sUHJvcHMiLCJwIiwib3JkZXJQcm9wcyIsIm9mZnNldFByb3BzIiwib3JkZXIiLCJvcmRlcnMiLCJwcm9wVmFsdWUiLCJvZmZzZXRzIiwiZ2VuQ2FyZCIsImdlbk5hdkJ0biIsIiRtZW51IiwiVkFwcCIsIlZNb2RhbCIsIlZGaWxlSW5wdXQiLCJWU2VsZWN0IiwiVkZvcm0iLCJWQmFkZ2UiLCJWR3JvdXAiLCJWVG9vbHRpcCIsIlZOYXZpZ2F0aW9uIiwiVk1haW4iLCJWVGV4dGFyZWEiLCJWU2tlbGV0b24iLCJWRGF0YVRhYmxlIiwiVkRhdGVQaWNrZXIiLCJWQXV0b2NvbXBsZXRlIiwiVkxheW91dCIsIlZSb3ciLCJWQ29sIiwiVlNwYWNlciIsIlZDYXJkIiwiVkNhcmRUaXRsZSIsIlZDYXJkU3VidGl0bGUiLCJWQ2FyZEFjdGlvbnMiLCJWQ2FyZENvbnRlbnQiLCJWVG9vbGJhciIsIlZUb29sYmFyTG9nbyIsIlZUb29sYmFySXRlbXMiLCJWVG9vbGJhck5hdkJ0biIsIlZUb29sYmFyQ29udGVudCIsIlZMaXN0SXRlbUNvbnRlbnQiLCJWTGlzdEl0ZW1JY29uIiwiVkxpc3RJdGVtU3VidGl0bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///717\n")},895:function(Q){Q.exports=__WEBPACK_EXTERNAL_MODULE__895__}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var U=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](U,U.exports,__webpack_require__),U.exports}__webpack_require__.d=function(Q,F){for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},__webpack_require__.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},__webpack_require__.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(717);return __webpack_exports__}()}));