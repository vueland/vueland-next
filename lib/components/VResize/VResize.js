import { h, ref, computed, reactive, defineComponent, onMounted, onBeforeUnmount, } from 'vue';
import { positionProps } from '../../composables/use-position';
import { useColors } from '../../composables/use-colors';
export default defineComponent({
    name: 'v-resize',
    props: {
        emit: {
            type: Boolean,
            default: false,
        },
        customClass: {
            type: String,
        },
        minSize: {
            type: [String, Number],
            default: 50,
        },
        color: {
            type: String,
            default: 'primary',
        },
        ...positionProps(),
    },
    emits: ['resize'],
    setup(props, { emit }) {
        const data = reactive({
            parentNode: null,
            startOffset: null,
            offsetTop: 0,
            offsetLeft: 0,
            parentHeight: 0,
            parentWidth: 0,
            marginLeft: 0,
            marginTop: 0,
            left: 0,
            top: 0,
            isActive: false,
        });
        const resizeRef = ref(null);
        const { setBackgroundClassNameColor, setBackgroundCssColor } = useColors();
        const classes = computed(() => {
            return {
                'v-resize': true,
                'v-resize--active': data.isActive,
                'v-resize--top': props.top,
                'v-resize--bottom': props.bottom,
                'v-resize--right': props.right,
                'v-resize--left': props.left,
                [props.customClass]: !!props.customClass,
                ...(props.color ? setBackgroundClassNameColor(props.color) : {}),
            };
        });
        const styles = computed(() => ({
            ...(props.color ? setBackgroundCssColor(props.color) : {}),
        }));
        const isDirectY = computed(() => {
            return props.top || props.bottom;
        });
        const isNeedReverse = computed(() => {
            return props.top || props.left;
        });
        const currentSize = computed(() => {
            return isDirectY.value ? data.parentHeight : data.parentWidth;
        });
        const sizeProp = computed(() => {
            return isDirectY.value ? 'height' : 'width';
        });
        const reverseDirection = computed(() => {
            return props.top ? 'top' : 'left';
        });
        const reverseOffsetKey = computed(() => {
            const side = reverseDirection.value;
            return 'offset' + side[0].toUpperCase() + side.slice(1);
        });
        const offset = computed(() => {
            return isDirectY.value ? data.offsetTop : data.offsetLeft;
        });
        const direction = computed(() => {
            return isDirectY.value ? 'clientY' : 'clientX';
        });
        const moveReverse = (size) => {
            const { parentNode, left, top } = data;
            const reverseTo = reverseDirection.value;
            const value = !isDirectY.value
                ? currentSize.value - size + left
                : currentSize.value - size + top;
            parentNode.style[reverseTo] = `${value}px`;
        };
        const setOrEmitSize = (size) => {
            if (props.emit)
                return emit('resize', size);
            data.parentNode.style[sizeProp.value] = `${size}px`;
            isNeedReverse.value && moveReverse(size);
        };
        const resize = (e) => {
            let size;
            if (isNeedReverse.value) {
                size =
                    currentSize.value -
                        (e[direction.value] - offset.value) +
                        data.startOffset;
            }
            else {
                size =
                    currentSize.value +
                        (e[direction.value] -
                            currentSize.value -
                            offset.value -
                            data.startOffset);
            }
            size > props.minSize && setOrEmitSize(size);
        };
        const resetMinMaxStyles = () => {
            if (isDirectY.value) {
                data.parentNode.style.maxHeight = '';
                data.parentNode.style.minHeight = '';
            }
            else {
                data.parentNode.style.maxWidth = '';
                data.parentNode.style.minWidth = '';
            }
        };
        const setParent = () => {
            const parent = resizeRef.value.parentNode;
            data.parentNode = parent;
        };
        const computeSizes = () => {
            const { top, left, height, width, marginLeft, marginTop } = getComputedStyle(data.parentNode);
            data.offsetTop = data.parentNode.offsetTop;
            data.offsetLeft = data.parentNode.offsetLeft;
            data.marginLeft = parseFloat(marginLeft);
            data.marginTop = parseFloat(marginTop);
            data.parentHeight = parseFloat(height);
            data.parentWidth = parseFloat(width);
            data.top = parseFloat(top);
            data.left = parseFloat(left);
        };
        const setStartPositions = () => {
            const side = reverseDirection.value;
            const offset = reverseOffsetKey.value;
            if (data[side] === data[offset]) {
                data.parentNode.style[side] = `${data[offset]}px`;
            }
        };
        const disableSelection = (e) => {
            e.preventDefault();
        };
        const initResize = (e) => {
            if (!data.isActive) {
                data.isActive = true;
                computeSizes();
                resetMinMaxStyles();
                setStartPositions();
                setStartOffset(e);
            }
            requestAnimationFrame(() => resize(e));
        };
        const setStartOffset = (e) => {
            if (isNeedReverse.value)
                data.startOffset = e[direction.value];
            else
                data.startOffset = e[direction.value] - currentSize.value;
            data.startOffset -= offset.value;
        };
        const reset = () => {
            data.isActive = false;
            resetMinMaxStyles();
        };
        const onMouseup = () => {
            reset();
            removeHandlers();
        };
        const onMousedown = () => {
            document.addEventListener('mousemove', initResize);
            document.addEventListener('mouseup', onMouseup);
            document.addEventListener('selectstart', disableSelection);
        };
        const removeHandlers = () => {
            document.removeEventListener('mousemove', initResize);
            document.removeEventListener('mouseup', onMouseup);
            document.removeEventListener('selectstart', disableSelection);
        };
        onMounted(() => setParent());
        onBeforeUnmount(() => document.removeEventListener('mousedown', onMousedown));
        return () => h('div', {
            class: classes.value,
            style: styles.value,
            key: 'resize',
            ref: resizeRef,
            onMousedown,
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVlJlc2l6ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZSZXNpemUvVlJlc2l6ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0wsQ0FBQyxFQUNELEdBQUcsRUFDSCxRQUFRLEVBQ1IsUUFBUSxFQUNSLGVBQWUsRUFDZixTQUFTLEVBQ1QsZUFBZSxHQUNoQixNQUFNLEtBQUssQ0FBQTtBQUdaLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUM5RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sOEJBQThCLENBQUE7QUFtQnhELGVBQWUsZUFBZSxDQUFDO0lBQzdCLElBQUksRUFBRSxVQUFVO0lBRWhCLEtBQUssRUFBRTtRQUNMLElBQUksRUFBRTtZQUNKLElBQUksRUFBRSxPQUFPO1lBQ2IsT0FBTyxFQUFFLEtBQUs7U0FDZjtRQUNELFdBQVcsRUFBRTtZQUNYLElBQUksRUFBRSxNQUFNO1NBQ2I7UUFDRCxPQUFPLEVBQUU7WUFDUCxJQUFJLEVBQUUsQ0FBRSxNQUFNLEVBQUUsTUFBTSxDQUFFO1lBQ3hCLE9BQU8sRUFBRSxFQUFFO1NBQ1o7UUFDRCxLQUFLLEVBQUU7WUFDTCxJQUFJLEVBQUUsTUFBTTtZQUNaLE9BQU8sRUFBRSxTQUFTO1NBQ25CO1FBQ0QsR0FBRyxhQUFhLEVBQUU7S0FDWjtJQUVSLEtBQUssRUFBRSxDQUFFLFFBQVEsQ0FBRTtJQUVuQixLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFO1FBQ25CLE1BQU0sSUFBSSxHQUFlLFFBQVEsQ0FBQztZQUNoQyxVQUFVLEVBQUUsSUFBSTtZQUNoQixXQUFXLEVBQUUsSUFBSTtZQUNqQixTQUFTLEVBQUUsQ0FBQztZQUNaLFVBQVUsRUFBRSxDQUFDO1lBQ2IsWUFBWSxFQUFFLENBQUM7WUFDZixXQUFXLEVBQUUsQ0FBQztZQUNkLFVBQVUsRUFBRSxDQUFDO1lBQ2IsU0FBUyxF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QUFDLENBQUE7UUFFRCxNQUFNLGNBQWMsR0FBRyxHQUFHLEVBQUU7WUFDMUIsUUFBUSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQTtZQUNyRCxRQUFRLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFBO1lBQ2xELFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQTtRQUMvRCxDQUFDLENBQUE7UUFFRCxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQTtRQUU1QixlQUFlLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFBO1FBRTdFLE9BQU8sR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRTtZQUNwQixLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7WUFDcEIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLO1lBQ25CLEdBQUcsRUFBRSxRQUFRO1lBQ2IsR0FBRyxFQUFFLFNBQVM7WUFDZCxXQUFXO1NBQ1osQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFZ1ZSBBUElcbmltcG9ydCB7XG4gIGgsXG4gIHJlZixcbiAgY29tcHV0ZWQsXG4gIHJlYWN0aXZlLFxuICBkZWZpbmVDb21wb25lbnQsXG4gIG9uTW91bnRlZCxcbiAgb25CZWZvcmVVbm1vdW50LFxufSBmcm9tICd2dWUnXG5cbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBwb3NpdGlvblByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvdXNlLXBvc2l0aW9uJ1xuaW1wb3J0IHsgdXNlQ29sb3JzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvdXNlLWNvbG9ycydcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuXG50eXBlIFJlc2l6ZURhdGEgPSB7XG4gIHBhcmVudE5vZGU6IEhUTUxFbGVtZW50IHwgbnVsbFxuICBzdGFydE9mZnNldDogbnVtYmVyIHwgbnVsbFxuICBvZmZzZXRUb3A6IG51bWJlclxuICBvZmZzZXRMZWZ0OiBudW1iZXJcbiAgcGFyZW50SGVpZ2h0OiBudW1iZXJcbiAgcGFyZW50V2lkdGg6IG51bWJlclxuICBtYXJnaW5MZWZ0OiBudW1iZXJcbiAgbWFyZ2luVG9wOiBudW1iZXJcbiAgbGVmdDogbnVtYmVyXG4gIHRvcDogbnVtYmVyXG4gIGlzQWN0aXZlOiBib29sZWFuXG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LXJlc2l6ZScsXG5cbiAgcHJvcHM6IHtcbiAgICBlbWl0OiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgfSxcbiAgICBjdXN0b21DbGFzczoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgIH0sXG4gICAgbWluU2l6ZToge1xuICAgICAgdHlwZTogWyBTdHJpbmcsIE51bWJlciBdLFxuICAgICAgZGVmYXVsdDogNTAsXG4gICAgfSxcbiAgICBjb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3ByaW1hcnknLFxuICAgIH0sXG4gICAgLi4ucG9zaXRpb25Qcm9wcygpLFxuICB9IGFzIGFueSxcblxuICBlbWl0czogWyAncmVzaXplJyBdLFxuXG4gIHNldHVwKHByb3BzLCB7IGVtaXQgfSk6ICgpID0+IFZOb2RlIHtcbiAgICBjb25zdCBkYXRhOiBSZXNpemVEYXRhID0gcmVhY3RpdmUoe1xuICAgICAgcGFyZW50Tm9kZTogbnVsbCxcbiAgICAgIHN0YXJ0T2Zmc2V0OiBudWxsLFxuICAgICAgb2Zmc2V0VG9wOiAwLFxuICAgICAgb2Zmc2V0TGVmdDogMCxcbiAgICAgIHBhcmVudEhlaWdodDogMCxcbiAgICAgIHBhcmVudFdpZHRoOiAwLFxuICAgICAgbWFyZ2luTGVmdDogMCxcbiAgICAgIG1hcmdpblRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICBpc0FjdGl2ZTogZmFsc2UsXG4gICAgfSlcblxuICAgIGNvbnN0IHJlc2l6ZVJlZiA9IHJlZjxIVE1MRWxlbWVudCB8IG51bGw+KG51bGwpXG5cbiAgICBjb25zdCB7IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvciwgc2V0QmFja2dyb3VuZENzc0NvbG9yIH0gPSB1c2VDb2xvcnMoKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAndi1yZXNpemUnOiB0cnVlLFxuICAgICAgICAndi1yZXNpemUtLWFjdGl2ZSc6IGRhdGEuaXNBY3RpdmUsXG4gICAgICAgICd2LXJlc2l6ZS0tdG9wJzogcHJvcHMudG9wLFxuICAgICAgICAndi1yZXNpemUtLWJvdHRvbSc6IHByb3BzLmJvdHRvbSxcbiAgICAgICAgJ3YtcmVzaXplLS1yaWdodCc6IHByb3BzLnJpZ2h0LFxuICAgICAgICAndi1yZXNpemUtLWxlZnQnOiBwcm9wcy5sZWZ0LFxuICAgICAgICBbcHJvcHMuY3VzdG9tQ2xhc3NdOiAhIXByb3BzLmN1c3RvbUNsYXNzLFxuICAgICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgICAgfVxuICAgIH0pXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0QmFja2dyb3VuZENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IGlzRGlyZWN0WSA9IGNvbXB1dGVkPGJvb2xlYW4+KCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy50b3AgfHwgcHJvcHMuYm90dG9tXG4gICAgfSlcblxuICAgIGNvbnN0IGlzTmVlZFJldmVyc2UgPSBjb21wdXRlZDxib29sZWFuPigoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMudG9wIHx8IHByb3BzLmxlZnRcbiAgICB9KVxuXG4gICAgY29uc3QgY3VycmVudFNpemUgPSBjb21wdXRlZDxudW1iZXI+KCgpID0+IHtcbiAgICAgIHJldHVybiBpc0RpcmVjdFkudmFsdWUgPyBkYXRhLnBhcmVudEhlaWdodCEgOiBkYXRhLnBhcmVudFdpZHRoIVxuICAgIH0pXG5cbiAgICBjb25zdCBzaXplUHJvcCA9IGNvbXB1dGVkPHN0cmluZz4oKCkgPT4ge1xuICAgICAgcmV0dXJuIGlzRGlyZWN0WS52YWx1ZSA/ICdoZWlnaHQnIDogJ3dpZHRoJ1xuICAgIH0pXG5cbiAgICBjb25zdCByZXZlcnNlRGlyZWN0aW9uID0gY29tcHV0ZWQ8c3RyaW5nPigoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMudG9wID8gJ3RvcCcgOiAnbGVmdCdcbiAgICB9KVxuXG4gICAgY29uc3QgcmV2ZXJzZU9mZnNldEtleSA9IGNvbXB1dGVkPHN0cmluZz4oKCkgPT4ge1xuICAgICAgY29uc3Qgc2lkZSA9IHJldmVyc2VEaXJlY3Rpb24udmFsdWVcbiAgICAgIHJldHVybiAnb2Zmc2V0JyArIHNpZGVbMF0udG9VcHBlckNhc2UoKSArIHNpZGUuc2xpY2UoMSlcbiAgICB9KVxuXG4gICAgY29uc3Qgb2Zmc2V0ID0gY29tcHV0ZWQ8bnVtYmVyPigoKSA9PiB7XG4gICAgICByZXR1cm4gaXNEaXJlY3RZLnZhbHVlID8gZGF0YS5vZmZzZXRUb3AhIDogZGF0YS5vZmZzZXRMZWZ0IVxuICAgIH0pXG5cbiAgICBjb25zdCBkaXJlY3Rpb24gPSBjb21wdXRlZDxzdHJpbmc+KCgpID0+IHtcbiAgICAgIHJldHVybiBpc0RpcmVjdFkudmFsdWUgPyAnY2xpZW50WScgOiAnY2xpZW50WCdcbiAgICB9KVxuXG4gICAgY29uc3QgbW92ZVJldmVyc2UgPSAoc2l6ZSkgPT4ge1xuICAgICAgY29uc3QgeyBwYXJlbnROb2RlLCBsZWZ0LCB0b3AgfSA9IGRhdGFcbiAgICAgIGNvbnN0IHJldmVyc2VUbyA9IHJldmVyc2VEaXJlY3Rpb24udmFsdWVcblxuICAgICAgY29uc3QgdmFsdWUgPSAhaXNEaXJlY3RZLnZhbHVlXG4gICAgICAgID8gY3VycmVudFNpemUudmFsdWUgLSBzaXplICsgbGVmdFxuICAgICAgICA6IGN1cnJlbnRTaXplLnZhbHVlIC0gc2l6ZSArIHRvcFxuXG4gICAgICBwYXJlbnROb2RlIS5zdHlsZVtyZXZlcnNlVG9dID0gYCR7IHZhbHVlIH1weGBcbiAgICB9XG5cbiAgICBjb25zdCBzZXRPckVtaXRTaXplID0gKHNpemUpID0+IHtcbiAgICAgIGlmIChwcm9wcy5lbWl0KSByZXR1cm4gZW1pdCgncmVzaXplJywgc2l6ZSlcblxuICAgICAgZGF0YS5wYXJlbnROb2RlIS5zdHlsZVtzaXplUHJvcC52YWx1ZV0gPSBgJHsgc2l6ZSB9cHhgXG5cbiAgICAgIGlzTmVlZFJldmVyc2UudmFsdWUgJiYgbW92ZVJldmVyc2Uoc2l6ZSlcbiAgICB9XG5cbiAgICBjb25zdCByZXNpemUgPSAoZSkgPT4ge1xuICAgICAgbGV0IHNpemVcblxuICAgICAgaWYgKGlzTmVlZFJldmVyc2UudmFsdWUpIHtcbiAgICAgICAgc2l6ZSA9XG4gICAgICAgICAgY3VycmVudFNpemUudmFsdWUgLVxuICAgICAgICAgIChlW2RpcmVjdGlvbi52YWx1ZV0gLSBvZmZzZXQudmFsdWUpICtcbiAgICAgICAgICBkYXRhLnN0YXJ0T2Zmc2V0IVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2l6ZSA9XG4gICAgICAgICAgY3VycmVudFNpemUudmFsdWUgK1xuICAgICAgICAgIChlW2RpcmVjdGlvbi52YWx1ZV0gLVxuICAgICAgICAgICAgY3VycmVudFNpemUudmFsdWUgLVxuICAgICAgICAgICAgb2Zmc2V0LnZhbHVlIC1cbiAgICAgICAgICAgIGRhdGEuc3RhcnRPZmZzZXQhKVxuICAgICAgfVxuXG4gICAgICBzaXplID4gcHJvcHMubWluU2l6ZSAmJiBzZXRPckVtaXRTaXplKHNpemUpXG4gICAgfVxuXG4gICAgY29uc3QgcmVzZXRNaW5NYXhTdHlsZXMgPSAoKSA9PiB7XG4gICAgICBpZiAoaXNEaXJlY3RZLnZhbHVlKSB7XG4gICAgICAgIGRhdGEucGFyZW50Tm9kZSEuc3R5bGUubWF4SGVpZ2h0ID0gJydcbiAgICAgICAgZGF0YS5wYXJlbnROb2RlIS5zdHlsZS5taW5IZWlnaHQgPSAnJ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YS5wYXJlbnROb2RlIS5zdHlsZS5tYXhXaWR0aCA9ICcnXG4gICAgICAgIGRhdGEucGFyZW50Tm9kZSEuc3R5bGUubWluV2lkdGggPSAnJ1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHNldFBhcmVudCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHBhcmVudCA9IHJlc2l6ZVJlZi52YWx1ZSEucGFyZW50Tm9kZVxuICAgICAgZGF0YS5wYXJlbnROb2RlID0gcGFyZW50IGFzIEhUTUxFbGVtZW50XG4gICAgfVxuXG4gICAgY29uc3QgY29tcHV0ZVNpemVzID0gKCkgPT4ge1xuICAgICAgY29uc3QgeyB0b3AsIGxlZnQsIGhlaWdodCwgd2lkdGgsIG1hcmdpbkxlZnQsIG1hcmdpblRvcCB9ID1cbiAgICAgICAgZ2V0Q29tcHV0ZWRTdHlsZShkYXRhLnBhcmVudE5vZGUhKVxuXG4gICAgICBkYXRhLm9mZnNldFRvcCA9IGRhdGEucGFyZW50Tm9kZSEub2Zmc2V0VG9wXG4gICAgICBkYXRhLm9mZnNldExlZnQgPSBkYXRhLnBhcmVudE5vZGUhLm9mZnNldExlZnRcbiAgICAgIGRhdGEubWFyZ2luTGVmdCA9IHBhcnNlRmxvYXQobWFyZ2luTGVmdClcbiAgICAgIGRhdGEubWFyZ2luVG9wID0gcGFyc2VGbG9hdChtYXJnaW5Ub3ApXG4gICAgICBkYXRhLnBhcmVudEhlaWdodCA9IHBhcnNlRmxvYXQoaGVpZ2h0KVxuICAgICAgZGF0YS5wYXJlbnRXaWR0aCA9IHBhcnNlRmxvYXQod2lkdGgpXG4gICAgICBkYXRhLnRvcCA9IHBhcnNlRmxvYXQodG9wKVxuICAgICAgZGF0YS5sZWZ0ID0gcGFyc2VGbG9hdChsZWZ0KVxuICAgIH1cblxuICAgIGNvbnN0IHNldFN0YXJ0UG9zaXRpb25zID0gKCkgPT4ge1xuICAgICAgY29uc3Qgc2lkZSA9IHJldmVyc2VEaXJlY3Rpb24udmFsdWVcbiAgICAgIGNvbnN0IG9mZnNldCA9IHJldmVyc2VPZmZzZXRLZXkudmFsdWVcblxuICAgICAgaWYgKGRhdGFbc2lkZV0gPT09IGRhdGFbb2Zmc2V0XSkge1xuICAgICAgICBkYXRhLnBhcmVudE5vZGUhLnN0eWxlW3NpZGVdID0gYCR7IGRhdGFbb2Zmc2V0XSB9cHhgXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgZGlzYWJsZVNlbGVjdGlvbiA9IChlKSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICB9XG5cbiAgICBjb25zdCBpbml0UmVzaXplID0gKGUpID0+IHtcbiAgICAgIGlmICghZGF0YS5pc0FjdGl2ZSkge1xuICAgICAgICBkYXRhLmlzQWN0aXZlID0gdHJ1ZVxuICAgICAgICBjb21wdXRlU2l6ZXMoKVxuICAgICAgICByZXNldE1pbk1heFN0eWxlcygpXG4gICAgICAgIHNldFN0YXJ0UG9zaXRpb25zKClcbiAgICAgICAgc2V0U3RhcnRPZmZzZXQoZSlcbiAgICAgIH1cblxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHJlc2l6ZShlKSlcbiAgICB9XG5cbiAgICBjb25zdCBzZXRTdGFydE9mZnNldCA9IChlKSA9PiB7XG4gICAgICBpZiAoaXNOZWVkUmV2ZXJzZS52YWx1ZSkgZGF0YS5zdGFydE9mZnNldCA9IGVbZGlyZWN0aW9uLnZhbHVlXVxuICAgICAgZWxzZSBkYXRhLnN0YXJ0T2Zmc2V0ID0gZVtkaXJlY3Rpb24udmFsdWVdIC0gY3VycmVudFNpemUudmFsdWVcblxuICAgICAgZGF0YS5zdGFydE9mZnNldCEgLT0gb2Zmc2V0LnZhbHVlXG4gICAgfVxuXG4gICAgY29uc3QgcmVzZXQgPSAoKSA9PiB7XG4gICAgICBkYXRhLmlzQWN0aXZlID0gZmFsc2VcbiAgICAgIHJlc2V0TWluTWF4U3R5bGVzKClcbiAgICB9XG5cbiAgICBjb25zdCBvbk1vdXNldXAgPSAoKSA9PiB7XG4gICAgICByZXNldCgpXG4gICAgICByZW1vdmVIYW5kbGVycygpXG4gICAgfVxuXG4gICAgY29uc3Qgb25Nb3VzZWRvd24gPSAoKSA9PiB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBpbml0UmVzaXplKVxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG9uTW91c2V1cClcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdHN0YXJ0JywgZGlzYWJsZVNlbGVjdGlvbilcbiAgICB9XG5cbiAgICBjb25zdCByZW1vdmVIYW5kbGVycyA9ICgpID0+IHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGluaXRSZXNpemUpXG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25Nb3VzZXVwKVxuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2VsZWN0c3RhcnQnLCBkaXNhYmxlU2VsZWN0aW9uKVxuICAgIH1cblxuICAgIG9uTW91bnRlZCgoKSA9PiBzZXRQYXJlbnQoKSlcblxuICAgIG9uQmVmb3JlVW5tb3VudCgoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbk1vdXNlZG93bikpXG5cbiAgICByZXR1cm4gKCkgPT4gaCgnZGl2Jywge1xuICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICBzdHlsZTogc3R5bGVzLnZhbHVlLFxuICAgICAga2V5OiAncmVzaXplJyxcbiAgICAgIHJlZjogcmVzaXplUmVmLFxuICAgICAgb25Nb3VzZWRvd24sXG4gICAgfSlcbiAgfSxcbn0pXG4iXX0=