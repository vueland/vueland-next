import { defineComponent, provide, reactive, h, withDirectives, onMounted, } from 'vue';
import { resize } from '../../directives';
import { breakpoints } from '../../services/breakpoints';
import { throttle } from '../../utils/throttle';
export default defineComponent({
    name: 'v-app',
    directives: {
        resize,
    },
    props: {
        global: {
            type: Object,
            default: null,
        },
    },
    setup(props, { slots }) {
        const TIMEOUT = 40;
        const state = reactive({
            current: null,
            xlAndLess: false,
            lgAndLess: false,
            mdAndLess: false,
            smAndLess: false,
        });
        provide('$v_breakpoints', state);
        const setCurrentBreakpoint = (screen) => {
            if (screen >= breakpoints.xl) {
                return (state.current = 'xl');
            }
            if (screen >= breakpoints.lg && screen < breakpoints.xl) {
                return (state.current = 'lg');
            }
            if (screen >= breakpoints.md && screen < breakpoints.lg) {
                return (state.current = 'md');
            }
            if (screen >= breakpoints.sm && screen < breakpoints.md) {
                return (state.current = 'sm');
            }
            return (state.current = 'sm');
        };
        const setIntervals = (screen) => {
            const { xl, lg, md, sm } = breakpoints;
            state.xlAndLess = screen <= xl && screen > lg;
            state.lgAndLess = screen <= lg && screen > md;
            state.mdAndLess = screen <= md && screen > sm;
            state.smAndLess = screen <= sm;
        };
        const setSizes = () => {
            const { innerWidth } = props.global || window;
            setCurrentBreakpoint(innerWidth);
            setIntervals(innerWidth);
        };
        const genAppWrapper = () => {
            return h('div', { class: 'v-app--wrapper' }, {
                default: () => slots.default && slots.default(),
            });
        };
        const throttledResizeListener = throttle(setSizes, TIMEOUT);
        onMounted(() => setSizes());
        return () => withDirectives(h('div', { class: 'v-app' }, genAppWrapper()), [[resize, throttledResizeListener]]);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkFwcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZBcHAvVkFwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsZUFBZSxFQUNmLE9BQU8sRUFDUCxRQUFRLEVBQ1IsQ0FBQyxFQUNELGNBQWMsRUFDZCxTQUFTLEdBQ1YsTUFBTSxLQUFLLENBQUE7QUFHWixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFHekMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDRCQUE0QixDQUFBO0FBR3hELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQVkvQyxlQUFlLGVBQWUsQ0FBQztJQUM3QixJQUFJLEVBQUUsT0FBTztJQUNiLFVBQVUsRUFBRTtRQUNWLE1BQU07S0FDUDtJQUNELEtBQUssRUFBRTtRQUNMLE1BQU0sRUFBRTtZQUNOLElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLElBQUk7U0FDZDtLQUNGO0lBQ0QsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRTtRQUNwQixNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUE7UUFFbEIsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFpQjtZQUNyQyxPQUFPLEVBQUUsSUFBSTtZQUNiLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLFNBQVMsRUFBRSxLQUFLO1NBQ2pCLENBQUMsQ0FBQTtRQUVGLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUVoQyxNQUFNLG9CQUFvQixHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDdEMsSUFBSSxNQUFNLElBQUksV0FBVyxDQUFDLEVBQUUsRUFBRTtnQkFDNUIsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUE7YUFDOUI7WUFDRCxJQUFJLE1BQU0sSUFBSSxXQUFXLENBQUMsRUFBRSxJQUFJLE1BQU0sR0FBRyxXQUFXLENBQUMsRUFBRSxFQUFFO2dCQUN2RCxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQTthQUM5QjtZQUNELElBQUksTUFBTSxJQUFJLFdBQVcsQ0FBQyxFQUFFLElBQUksTUFBTSxHQUFHLFdBQVcsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZELE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFBO2FBQzlCO1lBQ0QsSUFBSSxNQUFNLElBQUksV0FBVyxDQUFDLEVBQUUsSUFBSSxNQUFNLEdBQUcsV0FBVyxDQUFDLEVBQUUsRUFBRTtnQkFDdkQsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUE7YUFDOUI7WUFFRCxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQTtRQUMvQixDQUFDLENBQUE7UUFFRCxNQUFNLFlBQVksR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQzlCLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxXQUFXLENBQUE7WUFFdEMsS0FBSyxDQUFDLFNBQVMsR0FBRyxNQUFNLElBQUksRUFBRSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUE7WUFDN0MsS0FBSyxDQUFDLFNBQVMsR0FBRyxNQUFNLElBQUksRUFBRSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUE7WUFDN0MsS0FBSyxDQUFDLFNBQVMsR0FBRyxNQUFNLElBQUksRUFBRSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUE7WUFDN0MsS0FBSyxDQUFDLFNBQVMsR0FBRyxNQUFNLElBQUksRUFBRSxDQUFBO1FBQ2hDLENBQUMsQ0FBQTtRQUVELE1BQU0sUUFBUSxHQUFHLEdBQUcsRUFBRTtZQUNwQixNQUFNLEVBQUUsVUFBVSxFQUFFLEdBQUcsS0FBSyxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUE7WUFFN0Msb0JBQW9CLENBQUMsVUFBVSxDQUFDLENBQUE7WUFDaEMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQzFCLENBQUMsQ0FBQTtRQUVELE1BQU0sYUFBYSxHQUFHLEdBQUcsRUFBRTtZQUN6QixPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRTtnQkFDM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRTthQUNoRCxDQUFDLENBQUE7UUFDSixDQUFDLENBQUE7UUFFRCxNQUFNLHVCQUF1QixHQUFHLFFBQVEsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFFM0QsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7UUFFM0IsT0FBTyxHQUFHLEVBQUUsQ0FDVixjQUFjLENBQ1osQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRSxhQUFhLEVBQUUsQ0FBQyxFQUM3QyxDQUFFLENBQUUsTUFBTSxFQUFFLHVCQUF1QixDQUFFLENBQUUsQ0FDeEMsQ0FBQTtJQUNMLENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBkZWZpbmVDb21wb25lbnQsXG4gIHByb3ZpZGUsXG4gIHJlYWN0aXZlLFxuICBoLFxuICB3aXRoRGlyZWN0aXZlcyxcbiAgb25Nb3VudGVkLFxufSBmcm9tICd2dWUnXG5cbi8vIERpcmVjdGl2ZXNcbmltcG9ydCB7IHJlc2l6ZSB9IGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMnXG5cbi8vIFNlcnZpY2VzXG5pbXBvcnQgeyBicmVha3BvaW50cyB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2JyZWFrcG9pbnRzJ1xuXG4vLyBVdGlsc1xuaW1wb3J0IHsgdGhyb3R0bGUgfSBmcm9tICcuLi8uLi91dGlscy90aHJvdHRsZSdcblxuLy8gVHlwZXNcblxuaW50ZXJmYWNlIEFwcEJyZWFrcG9pbnRzIHtcbiAgY3VycmVudDogTWF5YmU8J3hsJyB8ICdsZycgfCAnbWQnIHwgJ3NtJz5cbiAgeGxBbmRMZXNzOiBib29sZWFuXG4gIGxnQW5kTGVzczogYm9vbGVhblxuICBtZEFuZExlc3M6IGJvb2xlYW5cbiAgc21BbmRMZXNzOiBib29sZWFuXG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWFwcCcsXG4gIGRpcmVjdGl2ZXM6IHtcbiAgICByZXNpemUsXG4gIH0sXG4gIHByb3BzOiB7XG4gICAgZ2xvYmFsOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gIH0sXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICBjb25zdCBUSU1FT1VUID0gNDBcblxuICAgIGNvbnN0IHN0YXRlID0gcmVhY3RpdmU8QXBwQnJlYWtwb2ludHM+KHtcbiAgICAgIGN1cnJlbnQ6IG51bGwsXG4gICAgICB4bEFuZExlc3M6IGZhbHNlLFxuICAgICAgbGdBbmRMZXNzOiBmYWxzZSxcbiAgICAgIG1kQW5kTGVzczogZmFsc2UsXG4gICAgICBzbUFuZExlc3M6IGZhbHNlLFxuICAgIH0pXG5cbiAgICBwcm92aWRlKCckdl9icmVha3BvaW50cycsIHN0YXRlKVxuXG4gICAgY29uc3Qgc2V0Q3VycmVudEJyZWFrcG9pbnQgPSAoc2NyZWVuKSA9PiB7XG4gICAgICBpZiAoc2NyZWVuID49IGJyZWFrcG9pbnRzLnhsKSB7XG4gICAgICAgIHJldHVybiAoc3RhdGUuY3VycmVudCA9ICd4bCcpXG4gICAgICB9XG4gICAgICBpZiAoc2NyZWVuID49IGJyZWFrcG9pbnRzLmxnICYmIHNjcmVlbiA8IGJyZWFrcG9pbnRzLnhsKSB7XG4gICAgICAgIHJldHVybiAoc3RhdGUuY3VycmVudCA9ICdsZycpXG4gICAgICB9XG4gICAgICBpZiAoc2NyZWVuID49IGJyZWFrcG9pbnRzLm1kICYmIHNjcmVlbiA8IGJyZWFrcG9pbnRzLmxnKSB7XG4gICAgICAgIHJldHVybiAoc3RhdGUuY3VycmVudCA9ICdtZCcpXG4gICAgICB9XG4gICAgICBpZiAoc2NyZWVuID49IGJyZWFrcG9pbnRzLnNtICYmIHNjcmVlbiA8IGJyZWFrcG9pbnRzLm1kKSB7XG4gICAgICAgIHJldHVybiAoc3RhdGUuY3VycmVudCA9ICdzbScpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoc3RhdGUuY3VycmVudCA9ICdzbScpXG4gICAgfVxuXG4gICAgY29uc3Qgc2V0SW50ZXJ2YWxzID0gKHNjcmVlbikgPT4ge1xuICAgICAgY29uc3QgeyB4bCwgbGcsIG1kLCBzbSB9ID0gYnJlYWtwb2ludHNcblxuICAgICAgc3RhdGUueGxBbmRMZXNzID0gc2NyZWVuIDw9IHhsICYmIHNjcmVlbiA+IGxnXG4gICAgICBzdGF0ZS5sZ0FuZExlc3MgPSBzY3JlZW4gPD0gbGcgJiYgc2NyZWVuID4gbWRcbiAgICAgIHN0YXRlLm1kQW5kTGVzcyA9IHNjcmVlbiA8PSBtZCAmJiBzY3JlZW4gPiBzbVxuICAgICAgc3RhdGUuc21BbmRMZXNzID0gc2NyZWVuIDw9IHNtXG4gICAgfVxuXG4gICAgY29uc3Qgc2V0U2l6ZXMgPSAoKSA9PiB7XG4gICAgICBjb25zdCB7IGlubmVyV2lkdGggfSA9IHByb3BzLmdsb2JhbCB8fCB3aW5kb3dcblxuICAgICAgc2V0Q3VycmVudEJyZWFrcG9pbnQoaW5uZXJXaWR0aClcbiAgICAgIHNldEludGVydmFscyhpbm5lcldpZHRoKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkFwcFdyYXBwZXIgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gaCgnZGl2JywgeyBjbGFzczogJ3YtYXBwLS13cmFwcGVyJyB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IHNsb3RzLmRlZmF1bHQgJiYgc2xvdHMuZGVmYXVsdCgpLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCB0aHJvdHRsZWRSZXNpemVMaXN0ZW5lciA9IHRocm90dGxlKHNldFNpemVzLCBUSU1FT1VUKVxuXG4gICAgb25Nb3VudGVkKCgpID0+IHNldFNpemVzKCkpXG5cbiAgICByZXR1cm4gKCkgPT5cbiAgICAgIHdpdGhEaXJlY3RpdmVzKFxuICAgICAgICBoKCdkaXYnLCB7IGNsYXNzOiAndi1hcHAnIH0sIGdlbkFwcFdyYXBwZXIoKSksXG4gICAgICAgIFsgWyByZXNpemUsIHRocm90dGxlZFJlc2l6ZUxpc3RlbmVyIF0gXSxcbiAgICAgIClcbiAgfSxcbn0pXG4iXX0=