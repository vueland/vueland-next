import { defineComponent, computed, h } from 'vue';
import { toCamelCase } from '../../helpers';
const breakpoints = ['sm', 'md', 'lg', 'xl'];
const colProps = breakpoints.reduce((props, p) => {
    props[p] = {
        type: [String, Number],
        default: null,
    };
    return props;
}, {});
const orderProps = breakpoints.reduce((props, p) => {
    props[`order-${p}`] = {
        type: [String, Number],
        default: null,
    };
    return props;
}, {});
const offsetProps = breakpoints.reduce((props, p) => {
    props[`offset-${p}`] = {
        type: [String, Number],
        default: null,
    };
    return props;
}, {});
export default defineComponent({
    name: 'v-col',
    props: {
        order: {
            type: [String, Number],
            default: null,
        },
        cols: {
            type: [String, Number],
            default: null,
        },
        offset: {
            type: [String, Number],
            default: null,
        },
        ...colProps,
        ...orderProps,
        ...offsetProps,
    },
    setup(props, { slots }) {
        const classes = computed(() => ({
            'v-col': true,
            [`v-col-${props.cols}`]: !!props.cols,
            ...breakpoints.reduce((cols, p) => {
                cols[`${p}-${props[p]}`] = !!props[p];
                return cols;
            }, {}),
            [`order-${props.order}`]: props.order !== null,
            ...breakpoints.reduce((orders, p) => {
                const propValue = props[toCamelCase('order', p)];
                orders[`order-${p}-${propValue}`] = !!propValue;
                return orders;
            }, {}),
            [`offset-${props.offset}`]: props.offset !== null,
            ...breakpoints.reduce((offsets, p) => {
                const propValue = props[toCamelCase('offset', p)];
                offsets[`offset-${p}-${propValue}`] = !!propValue;
                return offsets;
            }, {}),
        }));
        return () => h('div', {
            class: classes.value,
        }, {
            default: () => slots.default && slots.default(),
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkNvbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3Z1ZWxhbmQvc3JjL2NvbXBvbmVudHMvVkdyaWQvVkNvbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQVMsTUFBTSxLQUFLLENBQUE7QUFDekQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUUzQyxNQUFNLFdBQVcsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO0FBRTVDLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDL0MsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHO1FBQ1QsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztRQUN0QixPQUFPLEVBQUUsSUFBSTtLQUNkLENBQUE7SUFFRCxPQUFPLEtBQUssQ0FBQTtBQUNkLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtBQUVOLE1BQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDakQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRztRQUNwQixJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO1FBQ3RCLE9BQU8sRUFBRSxJQUFJO0tBQ2QsQ0FBQTtJQUVELE9BQU8sS0FBSyxDQUFBO0FBQ2QsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBRU4sTUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUNsRCxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxHQUFHO1FBQ3JCLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7UUFDdEIsT0FBTyxFQUFFLElBQUk7S0FDZCxDQUFBO0lBRUQsT0FBTyxLQUFLLENBQUE7QUFDZCxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7QUFFTixlQUFlLGVBQWUsQ0FBQztJQUM3QixJQUFJLEVBQUUsT0FBTztJQUNiLEtBQUssRUFBRTtRQUNMLEtBQUssRUFBRTtZQUNMLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7WUFDdEIsT0FBTyxFQUFFLElBQUk7U0FDZDtRQUNELElBQUksRUFBRTtZQUNKLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7WUFDdEIsT0FBTyxFQUFFLElBQUk7U0FDZDtRQUNELE1BQU0sRUFBRTtZQUNOLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7WUFDdEIsT0FBTyxFQUFFLElBQUk7U0FDZDtRQUNELEdBQUcsUUFBUTtRQUNYLEdBQUcsVUFBVTtRQUNiLEdBQUcsV0FBVztLQUNmO0lBQ0QsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRTtRQUNwQixNQUFNLE9BQU8sR0FBRyxRQUFRLENBQTBCLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDdkQsT0FBTyxFQUFFLElBQUk7WUFDYixDQUFDLFNBQVMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJO1lBQ3JDLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDaEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDckMsT0FBTyxJQUFJLENBQUE7WUFDYixDQUFDLEVBQUUsRUFBRSxDQUFDO1lBRU4sQ0FBQyxTQUFTLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLEtBQUssSUFBSTtZQUU5QyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2xDLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7Z0JBQ2hELE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxTQUFTLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUE7Z0JBQy9DLE9BQU8sTUFBTSxDQUFBO1lBQ2YsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUNOLENBQUMsVUFBVSxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsTUFBTSxLQUFLLElBQUk7WUFDakQsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNuQyxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUNqRCxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksU0FBUyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFBO2dCQUNqRCxPQUFPLE9BQU8sQ0FBQTtZQUNoQixDQUFDLEVBQUUsRUFBRSxDQUFDO1NBQ1AsQ0FBQyxDQUFDLENBQUE7UUFFSCxPQUFPLEdBQUcsRUFBRSxDQUNWLENBQUMsQ0FDQyxLQUFLLEVBQ0w7WUFDRSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7U0FDckIsRUFDRDtZQUNFLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7U0FDaEQsQ0FDRixDQUFBO0lBQ0wsQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgY29tcHV0ZWQsIGgsIFZOb2RlIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgdG9DYW1lbENhc2UgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG5jb25zdCBicmVha3BvaW50cyA9IFsnc20nLCAnbWQnLCAnbGcnLCAneGwnXVxuXG5jb25zdCBjb2xQcm9wcyA9IGJyZWFrcG9pbnRzLnJlZHVjZSgocHJvcHMsIHApID0+IHtcbiAgcHJvcHNbcF0gPSB7XG4gICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICBkZWZhdWx0OiBudWxsLFxuICB9XG5cbiAgcmV0dXJuIHByb3BzXG59LCB7fSlcblxuY29uc3Qgb3JkZXJQcm9wcyA9IGJyZWFrcG9pbnRzLnJlZHVjZSgocHJvcHMsIHApID0+IHtcbiAgcHJvcHNbYG9yZGVyLSR7cH1gXSA9IHtcbiAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgIGRlZmF1bHQ6IG51bGwsXG4gIH1cblxuICByZXR1cm4gcHJvcHNcbn0sIHt9KVxuXG5jb25zdCBvZmZzZXRQcm9wcyA9IGJyZWFrcG9pbnRzLnJlZHVjZSgocHJvcHMsIHApID0+IHtcbiAgcHJvcHNbYG9mZnNldC0ke3B9YF0gPSB7XG4gICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICBkZWZhdWx0OiBudWxsLFxuICB9XG5cbiAgcmV0dXJuIHByb3BzXG59LCB7fSlcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtY29sJyxcbiAgcHJvcHM6IHtcbiAgICBvcmRlcjoge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgfSxcbiAgICBjb2xzOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICB9LFxuICAgIG9mZnNldDoge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgfSxcbiAgICAuLi5jb2xQcm9wcyxcbiAgICAuLi5vcmRlclByb3BzLFxuICAgIC4uLm9mZnNldFByb3BzLFxuICB9LFxuICBzZXR1cChwcm9wcywgeyBzbG90cyB9KTogKCkgPT4gVk5vZGUge1xuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LWNvbCc6IHRydWUsXG4gICAgICBbYHYtY29sLSR7cHJvcHMuY29sc31gXTogISFwcm9wcy5jb2xzLFxuICAgICAgLi4uYnJlYWtwb2ludHMucmVkdWNlKChjb2xzLCBwKSA9PiB7XG4gICAgICAgIGNvbHNbYCR7cH0tJHtwcm9wc1twXX1gXSA9ICEhcHJvcHNbcF1cbiAgICAgICAgcmV0dXJuIGNvbHNcbiAgICAgIH0sIHt9KSxcblxuICAgICAgW2BvcmRlci0ke3Byb3BzLm9yZGVyfWBdOiBwcm9wcy5vcmRlciAhPT0gbnVsbCxcblxuICAgICAgLi4uYnJlYWtwb2ludHMucmVkdWNlKChvcmRlcnMsIHApID0+IHtcbiAgICAgICAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbdG9DYW1lbENhc2UoJ29yZGVyJywgcCldXG4gICAgICAgIG9yZGVyc1tgb3JkZXItJHtwfS0ke3Byb3BWYWx1ZX1gXSA9ICEhcHJvcFZhbHVlXG4gICAgICAgIHJldHVybiBvcmRlcnNcbiAgICAgIH0sIHt9KSxcbiAgICAgIFtgb2Zmc2V0LSR7cHJvcHMub2Zmc2V0fWBdOiBwcm9wcy5vZmZzZXQgIT09IG51bGwsXG4gICAgICAuLi5icmVha3BvaW50cy5yZWR1Y2UoKG9mZnNldHMsIHApID0+IHtcbiAgICAgICAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbdG9DYW1lbENhc2UoJ29mZnNldCcsIHApXVxuICAgICAgICBvZmZzZXRzW2BvZmZzZXQtJHtwfS0ke3Byb3BWYWx1ZX1gXSA9ICEhcHJvcFZhbHVlXG4gICAgICAgIHJldHVybiBvZmZzZXRzXG4gICAgICB9LCB7fSksXG4gICAgfSkpXG5cbiAgICByZXR1cm4gKCkgPT5cbiAgICAgIGgoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKSxcbiAgICAgICAgfVxuICAgICAgKVxuICB9LFxufSlcbiJdfQ==