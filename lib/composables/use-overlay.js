import { render, h } from 'vue';
import { VOverlay } from '../components/VOverlay';
import { addOnceListener } from '../helpers';
export const overlayProps = () => ({
    overlay: Boolean,
    overlayColor: {
        type: String,
        default: '#000000'
    }
});
export const useOverlay = (props, overlayOn) => {
    const container = document.createElement('div');
    let overlayElement = null;
    const renderOverlay = () => render(h(VOverlay, { active: false, color: props.overlayColor }), container);
    const createOverlay = () => {
        overlayElement.style.zIndex = `${props.zIndex - 1}`;
        overlayOn.style.zIndex = `${props.zIndex}`;
        overlayOn?.parentNode?.insertBefore(overlayElement, overlayOn);
        overlayElement?.classList.remove('v-overlay--hidden');
        requestAnimationFrame(() => {
            overlayElement?.classList.add('v-overlay--active');
        });
    };
    const removeOverlay = () => {
        overlayElement.classList.remove('v-overlay--active');
        requestAnimationFrame(() => {
            overlayElement?.classList.add('v-overlay--hidden');
        });
        const remove = () => {
            overlayElement?.parentNode?.removeChild(overlayElement);
        };
        addOnceListener(overlayElement, 'transitionend', remove);
    };
    renderOverlay();
    overlayElement = container.firstChild;
    return {
        createOverlay,
        removeOverlay
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLW92ZXJsYXkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy92dWVsYW5kL3NyYy9jb21wb3NhYmxlcy91c2Utb3ZlcmxheS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxNQUFNLEtBQUssQ0FBQTtBQUcvQixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sd0JBQXdCLENBQUE7QUFHakQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFlBQVksQ0FBQTtBQU81QyxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNqQyxPQUFPLEVBQUUsT0FBTztJQUNoQixZQUFZLEVBQUU7UUFDWixJQUFJLEVBQUUsTUFBTTtRQUNaLE9BQU8sRUFBRSxTQUFTO0tBQ25CO0NBQ0YsQ0FBQyxDQUFBO0FBRUYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsS0FBVSxFQUFFLFNBQXVCLEVBQXFCLEVBQUU7SUFDbkYsTUFBTSxTQUFTLEdBQWdCLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUE7SUFFNUQsSUFBSSxjQUFjLEdBQXVCLElBQUksQ0FBQTtJQUU3QyxNQUFNLGFBQWEsR0FBRyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQ2hDLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUMsRUFDekQsU0FBVSxDQUNYLENBQUE7SUFFRCxNQUFNLGFBQWEsR0FBRyxHQUFHLEVBQUU7UUFDekIsY0FBZSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsR0FBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUUsRUFBRSxDQUFBO1FBQ3RELFNBQVUsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEdBQUksS0FBSyxDQUFDLE1BQU8sRUFBRSxDQUFBO1FBRTdDLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxDQUFDLGNBQWUsRUFBRSxTQUFTLENBQUMsQ0FBQTtRQUMvRCxjQUFjLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1FBRXJELHFCQUFxQixDQUFDLEdBQUcsRUFBRTtZQUN6QixjQUFjLEVBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1FBQ3BELENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFBO0lBRUQsTUFBTSxhQUFhLEdBQUcsR0FBRyxFQUFFO1FBQ3pCLGNBQWUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUE7UUFFckQscUJBQXFCLENBQUMsR0FBRyxFQUFFO1lBQ3pCLGNBQWMsRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUE7UUFDcEQsQ0FBQyxDQUFDLENBQUE7UUFFRixNQUFNLE1BQU0sR0FBRyxHQUFHLEVBQUU7WUFDbEIsY0FBYyxFQUFFLFVBQVUsRUFBRSxXQUFXLENBQUMsY0FBZSxDQUFDLENBQUE7UUFDMUQsQ0FBQyxDQUFBO1FBRUQsZUFBZSxDQUFDLGNBQWUsRUFBRSxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDM0QsQ0FBQyxDQUFBO0lBRUQsYUFBYSxFQUFFLENBQUE7SUFDZixjQUFjLEdBQUcsU0FBUyxDQUFDLFVBQXlCLENBQUE7SUFFcEQsT0FBTztRQUNMLGFBQWE7UUFDYixhQUFhO0tBQ2QsQ0FBQTtBQUNILENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciwgaCB9IGZyb20gJ3Z1ZSdcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVk92ZXJsYXkgfSBmcm9tICcuLi9jb21wb25lbnRzL1ZPdmVybGF5J1xuXG4vLyBIZWxwZXJzXG5pbXBvcnQgeyBhZGRPbmNlTGlzdGVuZXIgfSBmcm9tICcuLi9oZWxwZXJzJ1xuXG5pbnRlcmZhY2UgT3ZlcmxheUNvbnRyb2xsZXIge1xuICBjcmVhdGVPdmVybGF5OiAoKSA9PiB2b2lkXG4gIHJlbW92ZU92ZXJsYXk6ICgpID0+IHZvaWRcbn1cblxuZXhwb3J0IGNvbnN0IG92ZXJsYXlQcm9wcyA9ICgpID0+ICh7XG4gIG92ZXJsYXk6IEJvb2xlYW4sXG4gIG92ZXJsYXlDb2xvcjoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnIzAwMDAwMCdcbiAgfVxufSlcblxuZXhwb3J0IGNvbnN0IHVzZU92ZXJsYXkgPSAocHJvcHM6IGFueSwgb3ZlcmxheU9uPzogSFRNTEVsZW1lbnQpOiBPdmVybGF5Q29udHJvbGxlciA9PiB7XG4gIGNvbnN0IGNvbnRhaW5lcjogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuXG4gIGxldCBvdmVybGF5RWxlbWVudDogTWF5YmU8SFRNTEVsZW1lbnQ+ID0gbnVsbFxuXG4gIGNvbnN0IHJlbmRlck92ZXJsYXkgPSAoKSA9PiByZW5kZXIoXG4gICAgaChWT3ZlcmxheSwgeyBhY3RpdmU6IGZhbHNlLCBjb2xvcjogcHJvcHMub3ZlcmxheUNvbG9yIH0pLFxuICAgIGNvbnRhaW5lciFcbiAgKVxuXG4gIGNvbnN0IGNyZWF0ZU92ZXJsYXkgPSAoKSA9PiB7XG4gICAgb3ZlcmxheUVsZW1lbnQhLnN0eWxlLnpJbmRleCA9IGAkeyBwcm9wcy56SW5kZXggLSAxIH1gXG4gICAgb3ZlcmxheU9uIS5zdHlsZS56SW5kZXggPSBgJHsgcHJvcHMuekluZGV4IH1gXG5cbiAgICBvdmVybGF5T24/LnBhcmVudE5vZGU/Lmluc2VydEJlZm9yZShvdmVybGF5RWxlbWVudCEsIG92ZXJsYXlPbilcbiAgICBvdmVybGF5RWxlbWVudD8uY2xhc3NMaXN0LnJlbW92ZSgndi1vdmVybGF5LS1oaWRkZW4nKVxuXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIG92ZXJsYXlFbGVtZW50Py5jbGFzc0xpc3QuYWRkKCd2LW92ZXJsYXktLWFjdGl2ZScpXG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0IHJlbW92ZU92ZXJsYXkgPSAoKSA9PiB7XG4gICAgb3ZlcmxheUVsZW1lbnQhLmNsYXNzTGlzdC5yZW1vdmUoJ3Ytb3ZlcmxheS0tYWN0aXZlJylcblxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBvdmVybGF5RWxlbWVudD8uY2xhc3NMaXN0LmFkZCgndi1vdmVybGF5LS1oaWRkZW4nKVxuICAgIH0pXG5cbiAgICBjb25zdCByZW1vdmUgPSAoKSA9PiB7XG4gICAgICBvdmVybGF5RWxlbWVudD8ucGFyZW50Tm9kZT8ucmVtb3ZlQ2hpbGQob3ZlcmxheUVsZW1lbnQhKVxuICAgIH1cblxuICAgIGFkZE9uY2VMaXN0ZW5lcihvdmVybGF5RWxlbWVudCEsICd0cmFuc2l0aW9uZW5kJywgcmVtb3ZlKVxuICB9XG5cbiAgcmVuZGVyT3ZlcmxheSgpXG4gIG92ZXJsYXlFbGVtZW50ID0gY29udGFpbmVyLmZpcnN0Q2hpbGQgYXMgSFRNTEVsZW1lbnRcblxuICByZXR1cm4ge1xuICAgIGNyZWF0ZU92ZXJsYXksXG4gICAgcmVtb3ZlT3ZlcmxheVxuICB9XG59XG4iXX0=