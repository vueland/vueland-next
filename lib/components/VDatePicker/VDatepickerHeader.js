import { h, defineComponent } from 'vue';
import { useColors } from '../../composables/use-colors';
import { useIcons } from '../../composables/use-icons';
import { VIcon } from '../VIcon';
export const VDatepickerHeader = defineComponent({
    name: 'v-date-picker-header',
    props: {
        onNext: Function,
        onPrev: Function,
        color: String,
    },
    emits: ['table'],
    setup(props, { slots, emit }) {
        const { setTextClassNameColor, setTextCssColor } = useColors();
        const { icons } = useIcons();
        const genHeaderButton = (isRight) => {
            const icon = isRight ? icons.$arrowRight : icons.$arrowLeft;
            const propsData = {
                class: 'v-date-picker__header-button',
            };
            const iconPropsData = {
                icon,
                clickable: true,
                class: {
                    ...(props.color ? setTextClassNameColor(props.color) : {}),
                },
                style: {
                    ...(props.color ? setTextCssColor(props.color) : {}),
                },
                onClick: () => (isRight ? props.onNext() : props.onPrev()),
            };
            const arrowBtn = h(VIcon, iconPropsData);
            return h('div', propsData, arrowBtn);
        };
        const genHeaderDisplay = () => {
            const propsData = {
                class: {
                    'v-date-picker__header-display': true,
                    ...(props.color ? setTextClassNameColor(props.color) : {}),
                },
                style: {
                    ...(props.color ? setTextCssColor(props.color) : {}),
                },
                onClick: () => emit('table'),
            };
            return h('div', propsData, slots.default && slots.default());
        };
        return () => h('div', {
            class: 'v-date-picker__header',
        }, [genHeaderButton(false), genHeaderDisplay(), genHeaderButton(true)]);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkRhdGVwaWNrZXJIZWFkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WRGF0ZVBpY2tlci9WRGF0ZXBpY2tlckhlYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsQ0FBQyxFQUFFLGVBQWUsRUFBRSxNQUFNLEtBQUssQ0FBQTtBQUd4QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sOEJBQThCLENBQUE7QUFDeEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDZCQUE2QixDQUFBO0FBR3RELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFFaEMsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsZUFBZSxDQUFDO0lBQy9DLElBQUksRUFBRSxzQkFBc0I7SUFFNUIsS0FBSyxFQUFFO1FBQ0wsTUFBTSxFQUFFLFFBQVE7UUFDaEIsTUFBTSxFQUFFLFFBQVE7UUFDaEIsS0FBSyxFQUFFLE1BQU07S0FDUDtJQUVSLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQztJQUVoQixLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtRQUMxQixNQUFNLEVBQUUscUJBQXFCLEVBQUUsZUFBZSxFQUFFLEdBQUcsU0FBUyxFQUFFLENBQUE7UUFDOUQsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLFFBQVEsRUFBRSxDQUFBO1FBRTVCLE1BQU0sZUFBZSxHQUFHLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDbEMsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFBO1lBRTNELE1BQU0sU0FBUyxHQUFHO2dCQUNoQixLQUFLLEVBQUUsOEJBQThCO2FBQ3RDLENBQUE7WUFFRCxNQUFNLGFBQWEsR0FBRztnQkFDcEIsSUFBSTtnQkFDSixTQUFTLEVBQUUsSUFBSTtnQkFDZixLQUFLLEVBQUU7b0JBQ0wsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2lCQUMzRDtnQkFDRCxLQUFLLEVBQUU7b0JBQ0wsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztpQkFDckQ7Z0JBQ0QsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUMzRCxDQUFBO1lBRUQsTUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQTtZQUV4QyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQ3RDLENBQUMsQ0FBQTtRQUVELE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxFQUFFO1lBQzVCLE1BQU0sU0FBUyxHQUFHO2dCQUNoQixLQUFLLEVBQUU7b0JBQ0wsK0JBQStCLEVBQUUsSUFBSTtvQkFDckMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2lCQUMzRDtnQkFDRCxLQUFLLEVBQUU7b0JBQ0wsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztpQkFDckQ7Z0JBQ0QsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7YUFDN0IsQ0FBQTtZQUVELE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtRQUM5RCxDQUFDLENBQUE7UUFFRCxPQUFPLEdBQUcsRUFBRSxDQUNWLENBQUMsQ0FDQyxLQUFLLEVBQ0w7WUFDRSxLQUFLLEVBQUUsdUJBQXVCO1NBQy9CLEVBQ0QsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRSxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FDcEUsQ0FBQTtJQUNMLENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBWdWUgQVBJXG5pbXBvcnQgeyBoLCBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnXG5cbi8vIEVmZmVjdHNcbmltcG9ydCB7IHVzZUNvbG9ycyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3VzZS1jb2xvcnMnXG5pbXBvcnQgeyB1c2VJY29ucyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3VzZS1pY29ucydcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkljb24gfSBmcm9tICcuLi9WSWNvbidcblxuZXhwb3J0IGNvbnN0IFZEYXRlcGlja2VySGVhZGVyID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtZGF0ZS1waWNrZXItaGVhZGVyJyxcblxuICBwcm9wczoge1xuICAgIG9uTmV4dDogRnVuY3Rpb24sXG4gICAgb25QcmV2OiBGdW5jdGlvbixcbiAgICBjb2xvcjogU3RyaW5nLFxuICB9IGFzIGFueSxcblxuICBlbWl0czogWyd0YWJsZSddLFxuXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzLCBlbWl0IH0pIHtcbiAgICBjb25zdCB7IHNldFRleHRDbGFzc05hbWVDb2xvciwgc2V0VGV4dENzc0NvbG9yIH0gPSB1c2VDb2xvcnMoKVxuICAgIGNvbnN0IHsgaWNvbnMgfSA9IHVzZUljb25zKClcblxuICAgIGNvbnN0IGdlbkhlYWRlckJ1dHRvbiA9IChpc1JpZ2h0KSA9PiB7XG4gICAgICBjb25zdCBpY29uID0gaXNSaWdodCA/IGljb25zLiRhcnJvd1JpZ2h0IDogaWNvbnMuJGFycm93TGVmdFxuXG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiAndi1kYXRlLXBpY2tlcl9faGVhZGVyLWJ1dHRvbicsXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGljb25Qcm9wc0RhdGEgPSB7XG4gICAgICAgIGljb24sXG4gICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgICAgICB9LFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldFRleHRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IChpc1JpZ2h0ID8gcHJvcHMub25OZXh0KCkgOiBwcm9wcy5vblByZXYoKSksXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGFycm93QnRuID0gaChWSWNvbiwgaWNvblByb3BzRGF0YSlcblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgYXJyb3dCdG4pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuSGVhZGVyRGlzcGxheSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1kYXRlLXBpY2tlcl9faGVhZGVyLWRpc3BsYXknOiB0cnVlLFxuICAgICAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldFRleHRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0VGV4dENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICAgICAgfSxcbiAgICAgICAgb25DbGljazogKCkgPT4gZW1pdCgndGFibGUnKSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCkpXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+XG4gICAgICBoKFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzOiAndi1kYXRlLXBpY2tlcl9faGVhZGVyJyxcbiAgICAgICAgfSxcbiAgICAgICAgW2dlbkhlYWRlckJ1dHRvbihmYWxzZSksIGdlbkhlYWRlckRpc3BsYXkoKSwgZ2VuSGVhZGVyQnV0dG9uKHRydWUpXVxuICAgICAgKVxuICB9LFxufSlcbiJdfQ==