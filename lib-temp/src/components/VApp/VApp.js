import { defineComponent, provide, reactive, h, withDirectives, onMounted, } from 'vue';
import { resize } from '../../directives';
import { breakpoints } from '../../services/breakpoints';
import { throttle } from '../../utils/thottle';
export const VApp = defineComponent({
    name: 'v-app',
    directives: {
        resize,
    },
    props: {
        global: {
            type: Object,
            default: null,
        },
    },
    setup(props, { slots }) {
        const THROTTLING_TIMEOUT = 60;
        const state = reactive({
            current: null,
            xlAndLess: false,
            lgAndLess: false,
            mdAndLess: false,
            smAndLess: false,
        });
        provide('breakpoints', state);
        const setCurrentBreakpointName = (screen) => {
            if (screen >= breakpoints.xl) {
                return (state.current = 'xl');
            }
            if (screen >= breakpoints.lg && screen < breakpoints.xl) {
                return (state.current = 'lg');
            }
            if (screen >= breakpoints.md && screen < breakpoints.lg) {
                return (state.current = 'md');
            }
            if (screen >= breakpoints.sm && screen < breakpoints.md) {
                return (state.current = 'sm');
            }
            return null;
        };
        const setIntervals = (screen) => {
            const { xl, lg, md, sm } = breakpoints;
            state.xlAndLess = screen <= xl && screen > lg;
            state.lgAndLess = screen <= lg && screen > md;
            state.mdAndLess = screen <= md && screen > sm;
            state.smAndLess = screen <= sm;
        };
        const setSizes = () => {
            const screen = props.global?.innerWidth || window.innerWidth;
            setCurrentBreakpointName(screen);
            setIntervals(screen);
        };
        const throttledResizeListener = throttle(setSizes, THROTTLING_TIMEOUT);
        const genAppWrapper = () => {
            return h('div', { class: 'v-app--wrapper' }, {
                default: () => slots.default && slots.default(),
            });
        };
        onMounted(() => {
            setSizes();
        });
        return () => withDirectives(h('div', { class: 'v-app' }, genAppWrapper()), [[resize, throttledResizeListener]]);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkFwcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZBcHAvVkFwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsZUFBZSxFQUNmLE9BQU8sRUFDUCxRQUFRLEVBQ1IsQ0FBQyxFQUNELGNBQWMsRUFDZCxTQUFTLEdBQ1YsTUFBTSxLQUFLLENBQUE7QUFHWixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFHekMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDRCQUE0QixDQUFBO0FBR3hELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQTtBQWE5QyxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsZUFBZSxDQUFDO0lBQ2xDLElBQUksRUFBRSxPQUFPO0lBQ2IsVUFBVSxFQUFFO1FBQ1YsTUFBTTtLQUNQO0lBQ0QsS0FBSyxFQUFFO1FBQ0wsTUFBTSxFQUFFO1lBQ04sSUFBSSxFQUFFLE1BQU07WUFDWixPQUFPLEVBQUUsSUFBSTtTQUNkO0tBQ0Y7SUFDRCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFO1FBQ3BCLE1BQU0sa0JBQWtCLEdBQUcsRUFBRSxDQUFBO1FBRTdCLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBVztZQUMvQixPQUFPLEVBQUUsSUFBSTtZQUNiLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLFNBQVMsRUFBRSxLQUFLO1NBQ2pCLENBQUMsQ0FBQTtRQUVGLE9BQU8sQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFFN0IsTUFBTSx3QkFBd0IsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQzFDLElBQUksTUFBTSxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUU7Z0JBQzVCLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFBO2FBQzlCO1lBQ0QsSUFBSSxNQUFNLElBQUksV0FBVyxDQUFDLEVBQUUsSUFBSSxNQUFNLEdBQUcsV0FBVyxDQUFDLEVBQUUsRUFBRTtnQkFDdkQsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUE7YUFDOUI7WUFDRCxJQUFJLE1BQU0sSUFBSSxXQUFXLENBQUMsRUFBRSxJQUFJLE1BQU0sR0FBRyxXQUFXLENBQUMsRUFBRSxFQUFFO2dCQUN2RCxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQTthQUM5QjtZQUNELElBQUksTUFBTSxJQUFJLFdBQVcsQ0FBQyxFQUFFLElBQUksTUFBTSxHQUFHLFdBQVcsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZELE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFBO2FBQzlCO1lBRUQsT0FBTyxJQUFJLENBQUE7UUFDYixDQUFDLENBQUE7UUFFRCxNQUFNLFlBQVksR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQzlCLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxXQUFXLENBQUE7WUFFdEMsS0FBSyxDQUFDLFNBQVMsR0FBRyxNQUFNLElBQUksRUFBRSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUE7WUFDN0MsS0FBSyxDQUFDLFNBQVMsR0FBRyxNQUFNLElBQUksRUFBRSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUE7WUFDN0MsS0FBSyxDQUFDLFNBQVMsR0FBRyxNQUFNLElBQUksRUFBRSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUE7WUFDN0MsS0FBSyxDQUFDLFNBQVMsR0FBRyxNQUFNLElBQUksRUFBRSxDQUFBO1FBQ2hDLENBQUMsQ0FBQTtRQUVELE1BQU0sUUFBUSxHQUFHLEdBQUcsRUFBRTtZQUdwQixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLFVBQVUsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFBO1lBRTVELHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxDQUFBO1lBQ2hDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUN0QixDQUFDLENBQUE7UUFFRCxNQUFNLHVCQUF1QixHQUFHLFFBQVEsQ0FDdEMsUUFBUSxFQUNSLGtCQUFrQixDQUNMLENBQUE7UUFFZixNQUFNLGFBQWEsR0FBRyxHQUFHLEVBQUU7WUFDekIsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixFQUFFLEVBQUU7Z0JBQzNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7YUFDaEQsQ0FBQyxDQUFBO1FBQ0osQ0FBQyxDQUFBO1FBRUQsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUNiLFFBQVEsRUFBRSxDQUFBO1FBQ1osQ0FBQyxDQUFDLENBQUE7UUFFRixPQUFPLEdBQUcsRUFBRSxDQUNWLGNBQWMsQ0FDWixDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFLGFBQWEsRUFBRSxDQUFDLEVBQzdDLENBQUMsQ0FBQyxNQUFNLEVBQUUsdUJBQXVCLENBQUMsQ0FBQyxDQUNwQyxDQUFBO0lBQ0wsQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGRlZmluZUNvbXBvbmVudCxcbiAgcHJvdmlkZSxcbiAgcmVhY3RpdmUsXG4gIGgsXG4gIHdpdGhEaXJlY3RpdmVzLFxuICBvbk1vdW50ZWQsXG59IGZyb20gJ3Z1ZSdcblxuLy8gRGlyZWN0aXZlc1xuaW1wb3J0IHsgcmVzaXplIH0gZnJvbSAnLi4vLi4vZGlyZWN0aXZlcydcblxuLy8gU2VydmljZXNcbmltcG9ydCB7IGJyZWFrcG9pbnRzIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvYnJlYWtwb2ludHMnXG5cbi8vIFV0aWxzXG5pbXBvcnQgeyB0aHJvdHRsZSB9IGZyb20gJy4uLy4uL3V0aWxzL3Rob3R0bGUnXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBNYXliZSB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL2Jhc2UnXG5cbmludGVyZmFjZSBBcHBTdGF0ZSB7XG4gIGN1cnJlbnQ6IE1heWJlPCd4bCcgfCAnbGcnIHwgJ21kJyB8ICdzbSc+XG4gIHhsQW5kTGVzczogYm9vbGVhblxuICBsZ0FuZExlc3M6IGJvb2xlYW5cbiAgbWRBbmRMZXNzOiBib29sZWFuXG4gIHNtQW5kTGVzczogYm9vbGVhblxufVxuXG5leHBvcnQgY29uc3QgVkFwcCA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWFwcCcsXG4gIGRpcmVjdGl2ZXM6IHtcbiAgICByZXNpemUsXG4gIH0sXG4gIHByb3BzOiB7XG4gICAgZ2xvYmFsOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gIH0sXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICBjb25zdCBUSFJPVFRMSU5HX1RJTUVPVVQgPSA2MFxuXG4gICAgY29uc3Qgc3RhdGUgPSByZWFjdGl2ZTxBcHBTdGF0ZT4oe1xuICAgICAgY3VycmVudDogbnVsbCxcbiAgICAgIHhsQW5kTGVzczogZmFsc2UsXG4gICAgICBsZ0FuZExlc3M6IGZhbHNlLFxuICAgICAgbWRBbmRMZXNzOiBmYWxzZSxcbiAgICAgIHNtQW5kTGVzczogZmFsc2UsXG4gICAgfSlcblxuICAgIHByb3ZpZGUoJ2JyZWFrcG9pbnRzJywgc3RhdGUpXG5cbiAgICBjb25zdCBzZXRDdXJyZW50QnJlYWtwb2ludE5hbWUgPSAoc2NyZWVuKSA9PiB7XG4gICAgICBpZiAoc2NyZWVuID49IGJyZWFrcG9pbnRzLnhsKSB7XG4gICAgICAgIHJldHVybiAoc3RhdGUuY3VycmVudCA9ICd4bCcpXG4gICAgICB9XG4gICAgICBpZiAoc2NyZWVuID49IGJyZWFrcG9pbnRzLmxnICYmIHNjcmVlbiA8IGJyZWFrcG9pbnRzLnhsKSB7XG4gICAgICAgIHJldHVybiAoc3RhdGUuY3VycmVudCA9ICdsZycpXG4gICAgICB9XG4gICAgICBpZiAoc2NyZWVuID49IGJyZWFrcG9pbnRzLm1kICYmIHNjcmVlbiA8IGJyZWFrcG9pbnRzLmxnKSB7XG4gICAgICAgIHJldHVybiAoc3RhdGUuY3VycmVudCA9ICdtZCcpXG4gICAgICB9XG4gICAgICBpZiAoc2NyZWVuID49IGJyZWFrcG9pbnRzLnNtICYmIHNjcmVlbiA8IGJyZWFrcG9pbnRzLm1kKSB7XG4gICAgICAgIHJldHVybiAoc3RhdGUuY3VycmVudCA9ICdzbScpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgY29uc3Qgc2V0SW50ZXJ2YWxzID0gKHNjcmVlbikgPT4ge1xuICAgICAgY29uc3QgeyB4bCwgbGcsIG1kLCBzbSB9ID0gYnJlYWtwb2ludHNcblxuICAgICAgc3RhdGUueGxBbmRMZXNzID0gc2NyZWVuIDw9IHhsICYmIHNjcmVlbiA+IGxnXG4gICAgICBzdGF0ZS5sZ0FuZExlc3MgPSBzY3JlZW4gPD0gbGcgJiYgc2NyZWVuID4gbWRcbiAgICAgIHN0YXRlLm1kQW5kTGVzcyA9IHNjcmVlbiA8PSBtZCAmJiBzY3JlZW4gPiBzbVxuICAgICAgc3RhdGUuc21BbmRMZXNzID0gc2NyZWVuIDw9IHNtXG4gICAgfVxuXG4gICAgY29uc3Qgc2V0U2l6ZXMgPSAoKSA9PiB7XG4gICAgICAvLyB0aGUgXCJnbG9iYWxcIiBwcm9wIGFsbG93cyB0byB0ZXN0IHRoZVxuICAgICAgLy8gY29tcG9uZW50IHdpdGhvdXQgdXNpbmcgbW9ja3Vwc1xuICAgICAgY29uc3Qgc2NyZWVuID0gcHJvcHMuZ2xvYmFsPy5pbm5lcldpZHRoIHx8IHdpbmRvdy5pbm5lcldpZHRoXG5cbiAgICAgIHNldEN1cnJlbnRCcmVha3BvaW50TmFtZShzY3JlZW4pXG4gICAgICBzZXRJbnRlcnZhbHMoc2NyZWVuKVxuICAgIH1cblxuICAgIGNvbnN0IHRocm90dGxlZFJlc2l6ZUxpc3RlbmVyID0gdGhyb3R0bGUoXG4gICAgICBzZXRTaXplcyxcbiAgICAgIFRIUk9UVExJTkdfVElNRU9VVCxcbiAgICApIGFzICgpID0+IHZvaWRcblxuICAgIGNvbnN0IGdlbkFwcFdyYXBwZXIgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gaCgnZGl2JywgeyBjbGFzczogJ3YtYXBwLS13cmFwcGVyJyB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IHNsb3RzLmRlZmF1bHQgJiYgc2xvdHMuZGVmYXVsdCgpLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgICAgc2V0U2l6ZXMoKVxuICAgIH0pXG5cbiAgICByZXR1cm4gKCkgPT5cbiAgICAgIHdpdGhEaXJlY3RpdmVzKFxuICAgICAgICBoKCdkaXYnLCB7IGNsYXNzOiAndi1hcHAnIH0sIGdlbkFwcFdyYXBwZXIoKSksXG4gICAgICAgIFtbcmVzaXplLCB0aHJvdHRsZWRSZXNpemVMaXN0ZW5lcl1dLFxuICAgICAgKVxuICB9LFxufSlcbiJdfQ==