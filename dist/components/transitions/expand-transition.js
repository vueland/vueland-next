const init = {
    transition: null,
    propSize: '',
    height: 0,
    width: 0
};
const PRIMARY_TRANSITION = 'cubic-bezier(.25, .8, .5, 1)';
const resetStyles = (el) => {
    el.style[init.propSize] = '';
    el.style.transition = '';
};
const getChildrenSizes = (el) => {
    return Array.prototype.reduce.call(el.children, (acc, it) => {
        const size = getComputedStyle(it)[init.propSize];
        return (acc += parseFloat(size));
    }, 0);
};
const setInitStyles = (el, x) => {
    init.propSize = x ? 'width' : 'height';
    init.transition = getComputedStyle(el).transition;
    init[init.propSize] = getChildrenSizes(el);
};
export const expandHooks = (expandedParentClass, x = false) => {
    return {
        onBeforeEnter(el) {
            el.style.transition = '';
        },
        onEnter(el) {
            setInitStyles(el, x);
            el.style[init.propSize] = '0';
            el.style.transition = `.2s ${init.propSize} ${PRIMARY_TRANSITION}`;
            requestAnimationFrame(() => {
                el.style[init.propSize] = `${init[init.propSize]}px`;
            });
            if (expandedParentClass) {
                el.parentNode.classList.add(expandedParentClass);
            }
        },
        onAfterEnter(el) {
            el.parentNode.classList.remove(expandedParentClass);
            resetStyles(el);
        },
        onBeforeLeave(el) {
            setInitStyles(el, x);
        },
        onLeave(el) {
            setInitStyles(el, x);
            el.style.transition = `.2s ${init.propSize} ${PRIMARY_TRANSITION}`;
            el.style[init.propSize] = `${init[init.propSize]}px`;
            requestAnimationFrame(() => (el.style[init.propSize] = '0'));
        },
        onAfterLeave(el) {
            requestAnimationFrame(() => resetStyles(el));
        }
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5kLXRyYW5zaXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy90cmFuc2l0aW9ucy9leHBhbmQtdHJhbnNpdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxNQUFNLElBQUksR0FBa0I7SUFDMUIsVUFBVSxFQUFFLElBQUk7SUFDaEIsUUFBUSxFQUFFLEVBQUU7SUFDWixNQUFNLEVBQUUsQ0FBQztJQUNULEtBQUssRUFBRSxDQUFDO0NBQ1QsQ0FBQTtBQUVELE1BQU0sa0JBQWtCLEdBQUcsOEJBQThCLENBQUE7QUFFekQsTUFBTSxXQUFXLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRTtJQUN6QixFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUE7SUFDNUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFBO0FBQzFCLENBQUMsQ0FBQTtBQUVELE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRTtJQUM5QixPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDaEMsRUFBRSxDQUFDLFFBQVEsRUFDWCxDQUFDLEdBQVcsRUFBRSxFQUFlLEVBQUUsRUFBRTtRQUMvQixNQUFNLElBQUksR0FBRyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7UUFFaEQsT0FBTyxDQUFDLEdBQUcsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtJQUNsQyxDQUFDLEVBQUUsQ0FBQyxDQUFXLENBQUE7QUFDbkIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxhQUFhLEdBQUcsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDN0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFBO0lBQ3RDLElBQUksQ0FBQyxVQUFVLEdBQUcsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFBO0lBQ2pELElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDNUMsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQ3pCLG1CQUEyQixFQUMzQixJQUFhLEtBQUssRUFDbEIsRUFBRTtJQUNGLE9BQU87UUFDTCxhQUFhLENBQUMsRUFBRTtZQUNkLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQTtRQUMxQixDQUFDO1FBRUQsT0FBTyxDQUFDLEVBQUU7WUFDUixhQUFhLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO1lBQ3BCLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsQ0FBQTtZQUM3QixFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxPQUFRLElBQUksQ0FBQyxRQUFTLElBQUssa0JBQW1CLEVBQUUsQ0FBQTtZQUV0RSxxQkFBcUIsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3pCLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUUsSUFBSSxDQUFBO1lBQ3hELENBQUMsQ0FBQyxDQUFBO1lBRUYsSUFBSSxtQkFBbUIsRUFBRTtnQkFDdkIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUE7YUFDakQ7UUFDSCxDQUFDO1FBRUQsWUFBWSxDQUFDLEVBQUU7WUFDYixFQUFFLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtZQUNuRCxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDakIsQ0FBQztRQUVELGFBQWEsQ0FBQyxFQUFFO1lBQ2QsYUFBYSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUN0QixDQUFDO1FBRUQsT0FBTyxDQUFDLEVBQUU7WUFDUixhQUFhLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO1lBRXBCLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLE9BQVEsSUFBSSxDQUFDLFFBQVMsSUFBSyxrQkFBbUIsRUFBRSxDQUFBO1lBQ3RFLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUUsSUFBSSxDQUFBO1lBQ3RELHFCQUFxQixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQTtRQUM5RCxDQUFDO1FBRUQsWUFBWSxDQUFDLEVBQUU7WUFDYixxQkFBcUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUM5QyxDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImludGVyZmFjZSBJbml0aWFsU3R5bGVzIHtcbiAgdHJhbnNpdGlvbjogc3RyaW5nIHwgbnVsbDtcbiAgcHJvcFNpemU6IHN0cmluZztcbiAgaGVpZ2h0PzogbnVtYmVyO1xuICB3aWR0aD86IG51bWJlcjtcbn1cblxuY29uc3QgaW5pdDogSW5pdGlhbFN0eWxlcyA9IHtcbiAgdHJhbnNpdGlvbjogbnVsbCxcbiAgcHJvcFNpemU6ICcnLFxuICBoZWlnaHQ6IDAsXG4gIHdpZHRoOiAwXG59XG5cbmNvbnN0IFBSSU1BUllfVFJBTlNJVElPTiA9ICdjdWJpYy1iZXppZXIoLjI1LCAuOCwgLjUsIDEpJ1xuXG5jb25zdCByZXNldFN0eWxlcyA9IChlbCkgPT4ge1xuICBlbC5zdHlsZVtpbml0LnByb3BTaXplXSA9ICcnXG4gIGVsLnN0eWxlLnRyYW5zaXRpb24gPSAnJ1xufVxuXG5jb25zdCBnZXRDaGlsZHJlblNpemVzID0gKGVsKSA9PiB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUucmVkdWNlLmNhbGwoXG4gICAgZWwuY2hpbGRyZW4sXG4gICAgKGFjYzogbnVtYmVyLCBpdDogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgIGNvbnN0IHNpemUgPSBnZXRDb21wdXRlZFN0eWxlKGl0KVtpbml0LnByb3BTaXplXVxuXG4gICAgICByZXR1cm4gKGFjYyArPSBwYXJzZUZsb2F0KHNpemUpKVxuICAgIH0sIDApIGFzIG51bWJlclxufVxuXG5jb25zdCBzZXRJbml0U3R5bGVzID0gKGVsLHgpID0+IHtcbiAgaW5pdC5wcm9wU2l6ZSA9IHggPyAnd2lkdGgnIDogJ2hlaWdodCdcbiAgaW5pdC50cmFuc2l0aW9uID0gZ2V0Q29tcHV0ZWRTdHlsZShlbCkudHJhbnNpdGlvblxuICBpbml0W2luaXQucHJvcFNpemVdID0gZ2V0Q2hpbGRyZW5TaXplcyhlbClcbn1cblxuZXhwb3J0IGNvbnN0IGV4cGFuZEhvb2tzID0gKFxuICBleHBhbmRlZFBhcmVudENsYXNzOiBzdHJpbmcsXG4gIHg6IGJvb2xlYW4gPSBmYWxzZVxuKSA9PiB7XG4gIHJldHVybiB7XG4gICAgb25CZWZvcmVFbnRlcihlbCkge1xuICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbiA9ICcnXG4gICAgfSxcblxuICAgIG9uRW50ZXIoZWwpIHtcbiAgICAgIHNldEluaXRTdHlsZXMoZWwsIHgpXG4gICAgICBlbC5zdHlsZVtpbml0LnByb3BTaXplXSA9ICcwJ1xuICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbiA9IGAuMnMgJHsgaW5pdC5wcm9wU2l6ZSB9ICR7IFBSSU1BUllfVFJBTlNJVElPTiB9YFxuXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBlbC5zdHlsZVtpbml0LnByb3BTaXplXSA9IGAkeyBpbml0W2luaXQucHJvcFNpemVdIH1weGBcbiAgICAgIH0pXG5cbiAgICAgIGlmIChleHBhbmRlZFBhcmVudENsYXNzKSB7XG4gICAgICAgIGVsLnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZChleHBhbmRlZFBhcmVudENsYXNzKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBvbkFmdGVyRW50ZXIoZWwpIHtcbiAgICAgIGVsLnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZShleHBhbmRlZFBhcmVudENsYXNzKVxuICAgICAgcmVzZXRTdHlsZXMoZWwpXG4gICAgfSxcblxuICAgIG9uQmVmb3JlTGVhdmUoZWwpIHtcbiAgICAgIHNldEluaXRTdHlsZXMoZWwsIHgpXG4gICAgfSxcblxuICAgIG9uTGVhdmUoZWwpIHtcbiAgICAgIHNldEluaXRTdHlsZXMoZWwsIHgpXG5cbiAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb24gPSBgLjJzICR7IGluaXQucHJvcFNpemUgfSAkeyBQUklNQVJZX1RSQU5TSVRJT04gfWBcbiAgICAgIGVsLnN0eWxlW2luaXQucHJvcFNpemVdID0gYCR7IGluaXRbaW5pdC5wcm9wU2l6ZV0gfXB4YFxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IChlbC5zdHlsZVtpbml0LnByb3BTaXplXSA9ICcwJykpXG4gICAgfSxcblxuICAgIG9uQWZ0ZXJMZWF2ZShlbCkge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHJlc2V0U3R5bGVzKGVsKSlcbiAgICB9XG4gIH1cbn1cbiJdfQ==