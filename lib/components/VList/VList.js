import { defineComponent, h, provide, watch, ref, toRaw, computed, onMounted } from 'vue';
import { useColors, colorProps } from '../../composables/use-colors';
import { mapToValArray } from '../../helpers';
export default defineComponent({
    name: 'v-list',
    props: {
        value: {
            type: [Number, Array],
            default: null,
        },
        multiple: Boolean,
        active: {
            type: Boolean,
            default: false,
        },
        activeClass: {
            type: String,
            default: '',
        },
        textColor: {
            type: String,
            default: '',
        },
        ...colorProps(),
    },
    emits: ['update:value'],
    setup(props, { emit, slots }) {
        const { setTextClassNameColor, setBackgroundClassNameColor, setTextCssColor, setBackgroundCssColor, } = useColors();
        const items = ref(new Map());
        let isTrustedSelect = false;
        const classes = computed(() => ({
            'v-list': true,
            'v-list--active': props.active,
            'v-list--themeable': !props.color,
            'v-list--base': !props.color,
            ...setTextClassNameColor(props.textColor),
            ...setBackgroundClassNameColor(props.color),
        }));
        const styles = computed(() => ({
            ...setTextCssColor(props.textColor),
            ...setBackgroundCssColor(props.color),
        }));
        const register = (item) => {
            !items.value.has(item) && items.value.set(item, item);
        };
        const unregister = (item) => {
            items.value.has(item) && items.value.delete(item);
        };
        const dispatchEvent = (val) => {
            isTrustedSelect = true;
            emit('update:value', val);
        };
        const setActiveItem = (item) => {
            mapToValArray(toRaw(items.value)).forEach((it) => {
                it.isActive.value = it === item;
            });
        };
        const toggleItem = (item) => {
            item.isActive.value = !item.isActive.value;
        };
        const prepareIndexes = () => {
            const values = mapToValArray(toRaw(items.value));
            const { multiple } = props;
            let val = multiple ? [] : 0;
            values.forEach((it, i) => {
                if (it.isActive.value) {
                    multiple ? val.push(i) : (val = i);
                }
            });
            return val;
        };
        const onClick = (item) => {
            if (!props.active)
                return;
            props.multiple ? toggleItem(item) : setActiveItem(item);
            dispatchEvent(prepareIndexes());
        };
        const setItemState = (value) => {
            if (value === null)
                return setActiveItem(value);
            const values = mapToValArray(toRaw(items.value));
            if (values.length) {
                if (props.multiple) {
                    ;
                    value.forEach((ind) => toggleItem(values[ind]));
                }
                else {
                    setActiveItem(values[value]);
                }
            }
        };
        watch(() => props.value, (to) => {
            if (!isTrustedSelect)
                setItemState(to);
            isTrustedSelect && (isTrustedSelect = false);
        });
        const stop = watch(items, () => {
            setItemState(props.value);
            stop();
        }, { deep: true });
        onMounted(() => setItemState(props.value));
        provide('$v_list', {
            add: register,
            remove: unregister,
            click: onClick,
            activeClass: props.activeClass,
        });
        return () => h('div', { class: classes.value, style: styles.value }, { default: () => slots.default?.() });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkxpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WTGlzdC9WTGlzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLEtBQUssQ0FBQTtBQUN6RixPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLDhCQUE4QixDQUFBO0FBQ3BFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFFN0MsZUFBZSxlQUFlLENBQUM7SUFDN0IsSUFBSSxFQUFFLFFBQVE7SUFDZCxLQUFLLEVBQUU7UUFDTCxLQUFLLEVBQUU7WUFDTCxJQUFJLEVBQUUsQ0FBRSxNQUFNLEVBQUUsS0FBSyxDQUFFO1lBQ3ZCLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7UUFDRCxRQUFRLEVBQUUsT0FBTztRQUNqQixNQUFNLEVBQUU7WUFDTixJQUFJLEVBQUUsT0FBTztZQUNiLE9BQU8sRUFBRSxLQUFLO1NBQ2Y7UUFDRCxXQUFXLEVBQUU7WUFDWCxJQUFJLEVBQUUsTUFBTTtZQUNaLE9BQU8sRUFBRSxFQUFFO1NBQ1o7UUFDRCxTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsTUFBTTtZQUNaLE9BQU8sRUFBRSxFQUFFO1NBQ1o7UUFDRCxHQUFHLFVBQVUsRUFBRTtLQUNoQjtJQUNELEtBQUssRUFBRSxDQUFFLGNBQWMsQ0FBRTtJQUN6QixLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRTtRQUMxQixNQUFNLEVBQ0oscUJBQXFCLEVBQ3JCLDJCQUEyQixFQUMzQixlQUFlLEVBQ2YscUJBQXFCLEdBQ3RCLEdBQUcsU0FBUyxFQUFFLENBQUE7UUFFZixNQUFNLEtBQUssR0FBRyxHQUFHLENBQWdCLElBQUksR0FB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LElBQUksRUFBRSxDQUFBO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7UUFFbEIsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtRQUUxQyxPQUFPLENBQUMsU0FBUyxFQUFFO1lBQ2pCLEdBQUcsRUFBRSxRQUFRO1lBQ2IsTUFBTSxFQUFFLFVBQVU7WUFDbEIsS0FBSyxFQUFFLE9BQU87WUFDZCxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7U0FDL0IsQ0FBQyxDQUFBO1FBRUYsT0FBTyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQ1osS0FBSyxFQUNMLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsRUFDN0MsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FDckMsQ0FBQTtJQUNILENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGgsIHByb3ZpZGUsIHdhdGNoLCByZWYsIHRvUmF3LCBjb21wdXRlZCwgb25Nb3VudGVkIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgdXNlQ29sb3JzLCBjb2xvclByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvdXNlLWNvbG9ycydcbmltcG9ydCB7IG1hcFRvVmFsQXJyYXkgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1saXN0JyxcbiAgcHJvcHM6IHtcbiAgICB2YWx1ZToge1xuICAgICAgdHlwZTogWyBOdW1iZXIsIEFycmF5IF0sXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gICAgbXVsdGlwbGU6IEJvb2xlYW4sXG4gICAgYWN0aXZlOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgfSxcbiAgICBhY3RpdmVDbGFzczoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJycsXG4gICAgfSxcbiAgICB0ZXh0Q29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnLFxuICAgIH0sXG4gICAgLi4uY29sb3JQcm9wcygpLFxuICB9LFxuICBlbWl0czogWyAndXBkYXRlOnZhbHVlJyBdLFxuICBzZXR1cChwcm9wcywgeyBlbWl0LCBzbG90cyB9KSB7XG4gICAgY29uc3Qge1xuICAgICAgc2V0VGV4dENsYXNzTmFtZUNvbG9yLFxuICAgICAgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yLFxuICAgICAgc2V0VGV4dENzc0NvbG9yLFxuICAgICAgc2V0QmFja2dyb3VuZENzc0NvbG9yLFxuICAgIH0gPSB1c2VDb2xvcnMoKVxuXG4gICAgY29uc3QgaXRlbXMgPSByZWY8TWFwPGFueSwgYW55Pj4obmV3IE1hcCgpKVxuICAgIGxldCBpc1RydXN0ZWRTZWxlY3QgPSBmYWxzZVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtbGlzdCc6IHRydWUsXG4gICAgICAndi1saXN0LS1hY3RpdmUnOiBwcm9wcy5hY3RpdmUsXG4gICAgICAndi1saXN0LS10aGVtZWFibGUnOiAhcHJvcHMuY29sb3IsXG4gICAgICAndi1saXN0LS1iYXNlJzogIXByb3BzLmNvbG9yLFxuICAgICAgLi4uc2V0VGV4dENsYXNzTmFtZUNvbG9yKHByb3BzLnRleHRDb2xvciksXG4gICAgICAuLi5zZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpLFxuICAgIH0pKVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgc3RyaW5nPj4oKCkgPT4gKHtcbiAgICAgIC4uLnNldFRleHRDc3NDb2xvcihwcm9wcy50ZXh0Q29sb3IpLFxuICAgICAgLi4uc2V0QmFja2dyb3VuZENzc0NvbG9yKHByb3BzLmNvbG9yKSxcbiAgICB9KSlcblxuICAgIGNvbnN0IHJlZ2lzdGVyID0gKGl0ZW0pID0+IHtcbiAgICAgICFpdGVtcy52YWx1ZS5oYXMoaXRlbSkgJiYgaXRlbXMudmFsdWUuc2V0KGl0ZW0sIGl0ZW0pXG4gICAgfVxuXG4gICAgY29uc3QgdW5yZWdpc3RlciA9IChpdGVtKSA9PiB7XG4gICAgICBpdGVtcy52YWx1ZS5oYXMoaXRlbSkgJiYgaXRlbXMudmFsdWUuZGVsZXRlKGl0ZW0pXG4gICAgfVxuXG4gICAgY29uc3QgZGlzcGF0Y2hFdmVudCA9ICh2YWwpID0+IHtcbiAgICAgIGlzVHJ1c3RlZFNlbGVjdCA9IHRydWVcbiAgICAgIGVtaXQoJ3VwZGF0ZTp2YWx1ZScsIHZhbClcbiAgICB9XG5cbiAgICBjb25zdCBzZXRBY3RpdmVJdGVtID0gKGl0ZW0pID0+IHtcbiAgICAgIG1hcFRvVmFsQXJyYXkodG9SYXcoaXRlbXMudmFsdWUpKS5mb3JFYWNoKChpdCkgPT4ge1xuICAgICAgICBpdC5pc0FjdGl2ZS52YWx1ZSA9IGl0ID09PSBpdGVtXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IHRvZ2dsZUl0ZW0gPSAoaXRlbSkgPT4ge1xuICAgICAgaXRlbS5pc0FjdGl2ZS52YWx1ZSA9ICFpdGVtLmlzQWN0aXZlLnZhbHVlXG4gICAgfVxuXG4gICAgY29uc3QgcHJlcGFyZUluZGV4ZXMgPSAoKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZXMgPSBtYXBUb1ZhbEFycmF5KHRvUmF3KGl0ZW1zLnZhbHVlKSlcbiAgICAgIGNvbnN0IHsgbXVsdGlwbGUgfSA9IHByb3BzXG5cbiAgICAgIGxldCB2YWwgPSBtdWx0aXBsZSA/IFtdIDogMFxuXG4gICAgICB2YWx1ZXMuZm9yRWFjaCgoaXQsIGkpID0+IHtcbiAgICAgICAgaWYgKGl0LmlzQWN0aXZlLnZhbHVlKSB7XG4gICAgICAgICAgbXVsdGlwbGUgPyAodmFsIGFzIG51bWJlcltdKS5wdXNoKGkpIDogKHZhbCA9IGkpXG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiB2YWxcbiAgICB9XG5cbiAgICBjb25zdCBvbkNsaWNrID0gKGl0ZW0pID0+IHtcbiAgICAgIGlmICghcHJvcHMuYWN0aXZlKSByZXR1cm5cblxuICAgICAgcHJvcHMubXVsdGlwbGUgPyB0b2dnbGVJdGVtKGl0ZW0pIDogc2V0QWN0aXZlSXRlbShpdGVtKVxuICAgICAgLy8gIXByb3BzLm11bHRpcGxlICYmXG5cbiAgICAgIGRpc3BhdGNoRXZlbnQocHJlcGFyZUluZGV4ZXMoKSlcbiAgICB9XG5cbiAgICBjb25zdCBzZXRJdGVtU3RhdGUgPSAodmFsdWUpID0+IHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuIHNldEFjdGl2ZUl0ZW0odmFsdWUpXG5cbiAgICAgIGNvbnN0IHZhbHVlcyA9IG1hcFRvVmFsQXJyYXkodG9SYXcoaXRlbXMudmFsdWUpKVxuXG4gICAgICBpZiAodmFsdWVzLmxlbmd0aCkge1xuICAgICAgICBpZiAocHJvcHMubXVsdGlwbGUpIHtcbiAgICAgICAgICA7KHZhbHVlIGFzIG51bWJlcltdKS5mb3JFYWNoKChpbmQpID0+IHRvZ2dsZUl0ZW0odmFsdWVzW2luZF0pKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldEFjdGl2ZUl0ZW0odmFsdWVzW3ZhbHVlIGFzIG51bWJlcl0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB3YXRjaCgoKSA9PiBwcm9wcy52YWx1ZSwgKHRvKSA9PiB7XG4gICAgICAgIGlmICghaXNUcnVzdGVkU2VsZWN0KSBzZXRJdGVtU3RhdGUodG8pXG4gICAgICAgIGlzVHJ1c3RlZFNlbGVjdCAmJiAoaXNUcnVzdGVkU2VsZWN0ID0gZmFsc2UpXG4gICAgICB9LFxuICAgIClcblxuICAgIC8vIHRoaXMgcGFydCBpcyBmb3IgZml4aW5nXG4gICAgLy8gYXN5bmMgY29tcG9uZW50cyBtb3VudGluZyBzZXF1ZW5jZVxuICAgIGNvbnN0IHN0b3AgPSB3YXRjaChpdGVtcywgKCkgPT4ge1xuICAgICAgc2V0SXRlbVN0YXRlKHByb3BzLnZhbHVlKVxuICAgICAgc3RvcCgpXG4gICAgfSwgeyBkZWVwOiB0cnVlIH0pXG5cbiAgICBvbk1vdW50ZWQoKCkgPT4gc2V0SXRlbVN0YXRlKHByb3BzLnZhbHVlKSlcblxuICAgIHByb3ZpZGUoJyR2X2xpc3QnLCB7XG4gICAgICBhZGQ6IHJlZ2lzdGVyLFxuICAgICAgcmVtb3ZlOiB1bnJlZ2lzdGVyLFxuICAgICAgY2xpY2s6IG9uQ2xpY2ssXG4gICAgICBhY3RpdmVDbGFzczogcHJvcHMuYWN0aXZlQ2xhc3MsXG4gICAgfSlcblxuICAgIHJldHVybiAoKSA9PiBoKFxuICAgICAgJ2RpdicsXG4gICAgICB7IGNsYXNzOiBjbGFzc2VzLnZhbHVlLCBzdHlsZTogc3R5bGVzLnZhbHVlIH0sXG4gICAgICB7IGRlZmF1bHQ6ICgpID0+IHNsb3RzLmRlZmF1bHQ/LigpIH0sXG4gICAgKVxuICB9LFxufSlcbiJdfQ==