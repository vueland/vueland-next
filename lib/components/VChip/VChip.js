import { defineComponent, h, computed } from 'vue';
import { VIcon } from '../VIcon';
import { useColors, colorProps } from '../../composable/use-colors';
import { useIcons } from '../../composable/use-icons';
export default defineComponent({
    name: 'v-chip',
    props: {
        title: {
            type: String,
            default: '',
        },
        textColor: {
            type: String,
            default: '#ffffff',
        },
        disabled: Boolean,
        closable: {
            type: Boolean,
            default: true,
        },
        ...colorProps('primary'),
    },
    emits: ['close', 'click'],
    setup(props, { slots, emit }) {
        const { setBackgroundClassNameColor, setBackgroundCssColor, setTextCssColor, setTextClassNameColor, } = useColors();
        const { icons } = useIcons();
        const classes = computed(() => ({
            'v-chip': true,
            'v-chip--disabled': props.disabled,
            ...(!props.disabled ? setBackgroundClassNameColor(props.color) : {}),
            ...setTextClassNameColor(props.textColor),
        }));
        const styles = computed(() => ({
            ...(!props.disabled ? setBackgroundCssColor(props.color) : {}),
            ...setTextCssColor(props.textColor),
        }));
        const genCloseIcon = () => {
            return h(VIcon, {
                icon: icons.$close,
                clickable: !props.disabled,
                onClick: () => {
                    emit('close');
                },
            });
        };
        const genChipContent = () => {
            return h('div', {
                class: 'v-chip__content',
                onClick: () => emit('click'),
            }, slots.default?.() || props.title);
        };
        return () => h('span', {
            class: classes.value,
            style: styles.value,
        }, [
            genChipContent(),
            props.closable ? genCloseIcon() : null,
        ]);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkNoaXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WQ2hpcC9WQ2hpcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxLQUFLLENBQUE7QUFFbEQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUVoQyxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLDZCQUE2QixDQUFBO0FBQ25FLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQTtBQUVyRCxlQUFlLGVBQWUsQ0FBQztJQUM3QixJQUFJLEVBQUUsUUFBUTtJQUNkLEtBQUssRUFBRTtRQUNMLEtBQUssRUFBRTtZQUNMLElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLEVBQUU7U0FDWjtRQUNELFNBQVMsRUFBRTtZQUNULElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLFNBQVM7U0FDbkI7UUFDRCxRQUFRLEVBQUUsT0FBTztRQUNqQixRQUFRLEVBQUU7WUFDUixJQUFJLEVBQUUsT0FBTztZQUNiLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7UUFDRCxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUM7S0FDekI7SUFDRCxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDO0lBQ3pCLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO1FBQzFCLE1BQU0sRUFDSiwyQkFBMkIsRUFDM0IscUJBQXFCLEVBQ3JCLGVBQWUsRUFDZixxQkFBcUIsR0FDdEIsR0FBRyxTQUFTLEVBQUUsQ0FBQTtRQUNmLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxRQUFRLEVBQUUsQ0FBQTtRQUU1QixNQUFNLE9BQU8sR0FBRyxRQUFRLENBQTBCLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDdkQsUUFBUSxFQUFFLElBQUk7WUFDZCxrQkFBa0IsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUNsQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQywyQkFBMkIsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNwRSxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUM7U0FDMUMsQ0FBQyxDQUFDLENBQUE7UUFFSCxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQXlCLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDckQsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDOUQsR0FBRyxlQUFlLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQztTQUNwQyxDQUFDLENBQUMsQ0FBQTtRQUVILE1BQU0sWUFBWSxHQUFHLEdBQUcsRUFBRTtZQUN4QixPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUU7Z0JBQ2QsSUFBSSxFQUFFLEtBQUssQ0FBQyxNQUFNO2dCQUNsQixTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUTtnQkFDMUIsT0FBTyxFQUFFLEdBQUcsRUFBRTtvQkFDWixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7Z0JBQ2YsQ0FBQzthQUNGLENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQTtRQUVELE1BQU0sY0FBYyxHQUFHLEdBQUcsRUFBRTtZQUMxQixPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUU7Z0JBQ2QsS0FBSyxFQUFFLGlCQUFpQjtnQkFDeEIsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7YUFDN0IsRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUUsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDdEMsQ0FBQyxDQUFBO1FBRUQsT0FBTyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFO1lBQ3JCLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSztZQUNwQixLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUs7U0FDcEIsRUFBRTtZQUNELGNBQWMsRUFBRTtZQUNoQixLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSTtTQUN2QyxDQUFDLENBQUE7SUFDSixDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcblxuaW1wb3J0IHsgVkljb24gfSBmcm9tICcuLi9WSWNvbidcblxuaW1wb3J0IHsgdXNlQ29sb3JzLCBjb2xvclByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtY29sb3JzJ1xuaW1wb3J0IHsgdXNlSWNvbnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1pY29ucydcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtY2hpcCcsXG4gIHByb3BzOiB7XG4gICAgdGl0bGU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnLFxuICAgIH0sXG4gICAgdGV4dENvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnI2ZmZmZmZicsXG4gICAgfSxcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICBjbG9zYWJsZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgfSxcbiAgICAuLi5jb2xvclByb3BzKCdwcmltYXJ5JyksXG4gIH0sXG4gIGVtaXRzOiBbJ2Nsb3NlJywgJ2NsaWNrJ10sXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzLCBlbWl0IH0pIHtcbiAgICBjb25zdCB7XG4gICAgICBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IsXG4gICAgICBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IsXG4gICAgICBzZXRUZXh0Q3NzQ29sb3IsXG4gICAgICBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IsXG4gICAgfSA9IHVzZUNvbG9ycygpXG4gICAgY29uc3QgeyBpY29ucyB9ID0gdXNlSWNvbnMoKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtY2hpcCc6IHRydWUsXG4gICAgICAndi1jaGlwLS1kaXNhYmxlZCc6IHByb3BzLmRpc2FibGVkLFxuICAgICAgLi4uKCFwcm9wcy5kaXNhYmxlZCA/IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgICAuLi5zZXRUZXh0Q2xhc3NOYW1lQ29sb3IocHJvcHMudGV4dENvbG9yKSxcbiAgICB9KSlcblxuICAgIGNvbnN0IHN0eWxlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIHN0cmluZz4+KCgpID0+ICh7XG4gICAgICAuLi4oIXByb3BzLmRpc2FibGVkID8gc2V0QmFja2dyb3VuZENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICAgIC4uLnNldFRleHRDc3NDb2xvcihwcm9wcy50ZXh0Q29sb3IpLFxuICAgIH0pKVxuXG4gICAgY29uc3QgZ2VuQ2xvc2VJY29uID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGgoVkljb24sIHtcbiAgICAgICAgaWNvbjogaWNvbnMuJGNsb3NlLFxuICAgICAgICBjbGlja2FibGU6ICFwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgIGVtaXQoJ2Nsb3NlJylcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQ2hpcENvbnRlbnQgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogJ3YtY2hpcF9fY29udGVudCcsXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IGVtaXQoJ2NsaWNrJyksXG4gICAgICB9LCBzbG90cy5kZWZhdWx0Py4oKSB8fCBwcm9wcy50aXRsZSlcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4gaCgnc3BhbicsIHtcbiAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgc3R5bGU6IHN0eWxlcy52YWx1ZSxcbiAgICB9LCBbXG4gICAgICBnZW5DaGlwQ29udGVudCgpLFxuICAgICAgcHJvcHMuY2xvc2FibGUgPyBnZW5DbG9zZUljb24oKSA6IG51bGwsXG4gICAgXSlcbiAgfSxcbn0pXG4iXX0=