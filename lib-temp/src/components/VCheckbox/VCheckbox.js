import { h, ref, watch, defineComponent, inject, computed, onBeforeMount, onBeforeUnmount, } from 'vue';
import { useValidation } from '../../composable/use-validation';
import { useIcons } from '../../composable/use-icons';
import { VIcon } from '../VIcon';
import { VLabel } from '../VLabel';
import { warning } from '../../helpers';
export const VCheckbox = defineComponent({
    name: 'v-checkbox',
    props: {
        onIcon: {
            type: String,
        },
        offIcon: {
            type: String,
        },
        dark: Boolean,
        label: String,
        disabled: Boolean,
        validate: Boolean,
        modelValue: [Array, Boolean],
        value: {
            default: null,
        },
        color: {
            type: String,
            default: 'primary',
        },
    },
    emits: ['checked', 'update:modelValue'],
    setup(props, { emit }) {
        const isChecked = ref(false);
        const form = inject('form', null);
        const { validate } = useValidation(props);
        const { icons } = useIcons();
        const isArray = computed(() => Array.isArray(props.modelValue));
        const isValueSet = computed(() => props.value !== null);
        const classes = computed(() => ({
            'v-checkbox': true,
            'v-checkbox--disabled': props.disabled,
            'v-checkbox--checked': isChecked.value,
            'v-validatable': props.validate,
        }));
        watch(() => props.modelValue, () => {
            if (isArray.value) {
                if (isValueSet.value) {
                    isChecked.value = props.modelValue.includes(props.value);
                }
                else {
                    warning('v-checkbox: set the "value" prop');
                }
            }
            else {
                isChecked.value = !!props.modelValue;
            }
        }, { immediate: true });
        const validateValue = () => {
            return validate(isChecked.value);
        };
        const genLabel = () => {
            const propsData = {
                absolute: false,
                color: props.dark ? 'white' : '',
                disabled: props.disabled,
            };
            return h(VLabel, propsData, {
                default: () => props.label,
            });
        };
        const genLabelWrapper = () => {
            return h('div', {
                class: 'v-checkbox__label',
            }, genLabel());
        };
        const genIcon = () => {
            const onIcon = props.onIcon || icons.$checkOn;
            const offIcon = props.offIcon || icons.$checkOff;
            const icon = isChecked.value ? onIcon : offIcon;
            const propsData = {
                icon,
                color: props.color,
                disabled: props.disabled,
            };
            return h(VIcon, propsData);
        };
        const genCheckbox = () => {
            return h('div', {
                class: 'v-checkbox__square',
            }, genIcon());
        };
        const computeValue = () => {
            if (isArray.value) {
                let modelValue = [...props.modelValue];
                isChecked.value = !modelValue.includes(props.value);
                if (!isChecked.value) {
                    modelValue = modelValue.filter((it) => it !== props.value);
                }
                else {
                    modelValue.push(props.value);
                }
                return modelValue;
            }
            return (isChecked.value = !isChecked.value);
        };
        const onClick = () => {
            if (props.disabled)
                return;
            const value = computeValue();
            props.validate && validateValue();
            emit('update:modelValue', value);
            emit('checked', value);
        };
        onBeforeMount(() => {
            if (form)
                form.add(validateValue);
        });
        onBeforeUnmount(() => {
            form?.remove(validateValue);
        });
        return () => h('div', { class: classes.value, onClick }, [genCheckbox(), props.label && genLabelWrapper()]);
    },
});
//# sourceMappingURL=data:application/json;base64,