import { defineComponent, h } from 'vue';
export const createSimpleFunctional = (c, el = 'div', name = '') => {
    return defineComponent({
        name: name || c.replace(/__/g, '-'),
        setup(_, { slots }) {
            const propsData = {
                class: {
                    [c.trim()]: true,
                },
            };
            return () => h(el, propsData, slots.default && slots.default());
        },
    });
};
export const addOnceListener = (el, eventName, cb, options = false) => {
    const once = (event) => {
        cb(event);
        el.removeEventListener(eventName, once, options);
    };
    el.addEventListener(eventName, once, options);
};
export const convertToUnit = (str, unit = 'px') => {
    if (isNaN(+str)) {
        return String(str);
    }
    else {
        return `${Number(str)}${unit}`;
    }
};
export const warning = (warningText) => {
    console.warn(warningText);
};
export const copyWithoutLink = (obj) => {
    return JSON.parse(JSON.stringify(obj));
};
export const addScopedSlot = (slotName, slots) => {
    return (scoped) => {
        const arg = { ...scoped };
        return slots[slotName] && slots[slotName](arg);
    };
};
export const getKeyValueFromTarget = (valueKey, target) => {
    return valueKey.split('.').reduce((acc, it) => acc[it], target);
};
export const mapToValArray = (map) => Array.from(map.values());
export const getStringKeysValue = (str, value) => {
    return str.split('.').reduce((acc, it) => acc[it], value);
};
export const toCamelCase = (...args) => {
    return args.reduce((res, s, i) => {
        if (i === 0)
            res += s;
        else
            res += s[0].toUpperCase() + s.slice(1);
        return res;
    }, '');
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaGVscGVycy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFBUyxNQUFNLEtBQUssQ0FBQTtBQUUvQyxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxDQUNwQyxDQUFTLEVBQ1QsRUFBRSxHQUFHLEtBQUssRUFDVixPQUFlLEVBQUUsRUFDakIsRUFBRTtJQUNGLE9BQU8sZUFBZSxDQUFDO1FBQ3JCLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDO1FBRW5DLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUU7WUFDaEIsTUFBTSxTQUFTLEdBQUc7Z0JBQ2hCLEtBQUssRUFBRTtvQkFDTCxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUk7aUJBQ2pCO2FBQ0YsQ0FBQTtZQUVELE9BQU8sR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtRQUNqRSxDQUFDO0tBQ0YsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQzdCLEVBQWUsRUFDZixTQUFpQixFQUNqQixFQUEwQixFQUMxQixVQUE2QyxLQUFLLEVBQzVDLEVBQUU7SUFDUixNQUFNLElBQUksR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO1FBQzVCLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUNULEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQ2xELENBQUMsQ0FBQTtJQUVELEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0FBQy9DLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUMzQixHQUFvQixFQUNwQixJQUFJLEdBQUcsSUFBSSxFQUNILEVBQUU7SUFDVixJQUFJLEtBQUssQ0FBQyxDQUFDLEdBQUksQ0FBQyxFQUFFO1FBQ2hCLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0tBQ25CO1NBQU07UUFDTCxPQUFPLEdBQUksTUFBTSxDQUFDLEdBQUcsQ0FBRSxHQUFJLElBQUssRUFBRSxDQUFBO0tBQ25DO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLENBQUMsV0FBVyxFQUFFLEVBQUU7SUFDckMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUMzQixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRTtJQUNyQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ3hDLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLFFBQWdCLEVBQUUsS0FBWSxFQUFFLEVBQUU7SUFDOUQsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQ2hCLE1BQU0sR0FBRyxHQUFRLEVBQUUsR0FBRyxNQUFNLEVBQUUsQ0FBQTtRQUU5QixPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFFLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDakQsQ0FBQyxDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsQ0FDbkMsUUFBZ0IsRUFDaEIsTUFBUyxFQUNELEVBQUU7SUFDVixPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0FBQ2pFLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLEdBQUcsRUFBUyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQTtBQUVyRSxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEdBQVcsRUFBRSxLQUFVLEVBQUUsRUFBRTtJQUM1RCxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFBO0FBQzNELENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFDLEdBQUcsSUFBYyxFQUFVLEVBQUU7SUFDdkQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUMvQixJQUFJLENBQUMsS0FBSyxDQUFDO1lBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTs7WUFDaEIsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQzNDLE9BQU8sR0FBRyxDQUFBO0lBQ1osQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBQ1IsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoLCBTbG90cyB9IGZyb20gJ3Z1ZSdcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwgPSAoXG4gIGM6IHN0cmluZyxcbiAgZWwgPSAnZGl2JyxcbiAgbmFtZTogc3RyaW5nID0gJycsXG4pID0+IHtcbiAgcmV0dXJuIGRlZmluZUNvbXBvbmVudCh7XG4gICAgbmFtZTogbmFtZSB8fCBjLnJlcGxhY2UoL19fL2csICctJyksXG5cbiAgICBzZXR1cChfLCB7IHNsb3RzIH0pIHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICBbYy50cmltKCldOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gKCkgPT4gaChlbCwgcHJvcHNEYXRhLCBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKSlcbiAgICB9LFxuICB9KVxufVxuXG5leHBvcnQgY29uc3QgYWRkT25jZUxpc3RlbmVyID0gKFxuICBlbDogRXZlbnRUYXJnZXQsXG4gIGV2ZW50TmFtZTogc3RyaW5nLFxuICBjYjogKGV2ZW50OiBFdmVudCkgPT4gdm9pZCxcbiAgb3B0aW9uczogYm9vbGVhbiB8IEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zID0gZmFsc2UsXG4pOiB2b2lkID0+IHtcbiAgY29uc3Qgb25jZSA9IChldmVudDogRXZlbnQpID0+IHtcbiAgICBjYihldmVudClcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgb25jZSwgb3B0aW9ucylcbiAgfVxuXG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBvbmNlLCBvcHRpb25zKVxufVxuXG5leHBvcnQgY29uc3QgY29udmVydFRvVW5pdCA9IChcbiAgc3RyOiBzdHJpbmcgfCBudW1iZXIsXG4gIHVuaXQgPSAncHgnLFxuKTogc3RyaW5nID0+IHtcbiAgaWYgKGlzTmFOKCtzdHIhKSkge1xuICAgIHJldHVybiBTdHJpbmcoc3RyKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBgJHsgTnVtYmVyKHN0cikgfSR7IHVuaXQgfWBcbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgd2FybmluZyA9ICh3YXJuaW5nVGV4dCkgPT4ge1xuICBjb25zb2xlLndhcm4od2FybmluZ1RleHQpXG59XG5cbmV4cG9ydCBjb25zdCBjb3B5V2l0aG91dExpbmsgPSAob2JqKSA9PiB7XG4gIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpXG59XG5cbmV4cG9ydCBjb25zdCBhZGRTY29wZWRTbG90ID0gKHNsb3ROYW1lOiBzdHJpbmcsIHNsb3RzOiBTbG90cykgPT4ge1xuICByZXR1cm4gKHNjb3BlZCkgPT4ge1xuICAgIGNvbnN0IGFyZzogYW55ID0geyAuLi5zY29wZWQgfVxuXG4gICAgcmV0dXJuIHNsb3RzW3Nsb3ROYW1lXSAmJiBzbG90c1tzbG90TmFtZV0hKGFyZylcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZ2V0S2V5VmFsdWVGcm9tVGFyZ2V0ID0gPFQ+KFxuICB2YWx1ZUtleTogc3RyaW5nLFxuICB0YXJnZXQ6IFQsXG4pOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gdmFsdWVLZXkuc3BsaXQoJy4nKS5yZWR1Y2UoKGFjYywgaXQpID0+IGFjY1tpdF0sIHRhcmdldClcbn1cblxuZXhwb3J0IGNvbnN0IG1hcFRvVmFsQXJyYXkgPSAobWFwKTogYW55W10gPT4gQXJyYXkuZnJvbShtYXAudmFsdWVzKCkpXG5cbmV4cG9ydCBjb25zdCBnZXRTdHJpbmdLZXlzVmFsdWUgPSAoc3RyOiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+IHtcbiAgcmV0dXJuIHN0ci5zcGxpdCgnLicpLnJlZHVjZSgoYWNjLCBpdCkgPT4gYWNjW2l0XSwgdmFsdWUpXG59XG5cbmV4cG9ydCBjb25zdCB0b0NhbWVsQ2FzZSA9ICguLi5hcmdzOiBzdHJpbmdbXSk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBhcmdzLnJlZHVjZSgocmVzLCBzLCBpKSA9PiB7XG4gICAgaWYgKGkgPT09IDApIHJlcyArPSBzXG4gICAgZWxzZSByZXMgKz0gc1swXS50b1VwcGVyQ2FzZSgpICsgcy5zbGljZSgxKVxuICAgIHJldHVybiByZXNcbiAgfSwgJycpXG59XG4iXX0=