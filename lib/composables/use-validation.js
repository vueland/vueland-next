import { reactive, computed } from 'vue';
export const validationProps = () => ({
    rules: {
        type: Array,
        default: null,
    },
    value: [String, Number, Date, Object],
});
export const useValidation = (props) => {
    const errorState = reactive({
        innerError: null,
        innerErrorMessage: null,
        isDirty: false,
    });
    const validationClasses = () => ({
        'e-validatable': true,
    });
    const computedColor = computed(() => {
        return props.disabled ? 'disabled' : 'primary';
    });
    const hasRules = computed(() => {
        return !!props.rules && props.rules.length > 0;
    });
    const dirty = () => (errorState.isDirty = true);
    const update = (err, msg = null) => {
        if (errorState.innerError !== err) {
            errorState.innerError = err;
        }
        if (msg && errorState.innerErrorMessage !== msg) {
            errorState.innerErrorMessage = msg;
        }
        if (!msg)
            errorState.innerErrorMessage = msg;
        return errorState.innerError;
    };
    const validate = (val = props.value) => {
        if (!hasRules.value)
            return true;
        dirty();
        for (let i = 0, len = props.rules.length; i < len; i += 1) {
            const rule = props.rules[i];
            let result;
            if (typeof rule === 'function')
                result = rule(val);
            if (result === false || typeof result === 'string') {
                update(true, result);
                return false;
            }
            if (result === true && i === len - 1) {
                update(false);
                return true;
            }
        }
    };
    return {
        errorState,
        computedColor,
        validationClasses,
        validate,
        dirty,
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXZhbGlkYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9zYWJsZXMvdXNlLXZhbGlkYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxLQUFLLENBQUE7QUFXeEMsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDcEMsS0FBSyxFQUFFO1FBQ0wsSUFBSSxFQUFFLEtBQStDO1FBQ3JELE9BQU8sRUFBRSxJQUFJO0tBQ2Q7SUFDRCxLQUFLLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUM7Q0FDdEMsQ0FBQyxDQUFBO0FBRUYsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsS0FBSyxFQUFFLEVBQUU7SUFDckMsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFjO1FBQ3ZDLFVBQVUsRUFBRSxJQUFJO1FBQ2hCLGlCQUFpQixFQUFFLElBQUk7UUFDdkIsT0FBTyxFQUFFLEtBQUs7S0FDZixDQUFDLENBQUE7SUFFRixNQUFNLGlCQUFpQixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDL0IsZUFBZSxFQUFFLElBQUk7S0FDdEIsQ0FBQyxDQUFBO0lBRUYsTUFBTSxhQUFhLEdBQUcsUUFBUSxDQUFnQixHQUFHLEVBQUU7UUFDakQsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQTtJQUNoRCxDQUFDLENBQUMsQ0FBQTtJQUVGLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBVSxHQUFHLEVBQUU7UUFDdEMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUE7SUFDaEQsQ0FBQyxDQUFDLENBQUE7SUFFRixNQUFNLEtBQUssR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUE7SUFFL0MsTUFBTSxNQUFNLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxHQUFHLElBQUksRUFBRSxFQUFFO1FBQ2pDLElBQUksVUFBVSxDQUFDLFVBQVUsS0FBSyxHQUFHLEVBQUU7WUFDakMsVUFBVSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUE7U0FDNUI7UUFFRCxJQUFJLEdBQUcsSUFBSSxVQUFVLENBQUMsaUJBQWlCLEtBQUssR0FBRyxFQUFFO1lBQy9DLFVBQVUsQ0FBQyxpQkFBaUIsR0FBRyxHQUFHLENBQUE7U0FDbkM7UUFFRCxJQUFJLENBQUMsR0FBRztZQUFFLFVBQVUsQ0FBQyxpQkFBaUIsR0FBRyxHQUFHLENBQUE7UUFFNUMsT0FBTyxVQUFVLENBQUMsVUFBVSxDQUFBO0lBQzlCLENBQUMsQ0FBQTtJQUVELE1BQU0sUUFBUSxHQUFHLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQWtCLEVBQUU7UUFDckQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLO1lBQUUsT0FBTyxJQUFJLENBQUE7UUFFaEMsS0FBSyxFQUFFLENBQUE7UUFFUCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3pELE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFFM0IsSUFBSSxNQUFNLENBQUE7WUFFVixJQUFJLE9BQU8sSUFBSSxLQUFLLFVBQVU7Z0JBQUUsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUVsRCxJQUFJLE1BQU0sS0FBSyxLQUFLLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO2dCQUNsRCxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFBO2dCQUNwQixPQUFPLEtBQUssQ0FBQTthQUNiO1lBQ0QsSUFBSSxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxFQUFFO2dCQUNwQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7Z0JBQ2IsT0FBTyxJQUFJLENBQUE7YUFDWjtTQUNGO0lBQ0gsQ0FBQyxDQUFBO0lBRUQsT0FBTztRQUNMLFVBQVU7UUFDVixhQUFhO1FBQ2IsaUJBQWlCO1FBQ2pCLFFBQVE7UUFDUixLQUFLO0tBQ04sQ0FBQTtBQUNILENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlYWN0aXZlLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcbi8vIFR5cGVzXG5pbXBvcnQgeyBQcm9wVHlwZSB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vLi4vdHlwZXMvYmFzZSdcblxudHlwZSBFcnJvcnNTdGF0ZSA9IHtcbiAgaW5uZXJFcnJvcjogTWF5YmU8b2JqZWN0PlxuICBpbm5lckVycm9yTWVzc2FnZTogTWF5YmU8c3RyaW5nPlxuICBpc0RpcnR5OiBib29sZWFuXG59XG5cbmV4cG9ydCBjb25zdCB2YWxpZGF0aW9uUHJvcHMgPSAoKSA9PiAoe1xuICBydWxlczoge1xuICAgIHR5cGU6IEFycmF5IGFzIFByb3BUeXBlPEFycmF5PCh2YWw6IGFueSkgPT4gYm9vbGVhbj4+LFxuICAgIGRlZmF1bHQ6IG51bGwsXG4gIH0sXG4gIHZhbHVlOiBbU3RyaW5nLCBOdW1iZXIsIERhdGUsIE9iamVjdF0sXG59KVxuXG5leHBvcnQgY29uc3QgdXNlVmFsaWRhdGlvbiA9IChwcm9wcykgPT4ge1xuICBjb25zdCBlcnJvclN0YXRlID0gcmVhY3RpdmU8RXJyb3JzU3RhdGU+KHtcbiAgICBpbm5lckVycm9yOiBudWxsLFxuICAgIGlubmVyRXJyb3JNZXNzYWdlOiBudWxsLFxuICAgIGlzRGlydHk6IGZhbHNlLFxuICB9KVxuXG4gIGNvbnN0IHZhbGlkYXRpb25DbGFzc2VzID0gKCkgPT4gKHtcbiAgICAnZS12YWxpZGF0YWJsZSc6IHRydWUsXG4gIH0pXG5cbiAgY29uc3QgY29tcHV0ZWRDb2xvciA9IGNvbXB1dGVkPE1heWJlPHN0cmluZz4+KCgpID0+IHtcbiAgICByZXR1cm4gcHJvcHMuZGlzYWJsZWQgPyAnZGlzYWJsZWQnIDogJ3ByaW1hcnknXG4gIH0pXG5cbiAgY29uc3QgaGFzUnVsZXMgPSBjb21wdXRlZDxib29sZWFuPigoKSA9PiB7XG4gICAgcmV0dXJuICEhcHJvcHMucnVsZXMgJiYgcHJvcHMucnVsZXMubGVuZ3RoID4gMFxuICB9KVxuXG4gIGNvbnN0IGRpcnR5ID0gKCkgPT4gKGVycm9yU3RhdGUuaXNEaXJ0eSA9IHRydWUpXG5cbiAgY29uc3QgdXBkYXRlID0gKGVyciwgbXNnID0gbnVsbCkgPT4ge1xuICAgIGlmIChlcnJvclN0YXRlLmlubmVyRXJyb3IgIT09IGVycikge1xuICAgICAgZXJyb3JTdGF0ZS5pbm5lckVycm9yID0gZXJyXG4gICAgfVxuXG4gICAgaWYgKG1zZyAmJiBlcnJvclN0YXRlLmlubmVyRXJyb3JNZXNzYWdlICE9PSBtc2cpIHtcbiAgICAgIGVycm9yU3RhdGUuaW5uZXJFcnJvck1lc3NhZ2UgPSBtc2dcbiAgICB9XG5cbiAgICBpZiAoIW1zZykgZXJyb3JTdGF0ZS5pbm5lckVycm9yTWVzc2FnZSA9IG1zZ1xuXG4gICAgcmV0dXJuIGVycm9yU3RhdGUuaW5uZXJFcnJvclxuICB9XG5cbiAgY29uc3QgdmFsaWRhdGUgPSAodmFsID0gcHJvcHMudmFsdWUpOiBib29sZWFuIHwgdm9pZCA9PiB7XG4gICAgaWYgKCFoYXNSdWxlcy52YWx1ZSkgcmV0dXJuIHRydWVcblxuICAgIGRpcnR5KClcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwcm9wcy5ydWxlcy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgY29uc3QgcnVsZSA9IHByb3BzLnJ1bGVzW2ldXG5cbiAgICAgIGxldCByZXN1bHRcblxuICAgICAgaWYgKHR5cGVvZiBydWxlID09PSAnZnVuY3Rpb24nKSByZXN1bHQgPSBydWxlKHZhbClcblxuICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UgfHwgdHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdXBkYXRlKHRydWUsIHJlc3VsdClcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ID09PSB0cnVlICYmIGkgPT09IGxlbiAtIDEpIHtcbiAgICAgICAgdXBkYXRlKGZhbHNlKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXJyb3JTdGF0ZSxcbiAgICBjb21wdXRlZENvbG9yLFxuICAgIHZhbGlkYXRpb25DbGFzc2VzLFxuICAgIHZhbGlkYXRlLFxuICAgIGRpcnR5LFxuICB9XG59XG4iXX0=