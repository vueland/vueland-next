import { h, ref, reactive, computed, defineComponent, onBeforeMount } from 'vue';
import { validationProps } from '../../composables/use-validation';
import { useColors } from '../../composables/use-colors';
import { VInput } from '../VInput';
import { VSelectList } from '../VSelect';
import { VMenu } from '../VMenu';
import { VProgressLinear } from '../VProgressLinear';
import { getKeyValueFromTarget } from '../../helpers';
export default defineComponent({
    name: 'v-autocomplete',
    props: {
        label: String,
        items: Array,
        dark: Boolean,
        valueKey: String,
        idKey: String,
        listColor: String,
        disabled: Boolean,
        typeable: Boolean,
        loading: Boolean,
        modelValue: {
            default: null,
        },
        color: {
            type: String,
            default: 'primary',
        },
        ...validationProps(),
    },
    emits: [
        'input',
        'blur',
        'focus',
        'select',
        'update:modelValue',
        'update:value',
    ],
    setup(props, { emit }) {
        const state = reactive({
            focused: false,
            isMenuActive: false,
            search: '',
            select: null,
        });
        const { setTextCssColor, setTextClassNameColor } = useColors();
        const activator = ref(null);
        const classes = computed(() => ({
            'v-autocomplete': true,
            'v-autocomplete--disabled': props.disabled,
            'v-autocomplete--focused': state.focused,
            ...(props.color ? setTextClassNameColor(props.color) : {}),
        }));
        const styles = computed(() => ({
            ...(props.color ? setTextCssColor(props.color) : {}),
        }));
        const valueProperty = computed(() => {
            return props.modelValue || props.value;
        });
        const inputValue = computed(() => {
            return props.valueKey && valueProperty.value
                ? getKeyValueFromTarget(props.valueKey, valueProperty.value)
                : valueProperty.value;
        });
        const onFocus = () => {
            state.focused = true;
            state.isMenuActive = true;
            emit('focus');
        };
        const onBlur = () => {
            if (!valueProperty.value && !state.search)
                state.search = '';
            if (!state.search && valueProperty.value)
                state.search = inputValue.value;
            state.focused = false;
            emit('blur');
        };
        const onInput = (e) => {
            state.search = e.target.value;
            emit('input', e.target.value);
        };
        const onClear = () => {
            state.search = '';
            state.select = null;
            emit('select', null);
            emit('update:modelValue', null);
            emit('update:value', null);
        };
        const onSelect = (it) => {
            state.search = props.valueKey
                ? getKeyValueFromTarget(props.valueKey, it)
                : it;
            state.select = it;
            emit('select', it);
            emit('update:modelValue', it);
            emit('update:value', it);
        };
        const genInput = () => {
            return h('input', {
                value: state.search,
                disabled: props.disabled,
                readonly: props.readonly && !props.typeable,
                ref: activator,
                class: 'v-autocomplete__input',
                onInput,
                onFocus,
                onBlur,
            });
        };
        const genAutocompleteList = () => {
            return h(VSelectList, {
                items: props.items,
                valueKey: props.valueKey,
                idKey: props.idKey,
                active: state.isMenuActive,
                color: props.dark ? 'white' : props.color,
                listColor: props.listColor,
                select: state.select,
                onSelect,
            });
        };
        const genMenu = () => {
            return h(VMenu, {
                activator: activator.value,
                openOnClick: true,
                maxHeight: 240,
                bottom: true,
                onHide: () => (state.isMenuActive = state.focused),
            }, {
                default: genAutocompleteList,
            });
        };
        const genLinearProgress = () => {
            return h('div', {
                class: { 'v-autocomplete__loading': true },
            }, h(VProgressLinear, {
                height: 2,
                indeterminate: true,
                color: props.color,
                backgroundColor: props.color,
            }));
        };
        const genAutocomplete = () => {
            return h('div', {
                class: classes.value,
                style: styles.value,
            }, [
                genInput(),
                props.loading && genLinearProgress(),
                activator.value && genMenu(),
            ]);
        };
        onBeforeMount(() => {
            state.select = valueProperty.value;
            state.search = inputValue.value;
        });
        return () => {
            const propsData = {
                label: props.label,
                focused: state.isMenuActive,
                hasState: !!state.search,
                dark: props.dark,
                disabled: props.disabled,
                clearable: props.clearable,
                color: props.color,
                rules: props.rules,
                value: valueProperty.value || state.search,
                onClear,
            };
            return h(VInput, propsData, {
                'text-field': () => genAutocomplete(),
            });
        };
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkF1dG9jb21wbGV0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3Z1ZWxhbmQvc3JjL2NvbXBvbmVudHMvVkF1dG9jb21wbGV0ZS9WQXV0b2NvbXBsZXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxNQUFNLEtBQUssQ0FBQTtBQUdoRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0NBQWtDLENBQUE7QUFDbEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDhCQUE4QixDQUFBO0FBTXhELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFDbEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUN4QyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBQ2hDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQUdwRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFTckQsZUFBZSxlQUFlLENBQUM7SUFDN0IsSUFBSSxFQUFFLGdCQUFnQjtJQUN0QixLQUFLLEVBQUU7UUFDTCxLQUFLLEVBQUUsTUFBTTtRQUNiLEtBQUssRUFBRSxLQUFLO1FBQ1osSUFBSSxFQUFFLE9BQU87UUFDYixRQUFRLEVBQUUsTUFBTTtRQUNoQixLQUFLLEVBQUUsTUFBTTtRQUNiLFNBQVMsRUFBRSxNQUFNO1FBQ2pCLFFBQVEsRUFBRSxPQUFPO1FBQ2pCLFFBQVEsRUFBRSxPQUFPO1FBQ2pCLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLFVBQVUsRUFBRTtZQUNWLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7UUFDRCxLQUFLLEVBQUU7WUFDTCxJQUFJLEVBQUUsTUFBTTtZQUNaLE9BQU8sRUFBRSxTQUFTO1NB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O0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVnVlIEFQSVxuaW1wb3J0IHsgaCwgcmVmLCByZWFjdGl2ZSwgY29tcHV0ZWQsIGRlZmluZUNvbXBvbmVudCwgb25CZWZvcmVNb3VudCB9IGZyb20gJ3Z1ZSdcblxuLy8gRWZmZWN0c1xuaW1wb3J0IHsgdmFsaWRhdGlvblByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvdXNlLXZhbGlkYXRpb24nXG5pbXBvcnQgeyB1c2VDb2xvcnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy91c2UtY29sb3JzJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tICd2dWUnXG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZJbnB1dCB9IGZyb20gJy4uL1ZJbnB1dCdcbmltcG9ydCB7IFZTZWxlY3RMaXN0IH0gZnJvbSAnLi4vVlNlbGVjdCdcbmltcG9ydCB7IFZNZW51IH0gZnJvbSAnLi4vVk1lbnUnXG5pbXBvcnQgeyBWUHJvZ3Jlc3NMaW5lYXIgfSBmcm9tICcuLi9WUHJvZ3Jlc3NMaW5lYXInXG5cbi8vIEhlbHBlcnNcbmltcG9ydCB7IGdldEtleVZhbHVlRnJvbVRhcmdldCB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5cbnR5cGUgU2VsZWN0U3RhdGUgPSB7XG4gIGZvY3VzZWQ6IGJvb2xlYW5cbiAgaXNNZW51QWN0aXZlOiBib29sZWFuXG4gIHNlYXJjaDogc3RyaW5nXG4gIHNlbGVjdDogYW55XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWF1dG9jb21wbGV0ZScsXG4gIHByb3BzOiB7XG4gICAgbGFiZWw6IFN0cmluZyxcbiAgICBpdGVtczogQXJyYXksXG4gICAgZGFyazogQm9vbGVhbixcbiAgICB2YWx1ZUtleTogU3RyaW5nLFxuICAgIGlkS2V5OiBTdHJpbmcsXG4gICAgbGlzdENvbG9yOiBTdHJpbmcsXG4gICAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gICAgdHlwZWFibGU6IEJvb2xlYW4sXG4gICAgbG9hZGluZzogQm9vbGVhbixcbiAgICBtb2RlbFZhbHVlOiB7XG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gICAgY29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdwcmltYXJ5JyxcbiAgICB9LFxuICAgIC4uLnZhbGlkYXRpb25Qcm9wcygpLFxuICB9IGFzIGFueSxcblxuICBlbWl0czogW1xuICAgICdpbnB1dCcsXG4gICAgJ2JsdXInLFxuICAgICdmb2N1cycsXG4gICAgJ3NlbGVjdCcsXG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJyxcbiAgICAndXBkYXRlOnZhbHVlJyxcbiAgXSxcblxuICBzZXR1cChwcm9wcywgeyBlbWl0IH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3Qgc3RhdGU6IFNlbGVjdFN0YXRlID0gcmVhY3RpdmUoe1xuICAgICAgZm9jdXNlZDogZmFsc2UsXG4gICAgICBpc01lbnVBY3RpdmU6IGZhbHNlLFxuICAgICAgc2VhcmNoOiAnJyxcbiAgICAgIHNlbGVjdDogbnVsbCxcbiAgICB9KVxuXG4gICAgY29uc3QgeyBzZXRUZXh0Q3NzQ29sb3IsIHNldFRleHRDbGFzc05hbWVDb2xvciB9ID0gdXNlQ29sb3JzKClcbiAgICBjb25zdCBhY3RpdmF0b3IgPSByZWYobnVsbClcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LWF1dG9jb21wbGV0ZSc6IHRydWUsXG4gICAgICAndi1hdXRvY29tcGxldGUtLWRpc2FibGVkJzogcHJvcHMuZGlzYWJsZWQsXG4gICAgICAndi1hdXRvY29tcGxldGUtLWZvY3VzZWQnOiBzdGF0ZS5mb2N1c2VkLFxuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0VGV4dENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IHN0eWxlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIHN0cmluZz4+KCgpID0+ICh7XG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRUZXh0Q3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3QgdmFsdWVQcm9wZXJ0eSA9IGNvbXB1dGVkPGFueT4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLm1vZGVsVmFsdWUgfHwgcHJvcHMudmFsdWVcbiAgICB9KVxuXG4gICAgY29uc3QgaW5wdXRWYWx1ZSA9IGNvbXB1dGVkPHN0cmluZz4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLnZhbHVlS2V5ICYmIHZhbHVlUHJvcGVydHkudmFsdWVcbiAgICAgICAgPyBnZXRLZXlWYWx1ZUZyb21UYXJnZXQocHJvcHMudmFsdWVLZXksIHZhbHVlUHJvcGVydHkudmFsdWUpXG4gICAgICAgIDogdmFsdWVQcm9wZXJ0eS52YWx1ZVxuICAgIH0pXG5cbiAgICBjb25zdCBvbkZvY3VzID0gKCkgPT4ge1xuICAgICAgc3RhdGUuZm9jdXNlZCA9IHRydWVcbiAgICAgIHN0YXRlLmlzTWVudUFjdGl2ZSA9IHRydWVcbiAgICAgIGVtaXQoJ2ZvY3VzJylcbiAgICB9XG5cbiAgICBjb25zdCBvbkJsdXIgPSAoKSA9PiB7XG4gICAgICBpZiAoIXZhbHVlUHJvcGVydHkudmFsdWUgJiYgIXN0YXRlLnNlYXJjaCkgc3RhdGUuc2VhcmNoID0gJydcbiAgICAgIGlmICghc3RhdGUuc2VhcmNoICYmIHZhbHVlUHJvcGVydHkudmFsdWUpIHN0YXRlLnNlYXJjaCA9IGlucHV0VmFsdWUudmFsdWVcbiAgICAgIHN0YXRlLmZvY3VzZWQgPSBmYWxzZVxuICAgICAgZW1pdCgnYmx1cicpXG4gICAgfVxuXG4gICAgY29uc3Qgb25JbnB1dCA9IChlKSA9PiB7XG4gICAgICBzdGF0ZS5zZWFyY2ggPSBlLnRhcmdldC52YWx1ZVxuICAgICAgZW1pdCgnaW5wdXQnLCBlLnRhcmdldC52YWx1ZSlcbiAgICB9XG5cbiAgICBjb25zdCBvbkNsZWFyID0gKCkgPT4ge1xuICAgICAgc3RhdGUuc2VhcmNoID0gJydcbiAgICAgIHN0YXRlLnNlbGVjdCA9IG51bGxcbiAgICAgIGVtaXQoJ3NlbGVjdCcsIG51bGwpXG4gICAgICBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIG51bGwpXG4gICAgICBlbWl0KCd1cGRhdGU6dmFsdWUnLCBudWxsKVxuICAgIH1cblxuICAgIGNvbnN0IG9uU2VsZWN0ID0gKGl0KSA9PiB7XG4gICAgICBzdGF0ZS5zZWFyY2ggPSBwcm9wcy52YWx1ZUtleVxuICAgICAgICA/IGdldEtleVZhbHVlRnJvbVRhcmdldChwcm9wcy52YWx1ZUtleSwgaXQpXG4gICAgICAgIDogaXRcbiAgICAgIHN0YXRlLnNlbGVjdCA9IGl0XG4gICAgICBlbWl0KCdzZWxlY3QnLCBpdClcbiAgICAgIGVtaXQoJ3VwZGF0ZTptb2RlbFZhbHVlJywgaXQpXG4gICAgICBlbWl0KCd1cGRhdGU6dmFsdWUnLCBpdClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5JbnB1dCA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaCgnaW5wdXQnLCB7XG4gICAgICAgIHZhbHVlOiBzdGF0ZS5zZWFyY2gsXG4gICAgICAgIGRpc2FibGVkOiBwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgcmVhZG9ubHk6IHByb3BzLnJlYWRvbmx5ICYmICFwcm9wcy50eXBlYWJsZSxcbiAgICAgICAgcmVmOiBhY3RpdmF0b3IsXG4gICAgICAgIGNsYXNzOiAndi1hdXRvY29tcGxldGVfX2lucHV0JyxcbiAgICAgICAgb25JbnB1dCxcbiAgICAgICAgb25Gb2N1cyxcbiAgICAgICAgb25CbHVyLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5BdXRvY29tcGxldGVMaXN0ID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKFZTZWxlY3RMaXN0LCB7XG4gICAgICAgIGl0ZW1zOiBwcm9wcy5pdGVtcyxcbiAgICAgICAgdmFsdWVLZXk6IHByb3BzLnZhbHVlS2V5LFxuICAgICAgICBpZEtleTogcHJvcHMuaWRLZXksXG4gICAgICAgIGFjdGl2ZTogc3RhdGUuaXNNZW51QWN0aXZlLFxuICAgICAgICBjb2xvcjogcHJvcHMuZGFyayA/ICd3aGl0ZScgOiBwcm9wcy5jb2xvcixcbiAgICAgICAgbGlzdENvbG9yOiBwcm9wcy5saXN0Q29sb3IsXG4gICAgICAgIHNlbGVjdDogc3RhdGUuc2VsZWN0LFxuICAgICAgICBvblNlbGVjdCxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuTWVudSA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaChcbiAgICAgICAgVk1lbnUsXG4gICAgICAgIHtcbiAgICAgICAgICBhY3RpdmF0b3I6IGFjdGl2YXRvci52YWx1ZSEsXG4gICAgICAgICAgb3Blbk9uQ2xpY2s6IHRydWUsXG4gICAgICAgICAgbWF4SGVpZ2h0OiAyNDAsXG4gICAgICAgICAgYm90dG9tOiB0cnVlLFxuICAgICAgICAgIG9uSGlkZTogKCkgPT4gKHN0YXRlLmlzTWVudUFjdGl2ZSA9IHN0YXRlLmZvY3VzZWQpLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZGVmYXVsdDogZ2VuQXV0b2NvbXBsZXRlTGlzdCxcbiAgICAgICAgfVxuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkxpbmVhclByb2dyZXNzID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzOiB7ICd2LWF1dG9jb21wbGV0ZV9fbG9hZGluZyc6IHRydWUgfSxcbiAgICAgICAgfSxcbiAgICAgICAgaChWUHJvZ3Jlc3NMaW5lYXIsIHtcbiAgICAgICAgICBoZWlnaHQ6IDIsXG4gICAgICAgICAgaW5kZXRlcm1pbmF0ZTogdHJ1ZSxcbiAgICAgICAgICBjb2xvcjogcHJvcHMuY29sb3IsXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBwcm9wcy5jb2xvcixcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5BdXRvY29tcGxldGUgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgICAgc3R5bGU6IHN0eWxlcy52YWx1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgW1xuICAgICAgICAgIGdlbklucHV0KCksXG4gICAgICAgICAgcHJvcHMubG9hZGluZyAmJiBnZW5MaW5lYXJQcm9ncmVzcygpLFxuICAgICAgICAgIGFjdGl2YXRvci52YWx1ZSAmJiBnZW5NZW51KCksXG4gICAgICAgIF1cbiAgICAgIClcbiAgICB9XG5cbiAgICBvbkJlZm9yZU1vdW50KCgpID0+IHtcbiAgICAgIHN0YXRlLnNlbGVjdCA9IHZhbHVlUHJvcGVydHkudmFsdWVcbiAgICAgIHN0YXRlLnNlYXJjaCA9IGlucHV0VmFsdWUudmFsdWVcbiAgICB9KVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgbGFiZWw6IHByb3BzLmxhYmVsLFxuICAgICAgICBmb2N1c2VkOiBzdGF0ZS5pc01lbnVBY3RpdmUsXG4gICAgICAgIGhhc1N0YXRlOiAhIXN0YXRlLnNlYXJjaCxcbiAgICAgICAgZGFyazogcHJvcHMuZGFyayxcbiAgICAgICAgZGlzYWJsZWQ6IHByb3BzLmRpc2FibGVkLFxuICAgICAgICBjbGVhcmFibGU6IHByb3BzLmNsZWFyYWJsZSxcbiAgICAgICAgY29sb3I6IHByb3BzLmNvbG9yLFxuICAgICAgICBydWxlczogcHJvcHMucnVsZXMsXG4gICAgICAgIHZhbHVlOiB2YWx1ZVByb3BlcnR5LnZhbHVlIHx8IHN0YXRlLnNlYXJjaCxcbiAgICAgICAgb25DbGVhcixcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoVklucHV0LCBwcm9wc0RhdGEsIHtcbiAgICAgICAgJ3RleHQtZmllbGQnOiAoKSA9PiBnZW5BdXRvY29tcGxldGUoKSxcbiAgICAgIH0pXG4gICAgfVxuICB9LFxufSlcbiJdfQ==