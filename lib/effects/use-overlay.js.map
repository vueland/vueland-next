{"version":3,"sources":["../../../src/effects/use-overlay.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,KAAvB;AAGA,SAAS,QAAT,QAAyB,eAAzB;AAOA,SAAS,eAAT,QAAgC,WAAhC;AAGA,OAAM,SAAU,YAAV,GAAsB;AAC1B,SAAO;AACL,IAAA,OAAO,EAAE,OADJ;AAEL,IAAA,cAAc,EAAE,CAAC,MAAD,EAAS,MAAT,CAFX;AAGL,IAAA,YAAY,EAAE;AACZ,MAAA,IAAI,EAAE,MADM;AAEZ,MAAA,OAAO,EAAE,MAAK;AACZ,eAAO,OAAP;AACD;AAJW;AAHT,GAAP;AAUD;AAOD,OAAM,SAAU,UAAV,CAAqB,KAArB,EAAmC,SAAnC,EAAqD;AAEzD,QAAM,GAAG,GAAG,QAAZ;AAEA,MAAI,WAAJ;AAEA,EAAA,qBAAqB,CAAC,MAAK;AACzB,IAAA,WAAW,GAAG,CAAC,CAAC,SAAF,IAAe,GAAG,CAAC,aAAJ,CAAkB,IAAK,SAAU,EAAjC,CAA7B;AACD,GAFoB,CAArB;AAIA,QAAM,WAAW,GAAU;AACzB,IAAA,MAAM,EAAE,KADiB;AAEzB,IAAA,IAAI,EAAE,IAFmB;AAGzB,IAAA,KAAK,EAAE,KAAK,CAAC;AAHY,GAA3B;AAMA,QAAM,SAAS,GAAG,GAAG,CAAC,aAAJ,CAAkB,KAAlB,CAAlB;;AAEA,QAAM,YAAY,GAAG,MAAM,QAAQ,CAAC,KAAT,CAAgB,WAAhB,EAA6B,EAA7B,CAA3B;;AAEA,QAAM,aAAa,GAAG,KAAK,IAAI,MAAM,CAAC,KAAD,EAAQ,SAAR,CAArC;;AAEA,EAAA,aAAa,CAAC,YAAY,EAAb,CAAb;AAEA,QAAM,cAAc,GAAG,SAAS,CAAC,UAAjC;;AAEA,WAAS,aAAT,GAAsB;AACpB,IAAA,WAAW,CAAC,UAAZ,CAAuB,YAAvB,CAAoC,cAApC,EAAoD,WAApD;AAEA,IAAA,UAAU,CAAC,MAAK;AACd,MAAA,WAAW,CAAC,MAAZ,GAAqB,IAArB;AACA,MAAA,WAAW,CAAC,IAAZ,GAAmB,CAAC,KAAK,CAAC,OAA1B;AACA,MAAA,aAAa,CAAC,YAAY,EAAb,CAAb;AACD,KAJS,EAIP,EAJO,CAAV;AAKD;;AAED,WAAS,aAAT,GAAsB;AACpB,IAAA,WAAW,CAAC,MAAZ,GAAqB,KAArB;AAEA,IAAA,aAAa,CAAC,YAAY,EAAb,CAAb;;AAEA,aAAS,MAAT,GAAe;AACb,MAAA,WAAW,CAAC,UAAZ,CAAuB,WAAvB,CAAmC,cAAnC;AACD;;AAED,IAAA,eAAe,CAAC,cAAD,EAAkB,eAAlB,EAAmC,MAAnC,CAAf;AACD;;AAED,SAAO;AACL,IAAA,aADK;AAEL,IAAA;AAFK,GAAP;AAID","sourcesContent":["import { render } from 'vue'\n\n// Components\nimport { VOverlay } from '../components'\n\n// Types\nimport { Props } from '../types'\nimport { SetupContext } from 'vue'\n\n// Helpers\nimport { addOnceListener } from '@/helpers'\n\n\nexport function overlayProps(): Props {\n  return {\n    overlay: Boolean,\n    overlayOpacity: [Number, String],\n    overlayColor: {\n      type: String,\n      default: () => {\n        return 'white'\n      },\n    },\n  }\n}\n\ninterface Overlayable {\n  createOverlay: () => void\n  removeOverlay: () => void\n}\n\nexport function useOverlay(props: Props, overlayOn?: string): Overlayable {\n\n  const doc = document\n\n  let overlayable\n\n  requestAnimationFrame(() => {\n    overlayable = !!overlayOn && doc.querySelector(`.${ overlayOn }`)\n  })\n\n  const propsObject: Props = {\n    active: false,\n    hide: true,\n    color: props.overlayColor\n  }\n\n  const container = doc.createElement('div')\n\n  const overlayVNode = () => VOverlay.setup!(propsObject, {} as SetupContext)\n\n  const renderOverlay = vnode => render(vnode, container!)\n\n  renderOverlay(overlayVNode())\n\n  const overlayElement = container.firstChild\n\n  function createOverlay() {\n    overlayable.parentNode.insertBefore(overlayElement, overlayable)\n\n    setTimeout(() => {\n      propsObject.active = true\n      propsObject.hide = !props.overlay\n      renderOverlay(overlayVNode())\n    }, 40)\n  }\n\n  function removeOverlay(): void {\n    propsObject.active = false\n\n    renderOverlay(overlayVNode())\n\n    function remove() {\n      overlayable.parentNode.removeChild(overlayElement)\n    }\n\n    addOnceListener(overlayElement!, 'transitionend', remove)\n  }\n\n  return {\n    createOverlay,\n    removeOverlay,\n  }\n}\n"],"sourceRoot":"","file":"use-overlay.js"}