{"version":3,"sources":["../../../src/effects/use-colors.ts"],"names":[],"mappings":";;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;AAcM,SAAU,UAAV,GAAoB;AACxB,SAAO;AACL,IAAA,KAAK,EAAE;AADF,GAAP;AAGD;;AAEM,IAAM,SAAS,GAAG,SAAZ,SAAY,GAAgB;AACvC,MAAM,aAAa,GAAG,SAAhB,aAAgB,CAAC,KAAD,EAAgB,IAAhB,EAAqC;AACzD,QAAI,CAAC,6BAAW,KAAX,CAAL,EAAwB;AACtB,MAAA,IAAI,SAAJ,CAAW,KAAX,IAAoB,IAApB;AACD,KAFD,MAEO;AACL,MAAA,IAAI,CAAC,KAAL,mCACK,IAAI,CAAC,KADV;AAEE,4BAAoB,KAFtB;AAGE,wBAAgB;AAHlB;AAKD;;AAED,WAAO,IAAP;AACD,GAZD;;AAcA,MAAM,YAAY,GAAG,SAAf,YAAe,CAAC,KAAD,EAA0C;AAAA,QAA1B,IAA0B,uEAAd,EAAc;;AAC7D,QAAI,6BAAW,KAAX,CAAJ,EAAuB;AACrB,MAAA,IAAI,CAAC,KAAL,mCACM,IAAI,CAAC,KADX;AAEE,QAAA,KAAK,YAAK,KAAL,CAFP;AAGE,iCAAkB,KAAlB;AAHF;AAKD,KAND,MAMO,IAAI,KAAJ,EAAW;AAAA,8BACmB,KAAK,CAAC,IAAN,GAAa,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CADnB;AAAA;AAAA,UACT,SADS;AAAA,UACE,aADF;;AAGhB,UAAI,OAAO,IAAI,SAAX,KAAsB,QAA1B,EAAoC;AAClC,QAAA,IAAI,SAAJ,uBACG,IAAI,SADP,EACgB,IADhB;AAGD,OAJD,MAIO;AACL,QAAA,IAAI,SAAJ,qBACK,IAAI,SADT;AAGD;;AAED,MAAA,IAAI,SAAJ,WAAc,SAAd,eAAmC,IAAnC;;AAEA,UAAI,aAAJ,EAAmB;AACjB,QAAA,IAAI,SAAJ,iBAAoB,aAApB,KAAuC,IAAvC;AACD;AACF;;AAED,WAAO,IAAP;AACD,GA5BD;;AA8BA,SAAO;AACL,IAAA,aAAa,EAAb,aADK;AAEL,IAAA,YAAY,EAAZ;AAFK,GAAP;AAID,CAjDM","sourcesContent":["// Utils\nimport { isCssColor } from '../utils/color-parser'\n\n// Types\nimport { PropType } from 'vue'\n\ntype Colorable = {\n  setBackground: (color: string, data: any) => object;\n  setTextColor: (color: string, data: any) => object;\n};\n\ninterface ColorProps {\n  color: PropType<string>\n}\n\nexport function colorProps(): ColorProps {\n  return {\n    color: String,\n  }\n}\n\nexport const useColors = (): Colorable => {\n  const setBackground = (color: string, data: any): object => {\n    if (!isCssColor(color)) {\n      data.class[color] = true\n    } else {\n      data.style = {\n        ...data.style,\n        'background-color': color,\n        'border-color': color,\n      }\n    }\n\n    return data\n  }\n\n  const setTextColor = (color: string, data: any = {}): object => {\n    if (isCssColor(color)) {\n      data.style = {\n        ...(data.style as object),\n        color: `${color}`,\n        'caret-color': `${color}`,\n      }\n    } else if (color) {\n      const [colorName, colorModifier] = color.trim().split(' ', 2)\n\n      if (typeof data.class === 'string') {\n        data.class = {\n          [data.class]: true,\n        }\n      } else {\n        data.class = {\n          ...data.class,\n        }\n      }\n\n      data.class[`${colorName}--text`] = true\n\n      if (colorModifier) {\n        data.class[`text--${colorModifier}`] = true\n      }\n    }\n\n    return data\n  }\n\n  return {\n    setBackground,\n    setTextColor,\n  }\n}\n"],"sourceRoot":"","file":"use-colors.js"}