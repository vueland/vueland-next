import { h, ref, watchEffect, inject, computed, defineComponent } from 'vue';
import { genTableRows } from './helpers';
import { useTransition } from '../../composables/use-transition';
export const VDatePickerYears = defineComponent({
    name: 'v-date-picker-years',
    props: {
        year: [Number, String],
    },
    emits: ['update:year'],
    setup(props, { emit }) {
        const LIMIT = 100;
        const ON_TABLE = 20;
        const CELLS_IN_ROW = 4;
        const CURRENT_YEAR = new Date().getFullYear();
        const ANIMATION_TIMEOUT = 100;
        const years = ref([]);
        const onTableIndex = ref(0);
        const isListChanged = ref(false);
        const transition = ref('');
        const handlers = inject('handlers');
        watchEffect(() => isListChanged.value &&
            setTimeout(() => {
                isListChanged.value = false;
            }, ANIMATION_TIMEOUT));
        const computedYear = computed({
            get() {
                return +props.year || CURRENT_YEAR;
            },
            set(val) {
                emit('update:year', val);
            },
        });
        if (handlers?.value) {
            handlers.value = {
                onNext: () => changeYearsList(true),
                onPrev: () => changeYearsList(false),
            };
        }
        const setCurrentTransition = (isNext) => {
            transition.value = isNext ? 'fade-in-down' : 'fade-in-up';
        };
        const setTableIndex = () => {
            onTableIndex.value = years.value.findIndex((row) => {
                return row.find((year) => year === computedYear.value);
            });
        };
        const changeYearsList = (isNext) => {
            const max = years.value.length - 1;
            const val = isNext ? 1 : -1;
            if ((onTableIndex.value === max && val > 0) ||
                (onTableIndex.value === 0 && val < 0))
                return;
            setCurrentTransition(isNext);
            onTableIndex.value += val;
            isListChanged.value = true;
        };
        const genTableYears = () => {
            const fromYear = CURRENT_YEAR - LIMIT;
            const maxYears = LIMIT * 2;
            let yearsList = [];
            for (let i = 0; i <= maxYears; i += 1) {
                if (yearsList.length === ON_TABLE) {
                    years.value.push(yearsList);
                    yearsList = [];
                }
                yearsList.push(fromYear + i);
            }
        };
        const genYearCell = (year) => {
            const isSelected = year === computedYear.value;
            const propsData = {
                class: {
                    'v-date-picker-years__cell': true,
                    'v-date-picker-years__cell--selected': isSelected,
                    'v-date-picker-years__cell--current-year': year === CURRENT_YEAR,
                },
                onClick: () => (computedYear.value = year),
            };
            return h('div', propsData, year);
        };
        const genYearsRows = () => {
            const currentYears = years.value[onTableIndex.value];
            const yearsVNodes = currentYears.map(genYearCell);
            return genTableRows(yearsVNodes, 'v-date-picker-years__row', CELLS_IN_ROW);
        };
        const genYears = () => {
            const propsData = { class: 'v-date-picker-years__years' };
            return ((!isListChanged.value && h('div', propsData, genYearsRows())) || null);
        };
        genTableYears();
        setTableIndex();
        return () => {
            const content = useTransition(genYears(), transition.value);
            const propsData = { class: { 'v-date-picker-years': true } };
            return h('div', propsData, content);
        };
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkRhdGVQaWNrZXJZZWFycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZEYXRlUGlja2VyL1ZEYXRlUGlja2VyWWVhcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLE1BQU0sS0FBSyxDQUFBO0FBRzVFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFPeEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtDQUFrQyxDQUFBO0FBRWhFLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLGVBQWUsQ0FBQztJQUM5QyxJQUFJLEVBQUUscUJBQXFCO0lBRTNCLEtBQUssRUFBRTtRQUNMLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7S0FDaEI7SUFFUixLQUFLLEVBQUUsQ0FBQyxhQUFhLENBQUM7SUFFdEIsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRTtRQUNuQixNQUFNLEtBQUssR0FBRyxHQUFHLENBQUE7UUFDakIsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFBO1FBQ25CLE1BQU0sWUFBWSxHQUFHLENBQUMsQ0FBQTtRQUN0QixNQUFNLFlBQVksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBQzdDLE1BQU0saUJBQWlCLEdBQUcsR0FBRyxDQUFBO1FBRTdCLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBa0IsRUFBRSxDQUFDLENBQUE7UUFDdEMsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFTLENBQUMsQ0FBQyxDQUFBO1FBQ25DLE1BQU0sYUFBYSxHQUFHLEdBQUcsQ0FBVSxLQUFLLENBQUMsQ0FBQTtRQUN6QyxNQUFNLFVBQVUsR0FBRyxHQUFHLENBQVMsRUFBRSxDQUFDLENBQUE7UUFFbEMs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QUMsQ0FBQTtZQUNwRSxNQUFNLFNBQVMsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxFQUFFLENBQUE7WUFFNUQsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUNyQyxDQUFDLENBQUE7SUFDSCxDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVlVlIEFQSVxuaW1wb3J0IHsgaCwgcmVmLCB3YXRjaEVmZmVjdCwgaW5qZWN0LCBjb21wdXRlZCwgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJ1xuXG4vLyBIZWxwZXJzXG5pbXBvcnQgeyBnZW5UYWJsZVJvd3MgfSBmcm9tICcuL2hlbHBlcnMnXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSwgUmVmIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgRGF0ZVBpY2tlckJ0bkhhbmRsZXJzIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnXG5cbi8vIEVmZmVjdHNcbmltcG9ydCB7IHVzZVRyYW5zaXRpb24gfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy91c2UtdHJhbnNpdGlvbidcblxuZXhwb3J0IGNvbnN0IFZEYXRlUGlja2VyWWVhcnMgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1kYXRlLXBpY2tlci15ZWFycycsXG5cbiAgcHJvcHM6IHtcbiAgICB5ZWFyOiBbTnVtYmVyLCBTdHJpbmddLFxuICB9IGFzIGFueSxcblxuICBlbWl0czogWyd1cGRhdGU6eWVhciddLFxuXG4gIHNldHVwKHByb3BzLCB7IGVtaXQgfSkge1xuICAgIGNvbnN0IExJTUlUID0gMTAwXG4gICAgY29uc3QgT05fVEFCTEUgPSAyMFxuICAgIGNvbnN0IENFTExTX0lOX1JPVyA9IDRcbiAgICBjb25zdCBDVVJSRU5UX1lFQVIgPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKClcbiAgICBjb25zdCBBTklNQVRJT05fVElNRU9VVCA9IDEwMFxuXG4gICAgY29uc3QgeWVhcnMgPSByZWY8QXJyYXk8bnVtYmVyW10+PihbXSlcbiAgICBjb25zdCBvblRhYmxlSW5kZXggPSByZWY8bnVtYmVyPigwKVxuICAgIGNvbnN0IGlzTGlzdENoYW5nZWQgPSByZWY8Ym9vbGVhbj4oZmFsc2UpXG4gICAgY29uc3QgdHJhbnNpdGlvbiA9IHJlZjxzdHJpbmc+KCcnKVxuXG4gICAgY29uc3QgaGFuZGxlcnMgPSBpbmplY3QoJ2hhbmRsZXJzJykgYXMgUmVmPERhdGVQaWNrZXJCdG5IYW5kbGVycz5cblxuICAgIHdhdGNoRWZmZWN0KFxuICAgICAgKCkgPT5cbiAgICAgICAgaXNMaXN0Q2hhbmdlZC52YWx1ZSAmJlxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBpc0xpc3RDaGFuZ2VkLnZhbHVlID0gZmFsc2VcbiAgICAgICAgfSwgQU5JTUFUSU9OX1RJTUVPVVQpXG4gICAgKVxuXG4gICAgY29uc3QgY29tcHV0ZWRZZWFyID0gY29tcHV0ZWQ8bnVtYmVyPih7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiArcHJvcHMueWVhciEgfHwgQ1VSUkVOVF9ZRUFSXG4gICAgICB9LFxuICAgICAgc2V0KHZhbDogbnVtYmVyKSB7XG4gICAgICAgIGVtaXQoJ3VwZGF0ZTp5ZWFyJywgdmFsKVxuICAgICAgfSxcbiAgICB9KVxuXG4gICAgaWYgKGhhbmRsZXJzPy52YWx1ZSkge1xuICAgICAgaGFuZGxlcnMudmFsdWUgPSB7XG4gICAgICAgIG9uTmV4dDogKCkgPT4gY2hhbmdlWWVhcnNMaXN0KHRydWUpLFxuICAgICAgICBvblByZXY6ICgpID0+IGNoYW5nZVllYXJzTGlzdChmYWxzZSksXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc2V0Q3VycmVudFRyYW5zaXRpb24gPSAoaXNOZXh0KSA9PiB7XG4gICAgICB0cmFuc2l0aW9uLnZhbHVlID0gaXNOZXh0ID8gJ2ZhZGUtaW4tZG93bicgOiAnZmFkZS1pbi11cCdcbiAgICB9XG5cbiAgICBjb25zdCBzZXRUYWJsZUluZGV4ID0gKCkgPT4ge1xuICAgICAgb25UYWJsZUluZGV4LnZhbHVlID0geWVhcnMudmFsdWUuZmluZEluZGV4KChyb3cpID0+IHtcbiAgICAgICAgcmV0dXJuIHJvdy5maW5kKCh5ZWFyKSA9PiB5ZWFyID09PSBjb21wdXRlZFllYXIudmFsdWUpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGNoYW5nZVllYXJzTGlzdCA9IChpc05leHQpID0+IHtcbiAgICAgIGNvbnN0IG1heCA9IHllYXJzLnZhbHVlLmxlbmd0aCAtIDFcbiAgICAgIGNvbnN0IHZhbCA9IGlzTmV4dCA/IDEgOiAtMVxuXG4gICAgICBpZiAoXG4gICAgICAgIChvblRhYmxlSW5kZXgudmFsdWUgPT09IG1heCAmJiB2YWwgPiAwKSB8fFxuICAgICAgICAob25UYWJsZUluZGV4LnZhbHVlID09PSAwICYmIHZhbCA8IDApXG4gICAgICApXG4gICAgICAgIHJldHVyblxuXG4gICAgICBzZXRDdXJyZW50VHJhbnNpdGlvbihpc05leHQpXG5cbiAgICAgIG9uVGFibGVJbmRleC52YWx1ZSArPSB2YWxcbiAgICAgIGlzTGlzdENoYW5nZWQudmFsdWUgPSB0cnVlXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuVGFibGVZZWFycyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGZyb21ZZWFyID0gQ1VSUkVOVF9ZRUFSIC0gTElNSVRcbiAgICAgIGNvbnN0IG1heFllYXJzID0gTElNSVQgKiAyXG5cbiAgICAgIGxldCB5ZWFyc0xpc3Q6IG51bWJlcltdID0gW11cblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbWF4WWVhcnM7IGkgKz0gMSkge1xuICAgICAgICBpZiAoeWVhcnNMaXN0Lmxlbmd0aCA9PT0gT05fVEFCTEUpIHtcbiAgICAgICAgICB5ZWFycy52YWx1ZS5wdXNoKHllYXJzTGlzdClcbiAgICAgICAgICB5ZWFyc0xpc3QgPSBbXVxuICAgICAgICB9XG4gICAgICAgIHllYXJzTGlzdC5wdXNoKGZyb21ZZWFyICsgaSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBnZW5ZZWFyQ2VsbCA9ICh5ZWFyKTogVk5vZGUgPT4ge1xuICAgICAgY29uc3QgaXNTZWxlY3RlZCA9IHllYXIgPT09IGNvbXB1dGVkWWVhci52YWx1ZVxuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LWRhdGUtcGlja2VyLXllYXJzX19jZWxsJzogdHJ1ZSxcbiAgICAgICAgICAndi1kYXRlLXBpY2tlci15ZWFyc19fY2VsbC0tc2VsZWN0ZWQnOiBpc1NlbGVjdGVkLFxuICAgICAgICAgICd2LWRhdGUtcGlja2VyLXllYXJzX19jZWxsLS1jdXJyZW50LXllYXInOiB5ZWFyID09PSBDVVJSRU5UX1lFQVIsXG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IChjb21wdXRlZFllYXIudmFsdWUgPSB5ZWFyKSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgeWVhcilcbiAgICB9XG5cbiAgICBjb25zdCBnZW5ZZWFyc1Jvd3MgPSAoKTogVk5vZGVbXSA9PiB7XG4gICAgICBjb25zdCBjdXJyZW50WWVhcnMgPSB5ZWFycy52YWx1ZVtvblRhYmxlSW5kZXgudmFsdWVdXG4gICAgICBjb25zdCB5ZWFyc1ZOb2RlcyA9IGN1cnJlbnRZZWFycy5tYXAoZ2VuWWVhckNlbGwpXG5cbiAgICAgIHJldHVybiBnZW5UYWJsZVJvd3MoeWVhcnNWTm9kZXMsICd2LWRhdGUtcGlja2VyLXllYXJzX19yb3cnLCBDRUxMU19JTl9ST1cpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuWWVhcnMgPSAoKTogVk5vZGUgfCBudWxsID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHsgY2xhc3M6ICd2LWRhdGUtcGlja2VyLXllYXJzX195ZWFycycgfVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKCFpc0xpc3RDaGFuZ2VkLnZhbHVlICYmIGgoJ2RpdicsIHByb3BzRGF0YSwgZ2VuWWVhcnNSb3dzKCkpKSB8fCBudWxsXG4gICAgICApXG4gICAgfVxuXG4gICAgZ2VuVGFibGVZZWFycygpXG4gICAgc2V0VGFibGVJbmRleCgpXG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgY29udGVudCA9IHVzZVRyYW5zaXRpb24oZ2VuWWVhcnMoKSBhcyBWTm9kZSwgdHJhbnNpdGlvbi52YWx1ZSlcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHsgY2xhc3M6IHsgJ3YtZGF0ZS1waWNrZXIteWVhcnMnOiB0cnVlIH0gfVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBjb250ZW50KVxuICAgIH1cbiAgfSxcbn0pXG4iXX0=