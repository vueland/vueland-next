!function(Q,F){"object"==typeof exports&&"object"==typeof module?module.exports=F(require("vue")):"function"==typeof define&&define.amd?define("vueland",["vue"],F):"object"==typeof exports?exports.vueland=F(require("vue")):Q.vueland=F(Q.Vue)}("undefined"!=typeof self?self:this,(function(__WEBPACK_EXTERNAL_MODULE__895__){return function(){"use strict";var __webpack_modules__={433:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"VApp\": function() { return /* reexport */ VApp; },\n  \"VAutocomplete\": function() { return /* reexport */ VAutocomplete; },\n  \"VBadge\": function() { return /* reexport */ VBadge; },\n  \"VButton\": function() { return /* reexport */ VButton_VButton; },\n  \"VCard\": function() { return /* reexport */ VCard; },\n  \"VCardActions\": function() { return /* reexport */ VCardActions; },\n  \"VCardContent\": function() { return /* reexport */ VCardContent; },\n  \"VCardSubtitle\": function() { return /* reexport */ VCardSubtitle; },\n  \"VCardTitle\": function() { return /* reexport */ VCardTitle; },\n  \"VCheckbox\": function() { return /* reexport */ VCheckbox; },\n  \"VChip\": function() { return /* reexport */ VChip; },\n  \"VCol\": function() { return /* reexport */ VCol; },\n  \"VDataTable\": function() { return /* reexport */ VDataTable; },\n  \"VDatePicker\": function() { return /* reexport */ VDatePicker; },\n  \"VFileInput\": function() { return /* reexport */ VFileInput; },\n  \"VForm\": function() { return /* reexport */ VForm; },\n  \"VGroup\": function() { return /* reexport */ VGroup; },\n  \"VIcon\": function() { return /* reexport */ VIcon; },\n  \"VInput\": function() { return /* reexport */ VInput; },\n  \"VLabel\": function() { return /* reexport */ VLabel; },\n  \"VLayout\": function() { return /* reexport */ VLayout; },\n  \"VList\": function() { return /* reexport */ VList; },\n  \"VListItem\": function() { return /* reexport */ VListItem; },\n  \"VListItemContent\": function() { return /* reexport */ VListItemContent; },\n  \"VListItemIcon\": function() { return /* reexport */ VListItemIcon; },\n  \"VListItemSubtitle\": function() { return /* reexport */ VListItemSubtitle; },\n  \"VListItemTitle\": function() { return /* reexport */ VListItemTitle; },\n  \"VMain\": function() { return /* reexport */ VMain; },\n  \"VMenu\": function() { return /* reexport */ VMenu; },\n  \"VModal\": function() { return /* reexport */ VModal; },\n  \"VNavigation\": function() { return /* reexport */ VNavigation; },\n  \"VOverlay\": function() { return /* reexport */ VOverlay; },\n  \"VProgressCircular\": function() { return /* reexport */ VProgressCircular; },\n  \"VProgressLinear\": function() { return /* reexport */ VProgressLinear; },\n  \"VResize\": function() { return /* reexport */ VResize; },\n  \"VRow\": function() { return /* reexport */ VRow; },\n  \"VSelect\": function() { return /* reexport */ VSelect; },\n  \"VSelectList\": function() { return /* reexport */ VSelectList; },\n  \"VSkeleton\": function() { return /* reexport */ VSkeleton; },\n  \"VSpacer\": function() { return /* reexport */ VSpacer; },\n  \"VTextField\": function() { return /* reexport */ VTextField; },\n  \"VTextarea\": function() { return /* reexport */ VTextarea; },\n  \"VToolbar\": function() { return /* reexport */ VToolbar; },\n  \"VToolbarContent\": function() { return /* reexport */ VToolbarContent; },\n  \"VToolbarItems\": function() { return /* reexport */ VToolbarItems; },\n  \"VToolbarLogo\": function() { return /* reexport */ VToolbarLogo; },\n  \"VToolbarNavBtn\": function() { return /* reexport */ VToolbarNavBtn; },\n  \"VTooltip\": function() { return /* reexport */ VTooltip; },\n  \"Vueland\": function() { return /* reexport */ Vueland; },\n  \"default\": function() { return /* binding */ src; }\n});\n\n// NAMESPACE OBJECT: ./src/components/index.ts\nvar components_namespaceObject = {};\n__webpack_require__.r(components_namespaceObject);\n__webpack_require__.d(components_namespaceObject, {\n  \"VApp\": function() { return VApp; },\n  \"VAutocomplete\": function() { return VAutocomplete; },\n  \"VBadge\": function() { return VBadge; },\n  \"VButton\": function() { return VButton_VButton; },\n  \"VCard\": function() { return VCard; },\n  \"VCardActions\": function() { return VCardActions; },\n  \"VCardContent\": function() { return VCardContent; },\n  \"VCardSubtitle\": function() { return VCardSubtitle; },\n  \"VCardTitle\": function() { return VCardTitle; },\n  \"VCheckbox\": function() { return VCheckbox; },\n  \"VChip\": function() { return VChip; },\n  \"VCol\": function() { return VCol; },\n  \"VDataTable\": function() { return VDataTable; },\n  \"VDatePicker\": function() { return VDatePicker; },\n  \"VFileInput\": function() { return VFileInput; },\n  \"VForm\": function() { return VForm; },\n  \"VGroup\": function() { return VGroup; },\n  \"VIcon\": function() { return VIcon; },\n  \"VInput\": function() { return VInput; },\n  \"VLabel\": function() { return VLabel; },\n  \"VLayout\": function() { return VLayout; },\n  \"VList\": function() { return VList; },\n  \"VListItem\": function() { return VListItem; },\n  \"VListItemContent\": function() { return VListItemContent; },\n  \"VListItemIcon\": function() { return VListItemIcon; },\n  \"VListItemSubtitle\": function() { return VListItemSubtitle; },\n  \"VListItemTitle\": function() { return VListItemTitle; },\n  \"VMain\": function() { return VMain; },\n  \"VMenu\": function() { return VMenu; },\n  \"VModal\": function() { return VModal; },\n  \"VNavigation\": function() { return VNavigation; },\n  \"VOverlay\": function() { return VOverlay; },\n  \"VProgressCircular\": function() { return VProgressCircular; },\n  \"VProgressLinear\": function() { return VProgressLinear; },\n  \"VResize\": function() { return VResize; },\n  \"VRow\": function() { return VRow; },\n  \"VSelect\": function() { return VSelect; },\n  \"VSelectList\": function() { return VSelectList; },\n  \"VSkeleton\": function() { return VSkeleton; },\n  \"VSpacer\": function() { return VSpacer; },\n  \"VTextField\": function() { return VTextField; },\n  \"VTextarea\": function() { return VTextarea; },\n  \"VToolbar\": function() { return VToolbar; },\n  \"VToolbarContent\": function() { return VToolbarContent; },\n  \"VToolbarItems\": function() { return VToolbarItems; },\n  \"VToolbarLogo\": function() { return VToolbarLogo; },\n  \"VToolbarNavBtn\": function() { return VToolbarNavBtn; },\n  \"VTooltip\": function() { return VTooltip; }\n});\n\n// NAMESPACE OBJECT: ./src/directives/index.ts\nvar directives_namespaceObject = {};\n__webpack_require__.r(directives_namespaceObject);\n__webpack_require__.d(directives_namespaceObject, {\n  \"clickOutside\": function() { return clickOutside; },\n  \"resize\": function() { return resize; }\n});\n\n// EXTERNAL MODULE: external {\"root\":\"Vue\",\"commonjs\":\"vue\",\"commonjs2\":\"vue\",\"amd\":\"vue\"}\nvar external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_ = __webpack_require__(895);\n;// CONCATENATED MODULE: ./src/directives/v-resize/index.ts\nvar resize = {\n  mounted: function mounted(el, binding) {\n    var callback = binding.value;\n    var options = binding.options || {\n      passive: true\n    };\n    window.addEventListener('resize', callback, options);\n    el._onResize = {\n      callback: callback,\n      options: options\n    };\n\n    if (!binding.modifiers || !binding.modifiers.quiet) {\n      callback();\n    }\n  },\n  beforeUnmount: function beforeUnmount(el) {\n    if (!el._onResize) return;\n    var _el$_onResize = el._onResize,\n        callback = _el$_onResize.callback,\n        options = _el$_onResize.options;\n    window.removeEventListener('resize', callback, options);\n    delete el._onResize;\n  }\n};\n;// CONCATENATED MODULE: ./src/services/breakpoints.ts\nvar breakpoints = {\n  sm: 576,\n  md: 768,\n  lg: 992,\n  xl: 1200\n};\n;// CONCATENATED MODULE: ./src/utils/thottle.ts\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar throttle = function throttle(fn, timeout) {\n  var lastThis = null;\n  var lastArgs = null;\n  var isThrottled = false;\n\n  function wrapper() {\n    if (isThrottled) {\n      lastThis = this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      lastArgs = args;\n      return;\n    }\n\n    lastArgs && fn.call.apply(fn, [lastThis].concat(_toConsumableArray(lastArgs)));\n    isThrottled = true;\n    setTimeout(function () {\n      isThrottled = false;\n\n      if (lastArgs) {\n        wrapper.apply(lastThis, lastArgs);\n      }\n\n      lastThis = null;\n      lastArgs = null;\n    }, timeout);\n  }\n\n  return wrapper;\n};\n;// CONCATENATED MODULE: ./src/components/VApp/VApp.ts\n\n\n\n\nvar VApp = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-app',\n  directives: {\n    resize: resize\n  },\n  props: {\n    global: {\n      type: Object,\n      \"default\": null\n    }\n  },\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var THROTTLING_TIMEOUT = 60;\n    var state = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({\n      current: null,\n      xlAndLess: false,\n      lgAndLess: false,\n      mdAndLess: false,\n      smAndLess: false\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.provide)('breakpoints', state);\n\n    var setCurrentBreakpointName = function setCurrentBreakpointName(screen) {\n      if (screen >= breakpoints.xl) {\n        return state.current = 'xl';\n      }\n\n      if (screen >= breakpoints.lg && screen < breakpoints.xl) {\n        return state.current = 'lg';\n      }\n\n      if (screen >= breakpoints.md && screen < breakpoints.lg) {\n        return state.current = 'md';\n      }\n\n      if (screen >= breakpoints.sm && screen < breakpoints.md) {\n        return state.current = 'sm';\n      }\n\n      return null;\n    };\n\n    var setIntervals = function setIntervals(screen) {\n      var xl = breakpoints.xl,\n          lg = breakpoints.lg,\n          md = breakpoints.md,\n          sm = breakpoints.sm;\n      state.xlAndLess = screen <= xl && screen > lg;\n      state.lgAndLess = screen <= lg && screen > md;\n      state.mdAndLess = screen <= md && screen > sm;\n      state.smAndLess = screen <= sm;\n    };\n\n    var setSizes = function setSizes() {\n      var _a;\n\n      var screen = ((_a = props.global) === null || _a === void 0 ? void 0 : _a.innerWidth) || window.innerWidth;\n      setCurrentBreakpointName(screen);\n      setIntervals(screen);\n    };\n\n    var throttledResizeListener = throttle(setSizes, THROTTLING_TIMEOUT);\n\n    var genAppWrapper = function genAppWrapper() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-app--wrapper'\n      }, {\n        \"default\": function _default() {\n          return slots[\"default\"] && slots[\"default\"]();\n        }\n      });\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onMounted)(function () {\n      setSizes();\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.withDirectives)((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-app'\n      }, genAppWrapper()), [[resize, throttledResizeListener]]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VApp/index.ts\n\n;// CONCATENATED MODULE: ./src/utils/color-parser.ts\nfunction isCssColor(color) {\n  return !!color.match(/^(#|var\\(--|(rgb|hsl)a?\\()/);\n}\n;// CONCATENATED MODULE: ./src/composable/use-colors.ts\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || use_colors_unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction use_colors_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return use_colors_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return use_colors_arrayLikeToArray(o, minLen); }\n\nfunction use_colors_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\nvar colorProps = function colorProps() {\n  var defaultColor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return {\n    color: {\n      type: String,\n      \"default\": defaultColor\n    }\n  };\n};\nvar useColors = function useColors() {\n  var setTextClassNameColor = function setTextClassNameColor(color) {\n    var classes = {};\n\n    if (!isCssColor(color)) {\n      var _color$trim$split = color.trim().split(' ', 2),\n          _color$trim$split2 = _slicedToArray(_color$trim$split, 2),\n          colorName = _color$trim$split2[0],\n          colorModifier = _color$trim$split2[1];\n\n      colorName && (classes[\"\".concat(colorName, \"--text\")] = true);\n      colorModifier && (classes[\"text--\".concat(colorModifier)] = true);\n    }\n\n    return classes;\n  };\n\n  var setTextCssColor = function setTextCssColor(color) {\n    var styles = {};\n\n    if (isCssColor(color)) {\n      styles.color = color;\n    }\n\n    return styles;\n  };\n\n  var setBackgroundCssColor = function setBackgroundCssColor(color) {\n    var styles = {};\n\n    if (isCssColor(color)) {\n      styles['background-color'] = color;\n      styles['border-color'] = color;\n    }\n\n    return styles;\n  };\n\n  var setBackgroundClassNameColor = function setBackgroundClassNameColor(color) {\n    var classes = {};\n\n    if (!isCssColor(color)) {\n      var _color$trim$split3 = color.trim().split(' ', 2),\n          _color$trim$split4 = _slicedToArray(_color$trim$split3, 2),\n          colorName = _color$trim$split4[0],\n          colorModifier = _color$trim$split4[1];\n\n      colorName && (classes[colorName] = true);\n      colorModifier && (classes[colorModifier] = true);\n    }\n\n    return classes;\n  };\n\n  return {\n    setTextCssColor: setTextCssColor,\n    setTextClassNameColor: setTextClassNameColor,\n    setBackgroundCssColor: setBackgroundCssColor,\n    setBackgroundClassNameColor: setBackgroundClassNameColor\n  };\n};\n;// CONCATENATED MODULE: ./src/composable/use-elevation.ts\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nfunction elevationProps() {\n  return {\n    elevation: [String, Number]\n  };\n}\nfunction useElevation(props) {\n  var elevationClasses = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n    return _defineProperty({}, \"elevation-\".concat(props.elevation), !!props.elevation);\n  });\n  return {\n    elevationClasses: elevationClasses\n  };\n}\n;// CONCATENATED MODULE: ./src/composable/use-position.ts\n\nvar positionProps = function positionProps() {\n  return {\n    absolute: Boolean,\n    left: Boolean,\n    right: Boolean,\n    top: Boolean,\n    bottom: Boolean\n  };\n};\nvar usePosition = function usePosition(props) {\n  var positionClasses = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n    return {\n      'position--absolute': props.absolute,\n      'to--left': props.left,\n      'to--right': props.right,\n      'to--top': props.top,\n      'to--bottom': props.bottom\n    };\n  });\n  return {\n    positionClasses: positionClasses\n  };\n};\n;// CONCATENATED MODULE: ./src/helpers/index.ts\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { helpers_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction helpers_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nvar createSimpleFunctional = function createSimpleFunctional(c) {\n  var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'div';\n  var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n    name: name || c.replace(/__/g, '-'),\n    setup: function setup(_, _ref) {\n      var slots = _ref.slots;\n      var propsData = {\n        \"class\": helpers_defineProperty({}, c.trim(), true)\n      };\n      return function () {\n        return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(el, propsData, slots[\"default\"] && slots[\"default\"]());\n      };\n    }\n  });\n};\nvar addOnceListener = function addOnceListener(el, eventName, cb) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  var once = function once(event) {\n    cb(event);\n    el.removeEventListener(eventName, once, options);\n  };\n\n  el.addEventListener(eventName, once, options);\n};\nvar convertToUnit = function convertToUnit(str) {\n  var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'px';\n\n  if (isNaN(+str)) {\n    return String(str);\n  } else {\n    return \"\".concat(Number(str)).concat(unit);\n  }\n};\nvar warning = function warning(warningText) {\n  console.warn(warningText);\n};\nvar copyWithoutLink = function copyWithoutLink(obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\nvar addScopedSlot = function addScopedSlot(slotName, slots) {\n  return function (scoped) {\n    var arg = _objectSpread({}, scoped);\n\n    return slots[slotName] && slots[slotName](arg);\n  };\n};\nvar getKeyValueFromTarget = function getKeyValueFromTarget(valueKey, target) {\n  return valueKey.split('.').reduce(function (acc, it) {\n    return acc[it];\n  }, target);\n};\nvar mapToValArray = function mapToValArray(map) {\n  return Array.from(map.values());\n};\nvar getStringKeysValue = function getStringKeysValue(str, value) {\n  return str.split('.').reduce(function (acc, it) {\n    return acc[it];\n  }, value);\n};\nvar toCamelCase = function toCamelCase() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return args.reduce(function (res, s, i) {\n    if (i === 0) res += s;else res += s[0].toUpperCase() + s.slice(1);\n    return res;\n  }, '');\n};\n;// CONCATENATED MODULE: ./src/components/VProgressCircular/VProgressCircular.ts\nfunction VProgressCircular_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VProgressCircular_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VProgressCircular_ownKeys(Object(source), !0).forEach(function (key) { VProgressCircular_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VProgressCircular_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VProgressCircular_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar VProgressCircular = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-progress-circular',\n  props: VProgressCircular_objectSpread({\n    indeterminate: Boolean,\n    size: {\n      type: [Number, String],\n      \"default\": 32\n    },\n    width: {\n      type: [Number, String],\n      \"default\": 4\n    },\n    value: {\n      type: [Number, String],\n      \"default\": 0\n    },\n    rotate: {\n      type: [Number, String],\n      \"default\": 0\n    }\n  }, colorProps()),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var radius = 20;\n\n    var _useColors = useColors(),\n        setTextClassNameColor = _useColors.setTextClassNameColor,\n        setTextCssColor = _useColors.setTextCssColor;\n\n    var normalizedValue = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      if (props.value < 0) return 0;\n      if (props.value > 100) return 100;\n      return parseFloat(props.value);\n    });\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VProgressCircular_objectSpread({\n        'v-progress-circular': true,\n        'v-progress-circular--indeterminate': props.indeterminate\n      }, props.color ? setTextClassNameColor(props.color) : {});\n    });\n    var circumference = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return 2 * Math.PI * radius;\n    });\n    var strokeDashArray = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return Math.round(circumference.value * 1000) / 1000;\n    });\n    var strokeDashOffset = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return (100 - normalizedValue.value) / 100 * circumference.value + 'px';\n    });\n    var viewBoxSize = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return radius / (1 - Number(props.width) / +props.size);\n    });\n    var strokeWidth = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return Number(props.width) / +props.size * viewBoxSize.value * 2;\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VProgressCircular_objectSpread({\n        width: convertToUnit(props.size),\n        height: convertToUnit(props.size)\n      }, props.color ? setTextCssColor(props.color) : {});\n    });\n    var svgStyle = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        transform: \"rotate(\".concat(+props.rotate, \"deg)\")\n      };\n    });\n\n    function genCircle(name, offset) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('circle', {\n        \"class\": \"v-progress-circular__\".concat(name),\n        fill: 'transparent',\n        cx: 2 * viewBoxSize.value,\n        cy: 2 * viewBoxSize.value,\n        r: radius,\n        'stroke-width': strokeWidth.value,\n        'stroke-dasharray': strokeDashArray.value,\n        'stroke-dashoffset': offset\n      });\n    }\n\n    var genSvg = function genSvg() {\n      var children = [props.indeterminate || genCircle('underlay', 0), genCircle('overlay', strokeDashOffset.value)];\n      var propsData = {\n        xmlns: 'http://www.w3.org/2000/svg',\n        viewBox: \"\".concat(viewBoxSize.value, \" \").concat(viewBoxSize.value, \" \").concat(2 * viewBoxSize.value, \" \").concat(2 * viewBoxSize.value),\n        style: svgStyle.value\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('svg', propsData, children);\n    };\n\n    var genInfo = function genInfo() {\n      var propsData = {\n        \"class\": 'v-progress-circular__info'\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, slots[\"default\"] && slots[\"default\"]());\n    };\n\n    return function () {\n      var propsData = {\n        \"class\": classes.value,\n        style: styles.value\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [genSvg(), genInfo()]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VButton/VButton.ts\nfunction VButton_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VButton_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VButton_ownKeys(Object(source), !0).forEach(function (key) { VButton_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VButton_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VButton_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\nvar VButton_VButton = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-button',\n  props: VButton_objectSpread({\n    disabled: Boolean,\n    outlined: Boolean,\n    rounded: Boolean,\n    round: Boolean,\n    absolute: Boolean,\n    loading: Boolean,\n    left: Boolean,\n    right: Boolean,\n    text: Boolean,\n    dark: Boolean,\n    label: String,\n    width: [String, Number],\n    color: {\n      type: String,\n      \"default\": 'grey lighten-1'\n    }\n  }, elevationProps()),\n  emits: ['click'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n\n    var _useColors = useColors(),\n        setTextClassNameColor = _useColors.setTextClassNameColor,\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor,\n        setTextCssColor = _useColors.setTextCssColor;\n\n    var _useElevation = useElevation(props),\n        elevationClasses = _useElevation.elevationClasses;\n\n    var _usePosition = usePosition(props),\n        positionClasses = _usePosition.positionClasses;\n\n    var isFlat = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.text || props.outlined;\n    });\n    var isLoadable = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return !props.text && !props.outlined && props.loading;\n    });\n    var isElevetable = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return !isLoadable.value && !props.disabled;\n    });\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var elevations = isElevetable.value ? elevationClasses.value : {};\n      return VButton_objectSpread(VButton_objectSpread(VButton_objectSpread(VButton_objectSpread({\n        'v-button': true,\n        'v-button--text': props.text || props.outlined,\n        'v-button--outlined': props.outlined,\n        'v-button--rounded': !props.round && props.rounded,\n        'v-button--round': props.round,\n        'v-button--disabled': props.disabled || isLoadable.value,\n        'v-button--loading': props.loading\n      }, elevations), positionClasses.value), props.color && isFlat.value ? setTextClassNameColor(props.color) : {}), props.color && !isFlat.value ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var width = props.width || 40;\n      return VButton_objectSpread(VButton_objectSpread({\n        width: (props.width || props.round) && convertToUnit(width),\n        height: props.round && convertToUnit(width)\n      }, props.color && isFlat.value ? setTextCssColor(props.color) : {}), props.color && !isFlat.value ? setBackgroundCssColor(props.color) : {});\n    });\n\n    var genLoader = function genLoader() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', {\n        \"class\": 'v-button__loader'\n      }, slots.loading && slots.loading() || (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VProgressCircular, {\n        indeterminate: true,\n        size: 23,\n        width: 2\n      }));\n    };\n\n    var genLabel = function genLabel() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', {\n        \"class\": 'v-button__label'\n      }, props.label);\n    };\n\n    var genContent = function genContent() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-button__content'\n      }, [slots[\"default\"] && slots[\"default\"]() || props.label && genLabel()]);\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('button', {\n        \"class\": classes.value,\n        style: styles.value,\n        onClick: function onClick() {\n          return !props.disabled && emit('click');\n        }\n      }, [genContent(), props.loading && genLoader()]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VButton/index.ts\n\n\n/* harmony default export */ var components_VButton = ((/* unused pure expression or super */ null && (VButton)));\n;// CONCATENATED MODULE: ./src/components/VCard/VCard.ts\nfunction VCard_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VCard_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VCard_ownKeys(Object(source), !0).forEach(function (key) { VCard_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VCard_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VCard_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar VCard = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-card',\n  props: VCard_objectSpread(VCard_objectSpread({\n    width: {\n      type: [String, Number],\n      \"default\": 350\n    }\n  }, colorProps()), elevationProps()),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var _useElevation = useElevation(props),\n        elevationClasses = _useElevation.elevationClasses;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VCard_objectSpread(VCard_objectSpread({\n        'v-card': true\n      }, elevationClasses.value), props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VCard_objectSpread({\n        width: \"\".concat(props.width, \"px\")\n      }, props.color ? setBackgroundCssColor(props.color) : {});\n    });\n\n    function genCard() {\n      var propsData = {\n        \"class\": classes.value,\n        style: styles.value\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, slots[\"default\"] && slots[\"default\"]());\n    }\n\n    return function () {\n      return genCard();\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VCard/index.ts\n\n\nvar VCardTitle = createSimpleFunctional('v-card__title');\nvar VCardSubtitle = createSimpleFunctional('v-card__subtitle');\nvar VCardContent = createSimpleFunctional('v-card__content');\nvar VCardActions = createSimpleFunctional('v-card__actions');\n;// CONCATENATED MODULE: ./src/components/VGrid/VRow.ts\nfunction VRow_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VRow_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VRow_ownKeys(Object(source), !0).forEach(function (key) { VRow_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VRow_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VRow_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar VRow_breakpoints = ['sm', 'md', 'lg', 'xl'];\nvar positions = ['start', 'center', 'end'];\nvar VRow = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-row',\n  props: VRow_objectSpread({\n    align: {\n      type: String,\n      \"default\": null,\n      validator: function validator(str) {\n        return [].concat(positions, ['baseline', 'stretch']).includes(str);\n      }\n    },\n    alignContent: {\n      type: String,\n      \"default\": null,\n      validator: function validator(str) {\n        return [].concat(positions, ['space-between', 'space-around', 'stretch']).includes(str);\n      }\n    },\n    justify: {\n      type: String,\n      \"default\": null,\n      validator: function validator(str) {\n        return [].concat(positions, ['space-between', 'space-around']).includes(str);\n      }\n    },\n    noGutter: Boolean\n  }, VRow_breakpoints.reduce(function (props, bp) {\n    props[\"justify-\".concat(bp)] = {\n      type: String,\n      \"default\": null,\n      validator: function validator(str) {\n        return [].concat(positions, ['space-between', 'space-around']).includes(str);\n      }\n    };\n    props[\"align-\".concat(bp)] = {\n      type: String,\n      \"default\": null,\n      validator: function validator(str) {\n        return [].concat(positions, ['baseline', 'stretch']).includes(str);\n      }\n    };\n    props[\"align-content-\".concat(bp)] = {\n      type: String,\n      \"default\": null,\n      validator: function validator(str) {\n        return [].concat(positions, ['space-between', 'space-around', 'stretch']).includes(str);\n      }\n    };\n    return props;\n  }, {})),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _objectSpread2;\n\n      return VRow_objectSpread((_objectSpread2 = {\n        'v-row': true,\n        'no-gutter': props.noGutter\n      }, VRow_defineProperty(_objectSpread2, \"justify-\".concat(props.justify), !!props.justify), VRow_defineProperty(_objectSpread2, \"align-\".concat(props.align), !!props.align), VRow_defineProperty(_objectSpread2, \"align-content-\".concat(props.alignContent), !!props.alignContent), _objectSpread2), VRow_breakpoints.reduce(function (cls, bp) {\n        ;\n        [].concat(positions, ['space-between', 'space-around']).forEach(function (pos) {\n          cls[\"justify-\".concat(bp, \"-\").concat(pos)] = pos === props[toCamelCase('justify', bp)];\n        });\n        [].concat(positions, ['baseline', 'stretch']).forEach(function (pos) {\n          cls[\"align-\".concat(bp, \"-\").concat(pos)] = pos === props[toCamelCase('align', bp)];\n        });\n        [].concat(positions, ['space-between', 'space-around', 'stretch']).forEach(function (pos) {\n          cls[\"align-content-\".concat(bp, \"-\").concat(pos)] = pos === props[toCamelCase('align', 'content', bp)];\n        });\n        return cls;\n      }, {}));\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value\n      }, {\n        \"default\": function _default() {\n          return slots[\"default\"] && slots[\"default\"]();\n        }\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VGrid/VCol.ts\nfunction VCol_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VCol_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VCol_ownKeys(Object(source), !0).forEach(function (key) { VCol_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VCol_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VCol_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar VCol_breakpoints = ['sm', 'md', 'lg', 'xl'];\nvar colProps = VCol_breakpoints.reduce(function (props, p) {\n  props[p] = {\n    type: [String, Number],\n    \"default\": null\n  };\n  return props;\n}, {});\nvar orderProps = VCol_breakpoints.reduce(function (props, p) {\n  props[\"order-\".concat(p)] = {\n    type: [String, Number],\n    \"default\": null\n  };\n  return props;\n}, {});\nvar offsetProps = VCol_breakpoints.reduce(function (props, p) {\n  props[\"offset-\".concat(p)] = {\n    type: [String, Number],\n    \"default\": null\n  };\n  return props;\n}, {});\nvar VCol = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-col',\n  props: VCol_objectSpread(VCol_objectSpread(VCol_objectSpread({\n    order: {\n      type: [String, Number],\n      \"default\": null\n    },\n    cols: {\n      type: [String, Number],\n      \"default\": null\n    },\n    offset: {\n      type: [String, Number],\n      \"default\": null\n    }\n  }, colProps), orderProps), offsetProps),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VCol_objectSpread(VCol_objectSpread(VCol_objectSpread(VCol_defineProperty({\n        'v-col': true\n      }, \"v-col-\".concat(props.cols), !!props.cols), VCol_breakpoints.reduce(function (cols, p) {\n        cols[\"\".concat(p, \"-\").concat(props[p])] = !!props[p];\n        return cols;\n      }, {})), {}, VCol_defineProperty({}, \"order-\".concat(props.order), props.order !== null), VCol_breakpoints.reduce(function (orders, p) {\n        var propValue = props[toCamelCase('order', p)];\n        orders[\"order-\".concat(p, \"-\").concat(propValue)] = !!propValue;\n        return orders;\n      }, {})), {}, VCol_defineProperty({}, \"offset-\".concat(props.offset), props.offset !== null), VCol_breakpoints.reduce(function (offsets, p) {\n        var propValue = props[toCamelCase('offset', p)];\n        offsets[\"offset-\".concat(p, \"-\").concat(propValue)] = !!propValue;\n        return offsets;\n      }, {}));\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value\n      }, {\n        \"default\": function _default() {\n          return slots[\"default\"] && slots[\"default\"]();\n        }\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VGrid/VLayout.ts\n\nvar VLayout = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-layout',\n  props: {\n    column: Boolean,\n    wrap: Boolean\n  },\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        'v-layout': true,\n        'flex-column': props.column,\n        'flex-wrap': props.wrap\n      };\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value\n      }, {\n        \"default\": function _default() {\n          return slots[\"default\"] && slots[\"default\"]();\n        }\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VGrid/index.ts\n\n\n\n\nvar VSpacer = createSimpleFunctional('v-spacer');\n;// CONCATENATED MODULE: ./src/components/VOverlay/VOverlay.ts\nfunction VOverlay_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VOverlay_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VOverlay_ownKeys(Object(source), !0).forEach(function (key) { VOverlay_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VOverlay_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VOverlay_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar VOverlay = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-overlay',\n  props: {\n    hide: Boolean,\n    active: Boolean,\n    color: String,\n    fixed: Boolean\n  },\n  setup: function setup(props) {\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VOverlay_objectSpread({\n        'v-overlay': true,\n        'v-overlay--hidden': props.hide,\n        'v-overlay--active': props.active\n      }, props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VOverlay_objectSpread({}, props.color ? setBackgroundCssColor(props.color) : {});\n    });\n    return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n      \"class\": classes.value,\n      style: styles.value,\n      ref: 'overlay'\n    });\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VOverlay/index.ts\n\n;// CONCATENATED MODULE: ./src/composable/use-overlay.ts\n\n\n\nvar TIMEOUT = 40;\nfunction overlayProps() {\n  return {\n    overlay: Boolean,\n    overlayColor: {\n      type: String,\n      \"default\": '#000000'\n    }\n  };\n}\nfunction useOverlay(props, overlayOn) {\n  var container = document.createElement('div');\n  var overlayPropsObject = {\n    active: false,\n    hide: true,\n    color: props.overlayColor\n  };\n  var overlayElement = null;\n\n  var overlayVNode = function overlayVNode() {\n    return VOverlay.setup(overlayPropsObject, {});\n  };\n\n  var renderOverlay = function renderOverlay() {\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.render)(overlayVNode(), container);\n  };\n\n  var createOverlay = function createOverlay() {\n    var _a;\n\n    (_a = overlayOn === null || overlayOn === void 0 ? void 0 : overlayOn.parentNode) === null || _a === void 0 ? void 0 : _a.insertBefore(overlayElement, overlayOn);\n    setTimeout(function () {\n      overlayPropsObject.active = true;\n      overlayPropsObject.hide = !props.overlay;\n      renderOverlay();\n    }, TIMEOUT);\n  };\n\n  var removeOverlay = function removeOverlay() {\n    overlayPropsObject.active = false;\n    renderOverlay();\n\n    var remove = function remove() {\n      var _a;\n\n      (_a = overlayOn === null || overlayOn === void 0 ? void 0 : overlayOn.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(overlayElement);\n    };\n\n    addOnceListener(overlayElement, 'transitionend', remove);\n  };\n\n  renderOverlay();\n  overlayElement = container.firstChild;\n  return {\n    createOverlay: createOverlay,\n    removeOverlay: removeOverlay\n  };\n}\n;// CONCATENATED MODULE: ./src/composable/use-transition.ts\n\nfunction transitionProps() {\n  return {\n    transition: String\n  };\n}\nfunction useTransition(vNode, transition) {\n  var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var props = {\n    name: transition,\n    mode: mode\n  };\n  return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.Transition, props, {\n    \"default\": function _default() {\n      return vNode;\n    }\n  });\n}\n;// CONCATENATED MODULE: ./src/composable/use-toggle.ts\n\nfunction useToggle(props, propName) {\n  var isActive = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(false);\n  var prop = propName ? propName : 'modelValue';\n  (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n    return props[prop];\n  }, function (to) {\n    return isActive.value = !!to;\n  }, {\n    immediate: true\n  });\n  return {\n    isActive: isActive\n  };\n}\n;// CONCATENATED MODULE: ./src/components/VModal/VModal.ts\nfunction VModal_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VModal_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VModal_ownKeys(Object(source), !0).forEach(function (key) { VModal_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VModal_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VModal_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\nvar VModal = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-modal',\n  props: VModal_objectSpread(VModal_objectSpread({\n    modelValue: Boolean,\n    width: {\n      type: [Number, String],\n      \"default\": null\n    }\n  }, overlayProps()), transitionProps()),\n  emits: ['update:modelValue'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n\n    var _useToggle = useToggle(props),\n        isActive = _useToggle.isActive;\n\n    var modalRef = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onMounted)(function () {\n      if (props.overlay) {\n        var _useOverlay = useOverlay(props, modalRef.value),\n            createOverlay = _useOverlay.createOverlay,\n            removeOverlay = _useOverlay.removeOverlay;\n\n        isActive.value && createOverlay();\n        (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n          return isActive.value;\n        }, function (to) {\n          to && createOverlay();\n          !to && removeOverlay();\n        });\n      }\n    });\n\n    function genContent() {\n      var propsData = {\n        \"class\": 'v-modal__content',\n        style: {\n          width: props.width ? convertToUnit(props.width) : ''\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, slots[\"default\"] && slots[\"default\"]());\n    }\n\n    function genModal() {\n      var propsData = VModal_defineProperty({\n        \"class\": 'v-modal',\n        ref: modalRef\n      }, 'onUpdate:modelValue', function onUpdateModelValue(val) {\n        return emit('update:modelValue', val);\n      });\n\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.withDirectives)((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, genContent()), [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.vShow, isActive.value]]);\n    }\n\n    return function () {\n      return useTransition(genModal(), props.transition);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VModal/index.ts\n\n;// CONCATENATED MODULE: ./src/composable/use-auto-position.ts\n\nfunction autoPositionProps() {\n  return {\n    positionX: {\n      type: Number,\n      \"default\": 0\n    },\n    positionY: {\n      type: Number,\n      \"default\": 0\n    }\n  };\n}\nfunction useAutoPosition(props) {\n  var dimensions = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({\n    activator: {\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n      width: 0,\n      height: 0\n    },\n    content: {\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n      width: 0,\n      height: 0\n    },\n    pageYOffset: 0,\n    pageWidth: 0\n  });\n  var contentRef = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n  var offsetY = +props.offsetY;\n  var activator;\n  var content;\n  var contentBottomPoint = 0;\n\n  function getRect(el) {\n    var rect = el.getBoundingClientRect();\n    return {\n      top: rect.top,\n      left: rect.left,\n      bottom: rect.bottom,\n      right: rect.right,\n      width: rect.width,\n      height: rect.height\n    };\n  }\n\n  var isAbsolutePositioned = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n    return !!props.positionY || !!props.positionX;\n  });\n\n  function getInnerHeight() {\n    if (!window) return 0;\n    return innerHeight || document.documentElement.clientHeight;\n  }\n\n  function getScrollTop() {\n    if (!window) return 0;\n    return pageYOffset || document.documentElement.scrollTop;\n  }\n\n  function getScrollLeft() {\n    if (!window) return 0;\n    return pageXOffset || document.documentElement.scrollLeft;\n  }\n\n  function getContentAbsoluteBottomPoint() {\n    return dimensions.content.height + props.positionY + getScrollTop();\n  }\n\n  function getContentBottomPoint() {\n    var activator = dimensions.activator,\n        content = dimensions.content;\n\n    if (props.bottom) {\n      return content.height + activator.top + activator.height;\n    }\n\n    return content.height + activator.top;\n  }\n\n  function calcContentBottomPosition() {\n    var fullHeight = getScrollTop() + getInnerHeight();\n    var contentBottomPosition = isAbsolutePositioned.value ? getContentAbsoluteBottomPoint() : getContentBottomPoint();\n    return fullHeight - contentBottomPosition;\n  }\n\n  function calcLeftPosition() {\n    if (props.positionX) return props.positionX + getScrollLeft();\n    return dimensions.activator.left;\n  }\n\n  function calcAbsoluteTop() {\n    var topPosition = props.positionY + getScrollTop();\n\n    if (offsetY >= contentBottomPoint) {\n      return topPosition + contentBottomPoint - offsetY;\n    }\n\n    return topPosition;\n  }\n\n  function calcBottomPosition() {\n    var activator = dimensions.activator,\n        content = dimensions.content;\n\n    if (offsetY >= contentBottomPoint) {\n      return activator.top - content.height - offsetY;\n    }\n\n    return activator.top + activator.height + offsetY;\n  }\n\n  function calcAutoBottomPosition() {\n    if (offsetY >= contentBottomPoint) {\n      return dimensions.activator.top + contentBottomPoint - offsetY;\n    }\n\n    return dimensions.activator.top;\n  }\n\n  function calcPositionY() {\n    contentBottomPoint = calcContentBottomPosition();\n    if (props.positionY) return calcAbsoluteTop();\n    if (props.bottom) return calcBottomPosition();\n    return calcAutoBottomPosition();\n  }\n\n  function snapShot(cb) {\n    requestAnimationFrame(function () {\n      if (!content || content.style.display !== 'none') return cb();\n      content.style.display = 'inline-block';\n      cb();\n      content.style.display = 'none';\n    });\n  }\n\n  function updateDimensions() {\n    return new Promise(function (resolve) {\n      snapShot(function () {\n        activator && setActivatorDimensions();\n        content && setContentDimensions();\n        resolve();\n      });\n    });\n  }\n\n  function setActivatorDimensions() {\n    dimensions.activator = getRect(activator);\n    dimensions.activator.height = activator.offsetHeight;\n    dimensions.activator.top = dimensions.activator.top + getScrollTop();\n    dimensions.activator.left = dimensions.activator.left + getScrollLeft();\n  }\n\n  function setContentDimensions() {\n    var rect = activator ? dimensions.activator : getRect(content);\n    dimensions.content.height = content.offsetHeight;\n    dimensions.content.top = calcPositionY();\n    dimensions.content.left = calcLeftPosition();\n    dimensions.content.width = rect.width;\n  }\n\n  function setDimensions(activatorEl) {\n    if (!activator && !content) {\n      activator = activatorEl;\n      content = contentRef.value;\n    }\n\n    return updateDimensions();\n  }\n\n  return {\n    dimensions: dimensions,\n    contentRef: contentRef,\n    setDimensions: setDimensions,\n    updateDimensions: updateDimensions\n  };\n}\n;// CONCATENATED MODULE: ./src/composable/use-activator.ts\n\nfunction activatorProps() {\n  return {\n    activator: {\n      type: [Object, String],\n      \"default\": null\n    },\n    internalActivator: Boolean\n  };\n}\nvar useActivator = function useActivator(props) {\n  var activatorRef = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n  var activatorSizes = {};\n  var listeners = {};\n\n  var getActivator = function getActivator(e) {\n    var _a;\n\n    if (activatorRef.value) return activatorRef.value;\n    var target = props.internalActivator ? ((_a = props.activator) === null || _a === void 0 ? void 0 : _a.$el) || props.activator : document;\n\n    if (props.inputActivator) {\n      return activatorRef.value = target.querySelector(props.inputActivator);\n    }\n\n    if (props.activator) {\n      if (typeof props.activator === 'string') {\n        return activatorRef.value = target.querySelector(props.activator);\n      }\n\n      if (props.activator.$el) {\n        return activatorRef.value = props.activator.$el;\n      }\n\n      return activatorRef.value = props.activator;\n    }\n\n    if (e) {\n      return activatorRef.value = e.target || e.currentTarget;\n    }\n\n    return null;\n  };\n\n  var getActivatorSizes = function getActivatorSizes() {\n    var el = activatorRef.value.$el || activatorRef.value;\n    activatorSizes.left = el.offsetLeft;\n    activatorSizes.top = el.offsetTop;\n    activatorSizes.height = el.offsetHeight;\n    activatorSizes.width = el.offsetWidth;\n    return activatorSizes;\n  };\n\n  var genActivatorListeners = function genActivatorListeners(props, handlers) {\n    if (props.openOnHover) {\n      listeners.mouseenter = function (e) {\n        return handlers.mouseenter(e);\n      };\n\n      listeners.mouseleave = function (e) {\n        return handlers.mouseleave(e);\n      };\n    }\n\n    if (props.openOnClick) {\n      listeners.click = function (e) {\n        return handlers.click(e);\n      };\n    }\n\n    if (props.openOnContextmenu) {\n      listeners.contextmenu = function (e) {\n        return handlers.contextmenu(e);\n      };\n    }\n\n    return listeners;\n  };\n\n  var addActivatorEvents = function addActivatorEvents() {\n    var events = Object.keys(listeners);\n\n    if (activatorRef.value) {\n      events.forEach(function (key) {\n        activatorRef.value.addEventListener(key, listeners[key]);\n      });\n    }\n  };\n\n  var removeActivatorEvents = function removeActivatorEvents() {\n    var events = Object.keys(listeners);\n\n    if (activatorRef.value) {\n      events.forEach(function (key) {\n        activatorRef.value.removeEventListener(key, listeners[key]);\n      });\n    }\n  };\n\n  return {\n    activatorRef: activatorRef,\n    getActivator: getActivator,\n    getActivatorSizes: getActivatorSizes,\n    addActivatorEvents: addActivatorEvents,\n    removeActivatorEvents: removeActivatorEvents,\n    genActivatorListeners: genActivatorListeners\n  };\n};\n;// CONCATENATED MODULE: ./src/composable/use-detach.ts\nfunction useDetach() {\n  var target;\n\n  var setDetached = function setDetached(el) {\n    var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    if (selector) target = document.querySelector(selector);\n    if (!selector) target = document.querySelector('.v-app');\n    if (!target) target = document.querySelector('#app');\n    if (!target) target = document.querySelector('body');\n    target.appendChild(el);\n  };\n\n  var removeDetached = function removeDetached(el) {\n    target.removeChild(el);\n  };\n\n  return {\n    setDetached: setDetached,\n    removeDetached: removeDetached\n  };\n}\n;// CONCATENATED MODULE: ./src/directives/v-click-outside/index.ts\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction clickHandler(e, el) {\n  var _a, _b, _c, _d;\n\n  if (el.contains(e.target) && ((_a = el._binds) === null || _a === void 0 ? void 0 : _a.value) && !((_b = el._binds) === null || _b === void 0 ? void 0 : _b.value.closeConditional)) return;\n  if (typeof ((_c = el._binds) === null || _c === void 0 ? void 0 : _c.value) === 'function') el._binds.value(e);\n  if (_typeof((_d = el._binds) === null || _d === void 0 ? void 0 : _d.value) === 'object') el._binds.value.handler(e);\n}\n\nfunction removeListener(el) {\n  document.body.removeEventListener('click', el._onClick, true);\n  delete el._onClick;\n  delete el._binds;\n}\n\nvar clickOutside = {\n  beforeMount: function beforeMount(el, binding) {\n    el._binds = binding;\n  },\n  mounted: function mounted(el) {\n    el._onClick = function (e) {\n      return clickHandler(e, el);\n    };\n\n    document.body.addEventListener('click', el._onClick, true);\n  },\n  beforeUpdate: function beforeUpdate(el, binding) {\n    el._binds = binding;\n  },\n  beforeUnmount: function beforeUnmount(el) {\n    removeListener(el);\n  }\n};\n;// CONCATENATED MODULE: ./src/components/VMenu/VMenu.ts\nfunction VMenu_typeof(obj) { \"@babel/helpers - typeof\"; return VMenu_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, VMenu_typeof(obj); }\n\nfunction VMenu_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VMenu_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VMenu_ownKeys(Object(source), !0).forEach(function (key) { VMenu_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VMenu_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VMenu_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\n\n\nvar VMenu = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-menu',\n  directives: {\n    clickOutside: clickOutside,\n    resize: resize\n  },\n  props: VMenu_objectSpread(VMenu_objectSpread(VMenu_objectSpread({\n    maxHeight: {\n      type: [Number, String],\n      \"default\": 200\n    },\n    width: {\n      type: [Number, String],\n      \"default\": 0\n    },\n    zIndex: {\n      type: [String, Number],\n      \"default\": 10\n    },\n    openOnHover: Boolean,\n    openOnClick: Boolean,\n    openOnContextmenu: Boolean,\n    closeOnClick: {\n      type: Boolean,\n      \"default\": true\n    },\n    elevation: {\n      type: [Number, String],\n      \"default\": 10\n    },\n    offsetX: {\n      type: [String, Number],\n      \"default\": 20\n    },\n    offsetY: {\n      type: [String, Number],\n      \"default\": 20\n    },\n    modelValue: Boolean,\n    inputActivator: {\n      type: String,\n      \"default\": ''\n    }\n  }, positionProps()), autoPositionProps()), activatorProps()),\n  emits: ['show', 'hide'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n\n    var _useElevation = useElevation(props),\n        elevationClasses = _useElevation.elevationClasses;\n\n    var _useToggle = useToggle(props),\n        isActive = _useToggle.isActive;\n\n    var _useAutoPosition = useAutoPosition(props),\n        contentRef = _useAutoPosition.contentRef,\n        setDimensions = _useAutoPosition.setDimensions,\n        dimensions = _useAutoPosition.dimensions;\n\n    var _useDetach = useDetach(),\n        setDetached = _useDetach.setDetached,\n        removeDetached = _useDetach.removeDetached;\n\n    var _useActivator = useActivator(props),\n        activatorRef = _useActivator.activatorRef,\n        getActivator = _useActivator.getActivator,\n        genActivatorListeners = _useActivator.genActivatorListeners,\n        addActivatorEvents = _useActivator.addActivatorEvents,\n        removeActivatorEvents = _useActivator.removeActivatorEvents;\n\n    var setDimensionsOn = function setDimensionsOn(e, flag) {\n      setDimensions(getActivator(e)).then(function () {\n        requestAnimationFrame(function () {\n          return isActive.value = flag;\n        });\n      });\n    };\n\n    var handlers = {\n      click: function click(e) {\n        return setDimensionsOn(e, props.openOnClick);\n      },\n      mouseenter: function mouseenter(e) {\n        return setDimensionsOn(e, props.openOnHover);\n      },\n      mouseleave: function mouseleave(e) {\n        return setDimensionsOn(e, !props.openOnHover);\n      },\n      contextmenu: function contextmenu(e) {\n        return setDimensionsOn(e, props.openOnContextmenu);\n      }\n    };\n    var listeners = genActivatorListeners(props, handlers);\n    var directive = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return isActive.value ? {\n        handler: function handler() {\n          return isActive.value = false;\n        },\n        closeConditional: props.closeOnClick\n      } : undefined;\n    });\n    var calcWidth = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.width || +dimensions.content.width;\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(isActive, function (to) {\n      to && emit('show');\n      !to && emit('hide');\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return [props.positionY, props.positionX];\n    }, function () {\n      return setDimensions(activatorRef.value);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.modelValue;\n    }, function (to) {\n      isActive.value = false;\n      setTimeout(function () {\n        return isActive.value = to;\n      });\n    });\n    var contentClasses = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VMenu_objectSpread({\n        'v-menu__content': true\n      }, elevationClasses.value);\n    });\n    var contentStyles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        top: convertToUnit(dimensions.content.top),\n        left: convertToUnit(dimensions.content.left),\n        zIndex: props.zIndex\n      };\n    });\n\n    var onContentClick = function onContentClick() {\n      isActive.value = !props.closeOnClick;\n    };\n\n    var onResize = function onResize() {\n      if (!isActive.value) return;\n      requestAnimationFrame(function () {\n        return setDimensions(activatorRef.value);\n      });\n    };\n\n    var genActivatorSlot = function genActivatorSlot() {\n      if (slots.activator) {\n        var slotContent = slots.activator({\n          on: listeners\n        });\n\n        if (VMenu_typeof(slotContent[0].type) === 'object') {\n          return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n            ref: activatorRef\n          }, (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(slotContent[0]));\n        }\n\n        return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(slotContent[0], {\n          ref: activatorRef\n        });\n      }\n\n      return null;\n    };\n\n    var genContentSlot = function genContentSlot() {\n      var propsData = {\n        ref: contentRef,\n        \"class\": contentClasses.value,\n        style: contentStyles.value,\n        onClick: onContentClick\n      };\n      var slotContent = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-menu__slot',\n        style: {\n          maxHeight: convertToUnit(props.maxHeight),\n          width: convertToUnit(calcWidth.value)\n        }\n      }, [slots[\"default\"] && slots[\"default\"]()]);\n      var content = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, slotContent);\n      var directives = [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.vShow, isActive.value], [resize, onResize], [clickOutside, directive.value]];\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.withDirectives)(content, directives);\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onMounted)(function () {\n      activatorRef.value = getActivator();\n      addActivatorEvents();\n      setDetached(contentRef.value);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeUnmount)(function () {\n      removeActivatorEvents();\n      removeDetached(contentRef.value);\n    });\n    return function () {\n      return [(0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": {\n          'v-menu': true\n        }\n      }), slots.activator && genActivatorSlot(), useTransition(genContentSlot(), 'fade')];\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VMenu/index.ts\n\n;// CONCATENATED MODULE: ./src/composable/use-validation.ts\n\nvar validationProps = function validationProps() {\n  return {\n    rules: {\n      type: Array,\n      \"default\": null\n    },\n    value: [String, Number, Date, Object]\n  };\n};\nvar useValidation = function useValidation(props) {\n  var errorState = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({\n    innerError: null,\n    innerErrorMessage: null,\n    isDirty: false\n  });\n\n  var validationClasses = function validationClasses() {\n    return {\n      'e-validatable': true\n    };\n  };\n\n  var computedColor = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n    return props.disabled ? 'disabled' : 'primary';\n  });\n  var hasRules = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n    return !!props.rules && props.rules.length > 0;\n  });\n\n  var dirty = function dirty() {\n    return errorState.isDirty = true;\n  };\n\n  var update = function update(err) {\n    var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (errorState.innerError !== err) {\n      errorState.innerError = err;\n    }\n\n    if (msg && errorState.innerErrorMessage !== msg) {\n      errorState.innerErrorMessage = msg;\n    }\n\n    if (!msg) errorState.innerErrorMessage = msg;\n    return errorState.innerError;\n  };\n\n  var validate = function validate() {\n    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : props.value;\n    if (!hasRules.value) return true;\n    dirty();\n\n    for (var i = 0, len = props.rules.length; i < len; i += 1) {\n      var rule = props.rules[i];\n      var result = void 0;\n      if (typeof rule === 'function') result = rule(val);\n\n      if (result === false || typeof result === 'string') {\n        update(true, result);\n        return false;\n      }\n\n      if (result === true && i === len - 1) {\n        update(false);\n        return true;\n      }\n    }\n  };\n\n  return {\n    errorState: errorState,\n    computedColor: computedColor,\n    validationClasses: validationClasses,\n    validate: validate,\n    dirty: dirty\n  };\n};\n;// CONCATENATED MODULE: ./src/composable/use-input-states.ts\n\nvar useInputStates = function useInputStates(props, _ref) {\n  var attrs = _ref.attrs,\n      emit = _ref.emit;\n  var state = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({\n    focused: false\n  });\n  var isDisabled = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n    if (props.disabled) return true;\n    if (typeof attrs.disabled === 'boolean') return attrs.disabled;\n    return attrs.disabled !== undefined;\n  });\n  var isReadonly = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n    if (props.readonly) return true;\n    if (typeof attrs.readonly === 'boolean') return attrs.readonly;\n    return attrs.readonly !== undefined;\n  });\n\n  var onFocus = function onFocus(e) {\n    if (isReadonly.value) return;\n    state.focused = true;\n    emit('focus', e);\n  };\n\n  var onChange = function onChange() {\n    if (isReadonly.value) return;\n    emit('change');\n  };\n\n  var onBlur = function onBlur(e) {\n    if (isReadonly.value) return;\n    state.focused = false;\n    emit('blur', e);\n  };\n\n  var onSelect = function onSelect(val) {\n    state.focused = false;\n    emit('update:modelValue', val);\n    emit('select', val);\n    onChange();\n  };\n\n  return {\n    state: state,\n    isReadonly: isReadonly,\n    isDisabled: isDisabled,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onChange: onChange,\n    onSelect: onSelect\n  };\n};\n;// CONCATENATED MODULE: ./src/components/VLabel/VLabel.ts\nfunction VLabel_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VLabel_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VLabel_ownKeys(Object(source), !0).forEach(function (key) { VLabel_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VLabel_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VLabel_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar VLabel = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-label',\n  props: VLabel_objectSpread({\n    disabled: Boolean,\n    focused: Boolean\n  }, colorProps()),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n\n    var _useColors = useColors(),\n        setTextClassNameColor = _useColors.setTextClassNameColor,\n        setTextCssColor = _useColors.setTextCssColor;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VLabel_objectSpread({\n        'v-label': true,\n        'v-label--disabled': props.disabled,\n        'v-label--focused': props.focused\n      }, !props.disabled ? setTextClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VLabel_objectSpread({}, !props.disabled ? setTextCssColor(props.color) : {});\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('label', {\n        \"class\": classes.value,\n        style: styles.value\n      }, {\n        \"default\": function _default() {\n          return slots[\"default\"] && slots[\"default\"]();\n        }\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/composable/use-size.ts\n\nvar sizeProps = function sizeProps() {\n  var defaultSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return {\n    sm: {\n      type: Boolean,\n      \"default\": defaultSize === 'sm'\n    },\n    md: {\n      type: Boolean,\n      \"default\": defaultSize === 'md'\n    },\n    lg: {\n      type: Boolean,\n      \"default\": defaultSize === 'lg'\n    },\n    xl: {\n      type: Boolean,\n      \"default\": defaultSize === 'xl'\n    }\n  };\n};\nvar useSize = function useSize(props) {\n  var sizes = Object.keys(sizeProps());\n  var size = computed(function () {\n    return sizes.find(function (s) {\n      return props[s];\n    });\n  });\n  return {\n    size: size\n  };\n};\n;// CONCATENATED MODULE: ./src/services/sizes.ts\nvar sizes;\n\n(function (sizes) {\n  sizes[sizes[\"sm\"] = 16] = \"sm\";\n  sizes[sizes[\"md\"] = 24] = \"md\";\n  sizes[sizes[\"lg\"] = 32] = \"lg\";\n  sizes[sizes[\"xl\"] = 40] = \"xl\";\n})(sizes || (sizes = {}));\n;// CONCATENATED MODULE: ./src/components/VIcon/VIcon.ts\nfunction VIcon_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VIcon_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VIcon_ownKeys(Object(source), !0).forEach(function (key) { VIcon_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VIcon_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VIcon_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\nvar VIcon = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-icon',\n  props: VIcon_objectSpread(VIcon_objectSpread({\n    disabled: Boolean,\n    clickable: Boolean,\n    size: [String, Number],\n    icon: String,\n    tag: {\n      type: String,\n      \"default\": 'i'\n    }\n  }, colorProps()), sizeProps('sm')),\n  emits: ['click'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n\n    var _useColors = useColors(),\n        setTextCssColor = _useColors.setTextCssColor,\n        setTextClassNameColor = _useColors.setTextClassNameColor;\n\n    var iconTag = props.clickable ? 'button' : props.tag;\n    var computedIcon = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _a;\n\n      return (_a = props.icon || slots[\"default\"] && slots[\"default\"]()[0].children) === null || _a === void 0 ? void 0 : _a.trim();\n    });\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VIcon_objectSpread(VIcon_defineProperty({\n        'v-icon': true,\n        'v-icon--disabled': props.disabled,\n        'v-icon--clickable': props.clickable\n      }, computedIcon.value, !!computedIcon.value), props.color ? setTextClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VIcon_objectSpread({\n        fontSize: getSizes()\n      }, props.color ? setTextCssColor(props.color) : {});\n    });\n\n    var getSizes = function getSizes() {\n      var sizeProps = {\n        sm: props.sm,\n        md: props.md,\n        lg: props.lg,\n        xl: props.xl\n      };\n      var explicitSize = Object.keys(sizeProps).find(function (key) {\n        return sizeProps[key];\n      });\n      return convertToUnit(explicitSize && sizes[explicitSize] || props.size);\n    };\n\n    var onClick = function onClick() {\n      if (!props.disabled && props.clickable) emit('click');\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(iconTag, {\n        \"class\": classes.value,\n        style: styles.value,\n        onClick: onClick\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VInput/VInput.ts\nfunction VInput_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VInput_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VInput_ownKeys(Object(source), !0).forEach(function (key) { VInput_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VInput_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VInput_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\nvar VInput = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-input',\n  components: {\n    VLabel: VLabel,\n    VIcon: VIcon\n  },\n  inheritAttrs: false,\n  props: VInput_objectSpread(VInput_objectSpread({\n    label: {\n      type: String,\n      \"default\": ''\n    },\n    prependIcon: {\n      type: String,\n      \"default\": ''\n    },\n    appendIcon: {\n      type: String,\n      \"default\": ''\n    },\n    disabled: Boolean,\n    focused: Boolean,\n    readonly: Boolean,\n    file: Boolean,\n    hints: {\n      type: Boolean,\n      \"default\": true\n    },\n    hintMessage: {\n      type: String,\n      \"default\": ''\n    },\n    textColor: {\n      type: String,\n      \"default\": ''\n    }\n  }, validationProps()), colorProps()),\n  emits: ['click'],\n  setup: function setup(props, _ref) {\n    var attrs = _ref.attrs,\n        emit = _ref.emit,\n        slots = _ref.slots;\n\n    var _useValidation = useValidation(props),\n        validate = _useValidation.validate,\n        errorState = _useValidation.errorState;\n\n    var _useColors = useColors(),\n        setTextCssColor = _useColors.setTextCssColor,\n        setTextClassNameColor = _useColors.setTextClassNameColor;\n\n    var _useInputStates = useInputStates(props, {\n      attrs: attrs,\n      emit: emit\n    }),\n        isDisabled = _useInputStates.isDisabled,\n        isReadonly = _useInputStates.isReadonly;\n\n    var form = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.inject)('form', null);\n    var textClassColor = setTextClassNameColor(props.textColor);\n    var textCssColor = setTextCssColor(props.textColor);\n    var hasPrependIcon = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return !!props.prependIcon || !!slots['prepend-icon'];\n    });\n    var hasAppendIcon = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return !!props.appendIcon || !!slots['append-icon'];\n    });\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VInput_objectSpread(VInput_objectSpread({\n        'v-input': true,\n        'v-input--primary': !props.color,\n        'v-input--focused': props.focused && !isReadonly.value,\n        'v-input--disabled': isDisabled.value,\n        'v-input--readonly': isReadonly.value,\n        'v-input--file': props.file,\n        'v-input--has-prepend-icon': hasPrependIcon.value,\n        'v-input--has-append-icon': hasAppendIcon.value,\n        'v-input--not-valid': !!errorState.innerError\n      }, !props.disabled && !errorState.innerError ? setTextClassNameColor(props.color) : {}), attrs[\"class\"]);\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VInput_objectSpread(VInput_objectSpread({}, !props.disabled && !errorState.innerError ? setTextCssColor(props.color) : {}), attrs.style);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.focused;\n    }, function (to) {\n      return !to && validate();\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.value;\n    }, function () {\n      return validate();\n    });\n\n    var genLabel = function genLabel() {\n      var label = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VLabel, {\n        \"class\": 'v-label--on-input',\n        disabled: isDisabled.value,\n        focused: props.focused,\n        color: !errorState.innerError ? props.color : ''\n      }, {\n        \"default\": function _default() {\n          return props.label;\n        }\n      });\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-input__label'\n      }, [label]);\n    };\n\n    var genIcon = function genIcon(iconName) {\n      var clickable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, {\n        icon: iconName,\n        size: 16,\n        disabled: props.disabled,\n        clickable: clickable\n      });\n    };\n\n    var genPrependIcon = function genPrependIcon() {\n      var _a;\n\n      var content;\n\n      if (props.prependIcon) {\n        content = genIcon(props.prependIcon);\n      } else {\n        content = (_a = slots['prepend-icon']) === null || _a === void 0 ? void 0 : _a.call(slots);\n      }\n\n      return content ? (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-input__prepend-icon'\n      }, content) : null;\n    };\n\n    var genAppendIcon = function genAppendIcon() {\n      var _a;\n\n      var content;\n\n      if (props.appendIcon) {\n        content = genIcon(props.appendIcon);\n      } else {\n        content = (_a = slots['append-icon']) === null || _a === void 0 ? void 0 : _a.call(slots);\n      }\n\n      return content ? (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-input__append-icon'\n      }, content) : null;\n    };\n\n    var genTextFieldSlot = function genTextFieldSlot() {\n      var _a;\n\n      var prependIconContent = genPrependIcon();\n      var appendIconContent = genAppendIcon();\n      var disabled = props.disabled;\n      var textFieldContent = (_a = slots['text-field']) === null || _a === void 0 ? void 0 : _a.call(slots, {\n        textCssColor: textCssColor,\n        textClassColor: textClassColor,\n        disabled: disabled\n      });\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-input__text-field'\n      }, [prependIconContent, textFieldContent, appendIconContent]);\n    };\n\n    var genHintMessage = function genHintMessage() {\n      return props.hintMessage || errorState.innerErrorMessage ? (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', {\n        \"class\": 'v-input__hints-message'\n      }, [errorState.innerErrorMessage]) : null;\n    };\n\n    var genHints = function genHints() {\n      return props.hints || props.rules ? (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-input__hints'\n      }, useTransition(genHintMessage(), 'fade')) : null;\n    };\n\n    var genSelectSlot = function genSelectSlot() {\n      var _a;\n\n      return slots.select ? (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-input__selects'\n      }, (_a = slots.select) === null || _a === void 0 ? void 0 : _a.call(slots)) : null;\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeMount)(function () {\n      if (props.rules) form === null || form === void 0 ? void 0 : form.add(validate);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeUnmount)(function () {\n      form === null || form === void 0 ? void 0 : form.remove(validate);\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        style: styles.value\n      }, [props.label && genLabel(), genTextFieldSlot(), genHints(), genSelectSlot()]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VTextField/VTextField.ts\nfunction VTextField_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VTextField_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VTextField_ownKeys(Object(source), !0).forEach(function (key) { VTextField_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VTextField_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VTextField_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar VTextField = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'e-text-field',\n  components: {\n    VInput: VInput\n  },\n  inheritAttrs: true,\n  props: {\n    modelValue: {\n      type: [String, Number],\n      \"default\": ''\n    }\n  },\n  emits: ['update:modelValue', 'input', 'blur', 'focus', 'change'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        attrs = _ref.attrs;\n\n    var _useInputStates = useInputStates(props, {\n      emit: emit,\n      attrs: attrs\n    }),\n        isReadonly = _useInputStates.isReadonly,\n        isDisabled = _useInputStates.isDisabled,\n        state = _useInputStates.state,\n        onFocus = _useInputStates.onFocus,\n        onBlur = _useInputStates.onBlur,\n        onChange = _useInputStates.onChange;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        'v-text-field': true,\n        'v-text-field--disabled': isDisabled.value,\n        'v-text-field--readonly': isReadonly.value\n      };\n    });\n    var computedValue = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)({\n      get: function get() {\n        return props.modelValue;\n      },\n      set: function set(val) {\n        emit('input', val);\n        emit('update:modelValue', val);\n      }\n    });\n\n    var onInput = function onInput(e) {\n      computedValue.value = e.target.value;\n    };\n\n    var genInputField = function genInputField(textClassColor, textCssColor) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('input', {\n        \"class\": VTextField_objectSpread({\n          'v-text-field__input': true\n        }, !attrs.disabled && textClassColor),\n        style: VTextField_objectSpread({}, !attrs.disabled ? textCssColor : {}),\n        disabled: attrs.disabled,\n        type: attrs.type ? attrs.type : 'text',\n        placeholder: attrs.placeholder,\n        readonly: attrs.readonly,\n        value: computedValue.value,\n        onInput: onInput,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        onChange: onChange\n      });\n    };\n\n    var genTextFieldWrapper = function genTextFieldWrapper(clsColor, cssColor) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value\n      }, genInputField(clsColor, cssColor));\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VInput, {\n        focused: state.focused,\n        value: computedValue.value\n      }, VTextField_defineProperty({}, 'text-field', function textField(_ref2) {\n        var textClassColor = _ref2.textClassColor,\n            textCssColor = _ref2.textCssColor;\n        return genTextFieldWrapper(textClassColor, textCssColor);\n      }));\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VTextField/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VInput/index.ts\n\n;// CONCATENATED MODULE: ./src/services/icons.ts\nvar FaIcons;\n\n(function (FaIcons) {\n  FaIcons[\"$add\"] = \"fas fa-plus\";\n  FaIcons[\"$delete\"] = \"fas fa-trash-alt\";\n  FaIcons[\"$sliders\"] = \"fas fa-sliders-h\";\n  FaIcons[\"$edit\"] = \"fas fa-pen\";\n  FaIcons[\"$menu\"] = \"fas fa-bars\";\n  FaIcons[\"$chevronDown\"] = \"fas fa-chevron-down\";\n  FaIcons[\"$caretDown\"] = \"fas fa-caret-down\";\n  FaIcons[\"$radioOn\"] = \"far fa-dot-circle\";\n  FaIcons[\"$radioOff\"] = \"far fa-circle\";\n  FaIcons[\"$checkOn\"] = \"fas fa-check-square\";\n  FaIcons[\"$checkOff\"] = \"far fa-square\";\n  FaIcons[\"$arrowRight\"] = \"fas fa-chevron-right\";\n  FaIcons[\"$arrowLeft\"] = \"fas fa-chevron-left\";\n  FaIcons[\"$arrowUp\"] = \"fas fa-arrow-up\";\n  FaIcons[\"$filter\"] = \"fas fa-align-justify\";\n  FaIcons[\"$marker\"] = \"fas fa-map-marker-alt\";\n  FaIcons[\"$search\"] = \"fas fa-search\";\n  FaIcons[\"$close\"] = \"fas fa-times\";\n  FaIcons[\"$paperclip\"] = \"fas fa-paperclip\";\n})(FaIcons || (FaIcons = {}));\n\nvar MaterialIcons;\n\n(function (MaterialIcons) {\n  MaterialIcons[\"$add\"] = \"add\";\n  MaterialIcons[\"$delete\"] = \"delete_forever\";\n  MaterialIcons[\"$sliders\"] = \"fas fa-sliders-h\";\n  MaterialIcons[\"$edit\"] = \"fas fa-pen\";\n  MaterialIcons[\"$menu\"] = \"fas fa-bars\";\n  MaterialIcons[\"$expand\"] = \"expand_more\";\n  MaterialIcons[\"$group\"] = \"expand_more\";\n  MaterialIcons[\"$subgroup\"] = \"arrow_drop_down\";\n  MaterialIcons[\"$dropdown\"] = \"fas fa-caret-down\";\n  MaterialIcons[\"$radioOn\"] = \"far fa-dot-circle\";\n  MaterialIcons[\"$radioOff\"] = \"far fa-circle\";\n  MaterialIcons[\"$checkOn\"] = \"check_box\";\n  MaterialIcons[\"$checkOff\"] = \"check_box_outline_blank\";\n  MaterialIcons[\"$arrowRight\"] = \"chevron_right\";\n  MaterialIcons[\"$arrowLeft\"] = \"chevron_left\";\n  MaterialIcons[\"$arrowUp\"] = \"arrow_upward\";\n  MaterialIcons[\"$filter\"] = \"filter_list\";\n  MaterialIcons[\"$marker\"] = \"fas fa-map-marker-alt\";\n  MaterialIcons[\"$search\"] = \"search\";\n  MaterialIcons[\"$close\"] = \"clear\";\n})(MaterialIcons || (MaterialIcons = {}));\n\nvar MaterialSizes;\n\n(function (MaterialSizes) {\n  MaterialSizes[MaterialSizes[\"xs\"] = 14] = \"xs\";\n  MaterialSizes[MaterialSizes[\"s\"] = 18] = \"s\";\n  MaterialSizes[MaterialSizes[\"md\"] = 20] = \"md\";\n  MaterialSizes[MaterialSizes[\"l\"] = 28] = \"l\";\n  MaterialSizes[MaterialSizes[\"xl\"] = 36] = \"xl\";\n})(MaterialSizes || (MaterialSizes = {}));\n\nvar FaSizes;\n\n(function (FaSizes) {\n  FaSizes[FaSizes[\"xs\"] = 12] = \"xs\";\n  FaSizes[FaSizes[\"s\"] = 14] = \"s\";\n  FaSizes[FaSizes[\"md\"] = 18] = \"md\";\n  FaSizes[FaSizes[\"l\"] = 24] = \"l\";\n  FaSizes[FaSizes[\"xl\"] = 32] = \"xl\";\n})(FaSizes || (FaSizes = {}));\n;// CONCATENATED MODULE: ./src/composable/use-icons.ts\n\n\nfunction useIcons() {\n  var options = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.inject)('$options');\n  var icons = FaIcons;\n\n  if (options === null || options === void 0 ? void 0 : options.icons) {\n    if (options.icons.includes('material-icons')) {\n      icons = MaterialIcons;\n    }\n  }\n\n  return {\n    icons: icons\n  };\n}\n;// CONCATENATED MODULE: ./src/components/VChip/VChip.ts\nfunction VChip_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VChip_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VChip_ownKeys(Object(source), !0).forEach(function (key) { VChip_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VChip_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VChip_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar VChip = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-chip',\n  props: VChip_objectSpread({\n    title: {\n      type: String,\n      \"default\": ''\n    },\n    textColor: {\n      type: String,\n      \"default\": '#ffffff'\n    },\n    disabled: Boolean,\n    closable: {\n      type: Boolean,\n      \"default\": true\n    }\n  }, colorProps('primary')),\n  emits: ['close'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor,\n        setTextCssColor = _useColors.setTextCssColor,\n        setTextClassNameColor = _useColors.setTextClassNameColor;\n\n    var _useIcons = useIcons(),\n        icons = _useIcons.icons;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VChip_objectSpread(VChip_objectSpread({\n        'v-chip': true,\n        'v-chip--disabled': props.disabled\n      }, !props.disabled ? setBackgroundClassNameColor(props.color) : {}), setTextClassNameColor(props.textColor));\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VChip_objectSpread(VChip_objectSpread({}, !props.disabled ? setBackgroundCssColor(props.color) : {}), setTextCssColor(props.textColor));\n    });\n\n    var genCloseIcon = function genCloseIcon() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, {\n        icon: icons.$close,\n        clickable: !props.disabled,\n        onClick: function onClick() {\n          return emit('close');\n        }\n      });\n    };\n\n    var genChipContent = function genChipContent() {\n      var _a;\n\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-chip__content'\n      }, ((_a = slots[\"default\"]) === null || _a === void 0 ? void 0 : _a.call(slots)) || props.title);\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', {\n        \"class\": classes.value,\n        style: styles.value\n      }, [genChipContent(), props.closable ? genCloseIcon() : null]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VFileInput/VFileInput.ts\n\n\n\n\n\n\nvar VFileInput = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-file-input',\n  props: {\n    disabled: Boolean,\n    multiple: Boolean,\n    chipColor: {\n      type: String,\n      \"default\": 'primary'\n    },\n    modelValue: {\n      type: Array,\n      \"default\": null\n    }\n  },\n  emits: ['update:modelValue'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        attrs = _ref.attrs;\n\n    var _useIcons = useIcons(),\n        icons = _useIcons.icons;\n\n    var _useInputStates = useInputStates(props, {\n      emit: emit,\n      attrs: attrs\n    }),\n        isDisabled = _useInputStates.isDisabled,\n        isReadonly = _useInputStates.isReadonly;\n\n    var inputRef = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n    var files = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(new Map());\n    var srcRef = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        'v-file-input': true,\n        'v-file-input--disabled': isDisabled.value,\n        'v-file-input--readonly': isReadonly.value,\n        'v-file-input--multiple': props.multiple\n      };\n    });\n\n    var onChange = function onChange(event) {\n      var inputFiles = Array.from(event.target.files);\n      if (!props.multiple) files.value.clear();\n      inputFiles.forEach(function (f) {\n        return files.value.set(f.name, f);\n      });\n      event.target.value = '';\n      emit('update:modelValue', mapToValArray(files.value));\n    };\n\n    var _onClose = function onClose(file) {\n      files.value[\"delete\"](file.name);\n      emit('update:modelValue', mapToValArray(files.value));\n    };\n\n    var onClick = function onClick(_ref2) {\n      var srcElement = _ref2.srcElement;\n      if (srcElement !== srcRef.value) return;\n      inputRef.value.click();\n    };\n\n    var genFileInput = function genFileInput() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('input', {\n        \"class\": 'v-file-input__field',\n        type: 'file',\n        multiple: props.multiple,\n        ref: inputRef,\n        style: {\n          position: 'absolute',\n          visibility: 'hidden'\n        },\n        onChange: onChange\n      });\n    };\n\n    var genChips = function genChips() {\n      return mapToValArray(files.value).map(function (file) {\n        return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VChip, {\n          title: file.name,\n          \"class\": 'ma-1',\n          color: props.chipColor,\n          onClose: function onClose() {\n            return _onClose(file);\n          }\n        });\n      });\n    };\n\n    var genChipsContainer = function genChipsContainer() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-file-input__container',\n        ref: srcRef\n      }, genChips());\n    };\n\n    var genComponent = function genComponent() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        onClick: onClick\n      }, [genFileInput(), genChipsContainer()]);\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VInput, {\n        prependIcon: icons.$paperclip,\n        file: true,\n        disabled: isDisabled.value\n      }, {\n        'text-field': function textField() {\n          return genComponent();\n        }\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VFileInput/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VList/VList.ts\nfunction VList_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VList_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VList_ownKeys(Object(source), !0).forEach(function (key) { VList_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VList_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VList_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar VList = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-list',\n  props: VList_objectSpread({\n    value: {\n      type: [Number, Array],\n      \"default\": null\n    },\n    multiple: Boolean,\n    active: {\n      type: Boolean,\n      \"default\": false\n    },\n    activeClass: {\n      type: String,\n      \"default\": 'primary white--text text--base'\n    },\n    textColor: {\n      type: String,\n      \"default\": ''\n    }\n  }, colorProps()),\n  emits: ['update:value'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n\n    var _useColors = useColors(),\n        setTextClassNameColor = _useColors.setTextClassNameColor,\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setTextCssColor = _useColors.setTextCssColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var items = new Map();\n    var isTrustedSelect = false;\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VList_objectSpread(VList_objectSpread({\n        'v-list': true,\n        'v-list--active': props.active\n      }, setTextClassNameColor(props.textColor)), setBackgroundClassNameColor(props.color));\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VList_objectSpread(VList_objectSpread({}, setTextCssColor(props.textColor)), setBackgroundCssColor(props.color));\n    });\n\n    var register = function register(item) {\n      !items.has(item) && items.set(item, item);\n    };\n\n    var unregister = function unregister(item) {\n      items.has(item) && items[\"delete\"](item);\n    };\n\n    var dispatchEvent = function dispatchEvent(val) {\n      isTrustedSelect = true;\n      emit('update:value', val);\n    };\n\n    var setActiveItem = function setActiveItem(item) {\n      mapToValArray(items).forEach(function (it) {\n        it.isActive.value = it === item;\n      });\n    };\n\n    var toggleItem = function toggleItem(item) {\n      if (!Array.isArray(props.value)) return;\n      item.isActive.value = !item.isActive.value;\n    };\n\n    var prepareIndexes = function prepareIndexes() {\n      var values = mapToValArray(items);\n      var multiple = props.multiple;\n      var val = multiple ? [] : 0;\n      values.forEach(function (it, i) {\n        if (it.isActive.value) {\n          multiple && val.push(i);\n          !multiple && (val = i);\n        }\n      });\n      return val;\n    };\n\n    var onClick = function onClick(item) {\n      if (!props.active) return;\n      props.multiple && toggleItem(item);\n      !props.multiple && setActiveItem(item);\n      dispatchEvent(prepareIndexes());\n    };\n\n    var setSelectedItems = function setSelectedItems(value) {\n      if (value === null) return;\n      var values = mapToValArray(items);\n\n      if (props.multiple) {\n        ;\n        value.forEach(function (ind) {\n          return toggleItem(values[ind]);\n        });\n      } else {\n        setActiveItem(values[value]);\n      }\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.value;\n    }, function (to) {\n      !isTrustedSelect && setSelectedItems(to);\n      isTrustedSelect && (isTrustedSelect = false);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onMounted)(function () {\n      return setSelectedItems(props.value);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.provide)('list', {\n      add: register,\n      remove: unregister,\n      click: onClick,\n      activeClass: props.activeClass\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        style: styles.value\n      }, {\n        \"default\": function _default() {\n          return slots[\"default\"] && slots[\"default\"]();\n        }\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VList/VListItem.ts\nfunction VListItem_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nvar VListItem = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-list-item',\n  emits: ['click'],\n  setup: function setup(_, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n    var itemRef = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n    var isActive = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(false);\n    var list = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.inject)('list', null);\n    var item = {\n      itemRef: itemRef,\n      isActive: isActive\n    };\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VListItem_defineProperty({\n        'v-list-item': true,\n        'v-list-item--selected': !list.activeClass && isActive.value\n      }, list === null || list === void 0 ? void 0 : list.activeClass, isActive.value);\n    });\n\n    var onClick = function onClick() {\n      list === null || list === void 0 ? void 0 : list.click(item);\n      emit('click');\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeMount)(function () {\n      list === null || list === void 0 ? void 0 : list.add(item);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeUnmount)(function () {\n      list === null || list === void 0 ? void 0 : list.remove(item);\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        ref: itemRef,\n        onClick: onClick\n      }, {\n        \"default\": function _default() {\n          return slots[\"default\"] && slots[\"default\"]({\n            active: isActive\n          });\n        }\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VList/index.ts\n\n\n\nvar VListItemTitle = createSimpleFunctional('v-list-item__title');\nvar VListItemSubtitle = createSimpleFunctional('v-list-item__subtitle');\nvar VListItemContent = createSimpleFunctional('v-list-item__content');\nvar VListItemIcon = createSimpleFunctional('v-list-item__icon');\n\n;// CONCATENATED MODULE: ./src/components/VSelect/VSelectList.ts\nfunction VSelectList_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar VSelectList = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-select-list',\n  props: {\n    items: {\n      type: Array,\n      \"default\": null\n    },\n    color: {\n      type: String,\n      \"default\": '#ffffff'\n    },\n    textColor: {\n      type: String,\n      \"default\": ''\n    },\n    valueKey: {\n      type: String,\n      \"default\": ''\n    },\n    selected: {\n      type: [String, Number, Object],\n      \"default\": null\n    },\n    activeClass: {\n      type: String,\n      \"default\": ''\n    }\n  },\n  emits: ['select'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var computedSelect = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)({\n      get: function get() {\n        return props.selected ? props.items.findIndex(function (it) {\n          var itemValue = getStringKeysValue(props.valueKey, it);\n          var selectedValue = getStringKeysValue(props.valueKey, props.selected);\n          return itemValue === selectedValue;\n        }) : null;\n      },\n      set: function set(val) {\n        emit('select', props.items[val]);\n      }\n    });\n\n    var genItems = function genItems() {\n      return props.items.reduce(function (acc, it, i) {\n        var content = props.valueKey ? getStringKeysValue(props.valueKey, it) : it;\n        acc.push((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VListItem, {\n          key: i\n        }, {\n          \"default\": function _default() {\n            return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VListItemTitle, {}, {\n              \"default\": function _default() {\n                return content;\n              }\n            });\n          }\n        }));\n        return acc;\n      }, []);\n    };\n\n    var genItemsList = function genItemsList() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VList, VSelectList_defineProperty({\n        active: true,\n        color: '#ffffff',\n        activeClass: props.activeClass\n      }, 'onUpdate:value', function onUpdateValue(val) {\n        return computedSelect.value = val;\n      }), {\n        \"default\": function _default() {\n          return genItems();\n        }\n      });\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-select-list'\n      }, [props.items ? genItemsList() : null]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VSelect/VSelect.ts\nfunction VSelect_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VSelect_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VSelect_ownKeys(Object(source), !0).forEach(function (key) { VSelect_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VSelect_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VSelect_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\nvar VSelect = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-select',\n  props: {\n    modelValue: {\n      type: [String, Number, Object],\n      \"default\": null\n    },\n    items: {\n      type: Array,\n      \"default\": null\n    },\n    valueKey: {\n      type: String,\n      \"default\": ''\n    },\n    activeClass: {\n      type: String,\n      \"default\": 'primary white--text text--base'\n    }\n  },\n  emits: ['click', 'focus', 'select', 'blur', 'change', 'update:modelValue'],\n  setup: function setup(props, _ref) {\n    var attrs = _ref.attrs,\n        emit = _ref.emit;\n\n    var _useInputStates = useInputStates(props, {\n      attrs: attrs,\n      emit: emit\n    }),\n        isDisabled = _useInputStates.isDisabled,\n        isReadonly = _useInputStates.isReadonly,\n        state = _useInputStates.state,\n        onBlur = _useInputStates.onBlur,\n        onSelect = _useInputStates.onSelect,\n        onFocus = _useInputStates.onFocus;\n\n    var activator = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n    var computedValue = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.modelValue ? props.valueKey ? getStringKeysValue(props.valueKey, props.modelValue) : props.modelValue : '';\n    });\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        'v-select': true,\n        'v-select--expanded': state.focused,\n        'v-select--readonly': isReadonly.value,\n        'v-select--disabled': isDisabled.value\n      };\n    });\n\n    var genInput = function genInput(_ref2) {\n      var textCssColor = _ref2.textCssColor,\n          textClassColor = _ref2.textClassColor,\n          disabled = _ref2.disabled;\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('input', {\n        \"class\": VSelect_objectSpread({\n          'v-select__input': true\n        }, disabled ? textClassColor : {}),\n        style: VSelect_objectSpread({}, !disabled ? textCssColor : {}),\n        disabled: isDisabled.value,\n        type: attrs.type || 'text',\n        placeholder: attrs.placeholder,\n        value: computedValue.value,\n        readonly: true\n      });\n    };\n\n    var genSelectList = function genSelectList() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VMenu, {\n        internalActivator: true,\n        activator: activator.value,\n        inputActivator: '.v-input__text-field',\n        openOnClick: !isDisabled.value && !isReadonly.value,\n        maxHeight: 240,\n        zIndex: 12,\n        onShow: onFocus,\n        onHide: onBlur\n      }, {\n        \"default\": function _default() {\n          return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VSelectList, {\n            items: props.items,\n            selected: props.modelValue,\n            valueKey: props.valueKey,\n            activeClass: props.activeClass,\n            onSelect: onSelect\n          });\n        }\n      });\n    };\n\n    var genExpandIcon = function genExpandIcon() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, {\n        icon: FaIcons.$chevronDown,\n        color: !isDisabled.value ? attrs.color : '',\n        size: 16\n      });\n    };\n\n    var genSelect = function genSelect(_ref3) {\n      var textCssColor = _ref3.textCssColor,\n          textClassColor = _ref3.textClassColor,\n          disabled = _ref3.disabled;\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value\n      }, genInput({\n        textCssColor: textCssColor,\n        textClassColor: textClassColor,\n        disabled: disabled\n      }));\n    };\n\n    return function () {\n      var _h;\n\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VInput, {\n        ref: activator,\n        value: computedValue.value,\n        focused: state.focused\n      }, (_h = {}, VSelect_defineProperty(_h, 'text-field', function textField(_ref4) {\n        var textCssColor = _ref4.textCssColor,\n            textClassColor = _ref4.textClassColor,\n            disabled = _ref4.disabled;\n        return genSelect({\n          textCssColor: textCssColor,\n          textClassColor: textClassColor,\n          disabled: disabled\n        });\n      }), VSelect_defineProperty(_h, 'append-icon', function appendIcon() {\n        return genExpandIcon();\n      }), VSelect_defineProperty(_h, \"select\", function select() {\n        return activator.value ? genSelectList() : null;\n      }), _h));\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VSelect/index.ts\n\n\n;// CONCATENATED MODULE: ./src/components/VForm/VForm.ts\n\nvar VForm = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-form',\n  setup: function setup(_, _ref) {\n    var slots = _ref.slots;\n    var fields = [];\n\n    var addFieldValidator = function addFieldValidator(item) {\n      fields.push(item);\n    };\n\n    var removeFieldValidator = function removeFieldValidator(item) {\n      fields = fields.filter(function (v) {\n        return v !== item;\n      });\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.provide)('form', {\n      add: addFieldValidator,\n      remove: removeFieldValidator\n    });\n\n    var validate = function validate() {\n      var promises = [];\n      fields.forEach(function (v) {\n        promises.push(v());\n      });\n      return !promises.some(function (f) {\n        return !f;\n      }) ? Promise.resolve() : Promise.reject();\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('form', {\n        \"class\": 'v-form',\n        onSubmit: function onSubmit(e) {\n          return e.preventDefault();\n        }\n      }, {\n        \"default\": function _default() {\n          return slots[\"default\"] && slots[\"default\"]({\n            validate: validate\n          });\n        }\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VForm/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VLabel/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VBadge/VBadge.ts\nfunction VBadge_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VBadge_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VBadge_ownKeys(Object(source), !0).forEach(function (key) { VBadge_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VBadge_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VBadge_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\nvar VBadge = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-badge',\n  props: VBadge_objectSpread(VBadge_objectSpread({\n    dot: Boolean,\n    avatar: Boolean,\n    border: Boolean,\n    toggle: Boolean,\n    content: {\n      required: false\n    },\n    color: {\n      type: String,\n      \"default\": 'primary'\n    },\n    transition: {\n      type: String,\n      \"default\": 'scaleIn'\n    },\n    offsetY: {\n      type: [String, Number],\n      \"default\": 0\n    },\n    offsetX: {\n      type: [String, Number],\n      \"default\": 0\n    }\n  }, positionProps()), elevationProps()),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n\n    var _useElevation = useElevation(props),\n        elevationClasses = _useElevation.elevationClasses;\n\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var offset = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.dot ? 4 : 12;\n    });\n\n    var calcPosition = function calcPosition() {\n      var offsetVal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var value = offset.value - Number(offsetVal);\n      return \"\".concat(value, \"px\");\n    };\n\n    var computedLeft = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.left && calcPosition(props.offsetX);\n    });\n    var computedRight = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.right && calcPosition(props.offsetX);\n    });\n    var computedTop = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.top && calcPosition(props.offsetY);\n    });\n    var computedBottom = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.bottom && calcPosition(props.offsetY);\n    });\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        'v-badge': true,\n        'v-badge--border': props.border,\n        'v-badge--dot': props.dot,\n        'v-badge--avatar': props.avatar\n      };\n    });\n    var badgeClasses = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VBadge_objectSpread(VBadge_objectSpread({\n        'v-badge__badge': true\n      }, elevationClasses.value), props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VBadge_objectSpread({\n        top: computedTop.value,\n        right: computedRight.value,\n        bottom: computedBottom.value,\n        left: computedLeft.value\n      }, props.color ? setBackgroundCssColor(props.color) : {});\n    });\n\n    function addContent() {\n      if (props.dot) return undefined;\n      if (props.content) return String(props.content);\n      return undefined;\n    }\n\n    function genBadgeSlot() {\n      var propsData = {\n        \"class\": {\n          'v-badge__badge-slot': true\n        }\n      };\n      return slots.badge ? (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, slots.badge()) : null;\n    }\n\n    function genContent() {\n      var propsData = {\n        \"class\": {\n          'v-badge__content': true\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [addContent(), genBadgeSlot()]);\n    }\n\n    function genBadge() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": badgeClasses.value,\n        style: styles.value\n      }, genContent());\n    }\n\n    return function () {\n      var badge = genBadge();\n\n      if (props.toggle && !slots.badge) {\n        var _useToggle = useToggle(props, 'content'),\n            isActive = _useToggle.isActive;\n\n        badge = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.withDirectives)(badge, [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.vShow, isActive.value]]);\n      }\n\n      var propsData = {\n        \"class\": classes.value\n      };\n      var children = [useTransition(badge, props.transition), slots[\"default\"] && slots[\"default\"]()];\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, children);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VBadge/index.ts\n\n;// CONCATENATED MODULE: ./src/components/transitions/helpers.ts\nfunction helpers_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction helpers_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? helpers_ownKeys(Object(source), !0).forEach(function (key) { transitions_helpers_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : helpers_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction transitions_helpers_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nfunction createTransition(hooks) {\n  var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'in-out';\n  return function (vNode) {\n    return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.createBlock)(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.Transition, helpers_objectSpread({\n      mode: mode\n    }, hooks), {\n      \"default\": (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.withCtx)(function () {\n        return [vNode && (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(vNode)];\n      })\n    });\n  };\n}\n;// CONCATENATED MODULE: ./src/components/transitions/expand-transition.ts\nvar init = {\n  transition: null,\n  propSize: '',\n  height: 0,\n  width: 0\n};\nvar PRIMARY_TRANSITION = 'cubic-bezier(.25, .8, .5, 1)';\n\nvar resetStyles = function resetStyles(el) {\n  el.style[init.propSize] = '';\n  el.style.transition = '';\n};\n\nvar getChildrenSizes = function getChildrenSizes(el) {\n  return Array.prototype.reduce.call(el.children, function (acc, it) {\n    var size = getComputedStyle(it)[init.propSize];\n    return acc += parseFloat(size);\n  }, 0);\n};\n\nvar setInitStyles = function setInitStyles(el, x) {\n  init.propSize = x ? 'width' : 'height';\n  init.transition = getComputedStyle(el).transition;\n  init[init.propSize] = getChildrenSizes(el);\n};\n\nvar expandHooks = function expandHooks(expandedParentClass) {\n  var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return {\n    onBeforeEnter: function onBeforeEnter(el) {\n      el.style.transition = '';\n    },\n    onEnter: function onEnter(el) {\n      setInitStyles(el, x);\n      el.style[init.propSize] = '0';\n      el.style.transition = \".2s \".concat(init.propSize, \" \").concat(PRIMARY_TRANSITION);\n      requestAnimationFrame(function () {\n        el.style[init.propSize] = \"\".concat(init[init.propSize], \"px\");\n      });\n\n      if (expandedParentClass) {\n        el.parentNode.classList.add(expandedParentClass);\n      }\n    },\n    onAfterEnter: function onAfterEnter(el) {\n      el.parentNode.classList.remove(expandedParentClass);\n      resetStyles(el);\n    },\n    onBeforeLeave: function onBeforeLeave(el) {\n      setInitStyles(el, x);\n    },\n    onLeave: function onLeave(el) {\n      setInitStyles(el, x);\n      el.style.transition = \".2s \".concat(init.propSize, \" \").concat(PRIMARY_TRANSITION);\n      el.style[init.propSize] = \"\".concat(init[init.propSize], \"px\");\n      requestAnimationFrame(function () {\n        return el.style[init.propSize] = '0';\n      });\n    },\n    onAfterLeave: function onAfterLeave(el) {\n      requestAnimationFrame(function () {\n        return resetStyles(el);\n      });\n    }\n  };\n};\n;// CONCATENATED MODULE: ./src/components/transitions/index.ts\n\n\nvar ExpandTransition = createTransition(expandHooks('expand-transition'));\n;// CONCATENATED MODULE: ./src/components/VGroup/VGroup.ts\nfunction VGroup_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VGroup_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VGroup_ownKeys(Object(source), !0).forEach(function (key) { VGroup_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VGroup_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VGroup_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\nvar VGroup = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-group',\n  props: VGroup_objectSpread({\n    expand: Boolean,\n    subgroup: Boolean,\n    title: {\n      type: String,\n      \"default\": ''\n    },\n    activeClass: {\n      type: String,\n      \"default\": 'main--text text--evo'\n    },\n    prependIcon: {\n      type: String,\n      \"default\": ''\n    },\n    appendIcon: {\n      type: String,\n      \"default\": ''\n    }\n  }, colorProps()),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n\n    var _useIcons = useIcons(),\n        icons = _useIcons.icons;\n\n    var _useColors = useColors(),\n        setBackgroundCssColor = _useColors.setBackgroundCssColor,\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor;\n\n    var isActive = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(false);\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VGroup_objectSpread(VGroup_defineProperty({\n        'v-group': true,\n        'v-group--subgroup': props.subgroup,\n        'v-group--active': isActive.value,\n        'v-group--default': !isActive.value\n      }, props.activeClass, !!props.activeClass && isActive.value), setBackgroundClassNameColor(props.color));\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VGroup_objectSpread({}, setBackgroundCssColor(props.color));\n    });\n\n    var genHeaderContent = function genHeaderContent() {\n      var _a;\n\n      var content = props.title || ((_a = slots.header) === null || _a === void 0 ? void 0 : _a.call(slots));\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-group__header-content'\n      }, content);\n    };\n\n    var genExpandIcon = function genExpandIcon(icon) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-group__expand-icon'\n      }, icon);\n    };\n\n    var genSubExpandIcon = function genSubExpandIcon(icon) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-group__sub-expand-icon'\n      }, icon);\n    };\n\n    var genPrependIcon = function genPrependIcon(icon) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-group__prepend-icon'\n      }, icon);\n    };\n\n    var genAppendIcon = function genAppendIcon(icon) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-group__append-icon'\n      }, icon);\n    };\n\n    var genIcon = function genIcon(iconName) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, {\n        icon: iconName,\n        size: 16\n      });\n    };\n\n    var genGroupHeader = function genGroupHeader() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-group__header',\n        onClick: function onClick() {\n          return isActive.value = !isActive.value;\n        }\n      }, [props.subgroup && genSubExpandIcon(genIcon(icons.$caretDown)), props.prependIcon && genPrependIcon(genIcon(props.prependIcon)), genHeaderContent(), props.appendIcon && genAppendIcon(genIcon(props.appendIcon)), !props.subgroup && genExpandIcon(genIcon(icons.$chevronDown))]);\n    };\n\n    var genGroupChildContent = function genGroupChildContent() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.withDirectives)((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-group__content'\n      }, {\n        \"default\": function _default() {\n          var _a;\n\n          return (_a = slots[\"default\"]) === null || _a === void 0 ? void 0 : _a.call(slots);\n        }\n      }), [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.vShow, isActive.value]]);\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.expand;\n    }, function (to) {\n      return isActive.value = to;\n    }, {\n      immediate: true\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        style: styles.value\n      }, [genGroupHeader(), ExpandTransition(genGroupChildContent())]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VGroup/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VResize/VResize.ts\nfunction VResize_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VResize_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VResize_ownKeys(Object(source), !0).forEach(function (key) { VResize_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VResize_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VResize_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar VResize = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-resize',\n  props: VResize_objectSpread({\n    emit: {\n      type: Boolean,\n      \"default\": false\n    },\n    customClass: {\n      type: String\n    },\n    minSize: {\n      type: [String, Number],\n      \"default\": 50\n    },\n    color: {\n      type: String,\n      \"default\": 'primary'\n    }\n  }, positionProps()),\n  emits: ['resize'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var data = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({\n      parentNode: null,\n      startOffset: null,\n      offsetTop: 0,\n      offsetLeft: 0,\n      parentHeight: 0,\n      parentWidth: 0,\n      marginLeft: 0,\n      marginTop: 0,\n      left: 0,\n      top: 0,\n      isActive: false\n    });\n    var resizeRef = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VResize_objectSpread(VResize_defineProperty({\n        'v-resize': true,\n        'v-resize--active': data.isActive,\n        'v-resize--top': props.top,\n        'v-resize--bottom': props.bottom,\n        'v-resize--right': props.right,\n        'v-resize--left': props.left\n      }, props.customClass, !!props.customClass), props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VResize_objectSpread({}, props.color ? setBackgroundCssColor(props.color) : {});\n    });\n    var isDirectY = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.top || props.bottom;\n    });\n    var isNeedReverse = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.top || props.left;\n    });\n    var currentSize = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return isDirectY.value ? data.parentHeight : data.parentWidth;\n    });\n    var sizeProp = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return isDirectY.value ? 'height' : 'width';\n    });\n    var reverseDirection = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.top ? 'top' : 'left';\n    });\n    var reverseOffsetKey = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var side = reverseDirection.value;\n      return 'offset' + side[0].toUpperCase() + side.slice(1);\n    });\n    var offset = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return isDirectY.value ? data.offsetTop : data.offsetLeft;\n    });\n    var direction = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return isDirectY.value ? 'clientY' : 'clientX';\n    });\n\n    function moveReverse(size) {\n      var parentNode = data.parentNode,\n          left = data.left,\n          top = data.top;\n      var reverseTo = reverseDirection.value;\n      var value = !isDirectY.value ? currentSize.value - size + left : currentSize.value - size + top;\n      parentNode.style[reverseTo] = \"\".concat(value, \"px\");\n    }\n\n    function setOrEmitSize(size) {\n      if (props.emit) return emit('resize', size);\n      data.parentNode.style[sizeProp.value] = \"\".concat(size, \"px\");\n      isNeedReverse.value && moveReverse(size);\n    }\n\n    function resize(e) {\n      var size;\n\n      if (isNeedReverse.value) {\n        size = currentSize.value - (e[direction.value] - offset.value) + data.startOffset;\n      } else {\n        size = currentSize.value + (e[direction.value] - currentSize.value - offset.value - data.startOffset);\n      }\n\n      size > props.minSize && setOrEmitSize(size);\n    }\n\n    function resetMinMaxStyles() {\n      if (isDirectY.value) {\n        data.parentNode.style.maxHeight = '';\n        data.parentNode.style.minHeight = '';\n      } else {\n        data.parentNode.style.maxWidth = '';\n        data.parentNode.style.minWidth = '';\n      }\n    }\n\n    function setParent() {\n      var parent = resizeRef.value.parentNode;\n      data.parentNode = parent;\n    }\n\n    function computeSizes() {\n      var _getComputedStyle = getComputedStyle(data.parentNode),\n          top = _getComputedStyle.top,\n          left = _getComputedStyle.left,\n          height = _getComputedStyle.height,\n          width = _getComputedStyle.width,\n          marginLeft = _getComputedStyle.marginLeft,\n          marginTop = _getComputedStyle.marginTop;\n\n      data.offsetTop = data.parentNode.offsetTop;\n      data.offsetLeft = data.parentNode.offsetLeft;\n      data.marginLeft = parseFloat(marginLeft);\n      data.marginTop = parseFloat(marginTop);\n      data.parentHeight = parseFloat(height);\n      data.parentWidth = parseFloat(width);\n      data.top = parseFloat(top);\n      data.left = parseFloat(left);\n    }\n\n    function setStartPositions() {\n      var side = reverseDirection.value;\n      var offset = reverseOffsetKey.value;\n\n      if (data[side] === data[offset]) {\n        data.parentNode.style[side] = \"\".concat(data[offset], \"px\");\n      }\n    }\n\n    function disableSelection(e) {\n      e.preventDefault();\n    }\n\n    function initResize(e) {\n      if (!data.isActive) {\n        data.isActive = true;\n        computeSizes();\n        resetMinMaxStyles();\n        setStartPositions();\n        setStartOffset(e);\n      }\n\n      requestAnimationFrame(function () {\n        return resize(e);\n      });\n    }\n\n    function setStartOffset(e) {\n      if (isNeedReverse.value) data.startOffset = e[direction.value];else data.startOffset = e[direction.value] - currentSize.value;\n      data.startOffset -= offset.value;\n    }\n\n    function reset() {\n      data.isActive = false;\n      resetMinMaxStyles();\n    }\n\n    function onMouseup() {\n      reset();\n      removeHandlers();\n    }\n\n    function onMousedown() {\n      document.addEventListener('mousemove', initResize);\n      document.addEventListener('mouseup', onMouseup);\n      document.addEventListener('selectstart', disableSelection);\n    }\n\n    function removeHandlers() {\n      document.removeEventListener('mousemove', initResize);\n      document.removeEventListener('mouseup', onMouseup);\n      document.removeEventListener('selectstart', disableSelection);\n    }\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onMounted)(function () {\n      setParent();\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeUnmount)(function () {\n      document.removeEventListener('mousedown', onMousedown);\n    });\n    return function () {\n      var propsData = {\n        \"class\": classes.value,\n        style: styles.value,\n        key: 'resize',\n        ref: resizeRef,\n        onMousedown: onMousedown\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VResize/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VIcon/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VChip/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VCheckbox/VCheckbox.ts\nfunction VCheckbox_toConsumableArray(arr) { return VCheckbox_arrayWithoutHoles(arr) || VCheckbox_iterableToArray(arr) || VCheckbox_unsupportedIterableToArray(arr) || VCheckbox_nonIterableSpread(); }\n\nfunction VCheckbox_nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction VCheckbox_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return VCheckbox_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return VCheckbox_arrayLikeToArray(o, minLen); }\n\nfunction VCheckbox_iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction VCheckbox_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return VCheckbox_arrayLikeToArray(arr); }\n\nfunction VCheckbox_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\nvar VCheckbox = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-checkbox',\n  props: {\n    onIcon: {\n      type: String\n    },\n    offIcon: {\n      type: String\n    },\n    dark: Boolean,\n    label: String,\n    disabled: Boolean,\n    validate: Boolean,\n    modelValue: [Array, Boolean],\n    value: {\n      \"default\": null\n    },\n    color: {\n      type: String,\n      \"default\": 'primary'\n    }\n  },\n  emits: ['checked', 'update:modelValue'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var isChecked = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(false);\n    var form = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.inject)('form', null);\n\n    var _useValidation = useValidation(props),\n        validate = _useValidation.validate;\n\n    var _useIcons = useIcons(),\n        icons = _useIcons.icons;\n\n    var isArray = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return Array.isArray(props.modelValue);\n    });\n    var isValueSet = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.value !== null;\n    });\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        'v-checkbox': true,\n        'v-checkbox--disabled': props.disabled,\n        'v-checkbox--checked': isChecked.value,\n        'v-validatable': props.validate\n      };\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.modelValue;\n    }, function () {\n      if (isArray.value) {\n        if (isValueSet.value) {\n          isChecked.value = props.modelValue.includes(props.value);\n        } else {\n          warning('v-checkbox: set the \"value\" prop');\n        }\n      } else {\n        isChecked.value = !!props.modelValue;\n      }\n    }, {\n      immediate: true\n    });\n\n    var validateValue = function validateValue() {\n      return validate(isChecked.value);\n    };\n\n    var genLabel = function genLabel() {\n      var propsData = {\n        absolute: false,\n        color: props.dark ? 'white' : '',\n        disabled: props.disabled\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VLabel, propsData, {\n        \"default\": function _default() {\n          return props.label;\n        }\n      });\n    };\n\n    var genLabelWrapper = function genLabelWrapper() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-checkbox__label'\n      }, genLabel());\n    };\n\n    var genIcon = function genIcon() {\n      var onIcon = props.onIcon || icons.$checkOn;\n      var offIcon = props.offIcon || icons.$checkOff;\n      var icon = isChecked.value ? onIcon : offIcon;\n      var propsData = {\n        icon: icon,\n        color: props.color,\n        disabled: props.disabled\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, propsData);\n    };\n\n    var genCheckbox = function genCheckbox() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-checkbox__square'\n      }, genIcon());\n    };\n\n    var computeValue = function computeValue() {\n      if (isArray.value) {\n        var modelValue = VCheckbox_toConsumableArray(props.modelValue);\n\n        isChecked.value = !modelValue.includes(props.value);\n\n        if (!isChecked.value) {\n          modelValue = modelValue.filter(function (it) {\n            return it !== props.value;\n          });\n        } else {\n          modelValue.push(props.value);\n        }\n\n        return modelValue;\n      }\n\n      return isChecked.value = !isChecked.value;\n    };\n\n    var onClick = function onClick() {\n      if (props.disabled) return;\n      var value = computeValue();\n      props.validate && validateValue();\n      emit('update:modelValue', value);\n      emit('checked', value);\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeMount)(function () {\n      if (form) form.add(validateValue);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeUnmount)(function () {\n      form === null || form === void 0 ? void 0 : form.remove(validateValue);\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        onClick: onClick\n      }, [genCheckbox(), props.label && genLabelWrapper()]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VCheckbox/index.ts\n\n;// CONCATENATED MODULE: ./src/services/transitions.ts\nvar transitions;\n\n(function (transitions) {\n  transitions[\"FADE\"] = \"fade\";\n  transitions[\"FADE_IN_DOWN\"] = \"fade-in-down\";\n  transitions[\"FADE_IN_UP\"] = \"fade-in-up\";\n  transitions[\"SCALE_IN\"] = \"scale-in\";\n  transitions[\"SCALE_IN_OUT\"] = \"scale-in-out\";\n  transitions[\"SLIDE_IN_LEFT\"] = \"slide-in-left\";\n})(transitions || (transitions = {}));\n;// CONCATENATED MODULE: ./src/components/VTooltip/VTooltip.ts\nfunction VTooltip_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VTooltip_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VTooltip_ownKeys(Object(source), !0).forEach(function (key) { VTooltip_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VTooltip_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VTooltip_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\n\nvar VTooltip = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-tooltip',\n  props: VTooltip_objectSpread(VTooltip_objectSpread({\n    openOnHover: {\n      type: Boolean,\n      \"default\": true\n    },\n    color: {\n      type: String,\n      \"default\": 'grey lighten-1'\n    },\n    zIndex: [Number, String],\n    maxWidth: [Number, String],\n    minWidth: [Number, String],\n    modelValue: Boolean,\n    offsetX: {\n      type: [String, Number],\n      \"default\": 20\n    },\n    offsetY: {\n      type: [String, Number],\n      \"default\": 20\n    }\n  }, elevationProps()), positionProps()),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var tooltip = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({});\n    var activator = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({});\n    var tooltipRef = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n\n    var _useToggle = useToggle(props),\n        isActive = _useToggle.isActive;\n\n    var _useElevation = useElevation(props),\n        elevationClasses = _useElevation.elevationClasses;\n\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var _useActivator = useActivator(props),\n        activatorRef = _useActivator.activatorRef,\n        getActivatorSizes = _useActivator.getActivatorSizes,\n        genActivatorListeners = _useActivator.genActivatorListeners;\n\n    var handlers = {\n      mouseenter: function mouseenter() {\n        return isActive.value = true;\n      },\n      mouseleave: function mouseleave() {\n        return isActive.value = false;\n      }\n    };\n    var listeners = genActivatorListeners(props, handlers);\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VTooltip_objectSpread(VTooltip_objectSpread({\n        'v-tooltip': true,\n        'v-tooltip--top': props.top,\n        'v-tooltip--right': props.right,\n        'v-tooltip--left': props.left,\n        'v-tooltip--bottom': props.bottom\n      }, elevationClasses.value), props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var computeTopPosition = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return (props.top ? activator.top - tooltip.height : props.bottom ? activator.top + activator.height : activator.top + (activator.height - tooltip.height) / 2) + +props.offsetY;\n    });\n    var computeLeftPosition = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return (props.left ? activator.left - tooltip.width : props.right ? activator.left + activator.width : activator.left + (activator.width - tooltip.width) / 2) + +props.offsetX;\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VTooltip_objectSpread({\n        top: tooltip.top ? convertToUnit(tooltip.top) : '',\n        left: tooltip.top ? convertToUnit(tooltip.left) : '',\n        maxWidth: !!props.maxWidth ? \"\".concat(props.maxWidth, \"px\") : '',\n        minWidth: !!props.minWidth ? \"\".concat(props.minWidth, \"px\") : '',\n        zIndex: props.zIndex\n      }, props.color ? setBackgroundCssColor(props.color) : {});\n    });\n\n    function genActivator() {\n      var slotContent = slots.activator && slots.activator({\n        on: listeners\n      });\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(slotContent[0], {\n        ref: activatorRef\n      });\n    }\n\n    function genContent() {\n      var propsData = {\n        \"class\": classes.value,\n        style: styles.value,\n        ref: tooltipRef\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.withDirectives)((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', propsData, slots[\"default\"] && slots[\"default\"]()), [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.vShow, isActive.value]]);\n    }\n\n    function setTooltipPosition() {\n      if (tooltipRef.value) {\n        tooltip.width = tooltipRef.value.offsetWidth;\n        tooltip.height = tooltipRef.value.offsetHeight;\n        tooltip.top = computeTopPosition.value;\n        tooltip.left = computeLeftPosition.value;\n      }\n    }\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onMounted)(function () {\n      (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n        return isActive.value;\n      }, function (to) {\n        if (to) {\n          var _getActivatorSizes = getActivatorSizes(),\n              left = _getActivatorSizes.left,\n              top = _getActivatorSizes.top,\n              height = _getActivatorSizes.height,\n              width = _getActivatorSizes.width;\n\n          activator.left = left;\n          activator.top = top;\n          activator.height = height;\n          activator.width = width;\n          tooltip.top = 0;\n          tooltip.left = 0;\n          requestAnimationFrame(setTooltipPosition);\n        }\n      }, {\n        immediate: true\n      });\n    });\n    return function () {\n      var content = useTransition(genContent(), isActive.value ? transitions.SCALE_IN : transitions.FADE);\n      return [content, genActivator()];\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VTooltip/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VToolbar/VToolbar.ts\nfunction VToolbar_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VToolbar_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VToolbar_ownKeys(Object(source), !0).forEach(function (key) { VToolbar_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VToolbar_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VToolbar_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar VToolbar = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-toolbar',\n  props: VToolbar_objectSpread({\n    fixed: Boolean,\n    height: {\n      type: [String, Number],\n      \"default\": 56\n    }\n  }, colorProps('#ffffff')),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VToolbar_objectSpread({\n        'v-toolbar': true,\n        'v-toolbar--fixed': props.fixed\n      }, setBackgroundClassNameColor(props.color));\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VToolbar_objectSpread({\n        height: convertToUnit(props.height),\n        left: props.fixed ? convertToUnit(0) : '',\n        top: props.fixed ? convertToUnit(0) : ''\n      }, setBackgroundCssColor(props.color));\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        style: styles.value\n      }, {\n        \"default\": function _default() {\n          var _a;\n\n          return (_a = slots[\"default\"]) === null || _a === void 0 ? void 0 : _a.call(slots);\n        }\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VToolbar/VToolbarNavBtn.ts\n\n\n\nvar VToolbarNavBtn = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-toolbar-nav-btn',\n  emits: ['click'],\n  setup: function setup(_, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n\n    var _useIcons = useIcons(),\n        icons = _useIcons.icons;\n\n    var onClick = function onClick() {\n      return emit('click');\n    };\n\n    var genNavBtn = function genNavBtn() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, {\n        clickable: true,\n        icon: icons.$menu,\n        onClick: onClick\n      });\n    };\n\n    return function () {\n      var _a;\n\n      var content = ((_a = slots[\"default\"]) === null || _a === void 0 ? void 0 : _a.call(slots)) || genNavBtn();\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-toolbar__nav-btn'\n      }, content);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VToolbar/index.ts\n\n\n\nvar VToolbarItems = createSimpleFunctional('v-toolbar__items');\nvar VToolbarLogo = createSimpleFunctional('v-toolbar__logo');\nvar VToolbarContent = createSimpleFunctional('v-toolbar__content');\n\n;// CONCATENATED MODULE: ./src/components/VNavigation/VNavigation.ts\nfunction VNavigation_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VNavigation_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VNavigation_ownKeys(Object(source), !0).forEach(function (key) { VNavigation_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VNavigation_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VNavigation_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar VNavigation = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-navigation',\n  props: VNavigation_objectSpread({\n    fixed: Boolean,\n    right: Boolean,\n    left: Boolean,\n    onHover: Boolean,\n    miniVariant: Boolean,\n    expand: Boolean,\n    offsetTop: {\n      type: [String, Number],\n      \"default\": 0\n    },\n    miniVariantWidth: {\n      type: [String, Number],\n      \"default\": 56\n    },\n    maxVariantWidth: {\n      type: [String, Number],\n      \"default\": 237\n    }\n  }, colorProps('#ffffff')),\n  emits: ['update:expand'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var isHovered = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(false);\n    var isExpanded = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      if (props.onHover && isHovered.value) return true;\n      if (props.expand) return true;\n      if (!props.expand && props.miniVariant) return false;\n      if (!props.expand && !props.miniVariant) return false;\n      return !props.miniVariant;\n    });\n    var computedWidth = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      if (!isExpanded.value) return props.miniVariantWidth;\n      return props.maxVariantWidth;\n    });\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VNavigation_objectSpread({\n        'v-navigation': true,\n        'v-navigation--expanded': isExpanded.value,\n        'v-navigation--fixed': props.fixed\n      }, props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VNavigation_objectSpread({\n        width: convertToUnit(computedWidth.value),\n        maxHeight: \"calc(100vh - \".concat(convertToUnit(props.offsetTop), \")\"),\n        top: props.fixed ? convertToUnit(props.offsetTop) : '',\n        left: !props.right && props.fixed ? convertToUnit(0) : '',\n        right: props.right && props.fixed ? convertToUnit(0) : ''\n      }, props.color ? setBackgroundCssColor(props.color) : {});\n    });\n\n    var genNavigationContent = function genNavigationContent() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-navigation__content'\n      }, {\n        \"default\": function _default() {\n          var _a;\n\n          return (_a = slots[\"default\"]) === null || _a === void 0 ? void 0 : _a.call(slots);\n        }\n      });\n    };\n\n    var onMouseenter = function onMouseenter() {\n      if (!props.onHover || props.miniVariant) return;\n      isHovered.value = true;\n      emit('update:expand', true);\n    };\n\n    var onMouseleave = function onMouseleave() {\n      if (!props.onHover || props.miniVariant) return;\n      isHovered.value = false;\n      emit('update:expand', false);\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('aside', {\n        \"class\": classes.value,\n        style: styles.value,\n        onMouseenter: onMouseenter,\n        onMouseleave: onMouseleave\n      }, genNavigationContent());\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VNavigation/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VMain/VMain.ts\n\nvar VMain = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-main',\n  setup: function setup(_, _ref) {\n    var slots = _ref.slots;\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-main'\n      }, {\n        \"default\": function _default() {\n          var _a;\n\n          return (_a = slots[\"default\"]) === null || _a === void 0 ? void 0 : _a.call(slots);\n        }\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VMain/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VTextarea/VTextarea.ts\n\n\nvar VTextarea = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-textarea',\n  setup: function setup() {\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VTextField, {\n        tag: 'textarea',\n        \"class\": 'v-textarea'\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VTextarea/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VSkeleton/VSkeleton.ts\n\n\nvar VSkeleton = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-skeleton',\n  props: {\n    tag: {\n      type: String,\n      \"default\": 'div'\n    },\n    width: {\n      type: [Number, String],\n      \"default\": null\n    },\n    height: {\n      type: [Number, String],\n      \"default\": 20\n    },\n    radius: {\n      type: [Number, String],\n      \"default\": 5\n    },\n    light: {\n      type: Boolean,\n      \"default\": true\n    },\n    dynamic: Boolean\n  },\n  setup: function setup(props) {\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(props.tag, {\n        \"class\": {\n          'v-skeleton': true,\n          'v-skeleton--light': props.light,\n          'v-skeleton--dynamic': props.dynamic\n        },\n        style: {\n          width: props.width && convertToUnit(props.width),\n          flexBasis: props.width && convertToUnit(props.width) || '100%',\n          height: convertToUnit(props.height),\n          borderRadius: convertToUnit(props.radius)\n        }\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VSkeleton/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VDataTable/VDataTableCell.ts\nfunction VDataTableCell_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VDataTableCell_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VDataTableCell_ownKeys(Object(source), !0).forEach(function (key) { VDataTableCell_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VDataTableCell_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VDataTableCell_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar VDataTableCell = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-data-table-cell',\n  props: VDataTableCell_objectSpread({\n    dark: Boolean,\n    resizeable: Boolean,\n    align: {\n      type: String,\n      \"default\": 'start'\n    },\n    width: {\n      type: [String, Number],\n      \"default\": 75\n    },\n    resizerColor: {\n      type: String,\n      \"default\": 'primary'\n    },\n    contentColor: String\n  }, colorProps()),\n  emits: ['resize'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n\n    var _useColors = useColors(),\n        setTextClassNameColor = _useColors.setTextClassNameColor,\n        setTextCssColor = _useColors.setTextCssColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor,\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTableCell_objectSpread(VDataTableCell_objectSpread({\n        'v-data-table__cell': true\n      }, props.contentColor ? setTextClassNameColor(props.contentColor) : {}), props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTableCell_objectSpread(VDataTableCell_objectSpread({\n        width: convertToUnit(+props.width)\n      }, props.contentColor ? setTextCssColor(props.contentColor) : {}), props.color ? setBackgroundCssColor(props.color) : {});\n    });\n\n    function genResize() {\n      var propsData = {\n        right: true,\n        emit: true,\n        color: props.resizerColor,\n        onResize: function onResize($size) {\n          return emit('resize', $size);\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VResize, propsData);\n    }\n\n    function genCellContent() {\n      var propsData = {\n        \"class\": VDataTableCell_defineProperty({\n          'v-data-table__cell-content': true\n        }, \"text-align--\".concat(props.align), !!props.align)\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, slots[\"default\"] && slots[\"default\"]());\n    }\n\n    return function () {\n      var propsData = {\n        \"class\": classes.value,\n        style: styles.value\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [genCellContent(), props.resizeable && genResize()]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VDataTable/VDataTableHeader.ts\nfunction VDataTableHeader_toConsumableArray(arr) { return VDataTableHeader_arrayWithoutHoles(arr) || VDataTableHeader_iterableToArray(arr) || VDataTableHeader_unsupportedIterableToArray(arr) || VDataTableHeader_nonIterableSpread(); }\n\nfunction VDataTableHeader_nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction VDataTableHeader_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return VDataTableHeader_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return VDataTableHeader_arrayLikeToArray(o, minLen); }\n\nfunction VDataTableHeader_iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction VDataTableHeader_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return VDataTableHeader_arrayLikeToArray(arr); }\n\nfunction VDataTableHeader_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction VDataTableHeader_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VDataTableHeader_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VDataTableHeader_ownKeys(Object(source), !0).forEach(function (key) { VDataTableHeader_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VDataTableHeader_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VDataTableHeader_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\n\nvar VDataTableHeader = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-data-table-header',\n  props: {\n    showSequence: Boolean,\n    showCheckbox: Boolean,\n    cols: Array,\n    colWidth: {\n      type: [String, Number],\n      \"default\": 125\n    },\n    align: String,\n    options: Object\n  },\n  emits: ['sort', 'filter', 'select-all', 'update:cols'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var _useIcons = useIcons(),\n        icons = _useIcons.icons;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTableHeader_objectSpread({\n        'v-data-table__header': true\n      }, props.options.color ? setBackgroundClassNameColor(props.options.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTableHeader_objectSpread({}, props.options.color ? setBackgroundCssColor(props.options.color) : {});\n    });\n    var computedContentColor = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _a, _b;\n\n      return props.options.dark ? ((_a = props.options) === null || _a === void 0 ? void 0 : _a.contentColor) || 'white' : (_b = props.options) === null || _b === void 0 ? void 0 : _b.contentColor;\n    });\n    var cols = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTableHeader_toConsumableArray(props.cols);\n    });\n\n    var onSort = function onSort(item) {\n      emit('sort', item);\n    };\n\n    var _onInput = function onInput($value, item) {\n      item.filtered = !!$value;\n      emit('filter', {\n        value: $value,\n        col: item\n      });\n    };\n\n    var showFilter = function showFilter(item) {\n      if (item.showFilter) return;\n      item.showFilter = true;\n    };\n\n    var genSortButton = function genSortButton(item) {\n      var classes = {\n        'v-data-table-col__actions-sort': true,\n        'v-data-table-col__actions-sort--active': item.sorted\n      };\n      var propsData = {\n        clickable: true,\n        \"class\": classes,\n        icon: icons.$arrowUp,\n        onClick: function onClick() {\n          return onSort(item);\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, propsData);\n    };\n\n    var genFilterButton = function genFilterButton(item) {\n      var classes = {\n        'v-data-table-col__actions-filter': true,\n        'v-data-table-col__actions-filter--active': item.filtered\n      };\n      var propsData = {\n        clickable: true,\n        \"class\": classes,\n        icon: icons.$filter,\n        color: !item.cellClass ? computedContentColor.value : '',\n        onClick: function onClick() {\n          return showFilter(item);\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, propsData);\n    };\n\n    var genHeaderActions = function genHeaderActions(item) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', {\n        \"class\": 'v-data-table-col__actions'\n      }, [item.sortable && genSortButton(item), item.filterable && genFilterButton(item)]);\n    };\n\n    var genFilterInput = function genFilterInput(item) {\n      var propsData = {\n        label: 'search',\n        dark: props.options.dark,\n        color: !item.cellClass ? computedContentColor.value : '',\n        prependIcon: icons.$search,\n        clearable: true,\n        onInput: function onInput($value) {\n          return _onInput($value, item);\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VTextField, propsData);\n    };\n\n    var genFilterWrapper = function genFilterWrapper(col) {\n      var _a, _b;\n\n      var color = props.options.dark ? ((_a = props.options) === null || _a === void 0 ? void 0 : _a.color) || 'grey darken-3' : ((_b = props.options) === null || _b === void 0 ? void 0 : _b.color) || 'white';\n      var slotName = \"\".concat(col.key, \"-filter\");\n      var filterSlot = slots[slotName] && slots[slotName]({\n        filter: function filter(event) {\n          return _onInput(event, col);\n        }\n      });\n      var directive = col.showFilter ? {\n        handler: function handler() {\n          return setTimeout(function () {\n            return col.showFilter = false;\n          });\n        },\n        closeConditional: false\n      } : undefined;\n      var propsData = {\n        \"class\": VDataTableHeader_objectSpread(VDataTableHeader_defineProperty({\n          'v-data-table-col__filter': !filterSlot,\n          'v-data-table-col__custom-filter': !!filterSlot,\n          'elevation-5': true\n        }, col.cellClass, !!col.cellClass), color ? setBackgroundClassNameColor(color) : {}),\n        style: VDataTableHeader_objectSpread({}, color ? setBackgroundCssColor(color) : {})\n      };\n      return col.filterable && (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.withDirectives)((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, filterSlot || genFilterInput(col)), [[clickOutside, directive], [external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.vShow, col.showFilter]]);\n    };\n\n    var genHeaderTitle = function genHeaderTitle(col) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-data-table-col__title'\n      }, col.title);\n    };\n\n    var genNumberCell = function genNumberCell() {\n      var propsData = {\n        align: 'center',\n        \"class\": VDataTableHeader_defineProperty({\n          'v-data-table-col__number': true\n        }, props.cellClass, !!props.cellClass),\n        contentColor: computedContentColor.value,\n        color: props.options.color,\n        width: 50\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableCell, propsData, {\n        \"default\": function _default() {\n          return '№';\n        }\n      });\n    };\n\n    var genCheckboxCell = function genCheckboxCell() {\n      var propsData = {\n        align: 'center',\n        \"class\": VDataTableHeader_defineProperty({\n          'v-data-table-col__checkbox': true\n        }, props.cellClass, !!props.cellClass),\n        dark: props.options.dark,\n        contentColor: computedContentColor.value,\n        color: props.options.color,\n        width: 50\n      };\n      var content = {\n        \"default\": function _default() {\n          return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VCheckbox, {\n            color: computedContentColor.value,\n            onChecked: function onChecked(e) {\n              return emit('select-all', e);\n            }\n          });\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableCell, propsData, content);\n    };\n\n    var genHeaderCell = function genHeaderCell(col) {\n      var _a;\n\n      var propsData = {\n        dark: props.options.dark,\n        \"class\": VDataTableHeader_defineProperty({\n          'v-data-table-col': true,\n          'v-data-table-col--sorted': col.sorted\n        }, col.cellClass, !!col.cellClass),\n        contentColor: !col.cellClass ? computedContentColor.value : '',\n        color: !col.cellClass ? props.options.color : '',\n        width: col.width,\n        resizeable: col.resizeable,\n        resizerColor: (_a = props.options) === null || _a === void 0 ? void 0 : _a.resizerColor,\n        align: col.align || props.align,\n        onResize: function onResize($size) {\n          return col.width = $size;\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableCell, propsData, {\n        \"default\": function _default() {\n          return [genHeaderTitle(col), genHeaderActions(col), genFilterWrapper(col)];\n        }\n      });\n    };\n\n    var genHeaderChildren = function genHeaderChildren() {\n      var children = [];\n      var headerSlot = slots.header && slots.header(props);\n      props.showSequence && children.push(genNumberCell());\n      props.showCheckbox && children.push(genCheckboxCell());\n      cols.value.forEach(function (col) {\n        col.width = col.width || props.colWidth;\n\n        if (!col.hasOwnProperty('show')) {\n          col.show = !col.show;\n        }\n\n        !headerSlot[0].children && col.show && children.push(genHeaderCell(col));\n      });\n      headerSlot[0].children && children.push(headerSlot);\n      return children;\n    };\n\n    return function () {\n      var propsData = {\n        \"class\": classes.value,\n        style: styles.value\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, genHeaderChildren());\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VDataTable/VDataTableBody.ts\nfunction VDataTableBody_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VDataTableBody_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VDataTableBody_ownKeys(Object(source), !0).forEach(function (key) { VDataTableBody_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VDataTableBody_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VDataTableBody_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar VDataTableBody = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-data-table-body',\n  props: VDataTableBody_objectSpread({\n    cols: Array,\n    rows: Array,\n    dark: Boolean,\n    showSequence: Boolean,\n    showCheckbox: Boolean,\n    checkAllRows: Boolean,\n    align: String,\n    colWidth: {\n      type: [String, Number],\n      \"default\": 125\n    },\n    page: Number,\n    rowsOnPage: Number\n  }, colorProps()),\n  emits: ['select', 'click:row', 'dblclick:row', 'contextmenu:row'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n    var checkedRows = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)([]);\n\n    var _useColors = useColors(),\n        setBackgroundCssColor = _useColors.setBackgroundCssColor,\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTableBody_objectSpread({\n        'v-data-table__body': true\n      }, props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTableBody_objectSpread({}, props.color ? setBackgroundCssColor(props.color) : {});\n    });\n    var rowsOnTable = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _a;\n\n      return (_a = props.rows) === null || _a === void 0 ? void 0 : _a.slice((props.page - 1) * props.rowsOnPage, props.page * props.rowsOnPage);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.checkAllRows;\n    }, function (to) {\n      if (to) onSelectRows(props.rows);else onSelectRows([]);\n    });\n\n    function onSelectRows(rows) {\n      checkedRows.value = rows;\n      emit('select', checkedRows.value);\n    }\n\n    function genNumberCell(count) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableCell, {\n        width: 50,\n        align: 'center',\n        dark: props.dark,\n        color: props.color,\n        \"class\": 'v-data-table__row-number'\n      }, {\n        \"default\": function _default() {\n          return count + 1;\n        }\n      });\n    }\n\n    function genCheckboxCell(row) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableCell, {\n        width: 50,\n        align: 'center',\n        dark: props.dark,\n        color: props.color,\n        \"class\": 'v-data-table__row-checkbox'\n      }, {\n        \"default\": function _default() {\n          return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VCheckbox, {\n            modelValue: checkedRows.value,\n            color: props.dark ? 'white' : '',\n            value: row,\n            onChecked: onSelectRows\n          });\n        }\n      });\n    }\n\n    function genRowCell(col, row) {\n      var format = col.format;\n      var slotContent = slots[col.key] && slots[col.key]({\n        row: row,\n        format: format\n      });\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableCell, {\n        width: col.width,\n        align: col.align || props.align,\n        dark: props.dark\n      }, {\n        \"default\": function _default() {\n          return slotContent ? slotContent : format ? format(row) : String(row[col.key]);\n        }\n      });\n    }\n\n    function genTableRow(row, rowCount) {\n      var rowCells = [];\n      props.showSequence && rowCells.push(genNumberCell(rowCount));\n      props.showCheckbox && rowCells.push(genCheckboxCell(row));\n      props.cols.forEach(function (col) {\n        col.show && rowCells.push(genRowCell(col, row));\n      });\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": {\n          'v-data-table__row': true\n        },\n        onClick: function onClick() {\n          return emit('click:row', row);\n        },\n        onDblclick: function onDblclick() {\n          return emit('dblclick:row', row);\n        },\n        onContextmenu: function onContextmenu(e) {\n          e.preventDefault();\n          emit('contextmenu:row', row);\n        }\n      }, rowCells);\n    }\n\n    function genTableRows() {\n      var _a;\n\n      var tableRows = [];\n      var rowsLength = (_a = rowsOnTable.value) === null || _a === void 0 ? void 0 : _a.length;\n      var count = (props.page - 1) * props.rowsOnPage;\n\n      for (var i = 0; i < rowsLength; i += 1) {\n        tableRows.push(genTableRow(rowsOnTable.value[i], count + i));\n      }\n\n      return tableRows;\n    }\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        style: styles.value\n      }, genTableRows());\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VDataTable/VDataTableFooter.ts\nfunction VDataTableFooter_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VDataTableFooter_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VDataTableFooter_ownKeys(Object(source), !0).forEach(function (key) { VDataTableFooter_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VDataTableFooter_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VDataTableFooter_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\nvar VDataTableFooter = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-data-table-footer',\n  props: {\n    pages: Number,\n    page: Number,\n    firstOnPage: Number,\n    lastOnPage: Number,\n    pageCorrection: Number,\n    rowsLength: Number,\n    rowsOnPage: Number,\n    options: Object\n  },\n  emits: ['last-page', 'correct-page', 'select-rows-count', 'next-page', 'prev-page'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n\n    var _useColors = useColors(),\n        setBackgroundCssColor = _useColors.setBackgroundCssColor,\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setTextClassNameColor = _useColors.setTextClassNameColor,\n        setTextCssColor = _useColors.setTextCssColor;\n\n    var _useIcons = useIcons(),\n        icons = _useIcons.icons;\n\n    var activator = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n    var paginationDisplayText = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return \"\".concat(props.firstOnPage, \" - \").concat(props.lastOnPage, \"\\n        of \").concat(props.rowsLength);\n    });\n    var isLastPage = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.page >= props.pages;\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return isLastPage.value;\n    }, function (to) {\n      return to && emit('last-page');\n    });\n\n    function changeTableRowsPage(isNext) {\n      if (props.page === props.pages && isNext) return;\n      var event = isNext ? 'next-page' : 'prev-page';\n      emit(event, isNext ? 1 : -1);\n    }\n\n    function genPaginationButton() {\n      var isNext = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      var _a, _b;\n\n      var btnColor = ((_b = (_a = props.options) === null || _a === void 0 ? void 0 : _a.pagination) === null || _b === void 0 ? void 0 : _b.buttonsColor) || 'primary';\n      var contentColor = props.options.contentColor || 'white';\n      var disableIf = isNext && props.lastOnPage >= props.rowsLength || !isNext && props.firstOnPage === 1;\n      var propsData = {\n        width: 42,\n        color: btnColor,\n        elevation: 3,\n        disabled: disableIf,\n        text: disableIf,\n        onClick: function onClick() {\n          return changeTableRowsPage(isNext);\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VButton_VButton, propsData, {\n        \"default\": function _default() {\n          return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, {\n            icon: isNext ? icons.$arrowRight : icons.$arrowLeft,\n            color: disableIf ? 'grey lighten-1' : contentColor\n          });\n        }\n      });\n    }\n\n    function genPaginationPageDisplay() {\n      var _a, _b;\n\n      var displayColor = ((_b = (_a = props.options) === null || _a === void 0 ? void 0 : _a.pagination) === null || _b === void 0 ? void 0 : _b.displayColor) || 'primary';\n      var propsData = {\n        width: 42,\n        style: {\n          margin: '0 10px'\n        },\n        color: displayColor,\n        elevation: 3\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VButton_VButton, propsData, {\n        \"default\": function _default() {\n          return props.page;\n        }\n      });\n    }\n\n    var genRowsCountSelectList = function genRowsCountSelectList() {\n      var _a, _b, _c;\n\n      var options = ((_a = props.options.counts) === null || _a === void 0 ? void 0 : _a.rowsPerPageOptions) || [5, 10, 15, 20];\n      var color = ((_c = (_b = props.options) === null || _b === void 0 ? void 0 : _b.counts) === null || _c === void 0 ? void 0 : _c.displayColor) || 'primary';\n      var contentColor = props.options.contentColor || 'white';\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": VDataTableFooter_objectSpread(VDataTableFooter_objectSpread({\n          'v-data-table__rows-count-list': true\n        }, color ? setBackgroundClassNameColor(color) : {}), contentColor ? setTextClassNameColor(contentColor) : {}),\n        style: VDataTableFooter_objectSpread(VDataTableFooter_objectSpread({}, color ? setBackgroundCssColor(color) : {}), contentColor ? setTextCssColor(contentColor) : {})\n      }, options.map(function (it) {\n        return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n          \"class\": 'v-data-table__rows-count-item',\n          onClick: function onClick() {\n            return emit('select-rows-count', it);\n          }\n        }, [it]);\n      }));\n    };\n\n    var genMenu = function genMenu() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VMenu, {\n        activator: activator.value,\n        maxHeight: 240,\n        zIndex: 12,\n        openOnClick: true\n      }, {\n        \"default\": function _default() {\n          return genRowsCountSelectList();\n        }\n      });\n    };\n\n    var genRowsCountField = function genRowsCountField() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-data-table__rows-count-value',\n        textColor: props.options.contentColor\n      }, props.rowsOnPage);\n    };\n\n    var genRowsCountSelect = function genRowsCountSelect() {\n      var _a, _b;\n\n      var displayColor = ((_b = (_a = props.options) === null || _a === void 0 ? void 0 : _a.counts) === null || _b === void 0 ? void 0 : _b.displayColor) || 'primary';\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VButton_VButton, {\n        color: displayColor,\n        ref: activator\n      }, {\n        \"default\": function _default() {\n          return [genRowsCountField(), activator.value && genMenu()];\n        }\n      });\n    };\n\n    function genRowsCountSelectCaption() {\n      var _a, _b;\n\n      var color = props.options.contentColor;\n      var propsData = {\n        \"class\": VDataTableFooter_objectSpread({\n          'v-data-table__pagination-label': true\n        }, color ? setTextClassNameColor(color) : {}),\n        style: VDataTableFooter_objectSpread({}, color ? setTextCssColor(color) : {})\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', propsData, ((_b = (_a = props.options) === null || _a === void 0 ? void 0 : _a.counts) === null || _b === void 0 ? void 0 : _b.rowsPerPageText) || 'Rows per page');\n    }\n\n    function genRowsCountSelectBlock() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-data-table__pagination-select'\n      }, [genRowsCountSelectCaption(), genRowsCountSelect()]);\n    }\n\n    function genPagesCountDisplay() {\n      var _a;\n\n      var color = props.options.contentColor;\n      var propsData = {\n        \"class\": VDataTableFooter_objectSpread({\n          'v-data-table__pagination-pages': true\n        }, color ? setTextClassNameColor(color) : {}),\n        style: VDataTableFooter_objectSpread({}, color ? setTextCssColor(color) : {})\n      };\n      props.pageCorrection && emit('correct-page', -props.pageCorrection);\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, props.rowsLength && ((_a = slots['pagination-text']) === null || _a === void 0 ? void 0 : _a.call(slots)) || props.rowsLength && paginationDisplayText.value || '-');\n    }\n\n    function genPaginationButtonsBlock() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": {\n          'v-data-table__pagination-route': true\n        }\n      }, [genPaginationButton(), genPaginationPageDisplay(), genPaginationButton(true)]);\n    }\n\n    function genPaginationBlock() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-data-table__pagination'\n      }, [genRowsCountSelectBlock(), genPagesCountDisplay(), genPaginationButtonsBlock()]);\n    }\n\n    return function () {\n      var propsData = {\n        \"class\": VDataTableFooter_objectSpread({\n          'v-data-table__footer': true\n        }, props.options.color ? setBackgroundClassNameColor(props.options.color) : {}),\n        style: VDataTableFooter_objectSpread({}, props.options.color ? setBackgroundCssColor(props.options.color) : {})\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, genPaginationBlock());\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VDataTable/VDataTable.ts\nfunction VDataTable_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VDataTable_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VDataTable_ownKeys(Object(source), !0).forEach(function (key) { VDataTable_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VDataTable_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VDataTable_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\nvar VDataTable = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-data-table',\n  props: {\n    cols: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    rows: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    dark: Boolean,\n    showSequence: Boolean,\n    showCheckbox: Boolean,\n    align: {\n      type: String,\n      validator: function validator(val) {\n        return ['left', 'center', 'right'].includes(val);\n      }\n    },\n    color: {\n      type: String,\n      \"default\": 'white'\n    },\n    headerOptions: {\n      type: Object,\n      \"default\": function _default() {\n        return {};\n      }\n    },\n    footerOptions: {\n      type: Object,\n      \"default\": function _default() {\n        return {};\n      }\n    },\n    customFilter: Function\n  },\n  emits: ['last-page', 'select:row', 'click:row', 'dblclick:row', 'contextmenu:row'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n    var data = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({\n      cols: [],\n      rows: [],\n      checkedRows: [],\n      rowsOnPage: 20,\n      page: 1,\n      isAllRowsChecked: false\n    });\n\n    var _useColors = useColors(),\n        setBackgroundCssColor = _useColors.setBackgroundCssColor,\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor;\n\n    var filters = {};\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTable_objectSpread({\n        'v-data-table': true\n      }, props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTable_objectSpread({}, props.color ? setBackgroundCssColor(props.color) : {});\n    });\n    var headerOptions = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTable_objectSpread({\n        color: props.color,\n        dark: props.dark\n      }, props.headerOptions);\n    });\n    var footerOptions = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTable_objectSpread({\n        color: props.color,\n        dark: props.dark\n      }, props.footerOptions);\n    });\n    var pages = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _a;\n\n      return Math.ceil(((_a = data.rows) === null || _a === void 0 ? void 0 : _a.length) / data.rowsOnPage);\n    });\n    var firstOnPage = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return data.page === 1 ? 1 : (data.page - 1) * data.rowsOnPage + 1;\n    });\n    var lastOnPage = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _a, _b;\n\n      return data.page * data.rowsOnPage > ((_a = data.rows) === null || _a === void 0 ? void 0 : _a.length) ? (_b = data.rows) === null || _b === void 0 ? void 0 : _b.length : data.page * data.rowsOnPage;\n    });\n    var pageCorrection = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _a, _b;\n\n      if ((data.page - 1) * data.rowsOnPage > ((_a = data.rows) === null || _a === void 0 ? void 0 : _a.length)) {\n        return Math.ceil((data.page * data.rowsOnPage - ((_b = data.rows) === null || _b === void 0 ? void 0 : _b.length)) / data.rowsOnPage);\n      }\n\n      return null;\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.cols;\n    }, function (to) {\n      return data.cols = to;\n    }, {\n      immediate: true\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.rows;\n    }, function (to) {\n      return data.rows = to;\n    }, {\n      immediate: true\n    });\n\n    function onSelectAll(value) {\n      data.isAllRowsChecked = value;\n      data.rows.forEach(function (row) {\n        return row.checked = value;\n      });\n    }\n\n    function onSelect(rows) {\n      data.checkedRows = rows;\n      emit('select:row', data.checkedRows);\n    }\n\n    function onPrevPage(num) {\n      data.page = data.page > 1 ? data.page + num : data.page;\n    }\n\n    function onNextPage(num) {\n      if (data.rows.length - data.page * data.rowsOnPage > 0) {\n        data.page += num;\n      }\n    }\n\n    function onSort(col) {\n      if (col.sorted) {\n        col.sorted = !col.sorted;\n        return sortColumn(col);\n      }\n\n      data.cols.forEach(function (c) {\n        return c.sorted = col.key === c.key;\n      });\n      sortColumn(col);\n    }\n\n    function sortColumn(col) {\n      if (!col.sorted) {\n        return data.rows.reverse();\n      }\n\n      var executor = col.sort || function (a, b) {\n        if (col.format) return col.format(a) > col.format(b) ? 1 : -1;\n        if (col.sorted) return a[col.key] > b[col.key] ? 1 : -1;\n      };\n\n      data.rows.sort(executor);\n    }\n\n    function onFilter(_ref2) {\n      var value = _ref2.value,\n          col = _ref2.col;\n      if (!value && filters[col.key]) delete filters[col.key];\n      if (value) filters[col.key] = value;\n\n      if (col.filter) {\n        return data.rows = col.filter({\n          value: value,\n          col: col\n        });\n      }\n\n      if (props.customFilter) {\n        return props.customFilter(filters);\n      }\n\n      if (!Object.keys(filters).length) {\n        return data.rows = props.rows;\n      }\n\n      data.rows = filterRows(props.rows, props.cols);\n      data.page = 1;\n    }\n\n    function onSelectRowsCount(count) {\n      data.rowsOnPage = count;\n    }\n\n    function filterRows(rows, cols) {\n      var filterKeys = Object.keys(filters);\n      return rows.reduce(function (acc, row) {\n        var rowResults = [];\n        filterKeys.forEach(function (key) {\n          var _cols$find = cols.find(function (col) {\n            return col.key === key;\n          }),\n              format = _cols$find.format;\n\n          var value = format ? format(row) : row[key];\n          var rowKeyValue = \"\".concat(value).toLowerCase();\n          var filterValue = \"\".concat(filters[key]).toLowerCase();\n\n          if (rowKeyValue.includes(filterValue)) {\n            rowResults.push(row[key]);\n          }\n        });\n\n        if (rowResults.length === filterKeys.length && rowResults.every(function (value) {\n          return !!value;\n        })) {\n          acc.push(row);\n        }\n\n        return acc;\n      }, []);\n    }\n\n    function genTableTools() {\n      var propsData = {\n        \"class\": 'v-data-table__toolbar'\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, {\n        \"default\": function _default() {\n          return slots.toolbar && slots.toolbar();\n        }\n      });\n    }\n\n    function genTableHeader() {\n      var propsData = {\n        cols: data.cols,\n        color: props.color,\n        showCheckbox: props.showCheckbox,\n        dark: props.dark,\n        align: props.align,\n        showSequence: props.showSequence,\n        options: headerOptions.value,\n        onFilter: onFilter,\n        onSort: onSort,\n        onSelectAll: onSelectAll\n      };\n      var content = data.cols.reduce(function (acc, col) {\n        var slotName = \"\".concat(col.key, \"-filter\");\n\n        if (col && slots[slotName]) {\n          acc[slotName] = addScopedSlot(slotName, slots);\n        }\n\n        return acc;\n      }, {});\n      content.header = addScopedSlot('header', slots);\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableHeader, propsData, content);\n    }\n\n    function genTableBody() {\n      var _propsData;\n\n      var propsData = (_propsData = {\n        cols: data.cols,\n        rows: data.rows,\n        page: data.page,\n        rowsOnPage: data.rowsOnPage,\n        showCheckbox: props.showCheckbox,\n        checkAllRows: data.isAllRowsChecked,\n        align: props.align,\n        dark: props.dark,\n        showSequence: props.showSequence,\n        color: props.color,\n        onSelect: onSelect\n      }, VDataTable_defineProperty(_propsData, 'onClick:row', function onClickRow(e) {\n        return emit('click:row', e);\n      }), VDataTable_defineProperty(_propsData, 'onDblclick:row', function onDblclickRow(e) {\n        return emit('dblclick:row', e);\n      }), VDataTable_defineProperty(_propsData, 'onContextmenu:row', function onContextmenuRow(e) {\n        return emit('contextmenu:row', e);\n      }), _propsData);\n      var content = props.cols.reduce(function (acc, col) {\n        if (col && slots[col.key]) {\n          acc[col.key] = addScopedSlot(col.key, slots);\n        }\n\n        return acc;\n      }, {});\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableBody, propsData, content);\n    }\n\n    function genTableFooter() {\n      var _a;\n\n      var propsData = {\n        pages: pages.value,\n        page: data.page,\n        firstOnPage: firstOnPage.value,\n        lastOnPage: lastOnPage.value,\n        pageCorrection: pageCorrection.value,\n        rowsOnPage: data.rowsOnPage,\n        rowsLength: (_a = data.rows) === null || _a === void 0 ? void 0 : _a.length,\n        options: footerOptions.value,\n        onPrevPage: onPrevPage,\n        onNextPage: onNextPage,\n        onSelectRowsCount: onSelectRowsCount,\n        onLastPage: function onLastPage() {\n          return emit('last-page', props.rows.length);\n        },\n        onCorrectPage: function onCorrectPage(val) {\n          return data.page += val;\n        }\n      };\n      var content = slots['pagination-text'] ? VDataTable_defineProperty({}, 'pagination-text', function paginationText() {\n        var _a;\n\n        return slots['pagination-text'] && slots['pagination-text']({\n          start: firstOnPage.value,\n          last: lastOnPage.value,\n          length: (_a = data.rows) === null || _a === void 0 ? void 0 : _a.length\n        });\n      }) : '';\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableFooter, propsData, content);\n    }\n\n    function genTableInner() {\n      var propsData = {\n        \"class\": 'v-data-table__inner'\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [genTableHeader(), genTableBody()]);\n    }\n\n    return function () {\n      var propsData = {\n        \"class\": classes.value,\n        style: styles.value\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [slots.toolbar && genTableTools(), genTableInner(), genTableFooter()]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VDataTable/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VDatePicker/VDatepickerHeader.ts\nfunction VDatepickerHeader_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VDatepickerHeader_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VDatepickerHeader_ownKeys(Object(source), !0).forEach(function (key) { VDatepickerHeader_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VDatepickerHeader_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VDatepickerHeader_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar VDatepickerHeader = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-date-picker-header',\n  props: {\n    onNext: Function,\n    onPrev: Function,\n    color: String\n  },\n  emits: ['table'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n\n    var _useColors = useColors(),\n        setTextClassNameColor = _useColors.setTextClassNameColor,\n        setTextCssColor = _useColors.setTextCssColor;\n\n    var _useIcons = useIcons(),\n        icons = _useIcons.icons;\n\n    var genHeaderButton = function genHeaderButton(isRight) {\n      var icon = isRight ? icons.$arrowRight : icons.$arrowLeft;\n      var propsData = {\n        \"class\": 'v-date-picker__header-button'\n      };\n      var iconPropsData = {\n        icon: icon,\n        clickable: true,\n        \"class\": VDatepickerHeader_objectSpread({}, props.color ? setTextClassNameColor(props.color) : {}),\n        style: VDatepickerHeader_objectSpread({}, props.color ? setTextCssColor(props.color) : {}),\n        onClick: function onClick() {\n          return isRight ? props.onNext() : props.onPrev();\n        }\n      };\n      var arrowBtn = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, iconPropsData);\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, arrowBtn);\n    };\n\n    var genHeaderDisplay = function genHeaderDisplay() {\n      var propsData = {\n        \"class\": VDatepickerHeader_objectSpread({\n          'v-date-picker__header-display': true\n        }, props.color ? setTextClassNameColor(props.color) : {}),\n        style: VDatepickerHeader_objectSpread({}, props.color ? setTextCssColor(props.color) : {}),\n        onClick: function onClick() {\n          return emit('table');\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, slots[\"default\"] && slots[\"default\"]());\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-date-picker__header'\n      }, [genHeaderButton(false), genHeaderDisplay(), genHeaderButton(true)]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VDatePicker/utils.ts\nfunction utils_typeof(obj) { \"@babel/helpers - typeof\"; return utils_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, utils_typeof(obj); }\n\nfunction getMonth(date) {\n  return date.getMonth();\n}\nfunction getFullYear(date) {\n  return date.getFullYear();\n}\nfunction getDate(date) {\n  return date.getDate();\n}\nfunction getDay(date) {\n  return date.getDay();\n}\nfunction getHours(date) {\n  return date.getHours();\n}\nfunction getMinutes(date) {\n  return date.getMinutes();\n}\nfunction setFullYear(date, value) {\n  return date.setFullYear(value);\n}\nfunction setMonth(date, value) {\n  return date.setMonth(value);\n}\nfunction setDate(date, value) {\n  return date.setDate(value);\n}\nfunction isValidDate(date) {\n  if (Object.prototype.toString.call(date) !== '[object Date]') {\n    return false;\n  }\n\n  return !isNaN(date.getTime());\n}\n\nfunction getDayNameAbbr(date, days) {\n  if (utils_typeof(date) !== 'object') {\n    throw TypeError('Invalid Type');\n  }\n\n  return days[getDay(date)];\n}\n\nfunction getMonthName(month, months) {\n  if (!months) {\n    throw Error('missing second parameter Months array');\n  }\n\n  return months[month];\n}\n\nfunction getMonthNameAbbr(month, monthsAbbr) {\n  if (!monthsAbbr) {\n    throw Error('missing 2nd paramter Months array');\n  }\n\n  if (utils_typeof(month) === 'object') {\n    return monthsAbbr[getMonth(month)];\n  }\n\n  if (typeof month === 'number') {\n    return monthsAbbr[month];\n  }\n\n  throw TypeError('Invalid type');\n}\n\nfunction formatDate(date, format, translation) {\n  var year = getFullYear(date);\n  var month = getMonth(date) + 1;\n  var day = getDate(date);\n  return format.replace(/dd/, ('0' + day).slice(-2)).replace(/d/, \"\".concat(day)).replace(/yyyy/, \"\".concat(year)).replace(/yy/, String(year).slice(2)).replace(/MMMM/, getMonthName(getMonth(date), translation.months)).replace(/MMM/, getMonthNameAbbr(getMonth(date), translation.monthsAbbr)).replace(/MM/, ('0' + month).slice(-2)).replace(/M(?!a|ä|e)/, \"\".concat(month)).replace(/D(?!e|é|i)/, getDayNameAbbr(date, translation.week));\n}\nfunction validateDateInput(val) {\n  return val === null || val instanceof Date || typeof val === 'string' || typeof val === 'number';\n}\n;// CONCATENATED MODULE: ./src/components/VDatePicker/helpers.ts\n\n\nfunction genTableRows(vNodesArray, rowClassName, cellsInRow) {\n  var tableRows = [];\n  var vNodesInRow = [];\n\n  var genTableRow = function genTableRow(cellVNodes) {\n    return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n      \"class\": rowClassName\n    }, cellVNodes);\n  };\n\n  for (var i = 0; i <= vNodesArray.length; i += 1) {\n    if (i && !(i % cellsInRow)) {\n      tableRows.push(genTableRow(vNodesInRow));\n      vNodesInRow = [];\n    }\n\n    vNodesInRow.push(vNodesArray[i]);\n  }\n\n  if (vNodesInRow.length) {\n    tableRows.push(genTableRow(vNodesInRow));\n  }\n\n  return tableRows;\n}\nfunction toDateString(date) {\n  return new Date(date.year, date.month, date.date);\n}\nfunction parseDate(selectedDate) {\n  var date = new Date(selectedDate);\n  var day = getDay(date);\n  return {\n    year: getFullYear(date),\n    month: getMonth(date),\n    date: getDate(date),\n    mls: date.getTime(),\n    day: day\n  };\n}\n;// CONCATENATED MODULE: ./src/components/VDatePicker/VDatePickerDates.ts\n\n\n\nvar VDatePickerDates = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-date-picker-dates',\n  props: {\n    locale: Array,\n    year: [String, Number],\n    month: [String, Number],\n    date: [String, Number],\n    value: Object,\n    mondayFirst: Boolean,\n    disabledDates: Object\n  },\n  emits: ['update:month', 'update:value'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n    var FIRST_MONTH = 0;\n    var LAST_MONTH = 11;\n    var DAYS = [0, 1, 2, 3, 4, 5, 6];\n    var ANIMATION_TIMEOUT = 0;\n    var dates = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)([]);\n    var isDatesChanged = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(false);\n    var today = parseDate(new Date());\n    var handlers = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.inject)('handlers');\n    handlers.value = {\n      onNext: function onNext() {\n        return updateMonth(true);\n      },\n      onPrev: function onPrev() {\n        return updateMonth(false);\n      }\n    };\n\n    if (props.mondayFirst) {\n      DAYS.push(DAYS.splice(0, 1)[0]);\n    }\n\n    var daysInMonth = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return new Date(props.year, props.month + 1, 0).getDate();\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.month;\n    }, function () {\n      return genTableDates();\n    }, {\n      immediate: true\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return isDatesChanged.value;\n    }, function () {\n      return setTimeout(function () {\n        return isDatesChanged.value = false;\n      }, ANIMATION_TIMEOUT);\n    });\n\n    function updateMonth(isNext) {\n      var params = {};\n      params.month = props.month + (isNext ? 1 : -1);\n      if (!isNext && params.month < FIRST_MONTH) params.month = LAST_MONTH;\n      if (isNext && params.month > LAST_MONTH) params.month = FIRST_MONTH;\n      if (isNext && !params.month) params.year = props.year + 1;\n      if (!isNext && params.month === LAST_MONTH) params.year = props.year - 1;\n      isDatesChanged.value = true;\n      emit('update:month', params);\n    }\n\n    function genWeekDays() {\n      var propsData = {\n        \"class\": 'v-date-picker-dates__day'\n      };\n      return DAYS.map(function (day) {\n        return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', propsData, props.locale[day]);\n      });\n    }\n\n    function genDateObject(date) {\n      var year = props.year,\n          month = props.month;\n      return parseDate(new Date(year, month, date));\n    }\n\n    function setEmptiesBeforeFirstDate(dateObject) {\n      var firstDay = DAYS[0];\n      var startDay = firstDay && !dateObject.day ? dateObject.day : firstDay;\n      var tillDay = firstDay && !dateObject.day ? DAYS.length - 1 : dateObject.day;\n\n      for (var i = startDay; i <= tillDay; i += 1) {\n        dates.value[i] = {\n          date: null\n        };\n      }\n\n      dates.value[tillDay] = dateObject;\n    }\n\n    function genTableDates() {\n      dates.value = [];\n\n      for (var i = 1; i <= daysInMonth.value; i += 1) {\n        var dateObject = genDateObject(i);\n\n        if (i === 1) {\n          setEmptiesBeforeFirstDate(dateObject);\n        } else {\n          dates.value[dates.value.length] = dateObject;\n        }\n      }\n    }\n\n    function compareDates(date1, date2) {\n      return date1.date === date2.date && date1.month === date2.month && date1.year === date2.year;\n    }\n\n    function setDisabled(date) {\n      if (!date.date) return false;\n      if (!props.disabledDates) return !!date.isHoliday;\n      var disabledDates = props.disabledDates;\n      return disabledDates.daysOfMonth && disableDaysOfMonth(date) || disabledDates.from && disableFromTo(date, disabledDates) || disabledDates.dates && disableDates(date) || disabledDates.days && disableDays(date) || disabledDates.ranges && disableRanges(date) || disabledDates.custom && disabledDates.custom(date);\n    }\n\n    function disableFromTo(date, _ref2) {\n      var from = _ref2.from,\n          to = _ref2.to;\n      var dateFrom = parseDate(from);\n      var dateTo = parseDate(to);\n      return date.mls >= dateFrom.mls && date.mls <= dateTo.mls;\n    }\n\n    function disableDaysOfMonth(date) {\n      return props.disabledDates.daysOfMonth.some(function (it) {\n        return it === date.date;\n      });\n    }\n\n    function disableDates(date) {\n      return props.disabledDates.dates.find(function (d) {\n        return String(d) === String(toDateString(date));\n      });\n    }\n\n    function disableDays(date) {\n      return props.disabledDates.days.find(function (d) {\n        return d === date.day;\n      }) >= 0;\n    }\n\n    function disableRanges(date) {\n      var ranges = props.disabledDates.ranges;\n\n      for (var i = 0; i < ranges.length; i += 1) {\n        if (disableFromTo(date, ranges[i])) return true;\n      }\n    }\n\n    function genDateCell(date) {\n      var isSelected = compareDates(date, props.value);\n      var isToday = compareDates(date, today);\n      date.isHoliday = setDisabled(date);\n      var propsData = {\n        \"class\": {\n          'v-date-picker-dates__cell': !!date.date,\n          'v-date-picker-dates__cell--empty': !date.date,\n          'v-date-picker-dates__cell--selected': isSelected && !props.value[\"default\"],\n          'v-date-picker-dates__cell--current-date': isToday,\n          'v-date-picker-dates__cell--holiday': date.date && date.isHoliday\n        },\n        onClick: function onClick() {\n          return date.date && emit('update:value', date);\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [date.date && slots.date && slots.date(date) || date.date]);\n    }\n\n    function genDateCells() {\n      return dates.value.reduce(function (acc, dateObject) {\n        acc.push(genDateCell(dateObject));\n        return acc;\n      }, []);\n    }\n\n    function genDateRows() {\n      var datesVNodes = genDateCells();\n      return genTableRows(datesVNodes, 'v-date-picker-dates__row', DAYS.length);\n    }\n\n    function genDates() {\n      return !isDatesChanged.value && (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-date-picker-dates__dates'\n      }, genDateRows()) || null;\n    }\n\n    function genWeek() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-date-picker-dates__week'\n      }, genWeekDays());\n    }\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-date-picker-dates'\n      }, [genWeek(), useTransition(genDates(), 'fade')]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VDatePicker/VDatePickerYears.ts\n\n\n\nvar VDatePickerYears = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-date-picker-years',\n  props: {\n    year: [Number, String]\n  },\n  emits: ['update:year'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var LIMIT = 100;\n    var ON_TABLE = 20;\n    var CELLS_IN_ROW = 4;\n    var CURRENT_YEAR = new Date().getFullYear();\n    var ANIMATION_TIMEOUT = 100;\n    var years = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)([]);\n    var onTableIndex = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(0);\n    var isListChanged = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(false);\n    var transition = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)('');\n    var handlers = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.inject)('handlers');\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watchEffect)(function () {\n      return isListChanged.value && setTimeout(function () {\n        isListChanged.value = false;\n      }, ANIMATION_TIMEOUT);\n    });\n    var computedYear = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)({\n      get: function get() {\n        return +props.year || CURRENT_YEAR;\n      },\n      set: function set(val) {\n        emit('update:year', val);\n      }\n    });\n\n    if (handlers === null || handlers === void 0 ? void 0 : handlers.value) {\n      handlers.value = {\n        onNext: function onNext() {\n          return changeYearsList(true);\n        },\n        onPrev: function onPrev() {\n          return changeYearsList(false);\n        }\n      };\n    }\n\n    function setCurrentTransition(isNext) {\n      transition.value = isNext ? 'fade-in-down' : 'fade-in-up';\n    }\n\n    function setTableIndex() {\n      onTableIndex.value = years.value.findIndex(function (row) {\n        return row.find(function (year) {\n          return year === computedYear.value;\n        });\n      });\n    }\n\n    function changeYearsList(isNext) {\n      var max = years.value.length - 1;\n      var val = isNext ? 1 : -1;\n      if (onTableIndex.value === max && val > 0 || onTableIndex.value === 0 && val < 0) return;\n      setCurrentTransition(isNext);\n      onTableIndex.value += val;\n      isListChanged.value = true;\n    }\n\n    function genTableYears() {\n      var fromYear = CURRENT_YEAR - LIMIT;\n      var maxYears = LIMIT * 2;\n      var yearsList = [];\n\n      for (var i = 0; i <= maxYears; i += 1) {\n        if (yearsList.length === ON_TABLE) {\n          years.value.push(yearsList);\n          yearsList = [];\n        }\n\n        yearsList.push(fromYear + i);\n      }\n    }\n\n    function genYearCell(year) {\n      var isSelected = year === computedYear.value;\n      var propsData = {\n        \"class\": {\n          'v-date-picker-years__cell': true,\n          'v-date-picker-years__cell--selected': isSelected,\n          'v-date-picker-years__cell--current-year': year === CURRENT_YEAR\n        },\n        onClick: function onClick() {\n          return computedYear.value = year;\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, year);\n    }\n\n    function genYearsRows() {\n      var currentYears = years.value[onTableIndex.value];\n      var yearsVNodes = currentYears.map(genYearCell);\n      return genTableRows(yearsVNodes, 'v-date-picker-years__row', CELLS_IN_ROW);\n    }\n\n    function genYears() {\n      var propsData = {\n        \"class\": 'v-date-picker-years__years'\n      };\n      return !isListChanged.value && (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, genYearsRows()) || null;\n    }\n\n    genTableYears();\n    setTableIndex();\n    return function () {\n      var content = useTransition(genYears(), transition.value);\n      var propsData = {\n        \"class\": {\n          'v-date-picker-years': true\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, content);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VDatePicker/VDatePickerMonths.ts\n\n\nvar VDatePickerMonths = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-date-picker-months',\n  props: {\n    lang: {\n      type: String,\n      \"default\": 'en'\n    },\n    month: [String, Number],\n    year: [String, Number],\n    locale: Array\n  },\n  emits: ['update:month', 'update:year'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var CELLS_IN_ROW = 3;\n    var MONTHS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n    var CURRENT_MONTH = new Date().getMonth();\n    var handlers = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.inject)('handlers');\n    handlers.value = {\n      onNext: function onNext() {\n        return updateYear(true);\n      },\n      onPrev: function onPrev() {\n        return updateYear(false);\n      }\n    };\n    var computedMonth = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)({\n      get: function get() {\n        return props.month !== undefined ? +props.month : CURRENT_MONTH;\n      },\n      set: function set(val) {\n        emit('update:month', val);\n      }\n    });\n\n    function updateYear(isNext) {\n      var year = +props.year + (isNext ? 1 : -1);\n      emit('update:year', year);\n    }\n\n    function genMonthCell(month) {\n      var isSelected = month === computedMonth.value;\n      var propsData = {\n        \"class\": {\n          'v-date-picker-months__cell': true,\n          'v-date-picker-months__cell--selected': isSelected,\n          'v-date-picker-months__cell--current-month': month === CURRENT_MONTH\n        },\n        onClick: function onClick() {\n          return computedMonth.value = month;\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, props.locale[month]);\n    }\n\n    function genMonthRows() {\n      var monthsVNodes = MONTHS.map(genMonthCell);\n      return genTableRows(monthsVNodes, 'v-date-picker-months__row', CELLS_IN_ROW);\n    }\n\n    return function () {\n      var propsData = {\n        \"class\": 'v-date-picker-months'\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, genMonthRows());\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/services/locale.ts\nvar locale = {\n  ru: {\n    months: ['Январь', 'Феввраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],\n    monthsAbbr: ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'],\n    week: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб']\n  },\n  en: {\n    months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    monthsAbbr: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    week: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n  }\n};\n;// CONCATENATED MODULE: ./src/components/VDatePicker/VDatePicker.ts\nfunction VDatePicker_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VDatePicker_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VDatePicker_ownKeys(Object(source), !0).forEach(function (key) { VDatePicker_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VDatePicker_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VDatePicker_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar VDatePicker = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-date-picker',\n  props: VDatePicker_objectSpread({\n    dark: Boolean,\n    disabled: Boolean,\n    clearable: Boolean,\n    readonly: Boolean,\n    typeable: Boolean,\n    mondayFirst: Boolean,\n    today: Boolean,\n    useMls: Boolean,\n    useUtc: Boolean,\n    lang: {\n      type: String,\n      \"default\": 'en'\n    },\n    label: String,\n    prependIcon: String,\n    format: {\n      type: String,\n      \"default\": 'yyyy MM dd D'\n    },\n    rules: Array,\n    value: [String, Date, Number],\n    modelValue: [String, Date, Number],\n    disabledDates: Object,\n    highlighted: Object,\n    contentColor: {\n      type: String,\n      \"default\": 'primary'\n    },\n    color: {\n      type: String,\n      \"default\": 'white'\n    }\n  }, elevationProps()),\n  emits: ['update:value', 'update:modelValue', 'selected'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n    var data = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({\n      year: null,\n      month: null,\n      date: null,\n      day: null,\n      selected: null,\n      tableMonth: null,\n      tableYear: null,\n      convertedDateString: null,\n      isYears: false,\n      isMonths: false,\n      isDates: true,\n      isActive: false\n    });\n\n    var _useColors = useColors(),\n        setTextClassNameColor = _useColors.setTextClassNameColor,\n        setTextCssColor = _useColors.setTextCssColor,\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var _useElevation = useElevation(props),\n        elevationClasses = _useElevation.elevationClasses;\n\n    var localeMonths = locale[props.lang].monthsAbbr;\n    var localeWeek = locale[props.lang].week;\n    var contentColor = props.dark ? 'white' : props.contentColor;\n    var handlers = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)({});\n    var activator = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n    var closeConditional = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(false);\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.provide)('handlers', handlers);\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        'v-date-picker': true,\n        'v-date-picker--typeable': props.typeable,\n        'v-date-picker--readonly': !props.typeable || props.readonly\n      };\n    });\n    var tableClasses = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDatePicker_objectSpread(VDatePicker_objectSpread(VDatePicker_objectSpread({\n        'v-date-picker__table': true\n      }, elevationClasses.value), props.color ? setBackgroundClassNameColor(props.color) : {}), contentColor ? setTextClassNameColor(contentColor) : {});\n    });\n    var tableStyles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDatePicker_objectSpread(VDatePicker_objectSpread({}, props.color ? setBackgroundCssColor(props.color) : {}), contentColor ? setTextCssColor(contentColor) : {});\n    });\n    var headerValue = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return data.isYears || data.isMonths ? \"\".concat(data.tableYear) : data.isDates ? \"\".concat(data.tableYear, \" \").concat(localeMonths[data.tableMonth]) : '';\n    });\n    var displayDate = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _data$selected = data.selected,\n          month = _data$selected.month,\n          date = _data$selected.date,\n          day = _data$selected.day;\n      return \"\".concat(localeMonths[month], \" \").concat(date, \" \").concat(localeWeek[day]);\n    });\n    var computedValue = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _data$selected2 = data.selected,\n          year = _data$selected2.year,\n          month = _data$selected2.month,\n          date = _data$selected2.date;\n      return new Date(year, month, date);\n    });\n\n    function setInitDate() {\n      if (props.value) setParsedDate(props.value);else if (props.modelValue) setParsedDate(props.modelValue);else setParsedDate();\n\n      if (props.today || props.value || props.modelValue) {\n        data.convertedDateString = convertToFormat();\n      }\n    }\n\n    function onTableChange() {\n      if (data.isYears) {\n        data.isYears = false;\n        return data.isMonths = true;\n      }\n\n      if (data.isMonths) {\n        data.isMonths = false;\n        return data.isYears = true;\n      }\n\n      if (data.isDates) {\n        data.isDates = false;\n        return data.isMonths = true;\n      }\n    }\n\n    function setDataDate(_ref2) {\n      var year = _ref2.year,\n          month = _ref2.month,\n          date = _ref2.date,\n          day = _ref2.day;\n      data.tableMonth = month;\n      data.tableYear = year;\n      data.year = year;\n      data.month = month;\n      data.date = date;\n      data.day = day;\n    }\n\n    function setParsedDate() {\n      var selectedDate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var dateForParsing = selectedDate || new Date();\n      data.selected = parseDate(dateForParsing);\n      !selectedDate && (data.selected[\"default\"] = !selectedDate);\n      setDataDate(data.selected);\n    }\n\n    function onYearUpdate(year) {\n      data.tableYear = year;\n      data.isMonths = true;\n      data.isYears = false;\n    }\n\n    function onMonthUpdate(month) {\n      data.tableMonth = month;\n      data.isMonths = false;\n      data.isYears = false;\n      data.isDates = true;\n    }\n\n    function onDateUpdate(date) {\n      if (!date) return;\n      closeConditional.value = true;\n      data.selected = date;\n      data.tableMonth = date.month;\n      data.tableYear = date.year;\n      data.convertedDateString = convertToFormat();\n      emit('update:value', computedValue.value);\n      emit('update:modelValue', computedValue.value);\n      emit('selected', computedValue.value);\n      requestAnimationFrame(function () {\n        return closeConditional.value = false;\n      });\n    }\n\n    function onDateMonthUpdate(dateObject) {\n      data.tableMonth = dateObject.month;\n      if (dateObject.year) data.tableYear = dateObject.year;\n    }\n\n    function onDateInput(date) {\n      onDateUpdate(stringToDate(date));\n    }\n\n    function stringToDate(date) {\n      if (date.length === 10) {\n        var dateArray = date.trim().split(/\\W/);\n\n        if (dateArray[0].length < 4) {\n          date = dateArray.reverse().join('.');\n        }\n\n        return parseDate(new Date(Date.parse(date)));\n      }\n\n      return null;\n    }\n\n    function convertToFormat() {\n      if (!data.selected) return '';\n      return formatDate(new Date(data.selected.year, data.selected.month, data.selected.date), props.format, locale[props.lang]);\n    }\n\n    function genDisplayValue(value) {\n      var propsData = {\n        \"class\": 'v-date-picker__display-value'\n      };\n      return useTransition((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', propsData, value), 'scale-in-out', 'out-in');\n    }\n\n    function genDatepickerDisplayInner() {\n      var _a;\n\n      var propsData = {\n        \"class\": 'v-date-picker__display-inner'\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [genDisplayValue((_a = data.selected) === null || _a === void 0 ? void 0 : _a.year), genDisplayValue(displayDate.value)]);\n    }\n\n    function genDatepickerDisplay() {\n      var propsData = {\n        \"class\": VDatePicker_objectSpread(VDatePicker_objectSpread({\n          'v-date-picker__display': true\n        }, contentColor ? setBackgroundClassNameColor(contentColor) : {}), props.color ? setTextClassNameColor(props.color) : {}),\n        style: VDatePicker_objectSpread(VDatePicker_objectSpread({}, contentColor ? setBackgroundCssColor(contentColor) : {}), props.color ? setTextCssColor(props.color) : {})\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, genDatepickerDisplayInner());\n    }\n\n    function genDatepickerHeader() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDatepickerHeader, {\n        onNext: function onNext() {\n          return handlers.value.onNext();\n        },\n        onPrev: function onPrev() {\n          return handlers.value.onPrev();\n        },\n        onTable: onTableChange\n      }, {\n        \"default\": function _default() {\n          return headerValue.value;\n        }\n      });\n    }\n\n    function genDatepickerYearsTable() {\n      var propsData = VDatePicker_defineProperty({\n        year: data.tableYear\n      }, 'onUpdate:year', onYearUpdate);\n\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDatePickerYears, propsData);\n    }\n\n    function genDatepickerMonthsTable() {\n      var _h;\n\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDatePickerMonths, (_h = {\n        lang: props.lang,\n        month: data.tableMonth,\n        year: data.tableYear,\n        locale: localeMonths\n      }, VDatePicker_defineProperty(_h, 'onUpdate:month', onMonthUpdate), VDatePicker_defineProperty(_h, 'onUpdate:year', onYearUpdate), _h));\n    }\n\n    function genDatepickerDatesTable() {\n      var _h2;\n\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDatePickerDates, (_h2 = {\n        locale: localeWeek,\n        mondayFirst: props.mondayFirst,\n        month: data.tableMonth,\n        year: data.tableYear,\n        value: data.selected,\n        disabledDates: props.disabledDates\n      }, VDatePicker_defineProperty(_h2, 'onUpdate:value', onDateUpdate), VDatePicker_defineProperty(_h2, 'onUpdate:month', onDateMonthUpdate), _h2), {\n        date: slots.date && addScopedSlot('date', slots)\n      });\n    }\n\n    function genDatepickerBody() {\n      var propsData = {\n        \"class\": {\n          'v-date-picker__body': true\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, useTransition(data.isYears && genDatepickerYearsTable() || data.isMonths && genDatepickerMonthsTable() || data.isDates && genDatepickerDatesTable(), 'slide-in-left', 'out-in'));\n    }\n\n    function genDatepickerInput() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VTextField, {\n        modelValue: data.convertedDateString,\n        dark: props.dark,\n        label: props.label,\n        readonly: !props.typeable,\n        disabled: props.disabled,\n        prependIcon: props.prependIcon,\n        rules: props.rules,\n        clearable: props.clearable,\n        ref: activator,\n        onInput: onDateInput,\n        onClear: function onClear() {\n          data.convertedDateString = '';\n          emit('update:value', null);\n          emit('update:modelValue', null);\n          emit('selected', null);\n        }\n      });\n    }\n\n    function genDatepickerTable() {\n      var propsData = {\n        \"class\": tableClasses.value,\n        style: tableStyles.value\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [genDatepickerDisplay(), genDatepickerHeader(), genDatepickerBody()]);\n    }\n\n    function genMenu() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VMenu, {\n        activator: activator.value,\n        internalActivator: true,\n        inputActivator: '.v-input__text-field',\n        width: 'auto',\n        maxHeight: 'auto',\n        bottom: props.typeable,\n        openOnClick: true,\n        closeOnClick: closeConditional.value\n      }, {\n        \"default\": function _default() {\n          return genDatepickerTable();\n        }\n      });\n    }\n\n    function genDatepicker() {\n      var propsData = {\n        \"class\": classes.value\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [genDatepickerInput(), activator.value && genMenu()]);\n    }\n\n    setInitDate();\n    return function () {\n      return genDatepicker();\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VDatePicker/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VProgressLinear/VProgressLinear.ts\nfunction VProgressLinear_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VProgressLinear_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VProgressLinear_ownKeys(Object(source), !0).forEach(function (key) { VProgressLinear_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VProgressLinear_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VProgressLinear_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar VProgressLinear = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-progress-linear',\n  props: {\n    value: {\n      type: [String, Number],\n      \"default\": null\n    },\n    modelValue: {\n      type: [String, Number],\n      \"default\": null\n    },\n    bufferValue: {\n      type: [String, Number],\n      \"default\": null\n    },\n    height: {\n      type: [Number, String],\n      \"default\": 4\n    },\n    color: {\n      type: String,\n      \"default\": 'primary'\n    },\n    backgroundColor: {\n      type: String,\n      \"default\": 'primary'\n    },\n    backgroundOpacity: {\n      type: String,\n      \"default\": '0.3'\n    },\n    indeterminate: Boolean,\n    reverse: Boolean,\n    rounded: Boolean,\n    stream: Boolean,\n    striped: Boolean\n  },\n  setup: function setup(props) {\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var genProgressBar = function genProgressBar() {\n      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var barWidth = props.value || props.modelValue;\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": VProgressLinear_objectSpread(VProgressLinear_defineProperty({\n          'v-progress-linear__bar': true\n        }, type, !!type), props.color ? setBackgroundClassNameColor(props.color) : {}),\n        style: VProgressLinear_objectSpread({\n          width: !props.indeterminate ? barWidth + '%' : ''\n        }, props.color ? setBackgroundCssColor(props.color) : {})\n      });\n    };\n\n    var genProgressBuffer = function genProgressBuffer() {\n      var bufferWidth = props.value || props.modelValue;\n      var propsData = {\n        \"class\": {\n          'v-progress-linear__buffer': true\n        },\n        style: {\n          width: bufferWidth ? bufferWidth + '%' : ''\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData);\n    };\n\n    function genProgressBackground() {\n      var propsData = {\n        \"class\": VProgressLinear_objectSpread({\n          'v-progress-linear__background': true\n        }, props.backgroundColor ? setBackgroundClassNameColor(props.backgroundColor) : {}),\n        style: VProgressLinear_objectSpread({\n          opacity: props.backgroundOpacity\n        }, props.backgroundColor ? setBackgroundCssColor(props.backgroundColor) : {})\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData);\n    }\n\n    function genProgressIndeterminate() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": {\n          'v-progress-linear__indeterminate': true\n        }\n      }, [genProgressBar('long'), genProgressBar('short')]);\n    }\n\n    function genProgressLinear() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-progress-linear',\n        style: {\n          height: \"\".concat(props.height, \"px\")\n        }\n      }, [genProgressBackground(), genProgressBuffer(), props.indeterminate ? genProgressIndeterminate() : genProgressBar()]);\n    }\n\n    return function () {\n      return genProgressLinear();\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VAutocomplete/VAutocomplete.ts\nfunction VAutocomplete_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VAutocomplete_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VAutocomplete_ownKeys(Object(source), !0).forEach(function (key) { VAutocomplete_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VAutocomplete_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VAutocomplete_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\nvar VAutocomplete = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-autocomplete',\n  props: VAutocomplete_objectSpread({\n    label: String,\n    items: Array,\n    dark: Boolean,\n    valueKey: String,\n    idKey: String,\n    listColor: String,\n    disabled: Boolean,\n    typeable: Boolean,\n    loading: Boolean,\n    modelValue: {\n      \"default\": null\n    },\n    color: {\n      type: String,\n      \"default\": 'primary'\n    }\n  }, validationProps()),\n  emits: ['input', 'blur', 'focus', 'select', 'update:modelValue', 'update:value'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var state = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({\n      focused: false,\n      isMenuActive: false,\n      search: '',\n      select: null\n    });\n\n    var _useColors = useColors(),\n        setTextCssColor = _useColors.setTextCssColor,\n        setTextClassNameColor = _useColors.setTextClassNameColor;\n\n    var activator = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VAutocomplete_objectSpread({\n        'v-autocomplete': true,\n        'v-autocomplete--disabled': props.disabled,\n        'v-autocomplete--focused': state.focused\n      }, props.color ? setTextClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VAutocomplete_objectSpread({}, props.color ? setTextCssColor(props.color) : {});\n    });\n    var valueProperty = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.modelValue || props.value;\n    });\n    var inputValue = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.valueKey && valueProperty.value ? getKeyValueFromTarget(props.valueKey, valueProperty.value) : valueProperty.value;\n    });\n\n    var onFocus = function onFocus() {\n      state.focused = true;\n      state.isMenuActive = true;\n      emit('focus');\n    };\n\n    var onBlur = function onBlur() {\n      if (!valueProperty.value && !state.search) state.search = '';\n      if (!state.search && valueProperty.value) state.search = inputValue.value;\n      state.focused = false;\n      emit('blur');\n    };\n\n    var onInput = function onInput(e) {\n      state.search = e.target.value;\n      emit('input', e.target.value);\n    };\n\n    var onClear = function onClear() {\n      state.search = '';\n      state.select = null;\n      emit('select', null);\n      emit('update:modelValue', null);\n      emit('update:value', null);\n    };\n\n    var onSelect = function onSelect(it) {\n      state.search = props.valueKey ? getKeyValueFromTarget(props.valueKey, it) : it;\n      state.select = it;\n      emit('select', it);\n      emit('update:modelValue', it);\n      emit('update:value', it);\n    };\n\n    var genInput = function genInput() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('input', {\n        value: state.search,\n        disabled: props.disabled,\n        readonly: props.readonly && !props.typeable,\n        ref: activator,\n        \"class\": 'v-autocomplete__input',\n        onInput: onInput,\n        onFocus: onFocus,\n        onBlur: onBlur\n      });\n    };\n\n    var genAutocompleteList = function genAutocompleteList() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VSelectList, {\n        items: props.items,\n        valueKey: props.valueKey,\n        idKey: props.idKey,\n        active: state.isMenuActive,\n        color: props.dark ? 'white' : props.color,\n        listColor: props.listColor,\n        select: state.select,\n        onSelect: onSelect\n      });\n    };\n\n    var genMenu = function genMenu() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VMenu, {\n        activator: activator.value,\n        openOnClick: true,\n        maxHeight: 240,\n        bottom: true,\n        onHide: function onHide() {\n          return state.isMenuActive = state.focused;\n        }\n      }, {\n        \"default\": genAutocompleteList\n      });\n    };\n\n    var genLinearProgress = function genLinearProgress() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": {\n          'v-autocomplete__loading': true\n        }\n      }, (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VProgressLinear, {\n        height: 2,\n        indeterminate: true,\n        color: props.color,\n        backgroundColor: props.color\n      }));\n    };\n\n    var genAutocomplete = function genAutocomplete() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        style: styles.value\n      }, [genInput(), props.loading && genLinearProgress(), activator.value && genMenu()]);\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeMount)(function () {\n      state.select = valueProperty.value;\n      state.search = inputValue.value;\n    });\n    return function () {\n      var propsData = {\n        label: props.label,\n        focused: state.isMenuActive,\n        hasState: !!state.search,\n        dark: props.dark,\n        disabled: props.disabled,\n        clearable: props.clearable,\n        color: props.color,\n        rules: props.rules,\n        value: valueProperty.value || state.search,\n        onClear: onClear\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VInput, propsData, {\n        'text-field': function textField() {\n          return genAutocomplete();\n        }\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VAutocomplete/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VProgressLinear/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VProgressCircular/index.ts\n\n;// CONCATENATED MODULE: ./src/components/index.ts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./src/directives/index.ts\n\n\n;// CONCATENATED MODULE: ./src/library.ts\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n\n\nvar Vueland = /*#__PURE__*/function () {\n  function Vueland(options) {\n    _classCallCheck(this, Vueland);\n\n    Vueland.options = options;\n  }\n\n  _createClass(Vueland, null, [{\n    key: \"install\",\n    value: function install(app) {\n      if (Vueland.installed) return;\n      Vueland.installed = true;\n      Object.keys(components_namespaceObject).forEach(function (key) {\n        if (key && components_namespaceObject[key]) {\n          var component = components_namespaceObject[key];\n          app.component(key, component);\n        }\n      });\n      Object.keys(directives_namespaceObject).forEach(function (key) {\n        if (key && directives_namespaceObject[key]) {\n          app.directive(key, directives_namespaceObject[key]);\n        }\n      });\n      app.provide('$options', Vueland.options);\n    }\n  }]);\n\n  return Vueland;\n}();\nVueland.installed = false;\n;// CONCATENATED MODULE: ./src/index.ts\n\n\n\n/* harmony default export */ var src = (Vueland);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixhQUFHLENBQUNFLFNBQUosQ0FBY3hwQixHQUFkLEVBQW1Cd3BCLFNBQW5CO0FBQ0Q7QUFDRixPQUxEO0FBT0FoOEIsWUFBTSxDQUFDdVMsSUFBUCxDQUFZM1MsMEJBQVosRUFBd0JvSyxPQUF4QixDQUFnQyxVQUFDd0ksR0FBRCxFQUFRO0FBQ3RDLFlBQUlBLEdBQUcsSUFBSzVTLDBCQUFrQixDQUFDNFMsR0FBRCxDQUE5QixFQUFxQztBQUNuQ3NwQixhQUFHLENBQUN4bkIsU0FBSixDQUFjOUIsR0FBZCxFQUFvQjVTLDBCQUFrQixDQUFDNFMsR0FBRCxDQUF0QztBQUNEO0FBQ0YsT0FKRDtBQU1Bc3BCLFNBQUcsQ0FBQ3o4QixPQUFKLENBQVksVUFBWixFQUF3Qnc4QixPQUFPLENBQUNsK0IsT0FBaEM7QUFDRDtBQTNCSDs7QUFBQTtBQUFBO0FBQ1NrK0Isb0JBQXFCLEtBQXJCLEM7O0FDTFQ7QUFFQTtBQUNBO0FBRUEsd0NBQWVBLE9BQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2RpcmVjdGl2ZXMvdi1yZXNpemUvaW5kZXgudHM/N2U1NSIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL3NlcnZpY2VzL2JyZWFrcG9pbnRzLnRzPzYzMzUiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy91dGlscy90aG90dGxlLnRzPzc0MTMiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZBcHAvVkFwcC50cz8xODMzIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WQXBwL2luZGV4LnRzP2RkZjUiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy91dGlscy9jb2xvci1wYXJzZXIudHM/ZThiMCIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvc2FibGUvdXNlLWNvbG9ycy50cz8yYmUxIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9zYWJsZS91c2UtZWxldmF0aW9uLnRzPzBlOTciLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb3NhYmxlL3VzZS1wb3NpdGlvbi50cz83ODA1Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvaGVscGVycy9pbmRleC50cz8xNzkzIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WUHJvZ3Jlc3NDaXJjdWxhci9WUHJvZ3Jlc3NDaXJjdWxhci50cz9mYjQ3Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WQnV0dG9uL1ZCdXR0b24udHM/YTY0MSIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkJ1dHRvbi9pbmRleC50cz8wMTg3Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WQ2FyZC9WQ2FyZC50cz85MGI2Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WQ2FyZC9pbmRleC50cz8wYzU1Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WR3JpZC9WUm93LnRzPzhkYzQiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZHcmlkL1ZDb2wudHM/ZjBiMSIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkdyaWQvVkxheW91dC50cz9mYWJlIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WR3JpZC9pbmRleC50cz9hMzRlIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WT3ZlcmxheS9WT3ZlcmxheS50cz8zODk5Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WT3ZlcmxheS9pbmRleC50cz85OTljIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9zYWJsZS91c2Utb3ZlcmxheS50cz9hYTM5Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9zYWJsZS91c2UtdHJhbnNpdGlvbi50cz83OTNkIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9zYWJsZS91c2UtdG9nZ2xlLnRzPzI2YzYiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZNb2RhbC9WTW9kYWwudHM/MDQ5OSIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVk1vZGFsL2luZGV4LnRzP2UzMjciLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb3NhYmxlL3VzZS1hdXRvLXBvc2l0aW9uLnRzP2E4MjkiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb3NhYmxlL3VzZS1hY3RpdmF0b3IudHM/MzhmMiIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvc2FibGUvdXNlLWRldGFjaC50cz82OWQyIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvZGlyZWN0aXZlcy92LWNsaWNrLW91dHNpZGUvaW5kZXgudHM/MDBiNiIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVk1lbnUvVk1lbnUudHM/NjVkMSIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVk1lbnUvaW5kZXgudHM/YWM2NCIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvc2FibGUvdXNlLXZhbGlkYXRpb24udHM/ZWY5YyIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvc2FibGUvdXNlLWlucHV0LXN0YXRlcy50cz8xMWIyIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WTGFiZWwvVkxhYmVsLnRzP2JiOGEiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb3NhYmxlL3VzZS1zaXplLnRzPzkyZTAiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9zZXJ2aWNlcy9zaXplcy50cz9lZWQ1Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WSWNvbi9WSWNvbi50cz82NDk1Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WSW5wdXQvVklucHV0LnRzP2U2NzUiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZUZXh0RmllbGQvVlRleHRGaWVsZC50cz8yNDc3Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WVGV4dEZpZWxkL2luZGV4LnRzPzEzMzgiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZJbnB1dC9pbmRleC50cz9mYzAwIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvc2VydmljZXMvaWNvbnMudHM/NTJmOCIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvc2FibGUvdXNlLWljb25zLnRzPzI4OTciLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZDaGlwL1ZDaGlwLnRzPzY3NGMiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZGaWxlSW5wdXQvVkZpbGVJbnB1dC50cz85MjE0Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WRmlsZUlucHV0L2luZGV4LnRzPzUyY2UiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZMaXN0L1ZMaXN0LnRzP2ZjMjgiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZMaXN0L1ZMaXN0SXRlbS50cz9kODU0Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WTGlzdC9pbmRleC50cz84NDYzIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WU2VsZWN0L1ZTZWxlY3RMaXN0LnRzP2QzNzYiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZTZWxlY3QvVlNlbGVjdC50cz8wMTYyIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WU2VsZWN0L2luZGV4LnRzP2YxZjgiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZGb3JtL1ZGb3JtLnRzPzk5ZTgiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZGb3JtL2luZGV4LnRzPzU0YTYiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZMYWJlbC9pbmRleC50cz9iZjJhIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WQmFkZ2UvVkJhZGdlLnRzPzMxYjYiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZCYWRnZS9pbmRleC50cz9kZWQ5Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy90cmFuc2l0aW9ucy9oZWxwZXJzLnRzPzg0YTQiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL3RyYW5zaXRpb25zL2V4cGFuZC10cmFuc2l0aW9uLnRzP2E4YWEiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL3RyYW5zaXRpb25zL2luZGV4LnRzP2UzMDMiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZHcm91cC9WR3JvdXAudHM/MGQ2NSIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkdyb3VwL2luZGV4LnRzPzVjMzMiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZSZXNpemUvVlJlc2l6ZS50cz81NDIxIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WUmVzaXplL2luZGV4LnRzPzE4MjUiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZJY29uL2luZGV4LnRzPzg3YzQiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZDaGlwL2luZGV4LnRzPzE1NDIiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZDaGVja2JveC9WQ2hlY2tib3gudHM/NzNmOCIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkNoZWNrYm94L2luZGV4LnRzPzAyZDQiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9zZXJ2aWNlcy90cmFuc2l0aW9ucy50cz9kZDU4Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WVG9vbHRpcC9WVG9vbHRpcC50cz8zYjEyIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WVG9vbHRpcC9pbmRleC50cz8wZDU3Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WVG9vbGJhci9WVG9vbGJhci50cz85NTRkIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WVG9vbGJhci9WVG9vbGJhck5hdkJ0bi50cz85NDY1Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WVG9vbGJhci9pbmRleC50cz9jMmJmIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WTmF2aWdhdGlvbi9WTmF2aWdhdGlvbi50cz8zMTlmIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WTmF2aWdhdGlvbi9pbmRleC50cz9mNDQ3Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WTWFpbi9WTWFpbi50cz9hNGQyIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WTWFpbi9pbmRleC50cz8wZTRhIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WVGV4dGFyZWEvVlRleHRhcmVhLnRzP2Q2MTEiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZUZXh0YXJlYS9pbmRleC50cz83NWYzIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WU2tlbGV0b24vVlNrZWxldG9uLnRzPzRmZDUiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZTa2VsZXRvbi9pbmRleC50cz9kNzdhIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WRGF0YVRhYmxlL1ZEYXRhVGFibGVDZWxsLnRzPzlmMmIiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZEYXRhVGFibGUvVkRhdGFUYWJsZUhlYWRlci50cz8wOGFjIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WRGF0YVRhYmxlL1ZEYXRhVGFibGVCb2R5LnRzPzY3NmQiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZEYXRhVGFibGUvVkRhdGFUYWJsZUZvb3Rlci50cz8yZGNlIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WRGF0YVRhYmxlL1ZEYXRhVGFibGUudHM/OGRiNyIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkRhdGFUYWJsZS9pbmRleC50cz8xYWMzIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WRGF0ZVBpY2tlci9WRGF0ZXBpY2tlckhlYWRlci50cz8zYTg3Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WRGF0ZVBpY2tlci91dGlscy50cz84YzBmIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WRGF0ZVBpY2tlci9oZWxwZXJzLnRzPzY4ODciLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZEYXRlUGlja2VyL1ZEYXRlUGlja2VyRGF0ZXMudHM/ZWQzZiIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkRhdGVQaWNrZXIvVkRhdGVQaWNrZXJZZWFycy50cz80NDkxIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WRGF0ZVBpY2tlci9WRGF0ZVBpY2tlck1vbnRocy50cz9kYjA4Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvc2VydmljZXMvbG9jYWxlLnRzPzlmYTciLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZEYXRlUGlja2VyL1ZEYXRlUGlja2VyLnRzPzk3M2IiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZEYXRlUGlja2VyL2luZGV4LnRzP2U5ZDYiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZQcm9ncmVzc0xpbmVhci9WUHJvZ3Jlc3NMaW5lYXIudHM/NzMxNCIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkF1dG9jb21wbGV0ZS9WQXV0b2NvbXBsZXRlLnRzPzVmNzciLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZBdXRvY29tcGxldGUvaW5kZXgudHM/OTJmYyIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVlByb2dyZXNzTGluZWFyL2luZGV4LnRzPzFjYTciLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZQcm9ncmVzc0NpcmN1bGFyL2luZGV4LnRzPzJkNzEiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL2luZGV4LnRzPzU3MDkiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9kaXJlY3RpdmVzL2luZGV4LnRzPzY2N2YiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9saWJyYXJ5LnRzP2ZlMzIiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9pbmRleC50cz8wYmExIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZUJpbmRpbmcgfSBmcm9tICd2dWUnXG5cbmludGVyZmFjZSBSZXNpemVWTm9kZURpcmVjdGl2ZSBleHRlbmRzIERpcmVjdGl2ZUJpbmRpbmcge1xuICB2YWx1ZTogKCkgPT4gdm9pZFxuICBvcHRpb25zOiBib29sZWFuIHwgQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnNcbn1cblxuZXhwb3J0IGNvbnN0IHJlc2l6ZSA9IHtcbiAgbW91bnRlZChlbDogSFRNTEVsZW1lbnQgJiBhbnksIGJpbmRpbmc6IFJlc2l6ZVZOb2RlRGlyZWN0aXZlKSB7XG4gICAgY29uc3QgY2FsbGJhY2sgPSBiaW5kaW5nLnZhbHVlIVxuICAgIGNvbnN0IG9wdGlvbnMgPSBiaW5kaW5nLm9wdGlvbnMgfHwgeyBwYXNzaXZlOiB0cnVlIH1cblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBjYWxsYmFjaywgb3B0aW9ucylcblxuICAgIGVsLl9vblJlc2l6ZSA9IHtcbiAgICAgIGNhbGxiYWNrLFxuICAgICAgb3B0aW9uc1xuICAgIH1cbiAgICBpZiAoIWJpbmRpbmcubW9kaWZpZXJzIHx8ICFiaW5kaW5nLm1vZGlmaWVycy5xdWlldCkge1xuICAgICAgY2FsbGJhY2soKVxuICAgIH1cbiAgfSxcblxuICBiZWZvcmVVbm1vdW50KGVsKSB7XG4gICAgaWYgKCFlbC5fb25SZXNpemUpIHJldHVyblxuXG4gICAgY29uc3QgeyBjYWxsYmFjaywgb3B0aW9ucyB9ID0gZWwuX29uUmVzaXplXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGNhbGxiYWNrLCBvcHRpb25zKVxuICAgIGRlbGV0ZSBlbC5fb25SZXNpemVcbiAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IGJyZWFrcG9pbnRzID0ge1xuICBzbTogNTc2LFxuICBtZDogNzY4LFxuICBsZzogOTkyLFxuICB4bDogMTIwMCxcbn1cbiIsImV4cG9ydCBjb25zdCB0aHJvdHRsZSA9IChmbiwgdGltZW91dCkgPT4ge1xuICBsZXQgbGFzdFRoaXM6IGFueSA9IG51bGxcbiAgbGV0IGxhc3RBcmdzOiBhbnkgPSBudWxsXG4gIGxldCBpc1Rocm90dGxlZCA9IGZhbHNlXG5cbiAgZnVuY3Rpb24gd3JhcHBlciguLi5hcmdzKSB7XG4gICAgaWYgKGlzVGhyb3R0bGVkKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBsYXN0VGhpcyA9IHRoaXNcbiAgICAgIGxhc3RBcmdzID0gYXJnc1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgbGFzdEFyZ3MgJiYgZm4uY2FsbChsYXN0VGhpcywgLi4ubGFzdEFyZ3MpXG5cbiAgICBpc1Rocm90dGxlZCA9IHRydWVcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaXNUaHJvdHRsZWQgPSBmYWxzZVxuXG4gICAgICBpZiAobGFzdEFyZ3MpIHtcbiAgICAgICAgd3JhcHBlci5hcHBseShsYXN0VGhpcywgbGFzdEFyZ3MpXG4gICAgICB9XG4gICAgICBsYXN0VGhpcyA9IG51bGxcbiAgICAgIGxhc3RBcmdzID0gbnVsbFxuICAgIH0sIHRpbWVvdXQpXG4gIH1cblxuICByZXR1cm4gd3JhcHBlclxufVxuIiwiaW1wb3J0IHtcbiAgZGVmaW5lQ29tcG9uZW50LFxuICBwcm92aWRlLFxuICByZWFjdGl2ZSxcbiAgaCxcbiAgd2l0aERpcmVjdGl2ZXMsXG4gIG9uTW91bnRlZCxcbn0gZnJvbSAndnVlJ1xuXG4vLyBEaXJlY3RpdmVzXG5pbXBvcnQgeyByZXNpemUgfSBmcm9tICcuLi8uLi9kaXJlY3RpdmVzJ1xuXG4vLyBTZXJ2aWNlc1xuaW1wb3J0IHsgYnJlYWtwb2ludHMgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9icmVha3BvaW50cydcblxuLy8gVXRpbHNcbmltcG9ydCB7IHRocm90dGxlIH0gZnJvbSAnLi4vLi4vdXRpbHMvdGhvdHRsZSdcblxuLy8gVHlwZXNcbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvYmFzZSdcblxuaW50ZXJmYWNlIEFwcFN0YXRlIHtcbiAgY3VycmVudDogTWF5YmU8J3hsJyB8ICdsZycgfCAnbWQnIHwgJ3NtJz5cbiAgeGxBbmRMZXNzOiBib29sZWFuXG4gIGxnQW5kTGVzczogYm9vbGVhblxuICBtZEFuZExlc3M6IGJvb2xlYW5cbiAgc21BbmRMZXNzOiBib29sZWFuXG59XG5cbmV4cG9ydCBjb25zdCBWQXBwID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtYXBwJyxcbiAgZGlyZWN0aXZlczoge1xuICAgIHJlc2l6ZSxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBnbG9iYWw6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgfSxcbiAgfSxcbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSkge1xuICAgIGNvbnN0IFRIUk9UVExJTkdfVElNRU9VVCA9IDYwXG5cbiAgICBjb25zdCBzdGF0ZSA9IHJlYWN0aXZlPEFwcFN0YXRlPih7XG4gICAgICBjdXJyZW50OiBudWxsLFxuICAgICAgeGxBbmRMZXNzOiBmYWxzZSxcbiAgICAgIGxnQW5kTGVzczogZmFsc2UsXG4gICAgICBtZEFuZExlc3M6IGZhbHNlLFxuICAgICAgc21BbmRMZXNzOiBmYWxzZSxcbiAgICB9KVxuXG4gICAgcHJvdmlkZSgnYnJlYWtwb2ludHMnLCBzdGF0ZSlcblxuICAgIGNvbnN0IHNldEN1cnJlbnRCcmVha3BvaW50TmFtZSA9IChzY3JlZW4pID0+IHtcbiAgICAgIGlmIChzY3JlZW4gPj0gYnJlYWtwb2ludHMueGwpIHtcbiAgICAgICAgcmV0dXJuIChzdGF0ZS5jdXJyZW50ID0gJ3hsJylcbiAgICAgIH1cbiAgICAgIGlmIChzY3JlZW4gPj0gYnJlYWtwb2ludHMubGcgJiYgc2NyZWVuIDwgYnJlYWtwb2ludHMueGwpIHtcbiAgICAgICAgcmV0dXJuIChzdGF0ZS5jdXJyZW50ID0gJ2xnJylcbiAgICAgIH1cbiAgICAgIGlmIChzY3JlZW4gPj0gYnJlYWtwb2ludHMubWQgJiYgc2NyZWVuIDwgYnJlYWtwb2ludHMubGcpIHtcbiAgICAgICAgcmV0dXJuIChzdGF0ZS5jdXJyZW50ID0gJ21kJylcbiAgICAgIH1cbiAgICAgIGlmIChzY3JlZW4gPj0gYnJlYWtwb2ludHMuc20gJiYgc2NyZWVuIDwgYnJlYWtwb2ludHMubWQpIHtcbiAgICAgICAgcmV0dXJuIChzdGF0ZS5jdXJyZW50ID0gJ3NtJylcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBjb25zdCBzZXRJbnRlcnZhbHMgPSAoc2NyZWVuKSA9PiB7XG4gICAgICBjb25zdCB7IHhsLCBsZywgbWQsIHNtIH0gPSBicmVha3BvaW50c1xuXG4gICAgICBzdGF0ZS54bEFuZExlc3MgPSBzY3JlZW4gPD0geGwgJiYgc2NyZWVuID4gbGdcbiAgICAgIHN0YXRlLmxnQW5kTGVzcyA9IHNjcmVlbiA8PSBsZyAmJiBzY3JlZW4gPiBtZFxuICAgICAgc3RhdGUubWRBbmRMZXNzID0gc2NyZWVuIDw9IG1kICYmIHNjcmVlbiA+IHNtXG4gICAgICBzdGF0ZS5zbUFuZExlc3MgPSBzY3JlZW4gPD0gc21cbiAgICB9XG5cbiAgICBjb25zdCBzZXRTaXplcyA9ICgpID0+IHtcbiAgICAgIC8vIHRoZSBcImdsb2JhbFwiIHByb3AgYWxsb3dzIHRvIHRlc3QgdGhlXG4gICAgICAvLyBjb21wb25lbnQgd2l0aG91dCB1c2luZyBtb2NrdXBzXG4gICAgICBjb25zdCBzY3JlZW4gPSBwcm9wcy5nbG9iYWw/LmlubmVyV2lkdGggfHwgd2luZG93LmlubmVyV2lkdGhcblxuICAgICAgc2V0Q3VycmVudEJyZWFrcG9pbnROYW1lKHNjcmVlbilcbiAgICAgIHNldEludGVydmFscyhzY3JlZW4pXG4gICAgfVxuXG4gICAgY29uc3QgdGhyb3R0bGVkUmVzaXplTGlzdGVuZXIgPSB0aHJvdHRsZShcbiAgICAgIHNldFNpemVzLFxuICAgICAgVEhST1RUTElOR19USU1FT1VULFxuICAgICkgYXMgKCkgPT4gdm9pZFxuXG4gICAgY29uc3QgZ2VuQXBwV3JhcHBlciA9ICgpID0+IHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7IGNsYXNzOiAndi1hcHAtLXdyYXBwZXInIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCksXG4gICAgICB9KVxuICAgIH1cblxuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICBzZXRTaXplcygpXG4gICAgfSlcblxuICAgIHJldHVybiAoKSA9PlxuICAgICAgd2l0aERpcmVjdGl2ZXMoXG4gICAgICAgIGgoJ2RpdicsIHsgY2xhc3M6ICd2LWFwcCcgfSwgZ2VuQXBwV3JhcHBlcigpKSxcbiAgICAgICAgW1tyZXNpemUsIHRocm90dGxlZFJlc2l6ZUxpc3RlbmVyXV0sXG4gICAgICApXG4gIH0sXG59KVxuIiwiZXhwb3J0ICogZnJvbSAnLi9WQXBwJyIsImV4cG9ydCBmdW5jdGlvbiBpc0Nzc0NvbG9yKGNvbG9yOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuICEhY29sb3IubWF0Y2goL14oI3x2YXJcXCgtLXwocmdifGhzbClhP1xcKCkvKTtcbn1cbiIsImltcG9ydCB7IGlzQ3NzQ29sb3IgfSBmcm9tICcuLi91dGlscy9jb2xvci1wYXJzZXInXG5cbmV4cG9ydCBjb25zdCBjb2xvclByb3BzID0gKGRlZmF1bHRDb2xvcjogc3RyaW5nID0gJycpID0+ICh7XG4gIGNvbG9yOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6IGRlZmF1bHRDb2xvcixcbiAgfSxcbn0pXG5cbmV4cG9ydCBjb25zdCB1c2VDb2xvcnMgPSAoKSA9PiB7XG4gIGNvbnN0IHNldFRleHRDbGFzc05hbWVDb2xvciA9IChjb2xvcjogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgY2xhc3NlcyA9IHt9XG5cbiAgICBpZiAoIWlzQ3NzQ29sb3IoY29sb3IpKSB7XG4gICAgICBjb25zdCBbY29sb3JOYW1lLCBjb2xvck1vZGlmaWVyXSA9IGNvbG9yLnRyaW0oKS5zcGxpdCgnICcsIDIpXG4gICAgICBjb2xvck5hbWUgJiYgKGNsYXNzZXNbYCR7Y29sb3JOYW1lfS0tdGV4dGBdID0gdHJ1ZSlcbiAgICAgIGNvbG9yTW9kaWZpZXIgJiYgKGNsYXNzZXNbYHRleHQtLSR7Y29sb3JNb2RpZmllcn1gXSA9IHRydWUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGNsYXNzZXNcbiAgfVxuXG4gIGNvbnN0IHNldFRleHRDc3NDb2xvciA9IChjb2xvcjogc3RyaW5nKTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9PiB7XG4gICAgY29uc3Qgc3R5bGVzOiBhbnkgPSB7fVxuXG4gICAgaWYgKGlzQ3NzQ29sb3IoY29sb3IpKSB7XG4gICAgICBzdHlsZXMuY29sb3IgPSBjb2xvclxuICAgIH1cblxuICAgIHJldHVybiBzdHlsZXNcbiAgfVxuXG4gIGNvbnN0IHNldEJhY2tncm91bmRDc3NDb2xvciA9IChjb2xvcjogc3RyaW5nKSA9PiB7XG4gICAgY29uc3Qgc3R5bGVzID0ge31cblxuICAgIGlmIChpc0Nzc0NvbG9yKGNvbG9yKSkge1xuICAgICAgc3R5bGVzWydiYWNrZ3JvdW5kLWNvbG9yJ10gPSBjb2xvclxuICAgICAgc3R5bGVzWydib3JkZXItY29sb3InXSA9IGNvbG9yXG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlc1xuICB9XG5cbiAgY29uc3Qgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yID0gKGNvbG9yOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBjbGFzc2VzID0ge31cblxuICAgIGlmICghaXNDc3NDb2xvcihjb2xvcikpIHtcbiAgICAgIGNvbnN0IFtjb2xvck5hbWUsIGNvbG9yTW9kaWZpZXJdID0gY29sb3IudHJpbSgpLnNwbGl0KCcgJywgMilcbiAgICAgIGNvbG9yTmFtZSAmJiAoY2xhc3Nlc1tjb2xvck5hbWVdID0gdHJ1ZSlcbiAgICAgIGNvbG9yTW9kaWZpZXIgJiYgKGNsYXNzZXNbY29sb3JNb2RpZmllcl0gPSB0cnVlKVxuICAgIH1cblxuICAgIHJldHVybiBjbGFzc2VzXG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldFRleHRDc3NDb2xvcixcbiAgICBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IsXG4gICAgc2V0QmFja2dyb3VuZENzc0NvbG9yLFxuICAgIHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcixcbiAgfVxufVxuIiwiLy8gVnVlIEFQSVxuaW1wb3J0IHsgY29tcHV0ZWQsIENvbXB1dGVkUmVmIH0gZnJvbSAndnVlJ1xuXG50eXBlIEVsZXZldGFibGUgPSB7XG4gIGVsZXZhdGlvbkNsYXNzZXM6IENvbXB1dGVkUmVmPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PlxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGVsZXZhdGlvblByb3BzKCkge1xuICByZXR1cm4ge1xuICAgIGVsZXZhdGlvbjogW1N0cmluZywgTnVtYmVyXSxcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlRWxldmF0aW9uKHByb3BzOiBhbnkpOiBFbGV2ZXRhYmxlIHtcbiAgY29uc3QgZWxldmF0aW9uQ2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgW2BlbGV2YXRpb24tJHtwcm9wcy5lbGV2YXRpb259YF06ICEhcHJvcHMuZWxldmF0aW9uLFxuICAgIH1cbiAgfSlcblxuICByZXR1cm4geyBlbGV2YXRpb25DbGFzc2VzIH1cbn1cbiIsIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgQ29tcHV0ZWRSZWYgfSBmcm9tICd2dWUnXG5cbnR5cGUgUG9zaXRpb25hYmxlID0ge1xuICBwb3NpdGlvbkNsYXNzZXM6IENvbXB1dGVkUmVmPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PlxufVxuXG5leHBvcnQgY29uc3QgcG9zaXRpb25Qcm9wcyA9ICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBhYnNvbHV0ZTogQm9vbGVhbixcbiAgICBsZWZ0OiBCb29sZWFuLFxuICAgIHJpZ2h0OiBCb29sZWFuLFxuICAgIHRvcDogQm9vbGVhbixcbiAgICBib3R0b206IEJvb2xlYW4sXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHVzZVBvc2l0aW9uID0gKHByb3BzOiBhbnkpOiBQb3NpdGlvbmFibGUgPT4ge1xuICBjb25zdCBwb3NpdGlvbkNsYXNzZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICdwb3NpdGlvbi0tYWJzb2x1dGUnOiBwcm9wcy5hYnNvbHV0ZSxcbiAgICAgICd0by0tbGVmdCc6IHByb3BzLmxlZnQsXG4gICAgICAndG8tLXJpZ2h0JzogcHJvcHMucmlnaHQsXG4gICAgICAndG8tLXRvcCc6IHByb3BzLnRvcCxcbiAgICAgICd0by0tYm90dG9tJzogcHJvcHMuYm90dG9tLFxuICAgIH1cbiAgfSlcblxuICByZXR1cm4geyBwb3NpdGlvbkNsYXNzZXMgfVxufVxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoLCBTbG90cyB9IGZyb20gJ3Z1ZSdcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwgPSAoXG4gIGM6IHN0cmluZyxcbiAgZWwgPSAnZGl2JyxcbiAgbmFtZTogc3RyaW5nID0gJycsXG4pID0+IHtcbiAgcmV0dXJuIGRlZmluZUNvbXBvbmVudCh7XG4gICAgbmFtZTogbmFtZSB8fCBjLnJlcGxhY2UoL19fL2csICctJyksXG5cbiAgICBzZXR1cChfLCB7IHNsb3RzIH0pIHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICBbYy50cmltKCldOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gKCkgPT4gaChlbCwgcHJvcHNEYXRhLCBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKSlcbiAgICB9LFxuICB9KVxufVxuXG5leHBvcnQgY29uc3QgYWRkT25jZUxpc3RlbmVyID0gKFxuICBlbDogRXZlbnRUYXJnZXQsXG4gIGV2ZW50TmFtZTogc3RyaW5nLFxuICBjYjogKGV2ZW50OiBFdmVudCkgPT4gdm9pZCxcbiAgb3B0aW9uczogYm9vbGVhbiB8IEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zID0gZmFsc2UsXG4pOiB2b2lkID0+IHtcbiAgY29uc3Qgb25jZSA9IChldmVudDogRXZlbnQpID0+IHtcbiAgICBjYihldmVudClcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgb25jZSwgb3B0aW9ucylcbiAgfVxuXG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBvbmNlLCBvcHRpb25zKVxufVxuXG5leHBvcnQgY29uc3QgY29udmVydFRvVW5pdCA9IChcbiAgc3RyOiBzdHJpbmcgfCBudW1iZXIsXG4gIHVuaXQgPSAncHgnLFxuKTogc3RyaW5nID0+IHtcbiAgaWYgKGlzTmFOKCtzdHIhKSkge1xuICAgIHJldHVybiBTdHJpbmcoc3RyKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBgJHsgTnVtYmVyKHN0cikgfSR7IHVuaXQgfWBcbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgd2FybmluZyA9ICh3YXJuaW5nVGV4dCkgPT4ge1xuICBjb25zb2xlLndhcm4od2FybmluZ1RleHQpXG59XG5cbmV4cG9ydCBjb25zdCBjb3B5V2l0aG91dExpbmsgPSAob2JqKSA9PiB7XG4gIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpXG59XG5cbmV4cG9ydCBjb25zdCBhZGRTY29wZWRTbG90ID0gKHNsb3ROYW1lOiBzdHJpbmcsIHNsb3RzOiBTbG90cykgPT4ge1xuICByZXR1cm4gKHNjb3BlZCkgPT4ge1xuICAgIGNvbnN0IGFyZzogYW55ID0geyAuLi5zY29wZWQgfVxuXG4gICAgcmV0dXJuIHNsb3RzW3Nsb3ROYW1lXSAmJiBzbG90c1tzbG90TmFtZV0hKGFyZylcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZ2V0S2V5VmFsdWVGcm9tVGFyZ2V0ID0gPFQ+KFxuICB2YWx1ZUtleTogc3RyaW5nLFxuICB0YXJnZXQ6IFQsXG4pOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gdmFsdWVLZXkuc3BsaXQoJy4nKS5yZWR1Y2UoKGFjYywgaXQpID0+IGFjY1tpdF0sIHRhcmdldClcbn1cblxuZXhwb3J0IGNvbnN0IG1hcFRvVmFsQXJyYXkgPSAobWFwKTogYW55W10gPT4gQXJyYXkuZnJvbShtYXAudmFsdWVzKCkpXG5cbmV4cG9ydCBjb25zdCBnZXRTdHJpbmdLZXlzVmFsdWUgPSAoc3RyOiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+IHtcbiAgcmV0dXJuIHN0ci5zcGxpdCgnLicpLnJlZHVjZSgoYWNjLCBpdCkgPT4gYWNjW2l0XSwgdmFsdWUpXG59XG5cbmV4cG9ydCBjb25zdCB0b0NhbWVsQ2FzZSA9ICguLi5hcmdzOiBzdHJpbmdbXSk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBhcmdzLnJlZHVjZSgocmVzLCBzLCBpKSA9PiB7XG4gICAgaWYgKGkgPT09IDApIHJlcyArPSBzXG4gICAgZWxzZSByZXMgKz0gc1swXS50b1VwcGVyQ2FzZSgpICsgcy5zbGljZSgxKVxuICAgIHJldHVybiByZXNcbiAgfSwgJycpXG59XG4iLCJpbXBvcnQgeyBoLCBjb21wdXRlZCwgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJ1xuXG4vLyBFZmZlY3RzXG5pbXBvcnQgeyBjb2xvclByb3BzLCB1c2VDb2xvcnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG5leHBvcnQgY29uc3QgVlByb2dyZXNzQ2lyY3VsYXIgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1wcm9ncmVzcy1jaXJjdWxhcicsXG4gIHByb3BzOiB7XG4gICAgaW5kZXRlcm1pbmF0ZTogQm9vbGVhbixcbiAgICBzaXplOiB7XG4gICAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgICAgZGVmYXVsdDogMzIsXG4gICAgfSxcbiAgICB3aWR0aDoge1xuICAgICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICAgIGRlZmF1bHQ6IDQsXG4gICAgfSxcbiAgICB2YWx1ZToge1xuICAgICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICAgIGRlZmF1bHQ6IDAsXG4gICAgfSxcbiAgICByb3RhdGU6IHtcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgICBkZWZhdWx0OiAwLFxuICAgIH0sXG4gICAgLi4uY29sb3JQcm9wcygpLFxuICB9LFxuICBzZXR1cChwcm9wcywgeyBzbG90cyB9KSB7XG4gICAgY29uc3QgcmFkaXVzID0gMjBcblxuICAgIGNvbnN0IHsgc2V0VGV4dENsYXNzTmFtZUNvbG9yLCBzZXRUZXh0Q3NzQ29sb3IgfSA9IHVzZUNvbG9ycygpXG5cbiAgICBjb25zdCBub3JtYWxpemVkVmFsdWUgPSBjb21wdXRlZDxudW1iZXI+KCgpID0+IHtcbiAgICAgIGlmIChwcm9wcy52YWx1ZSA8IDApIHJldHVybiAwXG5cbiAgICAgIGlmIChwcm9wcy52YWx1ZSA+IDEwMCkgcmV0dXJuIDEwMFxuXG4gICAgICByZXR1cm4gcGFyc2VGbG9hdChwcm9wcy52YWx1ZSBhcyBzdHJpbmcpXG4gICAgfSlcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LXByb2dyZXNzLWNpcmN1bGFyJzogdHJ1ZSxcbiAgICAgICd2LXByb2dyZXNzLWNpcmN1bGFyLS1pbmRldGVybWluYXRlJzogcHJvcHMuaW5kZXRlcm1pbmF0ZSxcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldFRleHRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBjaXJjdW1mZXJlbmNlID0gY29tcHV0ZWQ8bnVtYmVyPigoKSA9PiB7XG4gICAgICByZXR1cm4gMiAqIE1hdGguUEkgKiByYWRpdXNcbiAgICB9KVxuXG4gICAgY29uc3Qgc3Ryb2tlRGFzaEFycmF5ID0gY29tcHV0ZWQ8bnVtYmVyPigoKSA9PiB7XG4gICAgICByZXR1cm4gTWF0aC5yb3VuZChjaXJjdW1mZXJlbmNlLnZhbHVlICogMTAwMCkgLyAxMDAwXG4gICAgfSlcblxuICAgIGNvbnN0IHN0cm9rZURhc2hPZmZzZXQgPSBjb21wdXRlZDxzdHJpbmc+KCgpID0+IHtcbiAgICAgIHJldHVybiAoKDEwMCAtIG5vcm1hbGl6ZWRWYWx1ZS52YWx1ZSkgLyAxMDApICogY2lyY3VtZmVyZW5jZS52YWx1ZSArICdweCdcbiAgICB9KVxuXG4gICAgY29uc3Qgdmlld0JveFNpemUgPSBjb21wdXRlZDxudW1iZXI+KCgpID0+IHtcbiAgICAgIHJldHVybiByYWRpdXMgLyAoMSAtIE51bWJlcihwcm9wcy53aWR0aCkgLyArcHJvcHMuc2l6ZSlcbiAgICB9KVxuXG4gICAgY29uc3Qgc3Ryb2tlV2lkdGggPSBjb21wdXRlZDxudW1iZXI+KCgpID0+IHtcbiAgICAgIHJldHVybiAoTnVtYmVyKHByb3BzLndpZHRoKSAvICtwcm9wcy5zaXplKSAqIHZpZXdCb3hTaXplLnZhbHVlICogMlxuICAgIH0pXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZDxvYmplY3Q+KCgpID0+ICh7XG4gICAgICB3aWR0aDogY29udmVydFRvVW5pdChwcm9wcy5zaXplKSxcbiAgICAgIGhlaWdodDogY29udmVydFRvVW5pdChwcm9wcy5zaXplKSxcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldFRleHRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBzdmdTdHlsZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRyYW5zZm9ybTogYHJvdGF0ZSgkeytwcm9wcy5yb3RhdGV9ZGVnKWAsXG4gICAgICB9XG4gICAgfSlcblxuICAgIGZ1bmN0aW9uIGdlbkNpcmNsZShuYW1lOiBzdHJpbmcsIG9mZnNldDogc3RyaW5nIHwgbnVtYmVyKTogVk5vZGUge1xuICAgICAgcmV0dXJuIGgoJ2NpcmNsZScsIHtcbiAgICAgICAgY2xhc3M6IGB2LXByb2dyZXNzLWNpcmN1bGFyX18ke25hbWV9YCxcbiAgICAgICAgZmlsbDogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgY3g6IDIgKiB2aWV3Qm94U2l6ZS52YWx1ZSxcbiAgICAgICAgY3k6IDIgKiB2aWV3Qm94U2l6ZS52YWx1ZSxcbiAgICAgICAgcjogcmFkaXVzLFxuICAgICAgICAnc3Ryb2tlLXdpZHRoJzogc3Ryb2tlV2lkdGgudmFsdWUsXG4gICAgICAgICdzdHJva2UtZGFzaGFycmF5Jzogc3Ryb2tlRGFzaEFycmF5LnZhbHVlLFxuICAgICAgICAnc3Ryb2tlLWRhc2hvZmZzZXQnOiBvZmZzZXQsXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlblN2ZyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gW1xuICAgICAgICBwcm9wcy5pbmRldGVybWluYXRlIHx8IGdlbkNpcmNsZSgndW5kZXJsYXknLCAwKSxcbiAgICAgICAgZ2VuQ2lyY2xlKCdvdmVybGF5Jywgc3Ryb2tlRGFzaE9mZnNldC52YWx1ZSksXG4gICAgICBdXG5cbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgeG1sbnM6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG4gICAgICAgIHZpZXdCb3g6IGAke3ZpZXdCb3hTaXplLnZhbHVlfSAke3ZpZXdCb3hTaXplLnZhbHVlfSAke1xuICAgICAgICAgIDIgKiB2aWV3Qm94U2l6ZS52YWx1ZVxuICAgICAgICB9ICR7MiAqIHZpZXdCb3hTaXplLnZhbHVlfWAsXG5cbiAgICAgICAgc3R5bGU6IHN2Z1N0eWxlLnZhbHVlLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaCgnc3ZnJywgcHJvcHNEYXRhLCBjaGlsZHJlbilcbiAgICB9XG5cbiAgICBjb25zdCBnZW5JbmZvID0gKCkgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogJ3YtcHJvZ3Jlc3MtY2lyY3VsYXJfX2luZm8nLFxuICAgICAgfVxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCkpXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgIHN0eWxlOiBzdHlsZXMudmFsdWUsXG4gICAgICB9XG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBbZ2VuU3ZnKCksIGdlbkluZm8oKV0pXG4gICAgfVxuICB9LFxufSlcbiIsIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaCwgY29tcHV0ZWQgfSBmcm9tICd2dWUnXG5cbi8vIENvbXBvc2FibGVcbmltcG9ydCB7IHVzZUNvbG9ycyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcbmltcG9ydCB7IGVsZXZhdGlvblByb3BzLCB1c2VFbGV2YXRpb24gfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1lbGV2YXRpb24nXG5pbXBvcnQgeyB1c2VQb3NpdGlvbiB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXBvc2l0aW9uJ1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWUHJvZ3Jlc3NDaXJjdWxhciB9IGZyb20gJy4uL1ZQcm9ncmVzc0NpcmN1bGFyJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tICd2dWUnXG5cbi8vIEhlbHBlcnNcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG5leHBvcnQgY29uc3QgVkJ1dHRvbiA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWJ1dHRvbicsXG4gIHByb3BzOiB7XG4gICAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gICAgb3V0bGluZWQ6IEJvb2xlYW4sXG4gICAgcm91bmRlZDogQm9vbGVhbixcbiAgICByb3VuZDogQm9vbGVhbixcbiAgICBhYnNvbHV0ZTogQm9vbGVhbixcbiAgICBsb2FkaW5nOiBCb29sZWFuLFxuICAgIGxlZnQ6IEJvb2xlYW4sXG4gICAgcmlnaHQ6IEJvb2xlYW4sXG4gICAgdGV4dDogQm9vbGVhbixcbiAgICBkYXJrOiBCb29sZWFuLFxuICAgIGxhYmVsOiBTdHJpbmcsXG4gICAgd2lkdGg6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgY29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdncmV5IGxpZ2h0ZW4tMScsXG4gICAgfSxcbiAgICAuLi5lbGV2YXRpb25Qcm9wcygpLFxuICB9IGFzIGFueSxcbiAgZW1pdHM6IFsnY2xpY2snXSxcblxuICBzZXR1cChwcm9wcywgeyBzbG90cywgZW1pdCB9KTogKCkgPT4gVk5vZGUge1xuICAgIGNvbnN0IHtcbiAgICAgIHNldFRleHRDbGFzc05hbWVDb2xvcixcbiAgICAgIHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcixcbiAgICAgIHNldEJhY2tncm91bmRDc3NDb2xvcixcbiAgICAgIHNldFRleHRDc3NDb2xvcixcbiAgICB9ID0gdXNlQ29sb3JzKClcblxuICAgIGNvbnN0IHsgZWxldmF0aW9uQ2xhc3NlcyB9ID0gdXNlRWxldmF0aW9uKHByb3BzKVxuXG4gICAgY29uc3QgeyBwb3NpdGlvbkNsYXNzZXMgfSA9IHVzZVBvc2l0aW9uKHByb3BzKVxuXG4gICAgY29uc3QgaXNGbGF0ID0gY29tcHV0ZWQ8Ym9vbGVhbj4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLnRleHQgfHwgcHJvcHMub3V0bGluZWRcbiAgICB9KVxuXG4gICAgY29uc3QgaXNMb2FkYWJsZSA9IGNvbXB1dGVkPGJvb2xlYW4+KCgpID0+IHtcbiAgICAgIHJldHVybiAhcHJvcHMudGV4dCAmJiAhcHJvcHMub3V0bGluZWQgJiYgcHJvcHMubG9hZGluZ1xuICAgIH0pXG5cbiAgICBjb25zdCBpc0VsZXZldGFibGUgPSBjb21wdXRlZDxib29sZWFuPigoKSA9PiB7XG4gICAgICByZXR1cm4gIWlzTG9hZGFibGUudmFsdWUgJiYgIXByb3BzLmRpc2FibGVkXG4gICAgfSlcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4ge1xuICAgICAgY29uc3QgZWxldmF0aW9ucyA9IGlzRWxldmV0YWJsZS52YWx1ZSA/IGVsZXZhdGlvbkNsYXNzZXMudmFsdWUgOiB7fVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAndi1idXR0b24nOiB0cnVlLFxuICAgICAgICAndi1idXR0b24tLXRleHQnOiBwcm9wcy50ZXh0IHx8IHByb3BzLm91dGxpbmVkLFxuICAgICAgICAndi1idXR0b24tLW91dGxpbmVkJzogcHJvcHMub3V0bGluZWQsXG4gICAgICAgICd2LWJ1dHRvbi0tcm91bmRlZCc6ICFwcm9wcy5yb3VuZCAmJiBwcm9wcy5yb3VuZGVkLFxuICAgICAgICAndi1idXR0b24tLXJvdW5kJzogcHJvcHMucm91bmQsXG4gICAgICAgICd2LWJ1dHRvbi0tZGlzYWJsZWQnOiBwcm9wcy5kaXNhYmxlZCB8fCBpc0xvYWRhYmxlLnZhbHVlLFxuICAgICAgICAndi1idXR0b24tLWxvYWRpbmcnOiBwcm9wcy5sb2FkaW5nLFxuICAgICAgICAuLi5lbGV2YXRpb25zLFxuICAgICAgICAuLi5wb3NpdGlvbkNsYXNzZXMudmFsdWUsXG4gICAgICAgIC4uLihwcm9wcy5jb2xvciAmJiBpc0ZsYXQudmFsdWVcbiAgICAgICAgICA/IHNldFRleHRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcilcbiAgICAgICAgICA6IHt9KSxcbiAgICAgICAgLi4uKHByb3BzLmNvbG9yICYmICFpc0ZsYXQudmFsdWVcbiAgICAgICAgICA/IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcilcbiAgICAgICAgICA6IHt9KSxcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3Qgd2lkdGggPSBwcm9wcy53aWR0aCB8fCA0MFxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogKHByb3BzLndpZHRoIHx8IHByb3BzLnJvdW5kKSAmJiBjb252ZXJ0VG9Vbml0KHdpZHRoKSxcbiAgICAgICAgaGVpZ2h0OiBwcm9wcy5yb3VuZCAmJiBjb252ZXJ0VG9Vbml0KHdpZHRoKSxcbiAgICAgICAgLi4uKHByb3BzLmNvbG9yICYmIGlzRmxhdC52YWx1ZSA/IHNldFRleHRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgICAgIC4uLihwcm9wcy5jb2xvciAmJiAhaXNGbGF0LnZhbHVlXG4gICAgICAgICAgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMuY29sb3IpXG4gICAgICAgICAgOiB7fSksXG4gICAgICB9XG4gICAgfSlcblxuICAgIGNvbnN0IGdlbkxvYWRlciA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3M6ICd2LWJ1dHRvbl9fbG9hZGVyJyxcbiAgICAgICAgfSxcbiAgICAgICAgKHNsb3RzLmxvYWRpbmcgJiYgc2xvdHMubG9hZGluZygpKSB8fFxuICAgICAgICBoKFZQcm9ncmVzc0NpcmN1bGFyLCB7XG4gICAgICAgICAgaW5kZXRlcm1pbmF0ZTogdHJ1ZSxcbiAgICAgICAgICBzaXplOiAyMyxcbiAgICAgICAgICB3aWR0aDogMixcbiAgICAgICAgfSksXG4gICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuTGFiZWwgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoJ3NwYW4nLCB7XG4gICAgICAgIGNsYXNzOiAndi1idXR0b25fX2xhYmVsJyxcbiAgICAgIH0sIHByb3BzLmxhYmVsKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkNvbnRlbnQgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2RpdicsIHsgY2xhc3M6ICd2LWJ1dHRvbl9fY29udGVudCcgfSxcbiAgICAgICAgWyhzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKSkgfHwgKHByb3BzLmxhYmVsICYmIGdlbkxhYmVsKCkpXSxcbiAgICAgIClcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT5cbiAgICAgIGgoJ2J1dHRvbicsIHtcbiAgICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgICBzdHlsZTogc3R5bGVzLnZhbHVlLFxuICAgICAgICAgIG9uQ2xpY2s6ICgpID0+ICFwcm9wcy5kaXNhYmxlZCAmJiBlbWl0KCdjbGljaycpLFxuICAgICAgICB9LFxuICAgICAgICBbZ2VuQ29udGVudCgpLCBwcm9wcy5sb2FkaW5nICYmIGdlbkxvYWRlcigpXSxcbiAgICAgIClcbiAgfSxcbn0pXG4iLCJleHBvcnQgKiBmcm9tICcuL1ZCdXR0b24nXG5cbmltcG9ydCB7IFZCdXR0b24gfSBmcm9tICcuL1ZCdXR0b24nXG5cbmV4cG9ydCBkZWZhdWx0IFZCdXR0b25cbiIsIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaCwgY29tcHV0ZWQgfSBmcm9tICd2dWUnXG5cbi8vIENvbXBvc2l0aW9uc1xuaW1wb3J0IHsgY29sb3JQcm9wcywgdXNlQ29sb3JzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtY29sb3JzJ1xuaW1wb3J0IHsgZWxldmF0aW9uUHJvcHMsIHVzZUVsZXZhdGlvbiB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWVsZXZhdGlvbidcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuXG5leHBvcnQgY29uc3QgVkNhcmQgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1jYXJkJyxcblxuICBwcm9wczoge1xuICAgIHdpZHRoOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogMzUwLFxuICAgIH0sXG4gICAgLi4uY29sb3JQcm9wcygpLFxuICAgIC4uLmVsZXZhdGlvblByb3BzKCksXG4gIH0gYXMgYW55LFxuXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3QgeyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IsIHNldEJhY2tncm91bmRDc3NDb2xvciB9ID0gdXNlQ29sb3JzKClcbiAgICBjb25zdCB7IGVsZXZhdGlvbkNsYXNzZXMgfSA9IHVzZUVsZXZhdGlvbihwcm9wcylcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZChcbiAgICAgICgpOiBSZWNvcmQ8c3RyaW5nLCBib29sZWFuPiA9PiAoe1xuICAgICAgICAndi1jYXJkJzogdHJ1ZSxcbiAgICAgICAgLi4uZWxldmF0aW9uQ2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICAgIH0pXG4gICAgKVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgIHdpZHRoOiBgJHtwcm9wcy53aWR0aH1weGAsXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgZnVuY3Rpb24gZ2VuQ2FyZCgpIHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgIHN0eWxlOiBzdHlsZXMudmFsdWUsXG4gICAgICB9XG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKSlcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4gZ2VuQ2FyZCgpXG4gIH0sXG59KVxuIiwiaW1wb3J0IHsgY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5cbmV4cG9ydCB7IFZDYXJkIH0gZnJvbSAnLi9WQ2FyZCdcblxuZXhwb3J0IGNvbnN0IFZDYXJkVGl0bGUgPSBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsKCd2LWNhcmRfX3RpdGxlJylcbmV4cG9ydCBjb25zdCBWQ2FyZFN1YnRpdGxlID0gY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCgndi1jYXJkX19zdWJ0aXRsZScpXG5leHBvcnQgY29uc3QgVkNhcmRDb250ZW50ID0gY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCgndi1jYXJkX19jb250ZW50JylcbmV4cG9ydCBjb25zdCBWQ2FyZEFjdGlvbnMgPSBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsKCd2LWNhcmRfX2FjdGlvbnMnKVxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoLCBjb21wdXRlZCwgVk5vZGUgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyB0b0NhbWVsQ2FzZSB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5cbmNvbnN0IGJyZWFrcG9pbnRzID0gWydzbScsICdtZCcsICdsZycsICd4bCddXG5jb25zdCBwb3NpdGlvbnMgPSBbJ3N0YXJ0JywgJ2NlbnRlcicsICdlbmQnXVxuXG5leHBvcnQgY29uc3QgVlJvdyA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LXJvdycsXG4gIHByb3BzOiB7XG4gICAgYWxpZ246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICB2YWxpZGF0b3I6IChzdHI6IHN0cmluZykgPT5cbiAgICAgICAgWy4uLnBvc2l0aW9ucywgJ2Jhc2VsaW5lJywgJ3N0cmV0Y2gnXS5pbmNsdWRlcyhzdHIpLFxuICAgIH0sXG4gICAgYWxpZ25Db250ZW50OiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgdmFsaWRhdG9yOiAoc3RyOiBzdHJpbmcpID0+XG4gICAgICAgIFsuLi5wb3NpdGlvbnMsICdzcGFjZS1iZXR3ZWVuJywgJ3NwYWNlLWFyb3VuZCcsICdzdHJldGNoJ10uaW5jbHVkZXMoXG4gICAgICAgICAgc3RyXG4gICAgICAgICksXG4gICAgfSxcbiAgICBqdXN0aWZ5OiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgdmFsaWRhdG9yOiAoc3RyOiBzdHJpbmcpID0+XG4gICAgICAgIFsuLi5wb3NpdGlvbnMsICdzcGFjZS1iZXR3ZWVuJywgJ3NwYWNlLWFyb3VuZCddLmluY2x1ZGVzKHN0ciksXG4gICAgfSxcbiAgICBub0d1dHRlcjogQm9vbGVhbixcbiAgICAuLi5icmVha3BvaW50cy5yZWR1Y2UoKHByb3BzLCBicCkgPT4ge1xuICAgICAgcHJvcHNbYGp1c3RpZnktJHticH1gXSA9IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICB2YWxpZGF0b3I6IChzdHI6IHN0cmluZykgPT5cbiAgICAgICAgICBbLi4ucG9zaXRpb25zLCAnc3BhY2UtYmV0d2VlbicsICdzcGFjZS1hcm91bmQnXS5pbmNsdWRlcyhzdHIpLFxuICAgICAgfVxuICAgICAgcHJvcHNbYGFsaWduLSR7YnB9YF0gPSB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgICAgdmFsaWRhdG9yOiAoc3RyOiBzdHJpbmcpID0+XG4gICAgICAgICAgWy4uLnBvc2l0aW9ucywgJ2Jhc2VsaW5lJywgJ3N0cmV0Y2gnXS5pbmNsdWRlcyhzdHIpLFxuICAgICAgfVxuICAgICAgcHJvcHNbYGFsaWduLWNvbnRlbnQtJHticH1gXSA9IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICB2YWxpZGF0b3I6IChzdHI6IHN0cmluZykgPT5cbiAgICAgICAgICBbLi4ucG9zaXRpb25zLCAnc3BhY2UtYmV0d2VlbicsICdzcGFjZS1hcm91bmQnLCAnc3RyZXRjaCddLmluY2x1ZGVzKFxuICAgICAgICAgICAgc3RyXG4gICAgICAgICAgKSxcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9wc1xuICAgIH0sIHt9KSxcbiAgfSxcblxuICBzZXR1cChwcm9wcywgeyBzbG90cyB9KTogKCkgPT4gVk5vZGUge1xuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LXJvdyc6IHRydWUsXG4gICAgICAnbm8tZ3V0dGVyJzogcHJvcHMubm9HdXR0ZXIsXG4gICAgICBbYGp1c3RpZnktJHtwcm9wcy5qdXN0aWZ5fWBdOiAhIXByb3BzLmp1c3RpZnksXG4gICAgICBbYGFsaWduLSR7cHJvcHMuYWxpZ259YF06ICEhcHJvcHMuYWxpZ24sXG4gICAgICBbYGFsaWduLWNvbnRlbnQtJHtwcm9wcy5hbGlnbkNvbnRlbnR9YF06ICEhcHJvcHMuYWxpZ25Db250ZW50LFxuXG4gICAgICAuLi5icmVha3BvaW50cy5yZWR1Y2UoKGNscywgYnApID0+IHtcbiAgICAgICAgO1suLi5wb3NpdGlvbnMsICdzcGFjZS1iZXR3ZWVuJywgJ3NwYWNlLWFyb3VuZCddLmZvckVhY2goKHBvcykgPT4ge1xuICAgICAgICAgIGNsc1tganVzdGlmeS0ke2JwfS0ke3Bvc31gXSA9XG4gICAgICAgICAgICBwb3MgPT09IChwcm9wc1t0b0NhbWVsQ2FzZSgnanVzdGlmeScsIGJwKV0gYXMgc3RyaW5nKVxuICAgICAgICB9KVxuICAgICAgICA7Wy4uLnBvc2l0aW9ucywgJ2Jhc2VsaW5lJywgJ3N0cmV0Y2gnXS5mb3JFYWNoKChwb3MpID0+IHtcbiAgICAgICAgICBjbHNbYGFsaWduLSR7YnB9LSR7cG9zfWBdID1cbiAgICAgICAgICAgIHBvcyA9PT0gKHByb3BzW3RvQ2FtZWxDYXNlKCdhbGlnbicsIGJwKV0gYXMgc3RyaW5nKVxuICAgICAgICB9KVxuICAgICAgICA7Wy4uLnBvc2l0aW9ucywgJ3NwYWNlLWJldHdlZW4nLCAnc3BhY2UtYXJvdW5kJywgJ3N0cmV0Y2gnXS5mb3JFYWNoKFxuICAgICAgICAgIChwb3MpID0+IHtcbiAgICAgICAgICAgIGNsc1tgYWxpZ24tY29udGVudC0ke2JwfS0ke3Bvc31gXSA9XG4gICAgICAgICAgICAgIHBvcyA9PT0gKHByb3BzW3RvQ2FtZWxDYXNlKCdhbGlnbicsICdjb250ZW50JywgYnApXSBhcyBzdHJpbmcpXG4gICAgICAgICAgfVxuICAgICAgICApXG5cbiAgICAgICAgcmV0dXJuIGNsc1xuICAgICAgfSwge30pLFxuICAgIH0pKVxuXG4gICAgcmV0dXJuICgpID0+XG4gICAgICBoKFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCksXG4gICAgICAgIH1cbiAgICAgIClcbiAgfSxcbn0pXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGNvbXB1dGVkLCBoLCBWTm9kZSB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IHRvQ2FtZWxDYXNlIH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuY29uc3QgYnJlYWtwb2ludHMgPSBbJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ11cblxuY29uc3QgY29sUHJvcHMgPSBicmVha3BvaW50cy5yZWR1Y2UoKHByb3BzLCBwKSA9PiB7XG4gIHByb3BzW3BdID0ge1xuICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgZGVmYXVsdDogbnVsbCxcbiAgfVxuXG4gIHJldHVybiBwcm9wc1xufSwge30pXG5cbmNvbnN0IG9yZGVyUHJvcHMgPSBicmVha3BvaW50cy5yZWR1Y2UoKHByb3BzLCBwKSA9PiB7XG4gIHByb3BzW2BvcmRlci0ke3B9YF0gPSB7XG4gICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICBkZWZhdWx0OiBudWxsLFxuICB9XG5cbiAgcmV0dXJuIHByb3BzXG59LCB7fSlcblxuY29uc3Qgb2Zmc2V0UHJvcHMgPSBicmVha3BvaW50cy5yZWR1Y2UoKHByb3BzLCBwKSA9PiB7XG4gIHByb3BzW2BvZmZzZXQtJHtwfWBdID0ge1xuICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgZGVmYXVsdDogbnVsbCxcbiAgfVxuXG4gIHJldHVybiBwcm9wc1xufSwge30pXG5cbmV4cG9ydCBjb25zdCBWQ29sID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtY29sJyxcbiAgcHJvcHM6IHtcbiAgICBvcmRlcjoge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgfSxcbiAgICBjb2xzOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICB9LFxuICAgIG9mZnNldDoge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgfSxcbiAgICAuLi5jb2xQcm9wcyxcbiAgICAuLi5vcmRlclByb3BzLFxuICAgIC4uLm9mZnNldFByb3BzLFxuICB9LFxuICBzZXR1cChwcm9wcywgeyBzbG90cyB9KTogKCkgPT4gVk5vZGUge1xuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LWNvbCc6IHRydWUsXG4gICAgICBbYHYtY29sLSR7cHJvcHMuY29sc31gXTogISFwcm9wcy5jb2xzLFxuICAgICAgLi4uYnJlYWtwb2ludHMucmVkdWNlKChjb2xzLCBwKSA9PiB7XG4gICAgICAgIGNvbHNbYCR7cH0tJHtwcm9wc1twXX1gXSA9ICEhcHJvcHNbcF1cbiAgICAgICAgcmV0dXJuIGNvbHNcbiAgICAgIH0sIHt9KSxcblxuICAgICAgW2BvcmRlci0ke3Byb3BzLm9yZGVyfWBdOiBwcm9wcy5vcmRlciAhPT0gbnVsbCxcblxuICAgICAgLi4uYnJlYWtwb2ludHMucmVkdWNlKChvcmRlcnMsIHApID0+IHtcbiAgICAgICAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbdG9DYW1lbENhc2UoJ29yZGVyJywgcCldXG4gICAgICAgIG9yZGVyc1tgb3JkZXItJHtwfS0ke3Byb3BWYWx1ZX1gXSA9ICEhcHJvcFZhbHVlXG4gICAgICAgIHJldHVybiBvcmRlcnNcbiAgICAgIH0sIHt9KSxcbiAgICAgIFtgb2Zmc2V0LSR7cHJvcHMub2Zmc2V0fWBdOiBwcm9wcy5vZmZzZXQgIT09IG51bGwsXG4gICAgICAuLi5icmVha3BvaW50cy5yZWR1Y2UoKG9mZnNldHMsIHApID0+IHtcbiAgICAgICAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbdG9DYW1lbENhc2UoJ29mZnNldCcsIHApXVxuICAgICAgICBvZmZzZXRzW2BvZmZzZXQtJHtwfS0ke3Byb3BWYWx1ZX1gXSA9ICEhcHJvcFZhbHVlXG4gICAgICAgIHJldHVybiBvZmZzZXRzXG4gICAgICB9LCB7fSksXG4gICAgfSkpXG5cbiAgICByZXR1cm4gKCkgPT5cbiAgICAgIGgoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKSxcbiAgICAgICAgfVxuICAgICAgKVxuICB9LFxufSlcbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaCwgY29tcHV0ZWQsIFZOb2RlIH0gZnJvbSAndnVlJ1xuXG5leHBvcnQgY29uc3QgVkxheW91dCA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWxheW91dCcsXG4gIHByb3BzOiB7XG4gICAgY29sdW1uOiBCb29sZWFuLFxuICAgIHdyYXA6IEJvb2xlYW4sXG4gIH0sXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtbGF5b3V0JzogdHJ1ZSxcbiAgICAgICdmbGV4LWNvbHVtbic6IHByb3BzLmNvbHVtbixcbiAgICAgICdmbGV4LXdyYXAnOiBwcm9wcy53cmFwLFxuICAgIH0pKVxuXG4gICAgcmV0dXJuICgpID0+XG4gICAgICBoKFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCksXG4gICAgICAgIH1cbiAgICAgIClcbiAgfSxcbn0pXG4iLCJpbXBvcnQgeyBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsIH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuZXhwb3J0IHsgVlJvdyB9IGZyb20gJy4vVlJvdydcbmV4cG9ydCB7IFZDb2wgfSBmcm9tICcuL1ZDb2wnXG5leHBvcnQgeyBWTGF5b3V0IH0gZnJvbSAnLi9WTGF5b3V0J1xuXG5leHBvcnQgY29uc3QgVlNwYWNlciA9IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwoJ3Ytc3BhY2VyJylcbiIsIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgY29tcHV0ZWQsIGggfSBmcm9tICd2dWUnXG5cbi8vIENvbXBvc2l0aW9uc1xuaW1wb3J0IHsgdXNlQ29sb3JzIH0gZnJvbSAnQC9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gJ3Z1ZSdcblxuZXhwb3J0IGNvbnN0IFZPdmVybGF5ID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3Ytb3ZlcmxheScsXG5cbiAgcHJvcHM6IHtcbiAgICBoaWRlOiBCb29sZWFuLFxuICAgIGFjdGl2ZTogQm9vbGVhbixcbiAgICBjb2xvcjogU3RyaW5nLFxuICAgIGZpeGVkOiBCb29sZWFuLFxuICB9IGFzIGFueSxcblxuICBzZXR1cChwcm9wcyk6IFZOb2RlIHtcbiAgICBjb25zdCB7IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvciwgc2V0QmFja2dyb3VuZENzc0NvbG9yIH0gPSB1c2VDb2xvcnMoKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICd2LW92ZXJsYXknOiB0cnVlLFxuICAgICAgICAndi1vdmVybGF5LS1oaWRkZW4nOiBwcm9wcy5oaWRlLFxuICAgICAgICAndi1vdmVybGF5LS1hY3RpdmUnOiBwcm9wcy5hY3RpdmUsXG4gICAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgICB9XG4gICAgfSlcblxuICAgIGNvbnN0IHN0eWxlcyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgcmV0dXJuIGgoJ2RpdicsIHtcbiAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgc3R5bGU6IHN0eWxlcy52YWx1ZSxcbiAgICAgIHJlZjogJ292ZXJsYXknLFxuICAgIH0pXG4gIH0sXG59KVxuIiwiZXhwb3J0ICogZnJvbSAnLi9WT3ZlcmxheSdcbiIsImltcG9ydCB7IHJlbmRlciB9IGZyb20gJ3Z1ZSdcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVk92ZXJsYXkgfSBmcm9tICcuLi9jb21wb25lbnRzJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgU2V0dXBDb250ZXh0LCBWTm9kZSB9IGZyb20gJ3Z1ZSdcblxuLy8gSGVscGVyc1xuaW1wb3J0IHsgYWRkT25jZUxpc3RlbmVyIH0gZnJvbSAnQC9oZWxwZXJzJ1xuXG5pbnRlcmZhY2UgT3ZlcmxheWFibGUge1xuICBjcmVhdGVPdmVybGF5OiAoKSA9PiB2b2lkXG4gIHJlbW92ZU92ZXJsYXk6ICgpID0+IHZvaWRcbn1cblxuY29uc3QgVElNRU9VVCA9IDQwXG5cbmV4cG9ydCBmdW5jdGlvbiBvdmVybGF5UHJvcHMoKSB7XG4gIHJldHVybiB7XG4gICAgb3ZlcmxheTogQm9vbGVhbixcbiAgICBvdmVybGF5Q29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcjMDAwMDAwJyxcbiAgICB9LFxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VPdmVybGF5KHByb3BzOiBhbnksIG92ZXJsYXlPbj86IEVsZW1lbnQpOiBPdmVybGF5YWJsZSB7XG4gIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG5cbiAgY29uc3Qgb3ZlcmxheVByb3BzT2JqZWN0ID0ge1xuICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgaGlkZTogdHJ1ZSxcbiAgICBjb2xvcjogcHJvcHMub3ZlcmxheUNvbG9yLFxuICB9XG5cbiAgbGV0IG92ZXJsYXlFbGVtZW50OiBDaGlsZE5vZGUgfCBudWxsID0gbnVsbFxuXG4gIGNvbnN0IG92ZXJsYXlWTm9kZSA9ICgpID0+IHtcbiAgICByZXR1cm4gVk92ZXJsYXkuc2V0dXAhKFxuICAgICAgb3ZlcmxheVByb3BzT2JqZWN0IGFzIHR5cGVvZiBWT3ZlcmxheS5wcm9wcyxcbiAgICAgIHt9IGFzIFNldHVwQ29udGV4dFxuICAgIClcbiAgfVxuXG4gIGNvbnN0IHJlbmRlck92ZXJsYXkgPSAoKSA9PiB7XG4gICAgcmVuZGVyKG92ZXJsYXlWTm9kZSgpIGFzIFZOb2RlLCBjb250YWluZXIhKVxuICB9XG5cbiAgY29uc3QgY3JlYXRlT3ZlcmxheSA9ICgpID0+IHtcbiAgICBvdmVybGF5T24/LnBhcmVudE5vZGU/Lmluc2VydEJlZm9yZShvdmVybGF5RWxlbWVudCEsIG92ZXJsYXlPbilcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgb3ZlcmxheVByb3BzT2JqZWN0LmFjdGl2ZSA9IHRydWVcbiAgICAgIG92ZXJsYXlQcm9wc09iamVjdC5oaWRlID0gIXByb3BzLm92ZXJsYXlcbiAgICAgIHJlbmRlck92ZXJsYXkoKVxuICAgIH0sIFRJTUVPVVQpXG4gIH1cblxuICBjb25zdCByZW1vdmVPdmVybGF5ID0gKCkgPT4ge1xuICAgIG92ZXJsYXlQcm9wc09iamVjdC5hY3RpdmUgPSBmYWxzZVxuXG4gICAgcmVuZGVyT3ZlcmxheSgpXG5cbiAgICBjb25zdCByZW1vdmUgPSAoKSA9PiB7XG4gICAgICBvdmVybGF5T24/LnBhcmVudE5vZGU/LnJlbW92ZUNoaWxkKG92ZXJsYXlFbGVtZW50ISlcbiAgICB9XG5cbiAgICBhZGRPbmNlTGlzdGVuZXIob3ZlcmxheUVsZW1lbnQhLCAndHJhbnNpdGlvbmVuZCcsIHJlbW92ZSlcbiAgfVxuXG4gIHJlbmRlck92ZXJsYXkoKVxuICBvdmVybGF5RWxlbWVudCA9IGNvbnRhaW5lci5maXJzdENoaWxkXG5cbiAgcmV0dXJuIHtcbiAgICBjcmVhdGVPdmVybGF5LFxuICAgIHJlbW92ZU92ZXJsYXksXG4gIH1cbn1cbiIsImltcG9ydCB7IFRyYW5zaXRpb24sIFZOb2RlLCBoIH0gZnJvbSAndnVlJ1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNpdGlvblByb3BzKCkge1xuICByZXR1cm4ge1xuICAgIHRyYW5zaXRpb246IFN0cmluZ1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VUcmFuc2l0aW9uKFxuICB2Tm9kZTogVk5vZGUsXG4gIHRyYW5zaXRpb246IHN0cmluZyxcbiAgbW9kZTogc3RyaW5nID0gJydcbik6IFZOb2RlIHtcbiAgY29uc3QgcHJvcHMgPSB7IG5hbWU6IHRyYW5zaXRpb24sIG1vZGUgfVxuICByZXR1cm4gaChUcmFuc2l0aW9uLCBwcm9wcywge1xuICAgIGRlZmF1bHQ6ICgpID0+IHZOb2RlXG4gIH0pXG59XG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyByZWYsIHdhdGNoIH0gZnJvbSAndnVlJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgUmVmIH0gZnJvbSAndnVlJ1xuXG50eXBlIFRvZ2dsZWFibGUgPSB7XG4gIGlzQWN0aXZlOiBSZWY8Ym9vbGVhbj5cbn1cblxuLyoqKlxuICpcbiAqIEBwYXJhbSBwcm9wcyB7b2JqZWN0fSAtIHByb3BzIG9iamVjdCBvZiB0aGUgY29tcG9uZW50XG4gKiBAcGFyYW0gcHJvcE5hbWUge3N0cmluZ30gLSB0aGUgcHJvcCBuYW1lIHdoaWNoIGlzIHRyYWNrZWQgZm9yIGNoYW5nZXNcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlVG9nZ2xlKHByb3BzOiBhbnksIHByb3BOYW1lPzogc3RyaW5nKTogVG9nZ2xlYWJsZSB7XG4gIGNvbnN0IGlzQWN0aXZlID0gcmVmPGJvb2xlYW4+KGZhbHNlKVxuICBjb25zdCBwcm9wID0gcHJvcE5hbWUgPyBwcm9wTmFtZSA6ICdtb2RlbFZhbHVlJ1xuXG4gIHdhdGNoKFxuICAgICgpID0+IHByb3BzW3Byb3BdLFxuICAgICh0bykgPT4gKGlzQWN0aXZlLnZhbHVlID0gISF0byksXG4gICAgeyBpbW1lZGlhdGU6IHRydWUgfVxuICApXG5cbiAgcmV0dXJuIHtcbiAgICBpc0FjdGl2ZSxcbiAgfVxufVxuIiwiLy8gVnVlIEFQSVxuaW1wb3J0IHtcbiAgaCxcbiAgcmVmLFxuICB3YXRjaCxcbiAgd2l0aERpcmVjdGl2ZXMsXG4gIGRlZmluZUNvbXBvbmVudCxcbiAgdlNob3csXG4gIG9uTW91bnRlZCxcbn0gZnJvbSAndnVlJ1xuXG4vLyBFZmZlY3RzXG5pbXBvcnQgeyBvdmVybGF5UHJvcHMsIHVzZU92ZXJsYXkgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1vdmVybGF5J1xuaW1wb3J0IHsgdHJhbnNpdGlvblByb3BzLCB1c2VUcmFuc2l0aW9uIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtdHJhbnNpdGlvbidcbmltcG9ydCB7IHVzZVRvZ2dsZSB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXRvZ2dsZSdcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCB9IGZyb20gJ0AvaGVscGVycydcblxuZXhwb3J0IGNvbnN0IFZNb2RhbCA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LW1vZGFsJyxcblxuICBwcm9wczoge1xuICAgIG1vZGVsVmFsdWU6IEJvb2xlYW4sXG4gICAgd2lkdGg6IHtcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gICAgLi4ub3ZlcmxheVByb3BzKCksXG4gICAgLi4udHJhbnNpdGlvblByb3BzKCksXG4gIH0gYXMgYW55LFxuXG4gIGVtaXRzOiBbJ3VwZGF0ZTptb2RlbFZhbHVlJ10sXG5cbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMsIGVtaXQgfSkge1xuICAgIGNvbnN0IHsgaXNBY3RpdmUgfSA9IHVzZVRvZ2dsZShwcm9wcylcblxuICAgIGNvbnN0IG1vZGFsUmVmID0gcmVmKG51bGwpXG5cbiAgICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgICAgaWYgKHByb3BzLm92ZXJsYXkpIHtcbiAgICAgICAgY29uc3QgeyBjcmVhdGVPdmVybGF5LCByZW1vdmVPdmVybGF5IH0gPSB1c2VPdmVybGF5KFxuICAgICAgICAgIHByb3BzLFxuICAgICAgICAgIG1vZGFsUmVmLnZhbHVlISxcbiAgICAgICAgKVxuXG4gICAgICAgIGlzQWN0aXZlLnZhbHVlICYmIGNyZWF0ZU92ZXJsYXkoKVxuXG4gICAgICAgIHdhdGNoKFxuICAgICAgICAgICgpID0+IGlzQWN0aXZlLnZhbHVlLFxuICAgICAgICAgICh0bykgPT4ge1xuICAgICAgICAgICAgdG8gJiYgY3JlYXRlT3ZlcmxheSgpXG4gICAgICAgICAgICAhdG8gJiYgcmVtb3ZlT3ZlcmxheSgpXG4gICAgICAgICAgfSxcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBmdW5jdGlvbiBnZW5Db250ZW50KCk6IFZOb2RlIHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6ICd2LW1vZGFsX19jb250ZW50JyxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICB3aWR0aDogcHJvcHMud2lkdGggPyBjb252ZXJ0VG9Vbml0KHByb3BzLndpZHRoKSA6ICcnLFxuICAgICAgICB9LFxuICAgICAgfVxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCkpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuTW9kYWwoKSB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiAndi1tb2RhbCcsXG4gICAgICAgIHJlZjogbW9kYWxSZWYsXG4gICAgICAgIFsnb25VcGRhdGU6bW9kZWxWYWx1ZSddOiAodmFsKSA9PiBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIHZhbCksXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB3aXRoRGlyZWN0aXZlcyhoKCdkaXYnLCBwcm9wc0RhdGEsIGdlbkNvbnRlbnQoKSksIFtcbiAgICAgICAgW3ZTaG93LCBpc0FjdGl2ZS52YWx1ZV0sXG4gICAgICBdKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB1c2VUcmFuc2l0aW9uKGdlbk1vZGFsKCksIHByb3BzLnRyYW5zaXRpb24pXG4gIH0sXG59KVxuIiwiZXhwb3J0ICogZnJvbSAnLi9WTW9kYWwnXG4iLCJpbXBvcnQgeyByZWYsIHJlYWN0aXZlLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IERpbWVuc2lvbnMgfSBmcm9tICcuLi8uLi90eXBlcydcblxudHlwZSBNYWluRGltZW5zaW9ucyA9IHtcbiAgYWN0aXZhdG9yOiBEaW1lbnNpb25zXG4gIGNvbnRlbnQ6IERpbWVuc2lvbnNcbiAgcGFnZVlPZmZzZXQ6IG51bWJlclxuICBwYWdlV2lkdGg6IG51bWJlclxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXV0b1Bvc2l0aW9uUHJvcHMoKSB7XG4gIHJldHVybiB7XG4gICAgcG9zaXRpb25YOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICBkZWZhdWx0OiAwLFxuICAgIH0sXG4gICAgcG9zaXRpb25ZOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICBkZWZhdWx0OiAwLFxuICAgIH0sXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUF1dG9Qb3NpdGlvbihwcm9wcykge1xuICBjb25zdCBkaW1lbnNpb25zID0gcmVhY3RpdmU8TWFpbkRpbWVuc2lvbnM+KHtcbiAgICBhY3RpdmF0b3I6IHtcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwLFxuICAgIH0sXG4gICAgY29udGVudDoge1xuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDAsXG4gICAgfSxcbiAgICBwYWdlWU9mZnNldDogMCxcbiAgICBwYWdlV2lkdGg6IDAsXG4gIH0pXG5cbiAgY29uc3QgY29udGVudFJlZiA9IHJlZjxIVE1MRWxlbWVudCB8IG51bGw+KG51bGwpXG4gIGNvbnN0IG9mZnNldFk6IG51bWJlciA9ICtwcm9wcy5vZmZzZXRZXG4gIC8vIGNvbnN0IG9mZnNldFg6IG51bWJlciA9ICtwcm9wcy5vZmZzZXRYXG5cbiAgbGV0IGFjdGl2YXRvcjogSFRNTEVsZW1lbnRcbiAgbGV0IGNvbnRlbnQ6IEhUTUxFbGVtZW50XG4gIGxldCBjb250ZW50Qm90dG9tUG9pbnQ6IG51bWJlciA9IDBcblxuICBmdW5jdGlvbiBnZXRSZWN0KGVsOiBIVE1MRWxlbWVudCkge1xuICAgIGNvbnN0IHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogcmVjdC50b3AsXG4gICAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgICBib3R0b206IHJlY3QuYm90dG9tLFxuICAgICAgcmlnaHQ6IHJlY3QucmlnaHQsXG4gICAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICAgIGhlaWdodDogcmVjdC5oZWlnaHQsXG4gICAgfVxuICB9XG5cbiAgY29uc3QgaXNBYnNvbHV0ZVBvc2l0aW9uZWQgPSBjb21wdXRlZDxib29sZWFuPigoKSA9PiB7XG4gICAgcmV0dXJuICEhcHJvcHMucG9zaXRpb25ZIHx8ICEhcHJvcHMucG9zaXRpb25YXG4gIH0pXG5cbiAgZnVuY3Rpb24gZ2V0SW5uZXJIZWlnaHQoKTogbnVtYmVyIHtcbiAgICBpZiAoIXdpbmRvdykgcmV0dXJuIDBcblxuICAgIHJldHVybiBpbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gIH1cblxuICBmdW5jdGlvbiBnZXRTY3JvbGxUb3AoKTogbnVtYmVyIHtcbiAgICBpZiAoIXdpbmRvdykgcmV0dXJuIDBcblxuICAgIHJldHVybiBwYWdlWU9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wXG4gIH1cblxuICBmdW5jdGlvbiBnZXRTY3JvbGxMZWZ0KCk6IG51bWJlciB7XG4gICAgaWYgKCF3aW5kb3cpIHJldHVybiAwXG5cbiAgICByZXR1cm4gcGFnZVhPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnRcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldENvbnRlbnRBYnNvbHV0ZUJvdHRvbVBvaW50KCkge1xuICAgIHJldHVybiBkaW1lbnNpb25zLmNvbnRlbnQuaGVpZ2h0ICsgcHJvcHMucG9zaXRpb25ZICsgZ2V0U2Nyb2xsVG9wKClcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldENvbnRlbnRCb3R0b21Qb2ludCgpIHtcbiAgICBjb25zdCB7IGFjdGl2YXRvciwgY29udGVudCB9ID0gZGltZW5zaW9uc1xuXG4gICAgaWYgKHByb3BzLmJvdHRvbSkge1xuICAgICAgcmV0dXJuIGNvbnRlbnQuaGVpZ2h0ICsgYWN0aXZhdG9yLnRvcCArIGFjdGl2YXRvci5oZWlnaHRcbiAgICB9XG5cbiAgICByZXR1cm4gY29udGVudC5oZWlnaHQgKyBhY3RpdmF0b3IudG9wXG4gIH1cblxuICBmdW5jdGlvbiBjYWxjQ29udGVudEJvdHRvbVBvc2l0aW9uKCkge1xuICAgIGNvbnN0IGZ1bGxIZWlnaHQgPSBnZXRTY3JvbGxUb3AoKSArIGdldElubmVySGVpZ2h0KClcblxuICAgIGNvbnN0IGNvbnRlbnRCb3R0b21Qb3NpdGlvbiA9IGlzQWJzb2x1dGVQb3NpdGlvbmVkLnZhbHVlXG4gICAgICA/IGdldENvbnRlbnRBYnNvbHV0ZUJvdHRvbVBvaW50KClcbiAgICAgIDogZ2V0Q29udGVudEJvdHRvbVBvaW50KClcblxuICAgIHJldHVybiBmdWxsSGVpZ2h0IC0gY29udGVudEJvdHRvbVBvc2l0aW9uXG4gIH1cblxuICBmdW5jdGlvbiBjYWxjTGVmdFBvc2l0aW9uKCk6IG51bWJlciB7XG4gICAgaWYgKHByb3BzLnBvc2l0aW9uWCkgcmV0dXJuIHByb3BzLnBvc2l0aW9uWCArIGdldFNjcm9sbExlZnQoKVxuXG4gICAgcmV0dXJuIGRpbWVuc2lvbnMuYWN0aXZhdG9yLmxlZnRcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbGNBYnNvbHV0ZVRvcCgpIHtcbiAgICBjb25zdCB0b3BQb3NpdGlvbiA9IHByb3BzLnBvc2l0aW9uWSArIGdldFNjcm9sbFRvcCgpXG5cbiAgICBpZiAob2Zmc2V0WSA+PSBjb250ZW50Qm90dG9tUG9pbnQpIHtcbiAgICAgIHJldHVybiB0b3BQb3NpdGlvbiArIGNvbnRlbnRCb3R0b21Qb2ludCAtIG9mZnNldFlcbiAgICB9XG5cbiAgICByZXR1cm4gdG9wUG9zaXRpb25cbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbGNCb3R0b21Qb3NpdGlvbigpIHtcbiAgICBjb25zdCB7IGFjdGl2YXRvciwgY29udGVudCB9ID0gZGltZW5zaW9uc1xuXG4gICAgaWYgKG9mZnNldFkgPj0gY29udGVudEJvdHRvbVBvaW50KSB7XG4gICAgICByZXR1cm4gYWN0aXZhdG9yLnRvcCAtIGNvbnRlbnQuaGVpZ2h0IC0gb2Zmc2V0WVxuICAgIH1cblxuICAgIHJldHVybiBhY3RpdmF0b3IudG9wICsgYWN0aXZhdG9yLmhlaWdodCArIG9mZnNldFlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbGNBdXRvQm90dG9tUG9zaXRpb24oKSB7XG4gICAgaWYgKG9mZnNldFkgPj0gY29udGVudEJvdHRvbVBvaW50KSB7XG4gICAgICByZXR1cm4gZGltZW5zaW9ucy5hY3RpdmF0b3IudG9wICsgY29udGVudEJvdHRvbVBvaW50IC0gb2Zmc2V0WVxuICAgIH1cblxuICAgIHJldHVybiBkaW1lbnNpb25zLmFjdGl2YXRvci50b3BcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbGNQb3NpdGlvblkoKTogbnVtYmVyIHtcbiAgICBjb250ZW50Qm90dG9tUG9pbnQgPSBjYWxjQ29udGVudEJvdHRvbVBvc2l0aW9uKClcblxuICAgIGlmIChwcm9wcy5wb3NpdGlvblkpIHJldHVybiBjYWxjQWJzb2x1dGVUb3AoKVxuXG4gICAgaWYgKHByb3BzLmJvdHRvbSkgcmV0dXJuIGNhbGNCb3R0b21Qb3NpdGlvbigpXG5cbiAgICByZXR1cm4gY2FsY0F1dG9Cb3R0b21Qb3NpdGlvbigpXG4gIH1cblxuICBmdW5jdGlvbiBzbmFwU2hvdChjYjogKCkgPT4gYW55KSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIGlmICghY29udGVudCB8fCBjb250ZW50LnN0eWxlLmRpc3BsYXkgIT09ICdub25lJykgcmV0dXJuIGNiKClcbiAgICAgIGNvbnRlbnQuc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snXG4gICAgICBjYigpXG4gICAgICBjb250ZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlRGltZW5zaW9ucygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIHNuYXBTaG90KCgpID0+IHtcbiAgICAgICAgYWN0aXZhdG9yICYmIHNldEFjdGl2YXRvckRpbWVuc2lvbnMoKVxuICAgICAgICBjb250ZW50ICYmIHNldENvbnRlbnREaW1lbnNpb25zKClcbiAgICAgICAgcmVzb2x2ZSgpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiBzZXRBY3RpdmF0b3JEaW1lbnNpb25zKCkge1xuICAgIGRpbWVuc2lvbnMuYWN0aXZhdG9yID0gZ2V0UmVjdChhY3RpdmF0b3IpXG5cbiAgICBkaW1lbnNpb25zLmFjdGl2YXRvci5oZWlnaHQgPSBhY3RpdmF0b3Iub2Zmc2V0SGVpZ2h0XG4gICAgZGltZW5zaW9ucy5hY3RpdmF0b3IudG9wID0gZGltZW5zaW9ucy5hY3RpdmF0b3IudG9wICsgZ2V0U2Nyb2xsVG9wKClcbiAgICBkaW1lbnNpb25zLmFjdGl2YXRvci5sZWZ0ID0gZGltZW5zaW9ucy5hY3RpdmF0b3IubGVmdCArIGdldFNjcm9sbExlZnQoKVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0Q29udGVudERpbWVuc2lvbnMoKSB7XG4gICAgY29uc3QgcmVjdCA9IGFjdGl2YXRvciA/IGRpbWVuc2lvbnMuYWN0aXZhdG9yIDogZ2V0UmVjdChjb250ZW50KVxuXG4gICAgZGltZW5zaW9ucy5jb250ZW50LmhlaWdodCA9IGNvbnRlbnQub2Zmc2V0SGVpZ2h0XG4gICAgZGltZW5zaW9ucy5jb250ZW50LnRvcCA9IGNhbGNQb3NpdGlvblkoKVxuICAgIGRpbWVuc2lvbnMuY29udGVudC5sZWZ0ID0gY2FsY0xlZnRQb3NpdGlvbigpXG4gICAgZGltZW5zaW9ucy5jb250ZW50LndpZHRoID0gcmVjdC53aWR0aFxuICB9XG5cbiAgZnVuY3Rpb24gc2V0RGltZW5zaW9ucyhhY3RpdmF0b3JFbDogSFRNTEVsZW1lbnQpIHtcbiAgICBpZiAoIWFjdGl2YXRvciAmJiAhY29udGVudCkge1xuICAgICAgYWN0aXZhdG9yID0gYWN0aXZhdG9yRWxcbiAgICAgIGNvbnRlbnQgPSBjb250ZW50UmVmLnZhbHVlIVxuICAgIH1cblxuICAgIHJldHVybiB1cGRhdGVEaW1lbnNpb25zKClcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZGltZW5zaW9ucyxcbiAgICBjb250ZW50UmVmLFxuICAgIHNldERpbWVuc2lvbnMsXG4gICAgdXBkYXRlRGltZW5zaW9ucyxcbiAgfVxufVxuIiwiaW1wb3J0IHsgcmVmLCBDb21wb25lbnRQdWJsaWNJbnN0YW5jZSB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IEFjdGl2YXRvckxpc3RlbmVycywgRGltZW5zaW9ucyB9IGZyb20gJy4uLy4uL3R5cGVzL2NvbXBvc2FibGVzJ1xuaW1wb3J0IHsgTWF5YmUgfSBmcm9tICcuLi8uLi90eXBlcy9iYXNlJ1xuXG5leHBvcnQgZnVuY3Rpb24gYWN0aXZhdG9yUHJvcHMoKSB7XG4gIHJldHVybiB7XG4gICAgYWN0aXZhdG9yOiB7XG4gICAgICB0eXBlOiBbT2JqZWN0LCBTdHJpbmddLFxuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICB9LFxuICAgIGludGVybmFsQWN0aXZhdG9yOiBCb29sZWFuLFxuICB9XG59XG5cbmV4cG9ydCBjb25zdCB1c2VBY3RpdmF0b3IgPSAocHJvcHMpID0+IHtcbiAgY29uc3QgYWN0aXZhdG9yUmVmID1cbiAgICByZWY8TWF5YmU8SFRNTEVsZW1lbnQgfCBDb21wb25lbnRQdWJsaWNJbnN0YW5jZTxhbnk+Pj4obnVsbClcbiAgY29uc3QgYWN0aXZhdG9yU2l6ZXM6IFBhcnRpYWw8RGltZW5zaW9ucz4gPSB7fVxuICBjb25zdCBsaXN0ZW5lcnM6IFBhcnRpYWw8QWN0aXZhdG9yTGlzdGVuZXJzPiA9IHt9XG5cbiAgY29uc3QgZ2V0QWN0aXZhdG9yID0gKGU/OiBFdmVudCk6IE1heWJlPEhUTUxFbGVtZW50PiA9PiB7XG4gICAgaWYgKGFjdGl2YXRvclJlZi52YWx1ZSkgcmV0dXJuIGFjdGl2YXRvclJlZi52YWx1ZVxuXG4gICAgY29uc3QgdGFyZ2V0ID0gcHJvcHMuaW50ZXJuYWxBY3RpdmF0b3IgP1xuICAgICAgKHByb3BzLmFjdGl2YXRvcj8uJGVsIHx8IHByb3BzLmFjdGl2YXRvcikgOiBkb2N1bWVudFxuXG4gICAgaWYgKHByb3BzLmlucHV0QWN0aXZhdG9yKSB7XG4gICAgICByZXR1cm4gKGFjdGl2YXRvclJlZi52YWx1ZSA9IHRhcmdldC5xdWVyeVNlbGVjdG9yKHByb3BzLmlucHV0QWN0aXZhdG9yKSlcbiAgICB9XG5cbiAgICBpZiAocHJvcHMuYWN0aXZhdG9yKSB7XG4gICAgICBpZiAodHlwZW9mIHByb3BzLmFjdGl2YXRvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIChhY3RpdmF0b3JSZWYudmFsdWUgPSB0YXJnZXQucXVlcnlTZWxlY3Rvcihwcm9wcy5hY3RpdmF0b3IpKVxuICAgICAgfVxuXG4gICAgICBpZiAocHJvcHMuYWN0aXZhdG9yLiRlbCkge1xuICAgICAgICByZXR1cm4gKGFjdGl2YXRvclJlZi52YWx1ZSA9IHByb3BzLmFjdGl2YXRvci4kZWwpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoYWN0aXZhdG9yUmVmLnZhbHVlID0gcHJvcHMuYWN0aXZhdG9yKVxuICAgIH1cblxuICAgIGlmIChlKSB7XG4gICAgICByZXR1cm4gKGFjdGl2YXRvclJlZi52YWx1ZSA9IChlLnRhcmdldCB8fCBlLmN1cnJlbnRUYXJnZXQpIGFzIEhUTUxFbGVtZW50KVxuICAgIH1cblxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBjb25zdCBnZXRBY3RpdmF0b3JTaXplcyA9ICgpID0+IHtcbiAgICBjb25zdCBlbCA9IGFjdGl2YXRvclJlZi52YWx1ZSEuJGVsIHx8IGFjdGl2YXRvclJlZi52YWx1ZSFcblxuICAgIGFjdGl2YXRvclNpemVzLmxlZnQgPSBlbC5vZmZzZXRMZWZ0XG4gICAgYWN0aXZhdG9yU2l6ZXMudG9wID0gZWwub2Zmc2V0VG9wXG4gICAgYWN0aXZhdG9yU2l6ZXMuaGVpZ2h0ID0gZWwub2Zmc2V0SGVpZ2h0XG4gICAgYWN0aXZhdG9yU2l6ZXMud2lkdGggPSBlbC5vZmZzZXRXaWR0aFxuXG4gICAgcmV0dXJuIGFjdGl2YXRvclNpemVzXG4gIH1cblxuICBjb25zdCBnZW5BY3RpdmF0b3JMaXN0ZW5lcnMgPSAocHJvcHMsIGhhbmRsZXJzKSA9PiB7XG4gICAgaWYgKHByb3BzLm9wZW5PbkhvdmVyKSB7XG4gICAgICBsaXN0ZW5lcnMubW91c2VlbnRlciA9IChlKSA9PiBoYW5kbGVycy5tb3VzZWVudGVyKGUpXG4gICAgICBsaXN0ZW5lcnMubW91c2VsZWF2ZSA9IChlKSA9PiBoYW5kbGVycy5tb3VzZWxlYXZlKGUpXG4gICAgfVxuXG4gICAgaWYgKHByb3BzLm9wZW5PbkNsaWNrKSB7XG4gICAgICBsaXN0ZW5lcnMuY2xpY2sgPSAoZSkgPT4gaGFuZGxlcnMuY2xpY2soZSlcbiAgICB9XG5cbiAgICBpZiAocHJvcHMub3Blbk9uQ29udGV4dG1lbnUpIHtcbiAgICAgIGxpc3RlbmVycy5jb250ZXh0bWVudSA9IChlKSA9PiBoYW5kbGVycy5jb250ZXh0bWVudShlKVxuICAgIH1cblxuICAgIHJldHVybiBsaXN0ZW5lcnNcbiAgfVxuXG4gIGNvbnN0IGFkZEFjdGl2YXRvckV2ZW50cyA9ICgpID0+IHtcbiAgICBjb25zdCBldmVudHMgPSBPYmplY3Qua2V5cyhsaXN0ZW5lcnMpXG5cbiAgICBpZiAoYWN0aXZhdG9yUmVmLnZhbHVlKSB7XG4gICAgICBldmVudHMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGFjdGl2YXRvclJlZi52YWx1ZSEuYWRkRXZlbnRMaXN0ZW5lcihrZXksIGxpc3RlbmVyc1trZXldKVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBjb25zdCByZW1vdmVBY3RpdmF0b3JFdmVudHMgPSAoKSA9PiB7XG4gICAgY29uc3QgZXZlbnRzID0gT2JqZWN0LmtleXMobGlzdGVuZXJzKVxuXG4gICAgaWYgKGFjdGl2YXRvclJlZi52YWx1ZSkge1xuICAgICAgZXZlbnRzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBhY3RpdmF0b3JSZWYudmFsdWUhLnJlbW92ZUV2ZW50TGlzdGVuZXIoa2V5LCBsaXN0ZW5lcnNba2V5XSlcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBhY3RpdmF0b3JSZWYsXG4gICAgZ2V0QWN0aXZhdG9yLFxuICAgIGdldEFjdGl2YXRvclNpemVzLFxuICAgIGFkZEFjdGl2YXRvckV2ZW50cyxcbiAgICByZW1vdmVBY3RpdmF0b3JFdmVudHMsXG4gICAgZ2VuQWN0aXZhdG9yTGlzdGVuZXJzLFxuICB9XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gdXNlRGV0YWNoKCkge1xuICBsZXQgdGFyZ2V0XG5cbiAgY29uc3Qgc2V0RGV0YWNoZWQgPSAoZWw6IEhUTUxFbGVtZW50LCBzZWxlY3Rvcjogc3RyaW5nID0gJycpID0+IHtcbiAgICBpZiAoc2VsZWN0b3IpIHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXG4gICAgaWYgKCFzZWxlY3RvcikgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnYtYXBwJylcbiAgICBpZiAoIXRhcmdldCkgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2FwcCcpXG4gICAgaWYgKCF0YXJnZXQpIHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKGVsKVxuICB9XG5cbiAgY29uc3QgcmVtb3ZlRGV0YWNoZWQgPSAoZWw6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgdGFyZ2V0LnJlbW92ZUNoaWxkKGVsKVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXREZXRhY2hlZCxcbiAgICByZW1vdmVEZXRhY2hlZCxcbiAgfVxufVxuIiwiZnVuY3Rpb24gY2xpY2tIYW5kbGVyKGUsIGVsKSB7XG4gIGlmIChcbiAgICBlbC5jb250YWlucyhlLnRhcmdldCkgJiZcbiAgICBlbC5fYmluZHM/LnZhbHVlICYmXG4gICAgIWVsLl9iaW5kcz8udmFsdWUuY2xvc2VDb25kaXRpb25hbFxuICApXG4gICAgcmV0dXJuXG5cbiAgaWYgKHR5cGVvZiBlbC5fYmluZHM/LnZhbHVlID09PSAnZnVuY3Rpb24nKSBlbC5fYmluZHMudmFsdWUoZSlcblxuICBpZiAodHlwZW9mIGVsLl9iaW5kcz8udmFsdWUgPT09ICdvYmplY3QnKSBlbC5fYmluZHMudmFsdWUuaGFuZGxlcihlKVxufVxuXG5mdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihlbCkge1xuICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZWwuX29uQ2xpY2ssIHRydWUpXG4gIGRlbGV0ZSBlbC5fb25DbGlja1xuICBkZWxldGUgZWwuX2JpbmRzXG59XG5cbmV4cG9ydCBjb25zdCBjbGlja091dHNpZGUgPSB7XG4gIGJlZm9yZU1vdW50KGVsLCBiaW5kaW5nKSB7XG4gICAgZWwuX2JpbmRzID0gYmluZGluZ1xuICB9LFxuXG4gIG1vdW50ZWQoZWwpIHtcbiAgICBlbC5fb25DbGljayA9IChlKSA9PiBjbGlja0hhbmRsZXIoZSwgZWwpXG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGVsLl9vbkNsaWNrLCB0cnVlKVxuICB9LFxuXG4gIGJlZm9yZVVwZGF0ZShlbCwgYmluZGluZykge1xuICAgIGVsLl9iaW5kcyA9IGJpbmRpbmdcbiAgfSxcblxuICBiZWZvcmVVbm1vdW50KGVsKSB7XG4gICAgcmVtb3ZlTGlzdGVuZXIoZWwpXG4gIH0sXG59XG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQge1xuICBkZWZpbmVDb21wb25lbnQsXG4gIHdhdGNoLFxuICBoLFxuICB3aXRoRGlyZWN0aXZlcyxcbiAgY29tcHV0ZWQsXG4gIG9uTW91bnRlZCxcbiAgb25CZWZvcmVVbm1vdW50LFxuICB2U2hvdyxcbiAgVk5vZGUsXG4gIERpcmVjdGl2ZUFyZ3VtZW50cyxcbn0gZnJvbSAndnVlJ1xuXG4vLyBDb21wb3NhYmxlXG5pbXBvcnQge1xuICBhdXRvUG9zaXRpb25Qcm9wcyxcbiAgdXNlQXV0b1Bvc2l0aW9uLFxufSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1hdXRvLXBvc2l0aW9uJ1xuaW1wb3J0IHsgYWN0aXZhdG9yUHJvcHMsIHVzZUFjdGl2YXRvciB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWFjdGl2YXRvcidcbmltcG9ydCB7IHVzZURldGFjaCB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWRldGFjaCdcbmltcG9ydCB7IHVzZUVsZXZhdGlvbiB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWVsZXZhdGlvbidcbmltcG9ydCB7IHVzZVRvZ2dsZSB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXRvZ2dsZSdcbmltcG9ydCB7IHVzZVRyYW5zaXRpb24gfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS10cmFuc2l0aW9uJ1xuaW1wb3J0IHsgcG9zaXRpb25Qcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXBvc2l0aW9uJ1xuXG4vLyBIZWxwZXJzXG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0IH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuLy8gRGlyZWN0aXZlc1xuaW1wb3J0IHsgY2xpY2tPdXRzaWRlLCByZXNpemUgfSBmcm9tICcuLi8uLi9kaXJlY3RpdmVzJ1xuXG5pbXBvcnQgeyBNYXliZSB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL2Jhc2UnXG5cbmV4cG9ydCBjb25zdCBWTWVudSA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LW1lbnUnLFxuICBkaXJlY3RpdmVzOiB7XG4gICAgY2xpY2tPdXRzaWRlLFxuICAgIHJlc2l6ZSxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBtYXhIZWlnaHQ6IHtcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgICBkZWZhdWx0OiAyMDAsXG4gICAgfSxcbiAgICB3aWR0aDoge1xuICAgICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICAgIGRlZmF1bHQ6IDAsXG4gICAgfSxcbiAgICB6SW5kZXg6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiAxMCxcbiAgICB9LFxuICAgIG9wZW5PbkhvdmVyOiBCb29sZWFuLFxuICAgIG9wZW5PbkNsaWNrOiBCb29sZWFuLFxuICAgIG9wZW5PbkNvbnRleHRtZW51OiBCb29sZWFuLFxuICAgIGNsb3NlT25DbGljazoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgfSxcbiAgICBlbGV2YXRpb246IHtcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgICBkZWZhdWx0OiAxMCxcbiAgICB9LFxuICAgIG9mZnNldFg6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiAyMCxcbiAgICB9LFxuICAgIG9mZnNldFk6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiAyMCxcbiAgICB9LFxuICAgIG1vZGVsVmFsdWU6IEJvb2xlYW4sXG4gICAgaW5wdXRBY3RpdmF0b3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnLFxuICAgIH0sXG4gICAgLi4ucG9zaXRpb25Qcm9wcygpLFxuICAgIC4uLmF1dG9Qb3NpdGlvblByb3BzKCksXG4gICAgLi4uYWN0aXZhdG9yUHJvcHMoKSxcbiAgfSxcblxuICBlbWl0czogWydzaG93JywgJ2hpZGUnXSxcblxuICBzZXR1cChwcm9wcywgeyBlbWl0LCBzbG90cyB9KSB7XG4gICAgY29uc3QgeyBlbGV2YXRpb25DbGFzc2VzIH0gPSB1c2VFbGV2YXRpb24ocHJvcHMpXG4gICAgY29uc3QgeyBpc0FjdGl2ZSB9ID0gdXNlVG9nZ2xlKHByb3BzKVxuICAgIGNvbnN0IHsgY29udGVudFJlZiwgc2V0RGltZW5zaW9ucywgZGltZW5zaW9ucyB9ID0gdXNlQXV0b1Bvc2l0aW9uKHByb3BzKVxuICAgIGNvbnN0IHsgc2V0RGV0YWNoZWQsIHJlbW92ZURldGFjaGVkIH0gPSB1c2VEZXRhY2goKVxuICAgIGNvbnN0IHtcbiAgICAgIGFjdGl2YXRvclJlZixcbiAgICAgIGdldEFjdGl2YXRvcixcbiAgICAgIGdlbkFjdGl2YXRvckxpc3RlbmVycyxcbiAgICAgIGFkZEFjdGl2YXRvckV2ZW50cyxcbiAgICAgIHJlbW92ZUFjdGl2YXRvckV2ZW50cyxcbiAgICB9ID0gdXNlQWN0aXZhdG9yKHByb3BzKVxuXG4gICAgY29uc3Qgc2V0RGltZW5zaW9uc09uID0gKGUsIGZsYWcpID0+IHtcbiAgICAgIHNldERpbWVuc2lvbnMoZ2V0QWN0aXZhdG9yKGUpISkudGhlbigoKSA9PiB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiAoaXNBY3RpdmUudmFsdWUgPSBmbGFnKSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgaGFuZGxlcnMgPSB7XG4gICAgICBjbGljazogKGUpID0+IHNldERpbWVuc2lvbnNPbihlLCBwcm9wcy5vcGVuT25DbGljayksXG4gICAgICBtb3VzZWVudGVyOiAoZSkgPT4gc2V0RGltZW5zaW9uc09uKGUsIHByb3BzLm9wZW5PbkhvdmVyKSxcbiAgICAgIG1vdXNlbGVhdmU6IChlKSA9PiBzZXREaW1lbnNpb25zT24oZSwgIXByb3BzLm9wZW5PbkhvdmVyKSxcbiAgICAgIGNvbnRleHRtZW51OiAoZSkgPT4gc2V0RGltZW5zaW9uc09uKGUsIHByb3BzLm9wZW5PbkNvbnRleHRtZW51KSxcbiAgICB9XG5cbiAgICBjb25zdCBsaXN0ZW5lcnMgPSBnZW5BY3RpdmF0b3JMaXN0ZW5lcnMocHJvcHMsIGhhbmRsZXJzKVxuXG4gICAgY29uc3QgZGlyZWN0aXZlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIGlzQWN0aXZlLnZhbHVlXG4gICAgICAgID8ge1xuICAgICAgICAgICAgaGFuZGxlcjogKCkgPT4gKGlzQWN0aXZlLnZhbHVlID0gZmFsc2UpLFxuICAgICAgICAgICAgY2xvc2VDb25kaXRpb25hbDogcHJvcHMuY2xvc2VPbkNsaWNrLFxuICAgICAgICAgIH1cbiAgICAgICAgOiB1bmRlZmluZWRcbiAgICB9KVxuXG4gICAgY29uc3QgY2FsY1dpZHRoID0gY29tcHV0ZWQ8bnVtYmVyIHwgc3RyaW5nPigoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMud2lkdGggfHwgK2RpbWVuc2lvbnMuY29udGVudC53aWR0aFxuICAgIH0pXG5cbiAgICB3YXRjaChpc0FjdGl2ZSwgKHRvKSA9PiB7XG4gICAgICB0byAmJiBlbWl0KCdzaG93JylcbiAgICAgICF0byAmJiBlbWl0KCdoaWRlJylcbiAgICB9KVxuXG4gICAgd2F0Y2goXG4gICAgICAoKSA9PiBbcHJvcHMucG9zaXRpb25ZLCBwcm9wcy5wb3NpdGlvblhdLFxuICAgICAgKCkgPT4gc2V0RGltZW5zaW9ucyhhY3RpdmF0b3JSZWYudmFsdWUhKVxuICAgIClcblxuICAgIHdhdGNoKFxuICAgICAgKCkgPT4gcHJvcHMubW9kZWxWYWx1ZSxcbiAgICAgICh0bykgPT4ge1xuICAgICAgICBpc0FjdGl2ZS52YWx1ZSA9IGZhbHNlXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gKGlzQWN0aXZlLnZhbHVlID0gdG8pKVxuICAgICAgfVxuICAgIClcblxuICAgIGNvbnN0IGNvbnRlbnRDbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1tZW51X19jb250ZW50JzogdHJ1ZSxcbiAgICAgIC4uLmVsZXZhdGlvbkNsYXNzZXMudmFsdWUsXG4gICAgfSkpXG5cbiAgICBjb25zdCBjb250ZW50U3R5bGVzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgc3RyaW5nIHwgbnVtYmVyPj4oKCkgPT4gKHtcbiAgICAgIHRvcDogY29udmVydFRvVW5pdChkaW1lbnNpb25zLmNvbnRlbnQudG9wKSEsXG4gICAgICBsZWZ0OiBjb252ZXJ0VG9Vbml0KGRpbWVuc2lvbnMuY29udGVudC5sZWZ0KSEsXG4gICAgICB6SW5kZXg6IHByb3BzLnpJbmRleCxcbiAgICB9KSkgYXMgYW55XG5cbiAgICBjb25zdCBvbkNvbnRlbnRDbGljayA9ICgpID0+IHtcbiAgICAgIGlzQWN0aXZlLnZhbHVlID0gIXByb3BzLmNsb3NlT25DbGlja1xuICAgIH1cblxuICAgIGNvbnN0IG9uUmVzaXplID0gKCkgPT4ge1xuICAgICAgaWYgKCFpc0FjdGl2ZS52YWx1ZSkgcmV0dXJuXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gc2V0RGltZW5zaW9ucyhhY3RpdmF0b3JSZWYudmFsdWUhKSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5BY3RpdmF0b3JTbG90ID0gKCk6IE1heWJlPFZOb2RlPiA9PiB7XG4gICAgICBpZiAoc2xvdHMuYWN0aXZhdG9yKSB7XG4gICAgICAgIGNvbnN0IHNsb3RDb250ZW50ID0gc2xvdHMuYWN0aXZhdG9yKHsgb246IGxpc3RlbmVycyB9KVxuXG4gICAgICAgIGlmICh0eXBlb2Ygc2xvdENvbnRlbnQhWzBdLnR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgcmV0dXJuIGgoJ2RpdicsIHsgcmVmOiBhY3RpdmF0b3JSZWYgfSwgaChzbG90Q29udGVudCFbMF0pKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGgoc2xvdENvbnRlbnQhWzBdLCB7IHJlZjogYWN0aXZhdG9yUmVmIH0pXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQ29udGVudFNsb3QgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICByZWY6IGNvbnRlbnRSZWYsXG4gICAgICAgIGNsYXNzOiBjb250ZW50Q2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgc3R5bGU6IGNvbnRlbnRTdHlsZXMudmFsdWUsXG4gICAgICAgIG9uQ2xpY2s6IG9uQ29udGVudENsaWNrLFxuICAgICAgfVxuXG4gICAgICBjb25zdCBzbG90Q29udGVudCA9IGgoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3M6ICd2LW1lbnVfX3Nsb3QnLFxuICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBtYXhIZWlnaHQ6IGNvbnZlcnRUb1VuaXQocHJvcHMubWF4SGVpZ2h0KSxcbiAgICAgICAgICAgIHdpZHRoOiBjb252ZXJ0VG9Vbml0KGNhbGNXaWR0aC52YWx1ZSksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgW3Nsb3RzLmRlZmF1bHQgJiYgc2xvdHMuZGVmYXVsdCgpXVxuICAgICAgKVxuXG4gICAgICBjb25zdCBjb250ZW50ID0gaCgnZGl2JywgcHJvcHNEYXRhLCBzbG90Q29udGVudClcblxuICAgICAgY29uc3QgZGlyZWN0aXZlczogRGlyZWN0aXZlQXJndW1lbnRzID0gW1xuICAgICAgICBbdlNob3csIGlzQWN0aXZlLnZhbHVlXSxcbiAgICAgICAgW3Jlc2l6ZSwgb25SZXNpemVdLFxuICAgICAgICBbY2xpY2tPdXRzaWRlLCBkaXJlY3RpdmUudmFsdWVdLFxuICAgICAgXVxuXG4gICAgICByZXR1cm4gd2l0aERpcmVjdGl2ZXMoY29udGVudCwgZGlyZWN0aXZlcylcbiAgICB9XG5cbiAgICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgICAgYWN0aXZhdG9yUmVmLnZhbHVlID0gZ2V0QWN0aXZhdG9yKClcblxuICAgICAgYWRkQWN0aXZhdG9yRXZlbnRzKClcbiAgICAgIHNldERldGFjaGVkKGNvbnRlbnRSZWYudmFsdWUhKVxuICAgIH0pXG5cbiAgICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgICAgcmVtb3ZlQWN0aXZhdG9yRXZlbnRzKClcbiAgICAgIHJlbW92ZURldGFjaGVkKGNvbnRlbnRSZWYudmFsdWUhKVxuICAgIH0pXG5cbiAgICByZXR1cm4gKCkgPT4gW1xuICAgICAgaCgnZGl2JywgeyBjbGFzczogeyAndi1tZW51JzogdHJ1ZSB9IH0pLFxuICAgICAgc2xvdHMuYWN0aXZhdG9yICYmIGdlbkFjdGl2YXRvclNsb3QoKSxcbiAgICAgIHVzZVRyYW5zaXRpb24oZ2VuQ29udGVudFNsb3QoKSwgJ2ZhZGUnKSxcbiAgICBdXG4gIH0sXG59KVxuIiwiZXhwb3J0ICogZnJvbSAnLi9WTWVudSdcbiIsImltcG9ydCB7IHJlYWN0aXZlLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcbi8vIFR5cGVzXG5pbXBvcnQgeyBQcm9wVHlwZSB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vLi4vdHlwZXMvYmFzZSdcblxudHlwZSBFcnJvcnNTdGF0ZSA9IHtcbiAgaW5uZXJFcnJvcjogTWF5YmU8b2JqZWN0PlxuICBpbm5lckVycm9yTWVzc2FnZTogTWF5YmU8c3RyaW5nPlxuICBpc0RpcnR5OiBib29sZWFuXG59XG5cbmV4cG9ydCBjb25zdCB2YWxpZGF0aW9uUHJvcHMgPSAoKSA9PiAoe1xuICBydWxlczoge1xuICAgIHR5cGU6IEFycmF5IGFzIFByb3BUeXBlPEFycmF5PCh2YWw6IGFueSkgPT4gYm9vbGVhbj4+LFxuICAgIGRlZmF1bHQ6IG51bGwsXG4gIH0sXG4gIHZhbHVlOiBbU3RyaW5nLCBOdW1iZXIsIERhdGUsIE9iamVjdF0sXG59KVxuXG5leHBvcnQgY29uc3QgdXNlVmFsaWRhdGlvbiA9IChwcm9wcykgPT4ge1xuICBjb25zdCBlcnJvclN0YXRlID0gcmVhY3RpdmU8RXJyb3JzU3RhdGU+KHtcbiAgICBpbm5lckVycm9yOiBudWxsLFxuICAgIGlubmVyRXJyb3JNZXNzYWdlOiBudWxsLFxuICAgIGlzRGlydHk6IGZhbHNlLFxuICB9KVxuXG4gIGNvbnN0IHZhbGlkYXRpb25DbGFzc2VzID0gKCkgPT4gKHtcbiAgICAnZS12YWxpZGF0YWJsZSc6IHRydWUsXG4gIH0pXG5cbiAgY29uc3QgY29tcHV0ZWRDb2xvciA9IGNvbXB1dGVkPE1heWJlPHN0cmluZz4+KCgpID0+IHtcbiAgICByZXR1cm4gcHJvcHMuZGlzYWJsZWQgPyAnZGlzYWJsZWQnIDogJ3ByaW1hcnknXG4gIH0pXG5cbiAgY29uc3QgaGFzUnVsZXMgPSBjb21wdXRlZDxib29sZWFuPigoKSA9PiB7XG4gICAgcmV0dXJuICEhcHJvcHMucnVsZXMgJiYgcHJvcHMucnVsZXMubGVuZ3RoID4gMFxuICB9KVxuXG4gIGNvbnN0IGRpcnR5ID0gKCkgPT4gKGVycm9yU3RhdGUuaXNEaXJ0eSA9IHRydWUpXG5cbiAgY29uc3QgdXBkYXRlID0gKGVyciwgbXNnID0gbnVsbCkgPT4ge1xuICAgIGlmIChlcnJvclN0YXRlLmlubmVyRXJyb3IgIT09IGVycikge1xuICAgICAgZXJyb3JTdGF0ZS5pbm5lckVycm9yID0gZXJyXG4gICAgfVxuXG4gICAgaWYgKG1zZyAmJiBlcnJvclN0YXRlLmlubmVyRXJyb3JNZXNzYWdlICE9PSBtc2cpIHtcbiAgICAgIGVycm9yU3RhdGUuaW5uZXJFcnJvck1lc3NhZ2UgPSBtc2dcbiAgICB9XG5cbiAgICBpZiAoIW1zZykgZXJyb3JTdGF0ZS5pbm5lckVycm9yTWVzc2FnZSA9IG1zZ1xuXG4gICAgcmV0dXJuIGVycm9yU3RhdGUuaW5uZXJFcnJvclxuICB9XG5cbiAgY29uc3QgdmFsaWRhdGUgPSAodmFsID0gcHJvcHMudmFsdWUpOiBib29sZWFuIHwgdm9pZCA9PiB7XG4gICAgaWYgKCFoYXNSdWxlcy52YWx1ZSkgcmV0dXJuIHRydWVcblxuICAgIGRpcnR5KClcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwcm9wcy5ydWxlcy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgY29uc3QgcnVsZSA9IHByb3BzLnJ1bGVzW2ldXG5cbiAgICAgIGxldCByZXN1bHRcblxuICAgICAgaWYgKHR5cGVvZiBydWxlID09PSAnZnVuY3Rpb24nKSByZXN1bHQgPSBydWxlKHZhbClcblxuICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UgfHwgdHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdXBkYXRlKHRydWUsIHJlc3VsdClcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ID09PSB0cnVlICYmIGkgPT09IGxlbiAtIDEpIHtcbiAgICAgICAgdXBkYXRlKGZhbHNlKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXJyb3JTdGF0ZSxcbiAgICBjb21wdXRlZENvbG9yLFxuICAgIHZhbGlkYXRpb25DbGFzc2VzLFxuICAgIHZhbGlkYXRlLFxuICAgIGRpcnR5LFxuICB9XG59XG4iLCJpbXBvcnQgeyBjb21wdXRlZCwgcmVhY3RpdmUgfSBmcm9tICd2dWUnXG5cbnR5cGUgU3RhdGUgPSB7XG4gIGZvY3VzZWQ6IGJvb2xlYW5cbn1cblxuZXhwb3J0IGNvbnN0IHVzZUlucHV0U3RhdGVzID0gKHByb3BzLCB7IGF0dHJzLCBlbWl0IH0pID0+IHtcbiAgY29uc3Qgc3RhdGUgPSByZWFjdGl2ZTxTdGF0ZT4oe1xuICAgIGZvY3VzZWQ6IGZhbHNlLFxuICB9KVxuXG4gIGNvbnN0IGlzRGlzYWJsZWQgPSBjb21wdXRlZDxib29sZWFuPigoKSA9PiB7XG4gICAgaWYgKHByb3BzLmRpc2FibGVkKSByZXR1cm4gdHJ1ZVxuXG4gICAgaWYgKHR5cGVvZiBhdHRycy5kaXNhYmxlZCA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gYXR0cnMuZGlzYWJsZWRcblxuICAgIHJldHVybiBhdHRycy5kaXNhYmxlZCAhPT0gdW5kZWZpbmVkXG4gIH0pXG5cbiAgY29uc3QgaXNSZWFkb25seSA9IGNvbXB1dGVkPGJvb2xlYW4+KCgpID0+IHtcbiAgICBpZiAocHJvcHMucmVhZG9ubHkpIHJldHVybiB0cnVlXG5cbiAgICBpZiAodHlwZW9mIGF0dHJzLnJlYWRvbmx5ID09PSAnYm9vbGVhbicpIHJldHVybiBhdHRycy5yZWFkb25seVxuXG4gICAgcmV0dXJuIGF0dHJzLnJlYWRvbmx5ICE9PSB1bmRlZmluZWRcbiAgfSlcblxuICBjb25zdCBvbkZvY3VzID0gKGUpID0+IHtcbiAgICBpZiAoaXNSZWFkb25seS52YWx1ZSkgcmV0dXJuXG5cbiAgICBzdGF0ZS5mb2N1c2VkID0gdHJ1ZVxuICAgIGVtaXQoJ2ZvY3VzJywgZSlcbiAgfVxuXG4gIGNvbnN0IG9uQ2hhbmdlID0gKCkgPT4ge1xuICAgIGlmIChpc1JlYWRvbmx5LnZhbHVlKSByZXR1cm5cblxuICAgIGVtaXQoJ2NoYW5nZScpXG4gIH1cblxuICBjb25zdCBvbkJsdXIgPSAoZSkgPT4ge1xuICAgIGlmIChpc1JlYWRvbmx5LnZhbHVlKSByZXR1cm5cblxuICAgIHN0YXRlLmZvY3VzZWQgPSBmYWxzZVxuICAgIGVtaXQoJ2JsdXInLCBlKVxuICB9XG5cbiAgY29uc3Qgb25TZWxlY3QgPSAodmFsKSA9PiB7XG4gICAgc3RhdGUuZm9jdXNlZCA9IGZhbHNlXG4gICAgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCB2YWwpXG4gICAgZW1pdCgnc2VsZWN0JywgdmFsKVxuICAgIG9uQ2hhbmdlKClcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc3RhdGUsXG4gICAgaXNSZWFkb25seSxcbiAgICBpc0Rpc2FibGVkLFxuICAgIG9uRm9jdXMsXG4gICAgb25CbHVyLFxuICAgIG9uQ2hhbmdlLFxuICAgIG9uU2VsZWN0LFxuICB9XG59XG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGgsIGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgdXNlQ29sb3JzLCBjb2xvclByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtY29sb3JzJ1xuXG5leHBvcnQgY29uc3QgVkxhYmVsID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtbGFiZWwnLFxuICBwcm9wczoge1xuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIGZvY3VzZWQ6IEJvb2xlYW4sXG4gICAgLi4uY29sb3JQcm9wcygpLFxuICB9LFxuICBzZXR1cChwcm9wcywgeyBzbG90cyB9KSB7XG4gICAgY29uc3QgeyBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IsIHNldFRleHRDc3NDb2xvciB9ID0gdXNlQ29sb3JzKClcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LWxhYmVsJzogdHJ1ZSxcbiAgICAgICd2LWxhYmVsLS1kaXNhYmxlZCc6IHByb3BzLmRpc2FibGVkLFxuICAgICAgJ3YtbGFiZWwtLWZvY3VzZWQnOiBwcm9wcy5mb2N1c2VkLFxuICAgICAgLi4uKCFwcm9wcy5kaXNhYmxlZCA/IHNldFRleHRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PigoKSA9PiAoe1xuICAgICAgLi4uKCFwcm9wcy5kaXNhYmxlZCA/IHNldFRleHRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICByZXR1cm4gKCkgPT5cbiAgICAgIGgoXG4gICAgICAgICdsYWJlbCcsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgICBzdHlsZTogc3R5bGVzLnZhbHVlLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCksXG4gICAgICAgIH1cbiAgICAgIClcbiAgfSxcbn0pXG4iLCJpbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcbi8vIGltcG9ydCB7IHNpemVzIH0gZnJvbSAnLi4vc2VydmljZXMvc2l6ZS5zZXJ2aWNlJ1xuXG5leHBvcnQgY29uc3Qgc2l6ZVByb3BzID0gKGRlZmF1bHRTaXplOiBzdHJpbmcgPSAnJykgPT4ge1xuICByZXR1cm4ge1xuICAgIHNtOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZGVmYXVsdFNpemUgPT09ICdzbScsXG4gICAgfSxcbiAgICBtZDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGRlZmF1bHRTaXplID09PSAnbWQnLFxuICAgIH0sXG4gICAgbGc6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBkZWZhdWx0U2l6ZSA9PT0gJ2xnJyxcbiAgICB9LFxuICAgIHhsOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZGVmYXVsdFNpemUgPT09ICd4bCcsXG4gICAgfSxcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgdXNlU2l6ZSA9IChwcm9wcykgPT4ge1xuICBjb25zdCBzaXplcyA9IE9iamVjdC5rZXlzKHNpemVQcm9wcygpKVxuXG4gIGNvbnN0IHNpemUgPSBjb21wdXRlZDxzdHJpbmc+KCgpID0+IHNpemVzLmZpbmQoKHMpID0+IHByb3BzW3NdKSEpXG5cbiAgcmV0dXJuIHtcbiAgICBzaXplLFxuICB9XG59XG4iLCJleHBvcnQgZW51bSBzaXplcyB7XG4gIHNtID0gMTYsXG4gIG1kID0gMjQsXG4gIGxnID0gMzIsXG4gIHhsID0gNDAsXG59XG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGgsIGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuXG4vLyBDb21wb3NhYmxlXG5pbXBvcnQgeyB1c2VDb2xvcnMsIGNvbG9yUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG5pbXBvcnQgeyBzaXplUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1zaXplJ1xuXG4vLyBIZWxwZXJzXG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0IH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuXG4vLyBTZXJ2aWNlc1xuaW1wb3J0IHsgc2l6ZXMgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9zaXplcydcblxuZXhwb3J0IGNvbnN0IFZJY29uID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtaWNvbicsXG5cbiAgcHJvcHM6IHtcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICBjbGlja2FibGU6IEJvb2xlYW4sXG4gICAgc2l6ZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICBpY29uOiBTdHJpbmcsXG4gICAgdGFnOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnaScsXG4gICAgfSxcbiAgICAuLi5jb2xvclByb3BzKCksXG4gICAgLi4uc2l6ZVByb3BzKCdzbScpLFxuICB9IGFzIGFueSxcblxuICBlbWl0czogWydjbGljayddLFxuXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzLCBlbWl0IH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3QgeyBzZXRUZXh0Q3NzQ29sb3IsIHNldFRleHRDbGFzc05hbWVDb2xvciB9ID0gdXNlQ29sb3JzKClcbiAgICBjb25zdCBpY29uVGFnID0gcHJvcHMuY2xpY2thYmxlID8gJ2J1dHRvbicgOiBwcm9wcy50YWdcblxuICAgIGNvbnN0IGNvbXB1dGVkSWNvbiA9IGNvbXB1dGVkPHN0cmluZz4oKCkgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgcHJvcHMuaWNvbiB8fFxuICAgICAgICAoc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KClbMF0uY2hpbGRyZW4pXG4gICAgICApPy50cmltKClcbiAgICB9KVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtaWNvbic6IHRydWUsXG4gICAgICAndi1pY29uLS1kaXNhYmxlZCc6IHByb3BzLmRpc2FibGVkLFxuICAgICAgJ3YtaWNvbi0tY2xpY2thYmxlJzogcHJvcHMuY2xpY2thYmxlLFxuICAgICAgW2NvbXB1dGVkSWNvbi52YWx1ZV06ICEhY29tcHV0ZWRJY29uLnZhbHVlLFxuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0VGV4dENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IHN0eWxlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIHN0cmluZz4+KCgpID0+ICh7XG4gICAgICBmb250U2l6ZTogZ2V0U2l6ZXMoKSxcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldFRleHRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBnZXRTaXplcyA9ICgpOiBzdHJpbmcgPT4ge1xuICAgICAgY29uc3Qgc2l6ZVByb3BzID0ge1xuICAgICAgICBzbTogcHJvcHMuc20sXG4gICAgICAgIG1kOiBwcm9wcy5tZCxcbiAgICAgICAgbGc6IHByb3BzLmxnLFxuICAgICAgICB4bDogcHJvcHMueGwsXG4gICAgICB9XG4gICAgICBjb25zdCBleHBsaWNpdFNpemUgPSBPYmplY3Qua2V5cyhzaXplUHJvcHMpLmZpbmQoKGtleSkgPT4gc2l6ZVByb3BzW2tleV0pIVxuXG4gICAgICByZXR1cm4gY29udmVydFRvVW5pdCgoZXhwbGljaXRTaXplICYmIHNpemVzW2V4cGxpY2l0U2l6ZV0pIHx8IHByb3BzLnNpemUpIVxuICAgIH1cblxuICAgIGNvbnN0IG9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICBpZiAoIXByb3BzLmRpc2FibGVkICYmIHByb3BzLmNsaWNrYWJsZSkgZW1pdCgnY2xpY2snKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PlxuICAgICAgaChpY29uVGFnLCB7XG4gICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgICBzdHlsZTogc3R5bGVzLnZhbHVlLFxuICAgICAgICBvbkNsaWNrLFxuICAgICAgfSlcbiAgfSxcbn0pXG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQge1xuICBkZWZpbmVDb21wb25lbnQsXG4gIGgsXG4gIHdhdGNoLFxuICBpbmplY3QsXG4gIGNvbXB1dGVkLFxuICBvbkJlZm9yZU1vdW50LFxuICBvbkJlZm9yZVVubW91bnQsXG4gIFZOb2RlXG59IGZyb20gJ3Z1ZSdcblxuLy8gQ29tcG9zYWJsZVxuaW1wb3J0IHsgdXNlVmFsaWRhdGlvbiwgdmFsaWRhdGlvblByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtdmFsaWRhdGlvbidcbmltcG9ydCB7IHVzZUNvbG9ycywgY29sb3JQcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcbmltcG9ydCB7IHVzZUlucHV0U3RhdGVzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtaW5wdXQtc3RhdGVzJ1xuaW1wb3J0IHsgdXNlVHJhbnNpdGlvbiB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXRyYW5zaXRpb24nXG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZMYWJlbCB9IGZyb20gJy4uL1ZMYWJlbCdcbmltcG9ydCB7IFZJY29uIH0gZnJvbSAnLi4vVkljb24nXG5cbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvYmFzZSdcblxudHlwZSBGb3JtID0ge1xuICBhZGQ6IChpdGVtOiAodmFsPzogYW55KSA9PiBib29sZWFuIHwgdm9pZCkgPT4gdm9pZFxuICByZW1vdmU6IChpdGVtOiAodmFsPzogYW55KSA9PiBib29sZWFuIHwgdm9pZCkgPT4gdm9pZFxufVxuXG5leHBvcnQgY29uc3QgVklucHV0ID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtaW5wdXQnLFxuICBjb21wb25lbnRzOiB7XG4gICAgVkxhYmVsLFxuICAgIFZJY29uXG4gIH0sXG4gIGluaGVyaXRBdHRyczogZmFsc2UsXG4gIHByb3BzOiB7XG4gICAgbGFiZWw6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfSxcbiAgICBwcmVwZW5kSWNvbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJydcbiAgICB9LFxuICAgIGFwcGVuZEljb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfSxcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICBmb2N1c2VkOiBCb29sZWFuLFxuICAgIHJlYWRvbmx5OiBCb29sZWFuLFxuICAgIGZpbGU6IEJvb2xlYW4sXG4gICAgaGludHM6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBoaW50TWVzc2FnZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJydcbiAgICB9LFxuICAgIHRleHRDb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJydcbiAgICB9LFxuICAgIC4uLnZhbGlkYXRpb25Qcm9wcygpLFxuICAgIC4uLmNvbG9yUHJvcHMoKVxuICB9LFxuICBlbWl0czogWyAnY2xpY2snIF0sXG4gIHNldHVwKHByb3BzLCB7IGF0dHJzLCBlbWl0LCBzbG90cyB9KSB7XG4gICAgY29uc3QgeyB2YWxpZGF0ZSwgZXJyb3JTdGF0ZSB9ID0gdXNlVmFsaWRhdGlvbihwcm9wcylcbiAgICBjb25zdCB7IHNldFRleHRDc3NDb2xvciwgc2V0VGV4dENsYXNzTmFtZUNvbG9yIH0gPSB1c2VDb2xvcnMoKVxuICAgIGNvbnN0IHsgaXNEaXNhYmxlZCwgaXNSZWFkb25seSB9ID0gdXNlSW5wdXRTdGF0ZXMocHJvcHMsIHsgYXR0cnMsIGVtaXQgfSlcblxuICAgIGNvbnN0IGZvcm06IE1heWJlPEZvcm0+ID0gaW5qZWN0KCdmb3JtJywgbnVsbCBhcyBhbnkpXG5cbiAgICBjb25zdCB0ZXh0Q2xhc3NDb2xvciA9IHNldFRleHRDbGFzc05hbWVDb2xvcihwcm9wcy50ZXh0Q29sb3IpXG4gICAgY29uc3QgdGV4dENzc0NvbG9yID0gc2V0VGV4dENzc0NvbG9yKHByb3BzLnRleHRDb2xvcilcblxuICAgIGNvbnN0IGhhc1ByZXBlbmRJY29uID0gY29tcHV0ZWQ8Ym9vbGVhbj4oKCkgPT4ge1xuICAgICAgcmV0dXJuICEhcHJvcHMucHJlcGVuZEljb24gfHwgISFzbG90c1sncHJlcGVuZC1pY29uJ11cbiAgICB9KVxuXG4gICAgY29uc3QgaGFzQXBwZW5kSWNvbiA9IGNvbXB1dGVkPGJvb2xlYW4+KCgpID0+IHtcbiAgICAgIHJldHVybiAhIXByb3BzLmFwcGVuZEljb24gfHwgISFzbG90c1snYXBwZW5kLWljb24nXVxuICAgIH0pXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1pbnB1dCc6IHRydWUsXG4gICAgICAndi1pbnB1dC0tcHJpbWFyeSc6ICFwcm9wcy5jb2xvcixcbiAgICAgICd2LWlucHV0LS1mb2N1c2VkJzogcHJvcHMuZm9jdXNlZCAmJiAhaXNSZWFkb25seS52YWx1ZSxcbiAgICAgICd2LWlucHV0LS1kaXNhYmxlZCc6IGlzRGlzYWJsZWQudmFsdWUsXG4gICAgICAndi1pbnB1dC0tcmVhZG9ubHknOiBpc1JlYWRvbmx5LnZhbHVlLFxuICAgICAgJ3YtaW5wdXQtLWZpbGUnOiBwcm9wcy5maWxlLFxuICAgICAgJ3YtaW5wdXQtLWhhcy1wcmVwZW5kLWljb24nOiBoYXNQcmVwZW5kSWNvbi52YWx1ZSxcbiAgICAgICd2LWlucHV0LS1oYXMtYXBwZW5kLWljb24nOiBoYXNBcHBlbmRJY29uLnZhbHVlLFxuICAgICAgJ3YtaW5wdXQtLW5vdC12YWxpZCc6ICEhZXJyb3JTdGF0ZS5pbm5lckVycm9yLFxuICAgICAgLi4uKCFwcm9wcy5kaXNhYmxlZCAmJiAhZXJyb3JTdGF0ZS5pbm5lckVycm9yXG4gICAgICAgID8gc2V0VGV4dENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKVxuICAgICAgICA6IHt9KSxcbiAgICAgIC4uLihhdHRycy5jbGFzcyBhcyBvYmplY3QpXG4gICAgfSkpXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PigoKSA9PiAoe1xuICAgICAgLi4uKCFwcm9wcy5kaXNhYmxlZCAmJiAhZXJyb3JTdGF0ZS5pbm5lckVycm9yXG4gICAgICAgID8gc2V0VGV4dENzc0NvbG9yKHByb3BzLmNvbG9yKVxuICAgICAgICA6IHt9KSxcbiAgICAgIC4uLihhdHRycy5zdHlsZSBhcyBvYmplY3QpXG4gICAgfSkpXG5cbiAgICB3YXRjaChcbiAgICAgICgpID0+IHByb3BzLmZvY3VzZWQsXG4gICAgICAodG8pID0+ICF0byAmJiB2YWxpZGF0ZSgpXG4gICAgKVxuXG4gICAgd2F0Y2goXG4gICAgICAoKSA9PiBwcm9wcy52YWx1ZSxcbiAgICAgICgpID0+IHZhbGlkYXRlKClcbiAgICApXG5cbiAgICBjb25zdCBnZW5MYWJlbCA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICBjb25zdCBsYWJlbCA9IGgoXG4gICAgICAgIFZMYWJlbCxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzOiAndi1sYWJlbC0tb24taW5wdXQnLFxuICAgICAgICAgIGRpc2FibGVkOiBpc0Rpc2FibGVkLnZhbHVlLFxuICAgICAgICAgIGZvY3VzZWQ6IHByb3BzLmZvY3VzZWQsXG4gICAgICAgICAgY29sb3I6ICFlcnJvclN0YXRlLmlubmVyRXJyb3IgPyBwcm9wcy5jb2xvciA6ICcnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBwcm9wcy5sYWJlbFxuICAgICAgICB9XG4gICAgICApXG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCB7IGNsYXNzOiAndi1pbnB1dF9fbGFiZWwnIH0sIFsgbGFiZWwgXSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5JY29uID0gKGljb25OYW1lLCBjbGlja2FibGUgPSBmYWxzZSk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKFZJY29uLCB7XG4gICAgICAgIGljb246IGljb25OYW1lLFxuICAgICAgICBzaXplOiAxNixcbiAgICAgICAgZGlzYWJsZWQ6IHByb3BzLmRpc2FibGVkLFxuICAgICAgICBjbGlja2FibGVcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuUHJlcGVuZEljb24gPSAoKTogTWF5YmU8Vk5vZGU+ID0+IHtcbiAgICAgIGxldCBjb250ZW50XG5cbiAgICAgIGlmIChwcm9wcy5wcmVwZW5kSWNvbikge1xuICAgICAgICBjb250ZW50ID0gZ2VuSWNvbihwcm9wcy5wcmVwZW5kSWNvbilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRlbnQgPSBzbG90c1sncHJlcGVuZC1pY29uJ10/LigpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50ID9cbiAgICAgICAgaCgnZGl2JywgeyBjbGFzczogJ3YtaW5wdXRfX3ByZXBlbmQtaWNvbicgfSwgY29udGVudClcbiAgICAgICAgOiBudWxsXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQXBwZW5kSWNvbiA9ICgpOiBNYXliZTxWTm9kZT4gPT4ge1xuICAgICAgbGV0IGNvbnRlbnRcblxuICAgICAgaWYgKHByb3BzLmFwcGVuZEljb24pIHtcbiAgICAgICAgY29udGVudCA9IGdlbkljb24ocHJvcHMuYXBwZW5kSWNvbilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRlbnQgPSBzbG90c1snYXBwZW5kLWljb24nXT8uKClcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQgP1xuICAgICAgICBoKCdkaXYnLCB7IGNsYXNzOiAndi1pbnB1dF9fYXBwZW5kLWljb24nIH0sIGNvbnRlbnQpXG4gICAgICAgIDogbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IGdlblRleHRGaWVsZFNsb3QgPSAoKSA9PiB7XG4gICAgICBjb25zdCBwcmVwZW5kSWNvbkNvbnRlbnQgPSBnZW5QcmVwZW5kSWNvbigpXG4gICAgICBjb25zdCBhcHBlbmRJY29uQ29udGVudCA9IGdlbkFwcGVuZEljb24oKVxuICAgICAgY29uc3QgeyBkaXNhYmxlZCB9ID0gcHJvcHNcblxuICAgICAgY29uc3QgdGV4dEZpZWxkQ29udGVudCA9IHNsb3RzWyd0ZXh0LWZpZWxkJ10/Lih7XG4gICAgICAgIHRleHRDc3NDb2xvcixcbiAgICAgICAgdGV4dENsYXNzQ29sb3IsXG4gICAgICAgIGRpc2FibGVkXG4gICAgICB9KVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgeyBjbGFzczogJ3YtaW5wdXRfX3RleHQtZmllbGQnIH0sXG4gICAgICAgIFsgcHJlcGVuZEljb25Db250ZW50LCB0ZXh0RmllbGRDb250ZW50LCBhcHBlbmRJY29uQ29udGVudCBdXG4gICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuSGludE1lc3NhZ2UgPSAoKTogTWF5YmU8Vk5vZGU+ID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5oaW50TWVzc2FnZSB8fCBlcnJvclN0YXRlLmlubmVyRXJyb3JNZXNzYWdlID9cbiAgICAgICAgaChcbiAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgeyBjbGFzczogJ3YtaW5wdXRfX2hpbnRzLW1lc3NhZ2UnIH0sXG4gICAgICAgICAgWyBlcnJvclN0YXRlLmlubmVyRXJyb3JNZXNzYWdlIF1cbiAgICAgICAgKVxuICAgICAgICA6IG51bGxcbiAgICB9XG5cbiAgICBjb25zdCBnZW5IaW50cyA9ICgpOiBNYXliZTxWTm9kZT4gPT4ge1xuICAgICAgcmV0dXJuIChwcm9wcy5oaW50cyB8fCBwcm9wcy5ydWxlcykgPyBoKFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBjbGFzczogJ3YtaW5wdXRfX2hpbnRzJyB9LFxuICAgICAgICB1c2VUcmFuc2l0aW9uKGdlbkhpbnRNZXNzYWdlKCkhLCAnZmFkZScpXG4gICAgICApIDogbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IGdlblNlbGVjdFNsb3QgPSAoKTogTWF5YmU8Vk5vZGU+ID0+IHtcbiAgICAgIHJldHVybiBzbG90cy5zZWxlY3QgP1xuICAgICAgICBoKCdkaXYnLCB7IGNsYXNzOiAndi1pbnB1dF9fc2VsZWN0cycgfSwgc2xvdHMuc2VsZWN0Py4oKSlcbiAgICAgICAgOiBudWxsXG4gICAgfVxuXG4gICAgb25CZWZvcmVNb3VudCgoKSA9PiB7XG4gICAgICBpZiAocHJvcHMucnVsZXMpIGZvcm0/LmFkZCh2YWxpZGF0ZSlcbiAgICB9KVxuXG4gICAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICAgIGZvcm0/LnJlbW92ZSh2YWxpZGF0ZSlcbiAgICB9KVxuXG4gICAgcmV0dXJuICgpID0+IGgoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgY2xhc3M6IGNsYXNzZXMudmFsdWUsIHN0eWxlOiBzdHlsZXMudmFsdWUgfSxcbiAgICAgIFtcbiAgICAgICAgcHJvcHMubGFiZWwgJiYgZ2VuTGFiZWwoKSxcbiAgICAgICAgZ2VuVGV4dEZpZWxkU2xvdCgpLFxuICAgICAgICBnZW5IaW50cygpLFxuICAgICAgICBnZW5TZWxlY3RTbG90KClcbiAgICAgIF1cbiAgICApXG4gIH1cbn0pXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGgsIGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgVklucHV0IH0gZnJvbSAnLi4vVklucHV0J1xuaW1wb3J0IHsgdXNlSW5wdXRTdGF0ZXMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1pbnB1dC1zdGF0ZXMnXG5cbmV4cG9ydCBjb25zdCBWVGV4dEZpZWxkID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ2UtdGV4dC1maWVsZCcsXG4gIGNvbXBvbmVudHM6IHtcbiAgICBWSW5wdXQsXG4gIH0sXG4gIGluaGVyaXRBdHRyczogdHJ1ZSxcbiAgcHJvcHM6IHtcbiAgICBtb2RlbFZhbHVlOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogJycsXG4gICAgfSxcbiAgfSxcbiAgZW1pdHM6IFsndXBkYXRlOm1vZGVsVmFsdWUnLCAnaW5wdXQnLCAnYmx1cicsICdmb2N1cycsICdjaGFuZ2UnXSxcbiAgc2V0dXAocHJvcHMsIHsgZW1pdCwgYXR0cnMgfSkge1xuICAgIGNvbnN0IHsgaXNSZWFkb25seSwgaXNEaXNhYmxlZCwgc3RhdGUsIG9uRm9jdXMsIG9uQmx1ciwgb25DaGFuZ2UgfSA9XG4gICAgICB1c2VJbnB1dFN0YXRlcyhwcm9wcywgeyBlbWl0LCBhdHRycyB9KVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtdGV4dC1maWVsZCc6IHRydWUsXG4gICAgICAndi10ZXh0LWZpZWxkLS1kaXNhYmxlZCc6IGlzRGlzYWJsZWQudmFsdWUsXG4gICAgICAndi10ZXh0LWZpZWxkLS1yZWFkb25seSc6IGlzUmVhZG9ubHkudmFsdWUsXG4gICAgfSkpXG5cbiAgICBjb25zdCBjb21wdXRlZFZhbHVlID0gY29tcHV0ZWQoe1xuICAgICAgZ2V0OiAoKSA9PiBwcm9wcy5tb2RlbFZhbHVlLFxuXG4gICAgICBzZXQ6ICh2YWw6IHN0cmluZykgPT4ge1xuICAgICAgICBlbWl0KCdpbnB1dCcsIHZhbClcbiAgICAgICAgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCB2YWwpXG4gICAgICB9LFxuICAgIH0pXG5cbiAgICBjb25zdCBvbklucHV0ID0gKGUpID0+IHtcbiAgICAgIGNvbXB1dGVkVmFsdWUudmFsdWUgPSBlLnRhcmdldC52YWx1ZVxuICAgIH1cblxuICAgIGNvbnN0IGdlbklucHV0RmllbGQgPSAodGV4dENsYXNzQ29sb3IsIHRleHRDc3NDb2xvcikgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2lucHV0Jywge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LXRleHQtZmllbGRfX2lucHV0JzogdHJ1ZSxcbiAgICAgICAgICAuLi4oIWF0dHJzLmRpc2FibGVkICYmIHRleHRDbGFzc0NvbG9yKSxcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAuLi4oIWF0dHJzLmRpc2FibGVkID8gdGV4dENzc0NvbG9yIDoge30pLFxuICAgICAgICB9LFxuICAgICAgICBkaXNhYmxlZDogYXR0cnMuZGlzYWJsZWQsXG4gICAgICAgIHR5cGU6IGF0dHJzLnR5cGUgPyBhdHRycy50eXBlIDogJ3RleHQnLFxuICAgICAgICBwbGFjZWhvbGRlcjogYXR0cnMucGxhY2Vob2xkZXIsXG4gICAgICAgIHJlYWRvbmx5OiBhdHRycy5yZWFkb25seSxcbiAgICAgICAgdmFsdWU6IGNvbXB1dGVkVmFsdWUudmFsdWUsXG4gICAgICAgIG9uSW5wdXQsXG4gICAgICAgIG9uRm9jdXMsXG4gICAgICAgIG9uQmx1cixcbiAgICAgICAgb25DaGFuZ2UsXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlblRleHRGaWVsZFdyYXBwZXIgPSAoY2xzQ29sb3IsIGNzc0NvbG9yKSA9PiB7XG4gICAgICByZXR1cm4gaChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgZ2VuSW5wdXRGaWVsZChjbHNDb2xvciwgY3NzQ29sb3IpXG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+XG4gICAgICBoKFxuICAgICAgICBWSW5wdXQsXG4gICAgICAgIHtcbiAgICAgICAgICBmb2N1c2VkOiBzdGF0ZS5mb2N1c2VkLFxuICAgICAgICAgIHZhbHVlOiBjb21wdXRlZFZhbHVlLnZhbHVlLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgWyd0ZXh0LWZpZWxkJ106ICh7IHRleHRDbGFzc0NvbG9yLCB0ZXh0Q3NzQ29sb3IgfSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGdlblRleHRGaWVsZFdyYXBwZXIodGV4dENsYXNzQ29sb3IsIHRleHRDc3NDb2xvcilcbiAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgICApXG4gIH0sXG59KVxuIiwiZXhwb3J0IHsgVlRleHRGaWVsZCB9IGZyb20gJy4vVlRleHRGaWVsZCdcbiIsImV4cG9ydCAqIGZyb20gXCIuL1ZJbnB1dFwiXG4iLCJleHBvcnQgZW51bSBGYUljb25zIHtcbiAgJGFkZCA9ICdmYXMgZmEtcGx1cycsXG4gICRkZWxldGUgPSAnZmFzIGZhLXRyYXNoLWFsdCcsXG4gICRzbGlkZXJzID0gJ2ZhcyBmYS1zbGlkZXJzLWgnLFxuICAkZWRpdCA9ICdmYXMgZmEtcGVuJyxcbiAgJG1lbnUgPSAnZmFzIGZhLWJhcnMnLFxuICAkY2hldnJvbkRvd24gPSAnZmFzIGZhLWNoZXZyb24tZG93bicsXG4gICRjYXJldERvd24gPSAnZmFzIGZhLWNhcmV0LWRvd24nLFxuICAkcmFkaW9PbiA9ICdmYXIgZmEtZG90LWNpcmNsZScsXG4gICRyYWRpb09mZiA9ICdmYXIgZmEtY2lyY2xlJyxcbiAgJGNoZWNrT24gPSAnZmFzIGZhLWNoZWNrLXNxdWFyZScsXG4gICRjaGVja09mZiA9ICdmYXIgZmEtc3F1YXJlJyxcbiAgJGFycm93UmlnaHQgPSAnZmFzIGZhLWNoZXZyb24tcmlnaHQnLFxuICAkYXJyb3dMZWZ0ID0gJ2ZhcyBmYS1jaGV2cm9uLWxlZnQnLFxuICAkYXJyb3dVcCA9ICdmYXMgZmEtYXJyb3ctdXAnLFxuICAkZmlsdGVyID0gJ2ZhcyBmYS1hbGlnbi1qdXN0aWZ5JyxcbiAgJG1hcmtlciA9ICdmYXMgZmEtbWFwLW1hcmtlci1hbHQnLFxuICAkc2VhcmNoID0gJ2ZhcyBmYS1zZWFyY2gnLFxuICAkY2xvc2UgPSAnZmFzIGZhLXRpbWVzJyxcbiAgJHBhcGVyY2xpcCA9ICdmYXMgZmEtcGFwZXJjbGlwJ1xufVxuXG5leHBvcnQgZW51bSBNYXRlcmlhbEljb25zIHtcbiAgJGFkZCA9ICdhZGQnLFxuICAkZGVsZXRlID0gJ2RlbGV0ZV9mb3JldmVyJyxcbiAgJHNsaWRlcnMgPSAnZmFzIGZhLXNsaWRlcnMtaCcsXG4gICRlZGl0ID0gJ2ZhcyBmYS1wZW4nLFxuICAkbWVudSA9ICdmYXMgZmEtYmFycycsXG4gICRleHBhbmQgPSAnZXhwYW5kX21vcmUnLFxuICAkZ3JvdXAgPSAnZXhwYW5kX21vcmUnLFxuICAkc3ViZ3JvdXAgPSAnYXJyb3dfZHJvcF9kb3duJyxcbiAgJGRyb3Bkb3duID0gJ2ZhcyBmYS1jYXJldC1kb3duJyxcbiAgJHJhZGlvT24gPSAnZmFyIGZhLWRvdC1jaXJjbGUnLFxuICAkcmFkaW9PZmYgPSAnZmFyIGZhLWNpcmNsZScsXG4gICRjaGVja09uID0gJ2NoZWNrX2JveCcsXG4gICRjaGVja09mZiA9ICdjaGVja19ib3hfb3V0bGluZV9ibGFuaycsXG4gICRhcnJvd1JpZ2h0ID0gJ2NoZXZyb25fcmlnaHQnLFxuICAkYXJyb3dMZWZ0ID0gJ2NoZXZyb25fbGVmdCcsXG4gICRhcnJvd1VwID0gJ2Fycm93X3Vwd2FyZCcsXG4gICRmaWx0ZXIgPSAnZmlsdGVyX2xpc3QnLFxuICAkbWFya2VyID0gJ2ZhcyBmYS1tYXAtbWFya2VyLWFsdCcsXG4gICRzZWFyY2ggPSAnc2VhcmNoJyxcbiAgJGNsb3NlID0gJ2NsZWFyJyxcbn1cblxuZXhwb3J0IGVudW0gTWF0ZXJpYWxTaXplcyB7XG4gICd4cycgPSAxNCxcbiAgJ3MnID0gMTgsXG4gICdtZCcgPSAyMCxcbiAgJ2wnID0gMjgsXG4gICd4bCcgPSAzNlxufVxuXG5leHBvcnQgZW51bSBGYVNpemVzIHtcbiAgJ3hzJyA9IDEyLFxuICAncycgPSAxNCxcbiAgJ21kJyA9IDE4LFxuICAnbCcgPSAyNCxcbiAgJ3hsJyA9IDMyXG59XG4iLCJpbXBvcnQgeyBpbmplY3QgfSBmcm9tICd2dWUnXG5pbXBvcnQge1xuICBGYUljb25zLFxuICBNYXRlcmlhbEljb25zLFxufSBmcm9tICcuLi9zZXJ2aWNlcy9pY29ucydcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUljb25zKCkge1xuICBjb25zdCBvcHRpb25zOiBhbnkgPSBpbmplY3QoJyRvcHRpb25zJylcblxuICBsZXQgaWNvbnM6IGFueSA9IEZhSWNvbnNcblxuICBpZiAob3B0aW9ucz8uaWNvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5pY29ucy5pbmNsdWRlcygnbWF0ZXJpYWwtaWNvbnMnKSkge1xuICAgICAgaWNvbnMgPSBNYXRlcmlhbEljb25zXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHsgaWNvbnMgfVxufVxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcblxuaW1wb3J0IHsgVkljb24gfSBmcm9tICcuLi9WSWNvbidcblxuaW1wb3J0IHsgdXNlQ29sb3JzLCBjb2xvclByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtY29sb3JzJ1xuaW1wb3J0IHsgdXNlSWNvbnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1pY29ucydcblxuZXhwb3J0IGNvbnN0IFZDaGlwID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtY2hpcCcsXG4gIHByb3BzOiB7XG4gICAgdGl0bGU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnLFxuICAgIH0sXG4gICAgdGV4dENvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnI2ZmZmZmZicsXG4gICAgfSxcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICBjbG9zYWJsZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIC4uLmNvbG9yUHJvcHMoJ3ByaW1hcnknKSxcbiAgfSxcbiAgZW1pdHM6IFsnY2xvc2UnXSxcbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMsIGVtaXQgfSkge1xuICAgIGNvbnN0IHtcbiAgICAgIHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcixcbiAgICAgIHNldEJhY2tncm91bmRDc3NDb2xvcixcbiAgICAgIHNldFRleHRDc3NDb2xvcixcbiAgICAgIHNldFRleHRDbGFzc05hbWVDb2xvcixcbiAgICB9ID0gdXNlQ29sb3JzKClcbiAgICBjb25zdCB7IGljb25zIH0gPSB1c2VJY29ucygpXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1jaGlwJzogdHJ1ZSxcbiAgICAgICd2LWNoaXAtLWRpc2FibGVkJzogcHJvcHMuZGlzYWJsZWQsXG4gICAgICAuLi4oIXByb3BzLmRpc2FibGVkID8gc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICAgIC4uLnNldFRleHRDbGFzc05hbWVDb2xvcihwcm9wcy50ZXh0Q29sb3IpLFxuICAgIH0pKVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgc3RyaW5nPj4oKCkgPT4gKHtcbiAgICAgIC4uLighcHJvcHMuZGlzYWJsZWQgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgICAgLi4uc2V0VGV4dENzc0NvbG9yKHByb3BzLnRleHRDb2xvciksXG4gICAgfSkpXG5cbiAgICBjb25zdCBnZW5DbG9zZUljb24gPSAoKSA9PiB7XG4gICAgICByZXR1cm4gaChWSWNvbiwge1xuICAgICAgICBpY29uOiBpY29ucy4kY2xvc2UsXG4gICAgICAgIGNsaWNrYWJsZTogIXByb3BzLmRpc2FibGVkLFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiBlbWl0KCdjbG9zZScpLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5DaGlwQ29udGVudCA9ICgpID0+IHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzOiAndi1jaGlwX19jb250ZW50JyxcbiAgICAgIH0sIHNsb3RzLmRlZmF1bHQ/LigpIHx8IHByb3BzLnRpdGxlKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiBoKCdzcGFuJywge1xuICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICBzdHlsZTogc3R5bGVzLnZhbHVlLFxuICAgIH0sIFtcbiAgICAgIGdlbkNoaXBDb250ZW50KCksXG4gICAgICBwcm9wcy5jbG9zYWJsZSA/IGdlbkNsb3NlSWNvbigpIDogbnVsbCxcbiAgICBdKVxuICB9LFxufSlcbiIsIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGgsIGRlZmluZUNvbXBvbmVudCwgcmVmLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZJbnB1dCB9IGZyb20gJy4uL1ZJbnB1dCdcbmltcG9ydCB7IFZDaGlwIH0gZnJvbSAnLi4vVkNoaXAnXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlSWNvbnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1pY29ucydcbmltcG9ydCB7IHVzZUlucHV0U3RhdGVzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtaW5wdXQtc3RhdGVzJ1xuLy8gSGVscGVyc1xuaW1wb3J0IHsgbWFwVG9WYWxBcnJheSB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG4vLyBUeXBlc1xuaW1wb3J0IHsgTWF5YmUgfSBmcm9tICcuLi8uLi8uLi90eXBlcy9iYXNlJ1xuXG5leHBvcnQgY29uc3QgVkZpbGVJbnB1dCA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWZpbGUtaW5wdXQnLFxuICBwcm9wczoge1xuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIG11bHRpcGxlOiBCb29sZWFuLFxuICAgIGNoaXBDb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3ByaW1hcnknLFxuICAgIH0sXG4gICAgbW9kZWxWYWx1ZToge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gIH0sXG4gIGVtaXRzOiBbJ3VwZGF0ZTptb2RlbFZhbHVlJ10sXG4gIHNldHVwKHByb3BzLCB7IGVtaXQsIGF0dHJzIH0pIHtcbiAgICBjb25zdCB7IGljb25zIH0gPSB1c2VJY29ucygpXG4gICAgY29uc3QgeyBpc0Rpc2FibGVkLCBpc1JlYWRvbmx5IH0gPSB1c2VJbnB1dFN0YXRlcyhwcm9wcywgeyBlbWl0LCBhdHRycyB9KVxuXG4gICAgY29uc3QgaW5wdXRSZWYgPSByZWY8TWF5YmU8SFRNTElucHV0RWxlbWVudD4+KG51bGwpXG4gICAgY29uc3QgZmlsZXMgPSByZWY8TWFwPHN0cmluZywgRmlsZT4+KG5ldyBNYXAoKSlcbiAgICBjb25zdCBzcmNSZWYgPSByZWY8TWF5YmU8SFRNTEVsZW1lbnQ+PihudWxsKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICAndi1maWxlLWlucHV0JzogdHJ1ZSxcbiAgICAgICd2LWZpbGUtaW5wdXQtLWRpc2FibGVkJzogaXNEaXNhYmxlZC52YWx1ZSxcbiAgICAgICd2LWZpbGUtaW5wdXQtLXJlYWRvbmx5JzogaXNSZWFkb25seS52YWx1ZSxcbiAgICAgICd2LWZpbGUtaW5wdXQtLW11bHRpcGxlJzogcHJvcHMubXVsdGlwbGUsXG4gICAgfSkpXG5cbiAgICBjb25zdCBvbkNoYW5nZSA9IChldmVudCkgPT4ge1xuICAgICAgY29uc3QgaW5wdXRGaWxlcyA9IEFycmF5LmZyb20oZXZlbnQudGFyZ2V0LmZpbGVzKSBhcyBGaWxlW11cblxuICAgICAgaWYgKCFwcm9wcy5tdWx0aXBsZSkgZmlsZXMudmFsdWUuY2xlYXIoKVxuXG4gICAgICBpbnB1dEZpbGVzLmZvckVhY2goZiA9PiBmaWxlcy52YWx1ZS5zZXQoZi5uYW1lLCBmKSlcblxuICAgICAgZXZlbnQudGFyZ2V0LnZhbHVlID0gJydcbiAgICAgIGVtaXQoJ3VwZGF0ZTptb2RlbFZhbHVlJywgbWFwVG9WYWxBcnJheShmaWxlcy52YWx1ZSkpXG4gICAgfVxuXG4gICAgY29uc3Qgb25DbG9zZSA9IChmaWxlKSA9PiB7XG4gICAgICBmaWxlcy52YWx1ZS5kZWxldGUoZmlsZS5uYW1lKVxuICAgICAgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCBtYXBUb1ZhbEFycmF5KGZpbGVzLnZhbHVlKSlcbiAgICB9XG5cbiAgICBjb25zdCBvbkNsaWNrID0gKHsgc3JjRWxlbWVudCB9KSA9PiB7XG4gICAgICBpZiAoc3JjRWxlbWVudCAhPT0gc3JjUmVmLnZhbHVlKSByZXR1cm5cbiAgICAgIGlucHV0UmVmLnZhbHVlIS5jbGljaygpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuRmlsZUlucHV0ID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2lucHV0Jywge1xuICAgICAgICBjbGFzczogJ3YtZmlsZS1pbnB1dF9fZmllbGQnLFxuICAgICAgICB0eXBlOiAnZmlsZScsXG4gICAgICAgIG11bHRpcGxlOiBwcm9wcy5tdWx0aXBsZSxcbiAgICAgICAgcmVmOiBpbnB1dFJlZixcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgICAgICAgfSxcbiAgICAgICAgb25DaGFuZ2UsXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkNoaXBzID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIG1hcFRvVmFsQXJyYXkoZmlsZXMudmFsdWUpXG4gICAgICAgIC5tYXAoZmlsZSA9PiBoKFZDaGlwLCB7XG4gICAgICAgICAgICB0aXRsZTogZmlsZS5uYW1lLFxuICAgICAgICAgICAgY2xhc3M6ICdtYS0xJyxcbiAgICAgICAgICAgIGNvbG9yOiBwcm9wcy5jaGlwQ29sb3IsXG4gICAgICAgICAgICBvbkNsb3NlOiAoKSA9PiBvbkNsb3NlKGZpbGUpLFxuICAgICAgICAgIH0pLFxuICAgICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQ2hpcHNDb250YWluZXIgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogJ3YtZmlsZS1pbnB1dF9fY29udGFpbmVyJyxcbiAgICAgICAgcmVmOiBzcmNSZWYsXG4gICAgICB9LCBnZW5DaGlwcygpKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkNvbXBvbmVudCA9ICgpID0+IGgoJ2RpdicsIHtcbiAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgb25DbGljayxcbiAgICB9LCBbXG4gICAgICBnZW5GaWxlSW5wdXQoKSxcbiAgICAgIGdlbkNoaXBzQ29udGFpbmVyKCksXG4gICAgXSlcblxuICAgIHJldHVybiAoKSA9PiBoKFZJbnB1dCwge1xuICAgICAgcHJlcGVuZEljb246IGljb25zLiRwYXBlcmNsaXAsXG4gICAgICBmaWxlOiB0cnVlLFxuICAgICAgZGlzYWJsZWQ6IGlzRGlzYWJsZWQudmFsdWUsXG4gICAgfSwge1xuICAgICAgJ3RleHQtZmllbGQnOiAoKSA9PiBnZW5Db21wb25lbnQoKSxcbiAgICB9KVxuICB9LFxufSlcbiIsImV4cG9ydCB7IFZGaWxlSW5wdXQgfSBmcm9tICcuL1ZGaWxlSW5wdXQnXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGgsIHByb3ZpZGUsIHdhdGNoLCBjb21wdXRlZCwgb25Nb3VudGVkIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgdXNlQ29sb3JzLCBjb2xvclByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtY29sb3JzJ1xuaW1wb3J0IHsgbWFwVG9WYWxBcnJheSB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5cbmV4cG9ydCBjb25zdCBWTGlzdCA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWxpc3QnLFxuICBwcm9wczoge1xuICAgIHZhbHVlOiB7XG4gICAgICB0eXBlOiBbIE51bWJlciwgQXJyYXkgXSxcbiAgICAgIGRlZmF1bHQ6IG51bGxcbiAgICB9LFxuICAgIG11bHRpcGxlOiBCb29sZWFuLFxuICAgIGFjdGl2ZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfSxcbiAgICBhY3RpdmVDbGFzczoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3ByaW1hcnkgd2hpdGUtLXRleHQgdGV4dC0tYmFzZSdcbiAgICB9LFxuICAgIHRleHRDb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJydcbiAgICB9LFxuICAgIC4uLmNvbG9yUHJvcHMoKVxuICB9LFxuICBlbWl0czogWyAndXBkYXRlOnZhbHVlJyBdLFxuICBzZXR1cChwcm9wcywgeyBlbWl0LCBzbG90cyB9KSB7XG4gICAgY29uc3Qge1xuICAgICAgc2V0VGV4dENsYXNzTmFtZUNvbG9yLFxuICAgICAgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yLFxuICAgICAgc2V0VGV4dENzc0NvbG9yLFxuICAgICAgc2V0QmFja2dyb3VuZENzc0NvbG9yXG4gICAgfSA9IHVzZUNvbG9ycygpXG5cbiAgICBjb25zdCBpdGVtcyA9IG5ldyBNYXAoKVxuICAgIGxldCBpc1RydXN0ZWRTZWxlY3QgPSBmYWxzZVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtbGlzdCc6IHRydWUsXG4gICAgICAndi1saXN0LS1hY3RpdmUnOiBwcm9wcy5hY3RpdmUsXG4gICAgICAuLi5zZXRUZXh0Q2xhc3NOYW1lQ29sb3IocHJvcHMudGV4dENvbG9yKSxcbiAgICAgIC4uLnNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcilcbiAgICB9KSlcblxuICAgIGNvbnN0IHN0eWxlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIHN0cmluZz4+KCgpID0+ICh7XG4gICAgICAuLi5zZXRUZXh0Q3NzQ29sb3IocHJvcHMudGV4dENvbG9yKSxcbiAgICAgIC4uLnNldEJhY2tncm91bmRDc3NDb2xvcihwcm9wcy5jb2xvcilcbiAgICB9KSlcblxuICAgIGNvbnN0IHJlZ2lzdGVyID0gKGl0ZW0pID0+IHtcbiAgICAgICFpdGVtcy5oYXMoaXRlbSkgJiYgaXRlbXMuc2V0KGl0ZW0sIGl0ZW0pXG4gICAgfVxuXG4gICAgY29uc3QgdW5yZWdpc3RlciA9IChpdGVtKSA9PiB7XG4gICAgICBpdGVtcy5oYXMoaXRlbSkgJiYgaXRlbXMuZGVsZXRlKGl0ZW0pXG4gICAgfVxuXG4gICAgY29uc3QgZGlzcGF0Y2hFdmVudCA9ICh2YWwpID0+IHtcbiAgICAgIGlzVHJ1c3RlZFNlbGVjdCA9IHRydWVcbiAgICAgIGVtaXQoJ3VwZGF0ZTp2YWx1ZScsIHZhbClcbiAgICB9XG5cbiAgICBjb25zdCBzZXRBY3RpdmVJdGVtID0gKGl0ZW0pID0+IHtcbiAgICAgIG1hcFRvVmFsQXJyYXkoaXRlbXMpLmZvckVhY2goKGl0KSA9PiB7XG4gICAgICAgIGl0LmlzQWN0aXZlLnZhbHVlID0gaXQgPT09IGl0ZW1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgdG9nZ2xlSXRlbSA9IChpdGVtKSA9PiB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkocHJvcHMudmFsdWUpKSByZXR1cm5cblxuICAgICAgaXRlbS5pc0FjdGl2ZS52YWx1ZSA9ICFpdGVtLmlzQWN0aXZlLnZhbHVlXG4gICAgfVxuXG4gICAgY29uc3QgcHJlcGFyZUluZGV4ZXMgPSAoKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZXMgPSBtYXBUb1ZhbEFycmF5KGl0ZW1zKVxuICAgICAgY29uc3QgeyBtdWx0aXBsZSB9ID0gcHJvcHNcblxuICAgICAgbGV0IHZhbCA9IG11bHRpcGxlID8gW10gOiAwXG5cbiAgICAgIHZhbHVlcy5mb3JFYWNoKChpdCwgaSkgPT4ge1xuICAgICAgICBpZiAoaXQuaXNBY3RpdmUudmFsdWUpIHtcbiAgICAgICAgICBtdWx0aXBsZSAmJiAodmFsIGFzIG51bWJlcltdKS5wdXNoKGkpXG4gICAgICAgICAgIW11bHRpcGxlICYmICh2YWwgPSBpKVxuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICByZXR1cm4gdmFsXG4gICAgfVxuXG4gICAgY29uc3Qgb25DbGljayA9IChpdGVtKSA9PiB7XG4gICAgICBpZiAoIXByb3BzLmFjdGl2ZSkgcmV0dXJuXG5cbiAgICAgIHByb3BzLm11bHRpcGxlICYmIHRvZ2dsZUl0ZW0oaXRlbSlcbiAgICAgICFwcm9wcy5tdWx0aXBsZSAmJiBzZXRBY3RpdmVJdGVtKGl0ZW0pXG5cbiAgICAgIGRpc3BhdGNoRXZlbnQocHJlcGFyZUluZGV4ZXMoKSlcbiAgICB9XG5cbiAgICBjb25zdCBzZXRTZWxlY3RlZEl0ZW1zID0gKHZhbHVlKSA9PiB7XG4gICAgICBpZiAodmFsdWUgPT09IG51bGwpIHJldHVyblxuXG4gICAgICBjb25zdCB2YWx1ZXMgPSBtYXBUb1ZhbEFycmF5KGl0ZW1zKVxuXG4gICAgICBpZiAocHJvcHMubXVsdGlwbGUpIHtcbiAgICAgICAgOyh2YWx1ZSBhcyBudW1iZXJbXSkuZm9yRWFjaCgoaW5kKSA9PiB0b2dnbGVJdGVtKHZhbHVlc1tpbmRdKSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldEFjdGl2ZUl0ZW0odmFsdWVzW3ZhbHVlIGFzIG51bWJlcl0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgd2F0Y2goXG4gICAgICAoKSA9PiBwcm9wcy52YWx1ZSxcbiAgICAgICh0bykgPT4ge1xuICAgICAgICAhaXNUcnVzdGVkU2VsZWN0ICYmIHNldFNlbGVjdGVkSXRlbXModG8pXG4gICAgICAgIGlzVHJ1c3RlZFNlbGVjdCAmJiAoaXNUcnVzdGVkU2VsZWN0ID0gZmFsc2UpXG4gICAgICB9XG4gICAgKVxuXG4gICAgb25Nb3VudGVkKCgpID0+IHNldFNlbGVjdGVkSXRlbXMocHJvcHMudmFsdWUpKVxuXG4gICAgcHJvdmlkZSgnbGlzdCcsIHtcbiAgICAgIGFkZDogcmVnaXN0ZXIsXG4gICAgICByZW1vdmU6IHVucmVnaXN0ZXIsXG4gICAgICBjbGljazogb25DbGljayxcbiAgICAgIGFjdGl2ZUNsYXNzOiBwcm9wcy5hY3RpdmVDbGFzc1xuICAgIH0pXG5cbiAgICByZXR1cm4gKCkgPT4gaChcbiAgICAgICdkaXYnLFxuICAgICAgeyBjbGFzczogY2xhc3Nlcy52YWx1ZSwgc3R5bGU6IHN0eWxlcy52YWx1ZSB9LFxuICAgICAgeyBkZWZhdWx0OiAoKSA9PiBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKSB9XG4gICAgKVxuICB9XG59KVxuIiwiaW1wb3J0IHtcbiAgZGVmaW5lQ29tcG9uZW50LFxuICBoLFxuICBpbmplY3QsXG4gIHJlZixcbiAgY29tcHV0ZWQsXG4gIG9uQmVmb3JlVW5tb3VudCxcbiAgb25CZWZvcmVNb3VudCxcbn0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgTGlzdCB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL2NvbXBvbmVudHMnXG5pbXBvcnQgeyBNYXliZSB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL2Jhc2UnXG5cbmV4cG9ydCBjb25zdCBWTGlzdEl0ZW0gPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1saXN0LWl0ZW0nLFxuICBlbWl0czogWydjbGljayddLFxuXG4gIHNldHVwKF8sIHsgZW1pdCwgc2xvdHMgfSkge1xuICAgIGNvbnN0IGl0ZW1SZWYgPSByZWY8TWF5YmU8SFRNTEVsZW1lbnQ+PihudWxsKVxuICAgIGNvbnN0IGlzQWN0aXZlID0gcmVmPGJvb2xlYW4+KGZhbHNlKVxuICAgIGNvbnN0IGxpc3Q6IExpc3QgPSBpbmplY3QoJ2xpc3QnLCBudWxsIGFzIGFueSlcblxuICAgIGNvbnN0IGl0ZW0gPSB7IGl0ZW1SZWYsIGlzQWN0aXZlIH1cblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LWxpc3QtaXRlbSc6IHRydWUsXG4gICAgICAndi1saXN0LWl0ZW0tLXNlbGVjdGVkJzogIWxpc3QuYWN0aXZlQ2xhc3MgJiYgaXNBY3RpdmUudmFsdWUsXG4gICAgICBbbGlzdD8uYWN0aXZlQ2xhc3NdOiBpc0FjdGl2ZS52YWx1ZSxcbiAgICB9KSlcblxuICAgIGNvbnN0IG9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICBsaXN0Py5jbGljayhpdGVtKVxuICAgICAgZW1pdCgnY2xpY2snKVxuICAgIH1cblxuICAgIG9uQmVmb3JlTW91bnQoKCkgPT4ge1xuICAgICAgbGlzdD8uYWRkKGl0ZW0pXG4gICAgfSlcblxuICAgIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgICBsaXN0Py5yZW1vdmUoaXRlbSlcbiAgICB9KVxuXG4gICAgcmV0dXJuICgpID0+XG4gICAgICBoKFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgICAgIHJlZjogaXRlbVJlZixcbiAgICAgICAgICBvbkNsaWNrLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KHsgYWN0aXZlOiBpc0FjdGl2ZSB9KSxcbiAgICAgICAgfVxuICAgICAgKVxuICB9LFxufSlcbiIsImltcG9ydCB7IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuaW1wb3J0IHsgVkxpc3QgfSBmcm9tICcuL1ZMaXN0J1xuaW1wb3J0IHsgVkxpc3RJdGVtIH0gZnJvbSAnLi9WTGlzdEl0ZW0nXG5cbmNvbnN0IFZMaXN0SXRlbVRpdGxlID0gY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCgndi1saXN0LWl0ZW1fX3RpdGxlJylcbmNvbnN0IFZMaXN0SXRlbVN1YnRpdGxlID0gY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCgndi1saXN0LWl0ZW1fX3N1YnRpdGxlJylcbmNvbnN0IFZMaXN0SXRlbUNvbnRlbnQgPSBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsKCd2LWxpc3QtaXRlbV9fY29udGVudCcpXG5jb25zdCBWTGlzdEl0ZW1JY29uID0gY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCgndi1saXN0LWl0ZW1fX2ljb24nKVxuXG5leHBvcnQge1xuICBWTGlzdCxcbiAgVkxpc3RJdGVtLFxuICBWTGlzdEl0ZW1UaXRsZSxcbiAgVkxpc3RJdGVtQ29udGVudCxcbiAgVkxpc3RJdGVtU3VidGl0bGUsXG4gIFZMaXN0SXRlbUljb24sXG59XG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGgsIGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkxpc3QsIFZMaXN0SXRlbSwgVkxpc3RJdGVtVGl0bGUgfSBmcm9tICcuLi9WTGlzdCdcbi8vIEhlbHBlcnNcbmltcG9ydCB7IGdldFN0cmluZ0tleXNWYWx1ZSB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG4vLyBUeXBlc1xuaW1wb3J0IHsgTWF5YmUgfSBmcm9tICcuLi8uLi8uLi90eXBlcy9iYXNlJ1xuXG5leHBvcnQgY29uc3QgVlNlbGVjdExpc3QgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1zZWxlY3QtbGlzdCcsXG4gIHByb3BzOiB7XG4gICAgaXRlbXM6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgZGVmYXVsdDogbnVsbFxuICAgIH0sXG4gICAgY29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcjZmZmZmZmJ1xuICAgIH0sXG4gICAgdGV4dENvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJ1xuICAgIH0sXG4gICAgdmFsdWVLZXk6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfSxcbiAgICBzZWxlY3RlZDoge1xuICAgICAgdHlwZTogWyBTdHJpbmcsIE51bWJlciwgT2JqZWN0IF0sXG4gICAgICBkZWZhdWx0OiBudWxsXG4gICAgfSxcbiAgICBhY3RpdmVDbGFzczoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJydcbiAgICB9XG4gIH0sXG4gIGVtaXRzOiBbICdzZWxlY3QnIF0sXG4gIHNldHVwKHByb3BzLCB7IGVtaXQgfSkge1xuICAgIGNvbnN0IGNvbXB1dGVkU2VsZWN0ID0gY29tcHV0ZWQ8TWF5YmU8bnVtYmVyPj4oe1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gcHJvcHMuc2VsZWN0ZWRcbiAgICAgICAgICA/IHByb3BzLml0ZW1zLmZpbmRJbmRleCgoaXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1WYWx1ZSA9IGdldFN0cmluZ0tleXNWYWx1ZShwcm9wcy52YWx1ZUtleSwgaXQpXG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZFZhbHVlID0gZ2V0U3RyaW5nS2V5c1ZhbHVlKFxuICAgICAgICAgICAgICBwcm9wcy52YWx1ZUtleSxcbiAgICAgICAgICAgICAgcHJvcHMuc2VsZWN0ZWRcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIHJldHVybiBpdGVtVmFsdWUgPT09IHNlbGVjdGVkVmFsdWVcbiAgICAgICAgICB9KVxuICAgICAgICAgIDogbnVsbFxuICAgICAgfSxcbiAgICAgIHNldCh2YWw6IG51bWJlcikge1xuICAgICAgICBlbWl0KCdzZWxlY3QnLCBwcm9wcy5pdGVtc1t2YWxdKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBjb25zdCBnZW5JdGVtcyA9ICgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5pdGVtcy5yZWR1Y2UoKGFjYywgaXQsIGkpID0+IHtcbiAgICAgICAgY29uc3QgY29udGVudCA9IHByb3BzLnZhbHVlS2V5ID9cbiAgICAgICAgICBnZXRTdHJpbmdLZXlzVmFsdWUocHJvcHMudmFsdWVLZXksIGl0KSA6IGl0IGFzIGFueVxuXG4gICAgICAgIChhY2MgYXMgYW55W10pLnB1c2goXG4gICAgICAgICAgaChWTGlzdEl0ZW0sIHsga2V5OiBpIH0sIHtcbiAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IGgoVkxpc3RJdGVtVGl0bGUsIHt9LCB7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IGNvbnRlbnRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSkpXG5cbiAgICAgICAgcmV0dXJuIGFjY1xuICAgICAgfSwgW10pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuSXRlbXNMaXN0ID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGgoVkxpc3QsIHtcbiAgICAgICAgYWN0aXZlOiB0cnVlLFxuICAgICAgICBjb2xvcjogJyNmZmZmZmYnLFxuICAgICAgICBhY3RpdmVDbGFzczogcHJvcHMuYWN0aXZlQ2xhc3MsXG4gICAgICAgIFsnb25VcGRhdGU6dmFsdWUnXTogdmFsID0+IGNvbXB1dGVkU2VsZWN0LnZhbHVlID0gdmFsXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IGdlbkl0ZW1zKClcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IGgoJ2RpdicsIHtcbiAgICAgIGNsYXNzOiAndi1zZWxlY3QtbGlzdCdcbiAgICB9LCBbIHByb3BzLml0ZW1zID8gZ2VuSXRlbXNMaXN0KCkgOiBudWxsIF0pXG4gIH1cbn0pXG5cbiIsImltcG9ydCB7IGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQsIGgsIHJlZiwgVk5vZGUgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyB1c2VJbnB1dFN0YXRlcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWlucHV0LXN0YXRlcydcbmltcG9ydCB7IGdldFN0cmluZ0tleXNWYWx1ZSB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZJbnB1dCB9IGZyb20gJy4uL1ZJbnB1dCdcbmltcG9ydCB7IFZNZW51IH0gZnJvbSAnLi4vVk1lbnUnXG5pbXBvcnQgeyBWSWNvbiB9IGZyb20gJy4uL1ZJY29uJ1xuXG5pbXBvcnQgeyBWU2VsZWN0TGlzdCB9IGZyb20gJy4vVlNlbGVjdExpc3QnXG5cbi8vIFNlcnZpY2VzXG5pbXBvcnQgeyBGYUljb25zIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvaWNvbnMnXG5cbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvYmFzZSdcblxuZXhwb3J0IGNvbnN0IFZTZWxlY3QgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1zZWxlY3QnLFxuICBwcm9wczoge1xuICAgIG1vZGVsVmFsdWU6IHtcbiAgICAgIHR5cGU6IFsgU3RyaW5nLCBOdW1iZXIsIE9iamVjdCBdLFxuICAgICAgZGVmYXVsdDogbnVsbFxuICAgIH0sXG4gICAgaXRlbXM6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgZGVmYXVsdDogbnVsbFxuICAgIH0sXG4gICAgdmFsdWVLZXk6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfSxcbiAgICBhY3RpdmVDbGFzczoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3ByaW1hcnkgd2hpdGUtLXRleHQgdGV4dC0tYmFzZSdcbiAgICB9LFxuICB9LFxuICBlbWl0czogWyAnY2xpY2snLCAnZm9jdXMnLCAnc2VsZWN0JywgJ2JsdXInLCAnY2hhbmdlJywgJ3VwZGF0ZTptb2RlbFZhbHVlJyBdLFxuICBzZXR1cChwcm9wcywgeyBhdHRycywgZW1pdCB9KSB7XG4gICAgY29uc3QgeyBpc0Rpc2FibGVkLCBpc1JlYWRvbmx5LCBzdGF0ZSwgb25CbHVyLCBvblNlbGVjdCwgb25Gb2N1cyB9ID1cbiAgICAgIHVzZUlucHV0U3RhdGVzKHByb3BzLCB7IGF0dHJzLCBlbWl0IH0pXG5cbiAgICBjb25zdCBhY3RpdmF0b3IgPSByZWY8TWF5YmU8SFRNTEVsZW1lbnQ+PihudWxsKVxuXG4gICAgY29uc3QgY29tcHV0ZWRWYWx1ZSA9IGNvbXB1dGVkPHN0cmluZyB8IG51bWJlcj4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLm1vZGVsVmFsdWVcbiAgICAgICAgPyBwcm9wcy52YWx1ZUtleVxuICAgICAgICAgID8gZ2V0U3RyaW5nS2V5c1ZhbHVlKHByb3BzLnZhbHVlS2V5LCBwcm9wcy5tb2RlbFZhbHVlKVxuICAgICAgICAgIDogcHJvcHMubW9kZWxWYWx1ZVxuICAgICAgICA6ICcnXG4gICAgfSlcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LXNlbGVjdCc6IHRydWUsXG4gICAgICAndi1zZWxlY3QtLWV4cGFuZGVkJzogc3RhdGUuZm9jdXNlZCxcbiAgICAgICd2LXNlbGVjdC0tcmVhZG9ubHknOiBpc1JlYWRvbmx5LnZhbHVlLFxuICAgICAgJ3Ytc2VsZWN0LS1kaXNhYmxlZCc6IGlzRGlzYWJsZWQudmFsdWVcbiAgICB9KSlcblxuICAgIGNvbnN0IGdlbklucHV0ID0gKHsgdGV4dENzc0NvbG9yLCB0ZXh0Q2xhc3NDb2xvciwgZGlzYWJsZWQgfSkgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2lucHV0Jywge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LXNlbGVjdF9faW5wdXQnOiB0cnVlLFxuICAgICAgICAgIC4uLihkaXNhYmxlZCA/IHRleHRDbGFzc0NvbG9yIDoge30pXG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgLi4uKCFkaXNhYmxlZCA/IHRleHRDc3NDb2xvciA6IHt9KVxuICAgICAgICB9LFxuICAgICAgICBkaXNhYmxlZDogaXNEaXNhYmxlZC52YWx1ZSxcbiAgICAgICAgdHlwZTogYXR0cnMudHlwZSB8fCAndGV4dCcsXG4gICAgICAgIHBsYWNlaG9sZGVyOiBhdHRycy5wbGFjZWhvbGRlcixcbiAgICAgICAgdmFsdWU6IGNvbXB1dGVkVmFsdWUudmFsdWUsXG4gICAgICAgIHJlYWRvbmx5OiB0cnVlXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlblNlbGVjdExpc3QgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoVk1lbnUsIHtcbiAgICAgICAgaW50ZXJuYWxBY3RpdmF0b3I6IHRydWUsXG4gICAgICAgIGFjdGl2YXRvcjogYWN0aXZhdG9yLnZhbHVlISxcbiAgICAgICAgaW5wdXRBY3RpdmF0b3I6ICcudi1pbnB1dF9fdGV4dC1maWVsZCcsXG4gICAgICAgIG9wZW5PbkNsaWNrOiAhaXNEaXNhYmxlZC52YWx1ZSAmJiAhaXNSZWFkb25seS52YWx1ZSxcbiAgICAgICAgbWF4SGVpZ2h0OiAyNDAsXG4gICAgICAgIHpJbmRleDogMTIsXG4gICAgICAgIG9uU2hvdzogb25Gb2N1cyxcbiAgICAgICAgb25IaWRlOiBvbkJsdXJcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gaChWU2VsZWN0TGlzdCwge1xuICAgICAgICAgIGl0ZW1zOiBwcm9wcy5pdGVtcyxcbiAgICAgICAgICBzZWxlY3RlZDogcHJvcHMubW9kZWxWYWx1ZSxcbiAgICAgICAgICB2YWx1ZUtleTogcHJvcHMudmFsdWVLZXksXG4gICAgICAgICAgYWN0aXZlQ2xhc3M6IHByb3BzLmFjdGl2ZUNsYXNzLFxuICAgICAgICAgIG9uU2VsZWN0XG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkV4cGFuZEljb24gPSAoKTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoVkljb24sIHtcbiAgICAgICAgaWNvbjogRmFJY29ucy4kY2hldnJvbkRvd24sXG4gICAgICAgIGNvbG9yOiAhaXNEaXNhYmxlZC52YWx1ZSA/IGF0dHJzLmNvbG9yIDogJycsXG4gICAgICAgIHNpemU6IDE2XG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlblNlbGVjdCA9ICh7IHRleHRDc3NDb2xvciwgdGV4dENsYXNzQ29sb3IsIGRpc2FibGVkIH0pID0+IHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlXG4gICAgICB9LCBnZW5JbnB1dCh7IHRleHRDc3NDb2xvciwgdGV4dENsYXNzQ29sb3IsIGRpc2FibGVkIH0pKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiBoKFZJbnB1dCwge1xuICAgICAgcmVmOiBhY3RpdmF0b3IsXG4gICAgICB2YWx1ZTogY29tcHV0ZWRWYWx1ZS52YWx1ZSxcbiAgICAgIGZvY3VzZWQ6IHN0YXRlLmZvY3VzZWRcbiAgICB9LCB7XG4gICAgICBbJ3RleHQtZmllbGQnXTogKHsgdGV4dENzc0NvbG9yLCB0ZXh0Q2xhc3NDb2xvciwgZGlzYWJsZWQgfSkgPT4ge1xuICAgICAgICByZXR1cm4gZ2VuU2VsZWN0KHsgdGV4dENzc0NvbG9yLCB0ZXh0Q2xhc3NDb2xvciwgZGlzYWJsZWQgfSlcbiAgICAgIH0sXG4gICAgICBbJ2FwcGVuZC1pY29uJ106ICgpID0+IGdlbkV4cGFuZEljb24oKSxcbiAgICAgIHNlbGVjdDogKCkgPT4gYWN0aXZhdG9yLnZhbHVlID8gZ2VuU2VsZWN0TGlzdCgpIDogbnVsbFxuICAgIH0pXG4gIH1cbn0pXG4iLCJleHBvcnQgeyBWU2VsZWN0IH0gZnJvbSAnLi9WU2VsZWN0J1xuZXhwb3J0IHsgVlNlbGVjdExpc3QgfSBmcm9tICcuL1ZTZWxlY3RMaXN0J1xuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBwcm92aWRlLCBoIH0gZnJvbSAndnVlJ1xuXG5leHBvcnQgY29uc3QgVkZvcm0gPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1mb3JtJyxcbiAgc2V0dXAoXywgeyBzbG90cyB9KSB7XG4gICAgbGV0IGZpZWxkczogQXJyYXk8KC4uLmFyZ3M6IGFueSkgPT4gUHJvbWlzZTxib29sZWFuPj4gPSBbXVxuXG4gICAgY29uc3QgYWRkRmllbGRWYWxpZGF0b3IgPSAoaXRlbSkgPT4ge1xuICAgICAgZmllbGRzLnB1c2goaXRlbSlcbiAgICB9XG5cbiAgICBjb25zdCByZW1vdmVGaWVsZFZhbGlkYXRvciA9IChpdGVtKSA9PiB7XG4gICAgICBmaWVsZHMgPSBmaWVsZHMuZmlsdGVyKCh2KSA9PiB2ICE9PSBpdGVtKVxuICAgIH1cblxuICAgIHByb3ZpZGUoJ2Zvcm0nLCB7XG4gICAgICBhZGQ6IGFkZEZpZWxkVmFsaWRhdG9yLFxuICAgICAgcmVtb3ZlOiByZW1vdmVGaWVsZFZhbGlkYXRvcixcbiAgICB9KVxuXG4gICAgY29uc3QgdmFsaWRhdGUgPSAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9taXNlczogQXJyYXk8UHJvbWlzZTxib29sZWFuPj4gPSBbXVxuXG4gICAgICBmaWVsZHMuZm9yRWFjaCgodjogKC4uLmFyZ3M6IGFueSkgPT4gUHJvbWlzZTxib29sZWFuPikgPT4ge1xuICAgICAgICBwcm9taXNlcy5wdXNoKHYoKSlcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiAhcHJvbWlzZXMuc29tZSgoZikgPT4gIWYpID8gUHJvbWlzZS5yZXNvbHZlKCkgOiBQcm9taXNlLnJlamVjdCgpXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+XG4gICAgICBoKCdmb3JtJywge1xuICAgICAgICAgIGNsYXNzOiAndi1mb3JtJyxcbiAgICAgICAgICBvblN1Ym1pdDogKGUpID0+IGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KHsgdmFsaWRhdGUgfSksXG4gICAgICAgIH1cbiAgICAgIClcbiAgfSxcbn0pXG4iLCJleHBvcnQgKiBmcm9tICcuL1ZGb3JtJ1xuIiwiZXhwb3J0ICogZnJvbSBcIi4vVkxhYmVsXCJcbiIsIi8vIFZ1ZSBBUElcbmltcG9ydCB7IHZTaG93LCBoLCBjb21wdXRlZCwgd2l0aERpcmVjdGl2ZXMsIGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSdcblxuLy8gRWZmZWN0c1xuaW1wb3J0IHsgcG9zaXRpb25Qcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXBvc2l0aW9uJ1xuaW1wb3J0IHsgdXNlQ29sb3JzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtY29sb3JzJ1xuaW1wb3J0IHsgdXNlVG9nZ2xlIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtdG9nZ2xlJ1xuaW1wb3J0IHsgdXNlRWxldmF0aW9uLCBlbGV2YXRpb25Qcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWVsZXZhdGlvbidcbmltcG9ydCB7IHVzZVRyYW5zaXRpb24gfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS10cmFuc2l0aW9uJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tICd2dWUnXG5cbmV4cG9ydCBjb25zdCBWQmFkZ2UgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1iYWRnZScsXG5cbiAgcHJvcHM6IHtcbiAgICBkb3Q6IEJvb2xlYW4sXG4gICAgYXZhdGFyOiBCb29sZWFuLFxuICAgIGJvcmRlcjogQm9vbGVhbixcbiAgICB0b2dnbGU6IEJvb2xlYW4sXG4gICAgY29udGVudDoge1xuICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgIH0sXG4gICAgY29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdwcmltYXJ5JyxcbiAgICB9LFxuICAgIHRyYW5zaXRpb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdzY2FsZUluJyxcbiAgICB9LFxuICAgIG9mZnNldFk6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiAwXG4gICAgfSxcbiAgICBvZmZzZXRYOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogMFxuICAgIH0sXG4gICAgLi4ucG9zaXRpb25Qcm9wcygpLFxuICAgIC4uLmVsZXZhdGlvblByb3BzKCksXG4gIH0gYXMgYW55LFxuXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3QgeyBlbGV2YXRpb25DbGFzc2VzIH0gPSB1c2VFbGV2YXRpb24ocHJvcHMpXG4gICAgY29uc3QgeyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IsIHNldEJhY2tncm91bmRDc3NDb2xvciB9ID0gdXNlQ29sb3JzKClcblxuICAgIGNvbnN0IG9mZnNldCA9IGNvbXB1dGVkPG51bWJlcj4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLmRvdCA/IDQgOiAxMlxuICAgIH0pXG5cbiAgICBjb25zdCBjYWxjUG9zaXRpb24gPSAob2Zmc2V0VmFsOiBzdHJpbmcgfCBudW1iZXIgPSAwKTogc3RyaW5nID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gb2Zmc2V0LnZhbHVlIC0gTnVtYmVyKG9mZnNldFZhbClcbiAgICAgIHJldHVybiBgJHt2YWx1ZX1weGBcbiAgICB9XG5cbiAgICBjb25zdCBjb21wdXRlZExlZnQgPSBjb21wdXRlZDxzdHJpbmcgfCBib29sZWFuPigoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMubGVmdCAmJiBjYWxjUG9zaXRpb24ocHJvcHMub2Zmc2V0WClcbiAgICB9KVxuXG4gICAgY29uc3QgY29tcHV0ZWRSaWdodCA9IGNvbXB1dGVkPHN0cmluZyB8IGJvb2xlYW4+KCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5yaWdodCAmJiBjYWxjUG9zaXRpb24ocHJvcHMub2Zmc2V0WClcbiAgICB9KVxuXG4gICAgY29uc3QgY29tcHV0ZWRUb3AgPSBjb21wdXRlZDxzdHJpbmcgfCBib29sZWFuPigoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMudG9wICYmIGNhbGNQb3NpdGlvbihwcm9wcy5vZmZzZXRZKVxuICAgIH0pXG5cbiAgICBjb25zdCBjb21wdXRlZEJvdHRvbSA9IGNvbXB1dGVkPHN0cmluZyB8IGJvb2xlYW4+KCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5ib3R0b20gJiYgY2FsY1Bvc2l0aW9uKHByb3BzLm9mZnNldFkpXG4gICAgfSlcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LWJhZGdlJzogdHJ1ZSxcbiAgICAgICd2LWJhZGdlLS1ib3JkZXInOiBwcm9wcy5ib3JkZXIsXG4gICAgICAndi1iYWRnZS0tZG90JzogcHJvcHMuZG90LFxuICAgICAgJ3YtYmFkZ2UtLWF2YXRhcic6IHByb3BzLmF2YXRhcixcbiAgICB9KSlcblxuICAgIGNvbnN0IGJhZGdlQ2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtYmFkZ2VfX2JhZGdlJzogdHJ1ZSxcbiAgICAgIC4uLmVsZXZhdGlvbkNsYXNzZXMudmFsdWUsXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgc3RyaW5nIHwgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICB0b3A6IGNvbXB1dGVkVG9wLnZhbHVlLFxuICAgICAgcmlnaHQ6IGNvbXB1dGVkUmlnaHQudmFsdWUsXG4gICAgICBib3R0b206IGNvbXB1dGVkQm90dG9tLnZhbHVlLFxuICAgICAgbGVmdDogY29tcHV0ZWRMZWZ0LnZhbHVlLFxuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0QmFja2dyb3VuZENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGZ1bmN0aW9uIGFkZENvbnRlbnQoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICAgIGlmIChwcm9wcy5kb3QpIHJldHVybiB1bmRlZmluZWRcbiAgICAgIGlmIChwcm9wcy5jb250ZW50KSByZXR1cm4gU3RyaW5nKHByb3BzLmNvbnRlbnQpXG5cbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5CYWRnZVNsb3QoKTogVk5vZGUgfCBudWxsIHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1iYWRnZV9fYmFkZ2Utc2xvdCc6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzbG90cy5iYWRnZSA/IGgoJ2RpdicsIHByb3BzRGF0YSwgc2xvdHMuYmFkZ2UoKSkgOiBudWxsXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuQ29udGVudCgpOiBWTm9kZSB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgJ3YtYmFkZ2VfX2NvbnRlbnQnOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBbYWRkQ29udGVudCgpLCBnZW5CYWRnZVNsb3QoKV0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuQmFkZ2UoKTogVk5vZGUge1xuICAgICAgcmV0dXJuIGgoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3M6IGJhZGdlQ2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgICBzdHlsZTogc3R5bGVzLnZhbHVlLFxuICAgICAgICB9LFxuICAgICAgICBnZW5Db250ZW50KClcbiAgICAgIClcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgbGV0IGJhZGdlID0gZ2VuQmFkZ2UoKVxuXG4gICAgICBpZiAocHJvcHMudG9nZ2xlICYmICFzbG90cy5iYWRnZSkge1xuICAgICAgICBjb25zdCB7IGlzQWN0aXZlIH0gPSB1c2VUb2dnbGUocHJvcHMsICdjb250ZW50JylcbiAgICAgICAgYmFkZ2UgPSB3aXRoRGlyZWN0aXZlcyhiYWRnZSwgW1t2U2hvdywgaXNBY3RpdmUudmFsdWVdXSlcbiAgICAgIH1cblxuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgIH1cblxuICAgICAgY29uc3QgY2hpbGRyZW4gPSBbXG4gICAgICAgIHVzZVRyYW5zaXRpb24oYmFkZ2UsIHByb3BzLnRyYW5zaXRpb24pLFxuICAgICAgICBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKSxcbiAgICAgIF1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgY2hpbGRyZW4pXG4gICAgfVxuICB9LFxufSlcbiIsImV4cG9ydCAqIGZyb20gJy4vVkJhZGdlJ1xuIiwiLy8gVnVlIEFQSVxuaW1wb3J0IHsgaCwgd2l0aEN0eCwgY3JlYXRlQmxvY2ssIFRyYW5zaXRpb24gfSBmcm9tICd2dWUnXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gJ3Z1ZSdcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb24oXG4gIGhvb2tzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICBtb2RlOiBzdHJpbmcgPSAnaW4tb3V0J1xuKSB7XG4gIHJldHVybiAodk5vZGU6IFZOb2RlKSA9PiB7XG4gICAgcmV0dXJuIGNyZWF0ZUJsb2NrKFxuICAgICAgVHJhbnNpdGlvbixcbiAgICAgIHtcbiAgICAgICAgbW9kZSxcbiAgICAgICAgLi4uaG9va3MsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFsgdk5vZGUgJiYgaCh2Tm9kZSkgXSksXG4gICAgICB9XG4gICAgKVxuICB9XG59XG4iLCJpbnRlcmZhY2UgSW5pdGlhbFN0eWxlcyB7XG4gIHRyYW5zaXRpb246IHN0cmluZyB8IG51bGw7XG4gIHByb3BTaXplOiBzdHJpbmc7XG4gIGhlaWdodD86IG51bWJlcjtcbiAgd2lkdGg/OiBudW1iZXI7XG59XG5cbmNvbnN0IGluaXQ6IEluaXRpYWxTdHlsZXMgPSB7XG4gIHRyYW5zaXRpb246IG51bGwsXG4gIHByb3BTaXplOiAnJyxcbiAgaGVpZ2h0OiAwLFxuICB3aWR0aDogMFxufVxuXG5jb25zdCBQUklNQVJZX1RSQU5TSVRJT04gPSAnY3ViaWMtYmV6aWVyKC4yNSwgLjgsIC41LCAxKSdcblxuY29uc3QgcmVzZXRTdHlsZXMgPSAoZWwpID0+IHtcbiAgZWwuc3R5bGVbaW5pdC5wcm9wU2l6ZV0gPSAnJ1xuICBlbC5zdHlsZS50cmFuc2l0aW9uID0gJydcbn1cblxuY29uc3QgZ2V0Q2hpbGRyZW5TaXplcyA9IChlbCkgPT4ge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnJlZHVjZS5jYWxsKFxuICAgIGVsLmNoaWxkcmVuLFxuICAgIChhY2M6IG51bWJlciwgaXQ6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICBjb25zdCBzaXplID0gZ2V0Q29tcHV0ZWRTdHlsZShpdClbaW5pdC5wcm9wU2l6ZV1cblxuICAgICAgcmV0dXJuIChhY2MgKz0gcGFyc2VGbG9hdChzaXplKSlcbiAgICB9LCAwKSBhcyBudW1iZXJcbn1cblxuY29uc3Qgc2V0SW5pdFN0eWxlcyA9IChlbCx4KSA9PiB7XG4gIGluaXQucHJvcFNpemUgPSB4ID8gJ3dpZHRoJyA6ICdoZWlnaHQnXG4gIGluaXQudHJhbnNpdGlvbiA9IGdldENvbXB1dGVkU3R5bGUoZWwpLnRyYW5zaXRpb25cbiAgaW5pdFtpbml0LnByb3BTaXplXSA9IGdldENoaWxkcmVuU2l6ZXMoZWwpXG59XG5cbmV4cG9ydCBjb25zdCBleHBhbmRIb29rcyA9IChcbiAgZXhwYW5kZWRQYXJlbnRDbGFzczogc3RyaW5nLFxuICB4OiBib29sZWFuID0gZmFsc2VcbikgPT4ge1xuICByZXR1cm4ge1xuICAgIG9uQmVmb3JlRW50ZXIoZWwpIHtcbiAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb24gPSAnJ1xuICAgIH0sXG5cbiAgICBvbkVudGVyKGVsKSB7XG4gICAgICBzZXRJbml0U3R5bGVzKGVsLCB4KVxuICAgICAgZWwuc3R5bGVbaW5pdC5wcm9wU2l6ZV0gPSAnMCdcbiAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb24gPSBgLjJzICR7IGluaXQucHJvcFNpemUgfSAkeyBQUklNQVJZX1RSQU5TSVRJT04gfWBcblxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgZWwuc3R5bGVbaW5pdC5wcm9wU2l6ZV0gPSBgJHsgaW5pdFtpbml0LnByb3BTaXplXSB9cHhgXG4gICAgICB9KVxuXG4gICAgICBpZiAoZXhwYW5kZWRQYXJlbnRDbGFzcykge1xuICAgICAgICBlbC5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoZXhwYW5kZWRQYXJlbnRDbGFzcylcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgb25BZnRlckVudGVyKGVsKSB7XG4gICAgICBlbC5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoZXhwYW5kZWRQYXJlbnRDbGFzcylcbiAgICAgIHJlc2V0U3R5bGVzKGVsKVxuICAgIH0sXG5cbiAgICBvbkJlZm9yZUxlYXZlKGVsKSB7XG4gICAgICBzZXRJbml0U3R5bGVzKGVsLCB4KVxuICAgIH0sXG5cbiAgICBvbkxlYXZlKGVsKSB7XG4gICAgICBzZXRJbml0U3R5bGVzKGVsLCB4KVxuXG4gICAgICBlbC5zdHlsZS50cmFuc2l0aW9uID0gYC4ycyAkeyBpbml0LnByb3BTaXplIH0gJHsgUFJJTUFSWV9UUkFOU0lUSU9OIH1gXG4gICAgICBlbC5zdHlsZVtpbml0LnByb3BTaXplXSA9IGAkeyBpbml0W2luaXQucHJvcFNpemVdIH1weGBcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiAoZWwuc3R5bGVbaW5pdC5wcm9wU2l6ZV0gPSAnMCcpKVxuICAgIH0sXG5cbiAgICBvbkFmdGVyTGVhdmUoZWwpIHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiByZXNldFN0eWxlcyhlbCkpXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBjcmVhdGVUcmFuc2l0aW9uIH0gZnJvbSAnLi9oZWxwZXJzJ1xuXG5pbXBvcnQgeyBleHBhbmRIb29rcyB9IGZyb20gJy4vZXhwYW5kLXRyYW5zaXRpb24nXG5cbmV4cG9ydCBjb25zdCBFeHBhbmRUcmFuc2l0aW9uID0gY3JlYXRlVHJhbnNpdGlvbihleHBhbmRIb29rcygnZXhwYW5kLXRyYW5zaXRpb24nKSlcbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaCwgd2l0aERpcmVjdGl2ZXMsIHJlZiwgd2F0Y2gsIGNvbXB1dGVkLCB2U2hvdywgVk5vZGUgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyBFeHBhbmRUcmFuc2l0aW9uIH0gZnJvbSAnLi4vdHJhbnNpdGlvbnMnXG5cbmltcG9ydCB7IFZJY29uIH0gZnJvbSAnLi4vVkljb24nXG5cbmltcG9ydCB7IHVzZUNvbG9ycywgY29sb3JQcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcbmltcG9ydCB7IHVzZUljb25zIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtaWNvbnMnXG5cbmV4cG9ydCBjb25zdCBWR3JvdXAgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1ncm91cCcsXG4gIHByb3BzOiB7XG4gICAgZXhwYW5kOiBCb29sZWFuLFxuICAgIHN1Ymdyb3VwOiBCb29sZWFuLFxuICAgIHRpdGxlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJyxcbiAgICB9LFxuICAgIGFjdGl2ZUNsYXNzOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnbWFpbi0tdGV4dCB0ZXh0LS1ldm8nLFxuICAgIH0sXG4gICAgcHJlcGVuZEljb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnLFxuICAgIH0sXG4gICAgYXBwZW5kSWNvbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJycsXG4gICAgfSxcbiAgICAuLi5jb2xvclByb3BzKCksXG4gIH0sXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3QgeyBpY29ucyB9ID0gdXNlSWNvbnMoKVxuICAgIGNvbnN0IHsgc2V0QmFja2dyb3VuZENzc0NvbG9yLCBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IgfSA9IHVzZUNvbG9ycygpXG5cbiAgICBjb25zdCBpc0FjdGl2ZSA9IHJlZjxib29sZWFuPihmYWxzZSlcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LWdyb3VwJzogdHJ1ZSxcbiAgICAgICd2LWdyb3VwLS1zdWJncm91cCc6IHByb3BzLnN1Ymdyb3VwLFxuICAgICAgJ3YtZ3JvdXAtLWFjdGl2ZSc6IGlzQWN0aXZlLnZhbHVlLFxuICAgICAgJ3YtZ3JvdXAtLWRlZmF1bHQnOiAhaXNBY3RpdmUudmFsdWUsXG4gICAgICBbcHJvcHMuYWN0aXZlQ2xhc3NdOiAhIXByb3BzLmFjdGl2ZUNsYXNzICYmIGlzQWN0aXZlLnZhbHVlLFxuICAgICAgLi4uc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKSxcbiAgICB9KSlcblxuICAgIGNvbnN0IHN0eWxlcyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICAuLi5zZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMuY29sb3IpLFxuICAgIH0pKVxuXG4gICAgY29uc3QgZ2VuSGVhZGVyQ29udGVudCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRlbnQ6IGFueSA9IHByb3BzLnRpdGxlIHx8IHNsb3RzLmhlYWRlcj8uKClcblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcbiAgICAgICAgY2xhc3M6ICd2LWdyb3VwX19oZWFkZXItY29udGVudCcsXG4gICAgICB9LCBjb250ZW50KVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkV4cGFuZEljb24gPSAoaWNvbjogVk5vZGUpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogJ3YtZ3JvdXBfX2V4cGFuZC1pY29uJyxcbiAgICAgIH0sIGljb24pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuU3ViRXhwYW5kSWNvbiA9IChpY29uOiBWTm9kZSk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzOiAndi1ncm91cF9fc3ViLWV4cGFuZC1pY29uJyxcbiAgICAgIH0sIGljb24pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuUHJlcGVuZEljb24gPSAoaWNvbjogVk5vZGUpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogJ3YtZ3JvdXBfX3ByZXBlbmQtaWNvbicsXG4gICAgICB9LCBpY29uKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkFwcGVuZEljb24gPSAoaWNvbjogVk5vZGUpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogJ3YtZ3JvdXBfX2FwcGVuZC1pY29uJyxcbiAgICAgIH0sIGljb24pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuSWNvbiA9IChpY29uTmFtZTogc3RyaW5nKTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoVkljb24sIHtcbiAgICAgICAgaWNvbjogaWNvbk5hbWUsXG4gICAgICAgIHNpemU6IDE2LFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5Hcm91cEhlYWRlciA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgICAgIGNsYXNzOiAndi1ncm91cF9faGVhZGVyJyxcbiAgICAgICAgICBvbkNsaWNrOiAoKSA9PiBpc0FjdGl2ZS52YWx1ZSA9ICFpc0FjdGl2ZS52YWx1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgW1xuICAgICAgICAgIHByb3BzLnN1Ymdyb3VwICYmIGdlblN1YkV4cGFuZEljb24oZ2VuSWNvbihpY29ucy4kY2FyZXREb3duKSksXG4gICAgICAgICAgcHJvcHMucHJlcGVuZEljb24gJiYgZ2VuUHJlcGVuZEljb24oZ2VuSWNvbihwcm9wcy5wcmVwZW5kSWNvbikpLFxuICAgICAgICAgIGdlbkhlYWRlckNvbnRlbnQoKSxcbiAgICAgICAgICBwcm9wcy5hcHBlbmRJY29uICYmIGdlbkFwcGVuZEljb24oZ2VuSWNvbihwcm9wcy5hcHBlbmRJY29uKSksXG4gICAgICAgICAgIXByb3BzLnN1Ymdyb3VwICYmIGdlbkV4cGFuZEljb24oZ2VuSWNvbihpY29ucy4kY2hldnJvbkRvd24pKSxcbiAgICAgICAgXSxcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5Hcm91cENoaWxkQ29udGVudCA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gd2l0aERpcmVjdGl2ZXMoaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogJ3YtZ3JvdXBfX2NvbnRlbnQnLFxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBzbG90cy5kZWZhdWx0Py4oKSxcbiAgICAgIH0pLCBbW3ZTaG93LCBpc0FjdGl2ZS52YWx1ZV1dKVxuICAgIH1cblxuICAgIHdhdGNoKCgpID0+IHByb3BzLmV4cGFuZCwgdG8gPT4gaXNBY3RpdmUudmFsdWUgPSB0bywgeyBpbW1lZGlhdGU6IHRydWUgfSlcblxuICAgIHJldHVybiAoKSA9PiBoKCdkaXYnLCB7XG4gICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgIHN0eWxlOiBzdHlsZXMudmFsdWUsXG4gICAgfSwgW1xuICAgICAgZ2VuR3JvdXBIZWFkZXIoKSxcbiAgICAgIEV4cGFuZFRyYW5zaXRpb24oZ2VuR3JvdXBDaGlsZENvbnRlbnQoKSksXG4gICAgXSlcbiAgfSxcbn0pXG4iLCJleHBvcnQgeyBWR3JvdXAgfSBmcm9tICcuL1ZHcm91cCdcbiIsIi8vIFZ1ZSBBUElcbmltcG9ydCB7XG4gIGgsXG4gIHJlZixcbiAgY29tcHV0ZWQsXG4gIHJlYWN0aXZlLFxuICBkZWZpbmVDb21wb25lbnQsXG4gIG9uTW91bnRlZCxcbiAgb25CZWZvcmVVbm1vdW50LFxufSBmcm9tICd2dWUnXG5cbi8vIEVmZmVjdHNcbmltcG9ydCB7IHBvc2l0aW9uUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1wb3NpdGlvbidcbmltcG9ydCB7IHVzZUNvbG9ycyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuXG50eXBlIFJlc2l6ZURhdGEgPSB7XG4gIHBhcmVudE5vZGU6IEhUTUxFbGVtZW50IHwgbnVsbFxuICBzdGFydE9mZnNldDogbnVtYmVyIHwgbnVsbFxuICBvZmZzZXRUb3A6IG51bWJlclxuICBvZmZzZXRMZWZ0OiBudW1iZXJcbiAgcGFyZW50SGVpZ2h0OiBudW1iZXJcbiAgcGFyZW50V2lkdGg6IG51bWJlclxuICBtYXJnaW5MZWZ0OiBudW1iZXJcbiAgbWFyZ2luVG9wOiBudW1iZXJcbiAgbGVmdDogbnVtYmVyXG4gIHRvcDogbnVtYmVyXG4gIGlzQWN0aXZlOiBib29sZWFuXG59XG5cbmV4cG9ydCBjb25zdCBWUmVzaXplID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtcmVzaXplJyxcblxuICBwcm9wczoge1xuICAgIGVtaXQ6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB9LFxuXG4gICAgY3VzdG9tQ2xhc3M6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICB9LFxuXG4gICAgbWluU2l6ZToge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IDUwLFxuICAgIH0sXG4gICAgY29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdwcmltYXJ5JyxcbiAgICB9LFxuICAgIC4uLnBvc2l0aW9uUHJvcHMoKSxcbiAgfSBhcyBhbnksXG5cbiAgZW1pdHM6IFsncmVzaXplJ10sXG5cbiAgc2V0dXAocHJvcHMsIHsgZW1pdCB9KTogKCkgPT4gVk5vZGUge1xuICAgIGNvbnN0IGRhdGE6IFJlc2l6ZURhdGEgPSByZWFjdGl2ZSh7XG4gICAgICBwYXJlbnROb2RlOiBudWxsLFxuICAgICAgc3RhcnRPZmZzZXQ6IG51bGwsXG4gICAgICBvZmZzZXRUb3A6IDAsXG4gICAgICBvZmZzZXRMZWZ0OiAwLFxuICAgICAgcGFyZW50SGVpZ2h0OiAwLFxuICAgICAgcGFyZW50V2lkdGg6IDAsXG4gICAgICBtYXJnaW5MZWZ0OiAwLFxuICAgICAgbWFyZ2luVG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIGlzQWN0aXZlOiBmYWxzZSxcbiAgICB9KVxuXG4gICAgY29uc3QgcmVzaXplUmVmID0gcmVmPEhUTUxFbGVtZW50IHwgbnVsbD4obnVsbClcblxuICAgIGNvbnN0IHsgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yLCBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IgfSA9IHVzZUNvbG9ycygpXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICd2LXJlc2l6ZSc6IHRydWUsXG4gICAgICAgICd2LXJlc2l6ZS0tYWN0aXZlJzogZGF0YS5pc0FjdGl2ZSxcbiAgICAgICAgJ3YtcmVzaXplLS10b3AnOiBwcm9wcy50b3AsXG4gICAgICAgICd2LXJlc2l6ZS0tYm90dG9tJzogcHJvcHMuYm90dG9tLFxuICAgICAgICAndi1yZXNpemUtLXJpZ2h0JzogcHJvcHMucmlnaHQsXG4gICAgICAgICd2LXJlc2l6ZS0tbGVmdCc6IHByb3BzLmxlZnQsXG4gICAgICAgIFtwcm9wcy5jdXN0b21DbGFzc106ICEhcHJvcHMuY3VzdG9tQ2xhc3MsXG4gICAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgICB9XG4gICAgfSlcblxuICAgIGNvbnN0IHN0eWxlcyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3QgaXNEaXJlY3RZID0gY29tcHV0ZWQ8Ym9vbGVhbj4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLnRvcCB8fCBwcm9wcy5ib3R0b21cbiAgICB9KVxuXG4gICAgY29uc3QgaXNOZWVkUmV2ZXJzZSA9IGNvbXB1dGVkPGJvb2xlYW4+KCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy50b3AgfHwgcHJvcHMubGVmdFxuICAgIH0pXG5cbiAgICBjb25zdCBjdXJyZW50U2l6ZSA9IGNvbXB1dGVkPG51bWJlcj4oKCkgPT4ge1xuICAgICAgcmV0dXJuIGlzRGlyZWN0WS52YWx1ZSA/IGRhdGEucGFyZW50SGVpZ2h0ISA6IGRhdGEucGFyZW50V2lkdGghXG4gICAgfSlcblxuICAgIGNvbnN0IHNpemVQcm9wID0gY29tcHV0ZWQ8c3RyaW5nPigoKSA9PiB7XG4gICAgICByZXR1cm4gaXNEaXJlY3RZLnZhbHVlID8gJ2hlaWdodCcgOiAnd2lkdGgnXG4gICAgfSlcblxuICAgIGNvbnN0IHJldmVyc2VEaXJlY3Rpb24gPSBjb21wdXRlZDxzdHJpbmc+KCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy50b3AgPyAndG9wJyA6ICdsZWZ0J1xuICAgIH0pXG5cbiAgICBjb25zdCByZXZlcnNlT2Zmc2V0S2V5ID0gY29tcHV0ZWQ8c3RyaW5nPigoKSA9PiB7XG4gICAgICBjb25zdCBzaWRlID0gcmV2ZXJzZURpcmVjdGlvbi52YWx1ZVxuICAgICAgcmV0dXJuICdvZmZzZXQnICsgc2lkZVswXS50b1VwcGVyQ2FzZSgpICsgc2lkZS5zbGljZSgxKVxuICAgIH0pXG5cbiAgICBjb25zdCBvZmZzZXQgPSBjb21wdXRlZDxudW1iZXI+KCgpID0+IHtcbiAgICAgIHJldHVybiBpc0RpcmVjdFkudmFsdWUgPyBkYXRhLm9mZnNldFRvcCEgOiBkYXRhLm9mZnNldExlZnQhXG4gICAgfSlcblxuICAgIGNvbnN0IGRpcmVjdGlvbiA9IGNvbXB1dGVkPHN0cmluZz4oKCkgPT4ge1xuICAgICAgcmV0dXJuIGlzRGlyZWN0WS52YWx1ZSA/ICdjbGllbnRZJyA6ICdjbGllbnRYJ1xuICAgIH0pXG5cbiAgICBmdW5jdGlvbiBtb3ZlUmV2ZXJzZShzaXplKSB7XG4gICAgICBjb25zdCB7IHBhcmVudE5vZGUsIGxlZnQsIHRvcCB9ID0gZGF0YVxuICAgICAgY29uc3QgcmV2ZXJzZVRvID0gcmV2ZXJzZURpcmVjdGlvbi52YWx1ZVxuXG4gICAgICBjb25zdCB2YWx1ZSA9ICFpc0RpcmVjdFkudmFsdWVcbiAgICAgICAgPyBjdXJyZW50U2l6ZS52YWx1ZSAtIHNpemUgKyBsZWZ0XG4gICAgICAgIDogY3VycmVudFNpemUudmFsdWUgLSBzaXplICsgdG9wXG5cbiAgICAgIHBhcmVudE5vZGUhLnN0eWxlW3JldmVyc2VUb10gPSBgJHt2YWx1ZX1weGBcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPckVtaXRTaXplKHNpemUpIHtcbiAgICAgIGlmIChwcm9wcy5lbWl0KSByZXR1cm4gZW1pdCgncmVzaXplJywgc2l6ZSlcblxuICAgICAgZGF0YS5wYXJlbnROb2RlIS5zdHlsZVtzaXplUHJvcC52YWx1ZV0gPSBgJHtzaXplfXB4YFxuXG4gICAgICBpc05lZWRSZXZlcnNlLnZhbHVlICYmIG1vdmVSZXZlcnNlKHNpemUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzaXplKGUpIHtcbiAgICAgIGxldCBzaXplXG5cbiAgICAgIGlmIChpc05lZWRSZXZlcnNlLnZhbHVlKSB7XG4gICAgICAgIHNpemUgPVxuICAgICAgICAgIGN1cnJlbnRTaXplLnZhbHVlIC1cbiAgICAgICAgICAoZVtkaXJlY3Rpb24udmFsdWVdIC0gb2Zmc2V0LnZhbHVlKSArXG4gICAgICAgICAgZGF0YS5zdGFydE9mZnNldCFcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNpemUgPVxuICAgICAgICAgIGN1cnJlbnRTaXplLnZhbHVlICtcbiAgICAgICAgICAoZVtkaXJlY3Rpb24udmFsdWVdIC1cbiAgICAgICAgICAgIGN1cnJlbnRTaXplLnZhbHVlIC1cbiAgICAgICAgICAgIG9mZnNldC52YWx1ZSAtXG4gICAgICAgICAgICBkYXRhLnN0YXJ0T2Zmc2V0ISlcbiAgICAgIH1cblxuICAgICAgc2l6ZSA+IHByb3BzLm1pblNpemUgJiYgc2V0T3JFbWl0U2l6ZShzaXplKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc2V0TWluTWF4U3R5bGVzKCkge1xuICAgICAgaWYgKGlzRGlyZWN0WS52YWx1ZSkge1xuICAgICAgICBkYXRhLnBhcmVudE5vZGUhLnN0eWxlLm1heEhlaWdodCA9ICcnXG4gICAgICAgIGRhdGEucGFyZW50Tm9kZSEuc3R5bGUubWluSGVpZ2h0ID0gJydcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEucGFyZW50Tm9kZSEuc3R5bGUubWF4V2lkdGggPSAnJ1xuICAgICAgICBkYXRhLnBhcmVudE5vZGUhLnN0eWxlLm1pbldpZHRoID0gJydcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRQYXJlbnQoKSB7XG4gICAgICBjb25zdCBwYXJlbnQgPSByZXNpemVSZWYudmFsdWUhLnBhcmVudE5vZGVcbiAgICAgIGRhdGEucGFyZW50Tm9kZSA9IHBhcmVudCBhcyBIVE1MRWxlbWVudFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXB1dGVTaXplcygpIHtcbiAgICAgIGNvbnN0IHsgdG9wLCBsZWZ0LCBoZWlnaHQsIHdpZHRoLCBtYXJnaW5MZWZ0LCBtYXJnaW5Ub3AgfSA9XG4gICAgICAgIGdldENvbXB1dGVkU3R5bGUoZGF0YS5wYXJlbnROb2RlISlcblxuICAgICAgZGF0YS5vZmZzZXRUb3AgPSBkYXRhLnBhcmVudE5vZGUhLm9mZnNldFRvcFxuICAgICAgZGF0YS5vZmZzZXRMZWZ0ID0gZGF0YS5wYXJlbnROb2RlIS5vZmZzZXRMZWZ0XG4gICAgICBkYXRhLm1hcmdpbkxlZnQgPSBwYXJzZUZsb2F0KG1hcmdpbkxlZnQpXG4gICAgICBkYXRhLm1hcmdpblRvcCA9IHBhcnNlRmxvYXQobWFyZ2luVG9wKVxuICAgICAgZGF0YS5wYXJlbnRIZWlnaHQgPSBwYXJzZUZsb2F0KGhlaWdodClcbiAgICAgIGRhdGEucGFyZW50V2lkdGggPSBwYXJzZUZsb2F0KHdpZHRoKVxuICAgICAgZGF0YS50b3AgPSBwYXJzZUZsb2F0KHRvcClcbiAgICAgIGRhdGEubGVmdCA9IHBhcnNlRmxvYXQobGVmdClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRTdGFydFBvc2l0aW9ucygpIHtcbiAgICAgIGNvbnN0IHNpZGUgPSByZXZlcnNlRGlyZWN0aW9uLnZhbHVlXG4gICAgICBjb25zdCBvZmZzZXQgPSByZXZlcnNlT2Zmc2V0S2V5LnZhbHVlXG5cbiAgICAgIGlmIChkYXRhW3NpZGVdID09PSBkYXRhW29mZnNldF0pIHtcbiAgICAgICAgZGF0YS5wYXJlbnROb2RlIS5zdHlsZVtzaWRlXSA9IGAke2RhdGFbb2Zmc2V0XX1weGBcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaXNhYmxlU2VsZWN0aW9uKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluaXRSZXNpemUoZSkge1xuICAgICAgaWYgKCFkYXRhLmlzQWN0aXZlKSB7XG4gICAgICAgIGRhdGEuaXNBY3RpdmUgPSB0cnVlXG4gICAgICAgIGNvbXB1dGVTaXplcygpXG4gICAgICAgIHJlc2V0TWluTWF4U3R5bGVzKClcbiAgICAgICAgc2V0U3RhcnRQb3NpdGlvbnMoKVxuICAgICAgICBzZXRTdGFydE9mZnNldChlKVxuICAgICAgfVxuXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gcmVzaXplKGUpKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFN0YXJ0T2Zmc2V0KGUpIHtcbiAgICAgIGlmIChpc05lZWRSZXZlcnNlLnZhbHVlKSBkYXRhLnN0YXJ0T2Zmc2V0ID0gZVtkaXJlY3Rpb24udmFsdWVdXG4gICAgICBlbHNlIGRhdGEuc3RhcnRPZmZzZXQgPSBlW2RpcmVjdGlvbi52YWx1ZV0gLSBjdXJyZW50U2l6ZS52YWx1ZVxuXG4gICAgICBkYXRhLnN0YXJ0T2Zmc2V0ISAtPSBvZmZzZXQudmFsdWVcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIGRhdGEuaXNBY3RpdmUgPSBmYWxzZVxuICAgICAgcmVzZXRNaW5NYXhTdHlsZXMoKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uTW91c2V1cCgpIHtcbiAgICAgIHJlc2V0KClcbiAgICAgIHJlbW92ZUhhbmRsZXJzKClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbk1vdXNlZG93bigpIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGluaXRSZXNpemUpXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25Nb3VzZXVwKVxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0c3RhcnQnLCBkaXNhYmxlU2VsZWN0aW9uKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUhhbmRsZXJzKCkge1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgaW5pdFJlc2l6ZSlcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBvbk1vdXNldXApXG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzZWxlY3RzdGFydCcsIGRpc2FibGVTZWxlY3Rpb24pXG4gICAgfVxuXG4gICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgIHNldFBhcmVudCgpXG4gICAgfSlcblxuICAgIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbk1vdXNlZG93bilcbiAgICB9KVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgIHN0eWxlOiBzdHlsZXMudmFsdWUsXG4gICAgICAgIGtleTogJ3Jlc2l6ZScsXG4gICAgICAgIHJlZjogcmVzaXplUmVmLFxuICAgICAgICBvbk1vdXNlZG93bixcbiAgICAgIH1cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEpXG4gICAgfVxuICB9LFxufSlcbiIsImV4cG9ydCAqIGZyb20gJy4vVlJlc2l6ZSdcbiIsImV4cG9ydCAqIGZyb20gJy4vVkljb24nXG4iLCJleHBvcnQgeyBWQ2hpcCB9IGZyb20gJy4vVkNoaXAnXG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQge1xuICBoLFxuICByZWYsXG4gIHdhdGNoLFxuICBkZWZpbmVDb21wb25lbnQsXG4gIGluamVjdCxcbiAgY29tcHV0ZWQsXG4gIG9uQmVmb3JlTW91bnQsXG4gIG9uQmVmb3JlVW5tb3VudCxcbn0gZnJvbSAndnVlJ1xuXG4vLyBFZmZlY3RzXG5pbXBvcnQgeyB1c2VWYWxpZGF0aW9uIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtdmFsaWRhdGlvbidcbmltcG9ydCB7IHVzZUljb25zIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtaWNvbnMnXG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZJY29uIH0gZnJvbSAnLi4vVkljb24nXG5pbXBvcnQgeyBWTGFiZWwgfSBmcm9tICcuLi9WTGFiZWwnXG5cbi8vIEhlbHBlcnNcbmltcG9ydCB7IHdhcm5pbmcgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tICd2dWUnXG5cbmV4cG9ydCBjb25zdCBWQ2hlY2tib3ggPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1jaGVja2JveCcsXG4gIHByb3BzOiB7XG4gICAgb25JY29uOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgfSxcbiAgICBvZmZJY29uOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgfSxcbiAgICBkYXJrOiBCb29sZWFuLFxuICAgIGxhYmVsOiBTdHJpbmcsXG4gICAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gICAgdmFsaWRhdGU6IEJvb2xlYW4sXG4gICAgbW9kZWxWYWx1ZTogW0FycmF5LCBCb29sZWFuXSxcbiAgICB2YWx1ZToge1xuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICB9LFxuICAgIGNvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAncHJpbWFyeScsXG4gICAgfSxcbiAgfSBhcyBhbnksXG4gIGVtaXRzOiBbJ2NoZWNrZWQnLCAndXBkYXRlOm1vZGVsVmFsdWUnXSxcbiAgc2V0dXAocHJvcHMsIHsgZW1pdCB9KTogKCkgPT4gVk5vZGUge1xuICAgIGNvbnN0IGlzQ2hlY2tlZCA9IHJlZihmYWxzZSlcbiAgICBjb25zdCBmb3JtOiBhbnkgPSBpbmplY3QoJ2Zvcm0nLCBudWxsKVxuXG4gICAgY29uc3QgeyB2YWxpZGF0ZSB9ID0gdXNlVmFsaWRhdGlvbihwcm9wcylcbiAgICBjb25zdCB7IGljb25zIH0gPSB1c2VJY29ucygpXG5cbiAgICBjb25zdCBpc0FycmF5ID0gY29tcHV0ZWQ8Ym9vbGVhbj4oKCkgPT4gQXJyYXkuaXNBcnJheShwcm9wcy5tb2RlbFZhbHVlKSlcbiAgICBjb25zdCBpc1ZhbHVlU2V0ID0gY29tcHV0ZWQ8Ym9vbGVhbj4oKCkgPT4gcHJvcHMudmFsdWUgIT09IG51bGwpXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1jaGVja2JveCc6IHRydWUsXG4gICAgICAndi1jaGVja2JveC0tZGlzYWJsZWQnOiBwcm9wcy5kaXNhYmxlZCxcbiAgICAgICd2LWNoZWNrYm94LS1jaGVja2VkJzogaXNDaGVja2VkLnZhbHVlLFxuICAgICAgJ3YtdmFsaWRhdGFibGUnOiBwcm9wcy52YWxpZGF0ZSxcbiAgICB9KSlcblxuICAgIHdhdGNoKFxuICAgICAgKCkgPT4gcHJvcHMubW9kZWxWYWx1ZSxcbiAgICAgICgpID0+IHtcbiAgICAgICAgaWYgKGlzQXJyYXkudmFsdWUpIHtcbiAgICAgICAgICBpZiAoaXNWYWx1ZVNldC52YWx1ZSkge1xuICAgICAgICAgICAgaXNDaGVja2VkLnZhbHVlID0gcHJvcHMubW9kZWxWYWx1ZS5pbmNsdWRlcyhwcm9wcy52YWx1ZSlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2FybmluZygndi1jaGVja2JveDogc2V0IHRoZSBcInZhbHVlXCIgcHJvcCcpXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlzQ2hlY2tlZC52YWx1ZSA9ICEhcHJvcHMubW9kZWxWYWx1ZVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgeyBpbW1lZGlhdGU6IHRydWUgfSxcbiAgICApXG5cbiAgICBjb25zdCB2YWxpZGF0ZVZhbHVlID0gKCk6IGJvb2xlYW4gfCB2b2lkID0+IHtcbiAgICAgIHJldHVybiB2YWxpZGF0ZShpc0NoZWNrZWQudmFsdWUpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuTGFiZWwgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBhYnNvbHV0ZTogZmFsc2UsXG4gICAgICAgIGNvbG9yOiBwcm9wcy5kYXJrID8gJ3doaXRlJyA6ICcnLFxuICAgICAgICBkaXNhYmxlZDogcHJvcHMuZGlzYWJsZWQsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKFZMYWJlbCwgcHJvcHNEYXRhLCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IHByb3BzLmxhYmVsLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5MYWJlbFdyYXBwZXIgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogJ3YtY2hlY2tib3hfX2xhYmVsJyxcbiAgICAgIH0sIGdlbkxhYmVsKCkpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuSWNvbiA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICBjb25zdCBvbkljb24gPSBwcm9wcy5vbkljb24gfHwgaWNvbnMuJGNoZWNrT25cbiAgICAgIGNvbnN0IG9mZkljb24gPSBwcm9wcy5vZmZJY29uIHx8IGljb25zLiRjaGVja09mZlxuICAgICAgY29uc3QgaWNvbiA9IGlzQ2hlY2tlZC52YWx1ZSA/IG9uSWNvbiA6IG9mZkljb25cblxuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBpY29uLFxuICAgICAgICBjb2xvcjogcHJvcHMuY29sb3IsXG4gICAgICAgIGRpc2FibGVkOiBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoVkljb24sIHByb3BzRGF0YSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5DaGVja2JveCA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogJ3YtY2hlY2tib3hfX3NxdWFyZScsXG4gICAgICB9LCBnZW5JY29uKCkpXG4gICAgfVxuXG4gICAgY29uc3QgY29tcHV0ZVZhbHVlID0gKCk6IGJvb2xlYW4gfCBhbnlbXSA9PiB7XG4gICAgICBpZiAoaXNBcnJheS52YWx1ZSkge1xuICAgICAgICBsZXQgbW9kZWxWYWx1ZSA9IFsuLi5wcm9wcy5tb2RlbFZhbHVlXVxuICAgICAgICBpc0NoZWNrZWQudmFsdWUgPSAhbW9kZWxWYWx1ZS5pbmNsdWRlcyhwcm9wcy52YWx1ZSlcblxuICAgICAgICBpZiAoIWlzQ2hlY2tlZC52YWx1ZSkge1xuICAgICAgICAgIG1vZGVsVmFsdWUgPSBtb2RlbFZhbHVlLmZpbHRlcigoaXQpID0+IGl0ICE9PSBwcm9wcy52YWx1ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtb2RlbFZhbHVlLnB1c2gocHJvcHMudmFsdWUpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbW9kZWxWYWx1ZVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gKGlzQ2hlY2tlZC52YWx1ZSA9ICFpc0NoZWNrZWQudmFsdWUpXG4gICAgfVxuXG4gICAgY29uc3Qgb25DbGljayA9ICgpID0+IHtcbiAgICAgIGlmIChwcm9wcy5kaXNhYmxlZCkgcmV0dXJuXG4gICAgICBjb25zdCB2YWx1ZSA9IGNvbXB1dGVWYWx1ZSgpXG5cbiAgICAgIHByb3BzLnZhbGlkYXRlICYmIHZhbGlkYXRlVmFsdWUoKVxuICAgICAgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCB2YWx1ZSlcbiAgICAgIGVtaXQoJ2NoZWNrZWQnLCB2YWx1ZSlcbiAgICB9XG5cbiAgICBvbkJlZm9yZU1vdW50KCgpID0+IHtcbiAgICAgIGlmIChmb3JtKSBmb3JtIS5hZGQodmFsaWRhdGVWYWx1ZSlcbiAgICB9KVxuXG4gICAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICAgIGZvcm0/LnJlbW92ZSh2YWxpZGF0ZVZhbHVlKVxuICAgIH0pXG5cbiAgICByZXR1cm4gKCk6IFZOb2RlID0+IGgoJ2RpdicsXG4gICAgICB7IGNsYXNzOiBjbGFzc2VzLnZhbHVlLCBvbkNsaWNrIH0sXG4gICAgICBbZ2VuQ2hlY2tib3goKSwgcHJvcHMubGFiZWwgJiYgZ2VuTGFiZWxXcmFwcGVyKCldLFxuICAgIClcbiAgfSxcbn0pXG4iLCJleHBvcnQgeyBWQ2hlY2tib3ggfSBmcm9tICcuL1ZDaGVja2JveCdcbiIsImV4cG9ydCBlbnVtIHRyYW5zaXRpb25zIHtcbiAgRkFERSA9IFwiZmFkZVwiLFxuICBGQURFX0lOX0RPV04gPSBcImZhZGUtaW4tZG93blwiLFxuICBGQURFX0lOX1VQID0gXCJmYWRlLWluLXVwXCIsXG4gIFNDQUxFX0lOID0gXCJzY2FsZS1pblwiLFxuICBTQ0FMRV9JTl9PVVQgPSBcInNjYWxlLWluLW91dFwiLFxuICBTTElERV9JTl9MRUZUID0gXCJzbGlkZS1pbi1sZWZ0XCIsXG59XG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQge1xuICBoLFxuICByZWYsXG4gIHJlYWN0aXZlLFxuICB3YXRjaCxcbiAgY29tcHV0ZWQsXG4gIHdpdGhEaXJlY3RpdmVzLFxuICBkZWZpbmVDb21wb25lbnQsXG4gIG9uTW91bnRlZCxcbiAgdlNob3csXG59IGZyb20gJ3Z1ZSdcblxuLy8gRWZmZWN0c1xuaW1wb3J0IHsgdXNlVG9nZ2xlIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtdG9nZ2xlJ1xuaW1wb3J0IHsgdXNlQ29sb3JzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtY29sb3JzJ1xuaW1wb3J0IHsgdXNlQWN0aXZhdG9yIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtYWN0aXZhdG9yJ1xuaW1wb3J0IHsgdXNlVHJhbnNpdGlvbiB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXRyYW5zaXRpb24nXG5pbXBvcnQgeyBlbGV2YXRpb25Qcm9wcywgdXNlRWxldmF0aW9uIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtZWxldmF0aW9uJ1xuaW1wb3J0IHsgcG9zaXRpb25Qcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXBvc2l0aW9uJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgT2Zmc2V0U2l6ZXMgfSBmcm9tICcuLi8uLi8uLi90eXBlcydcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuXG4vLyBIZWxwZXJzXG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0IH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuLy8gU2VydmljZXNcbmltcG9ydCB7IHRyYW5zaXRpb25zIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvdHJhbnNpdGlvbnMnXG5cbi8vIFRPRE8gZml4IGJlaGF2aW9yIG9uIHdpbmRvdyByZXNpemUgaWYgdi1tb2RlbCB1c2VkIG9uIGNvbXBvbmVudFxuXG5leHBvcnQgY29uc3QgVlRvb2x0aXAgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi10b29sdGlwJyxcblxuICBwcm9wczoge1xuICAgIG9wZW5PbkhvdmVyOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB9LFxuICAgIGNvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnZ3JleSBsaWdodGVuLTEnLFxuICAgIH0sXG4gICAgekluZGV4OiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIG1heFdpZHRoOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIG1pbldpZHRoOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIG1vZGVsVmFsdWU6IEJvb2xlYW4sXG4gICAgb2Zmc2V0WDoge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IDIwLFxuICAgIH0sXG4gICAgb2Zmc2V0WToge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IDIwLFxuICAgIH0sXG4gICAgLi4uZWxldmF0aW9uUHJvcHMoKSxcbiAgICAuLi5wb3NpdGlvblByb3BzKCksXG4gIH0gYXMgYW55LFxuXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICBjb25zdCB0b29sdGlwID0gcmVhY3RpdmU8UGFydGlhbDxPZmZzZXRTaXplcz4+KHt9KVxuICAgIGNvbnN0IGFjdGl2YXRvciA9IHJlYWN0aXZlPFBhcnRpYWw8T2Zmc2V0U2l6ZXM+Pih7fSlcblxuICAgIGNvbnN0IHRvb2x0aXBSZWYgPSByZWY8SFRNTEVsZW1lbnQgfCBudWxsPihudWxsKVxuXG4gICAgY29uc3QgeyBpc0FjdGl2ZSB9ID0gdXNlVG9nZ2xlKHByb3BzKVxuICAgIGNvbnN0IHsgZWxldmF0aW9uQ2xhc3NlcyB9ID0gdXNlRWxldmF0aW9uKHByb3BzKVxuICAgIGNvbnN0IHsgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yLCBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IgfSA9IHVzZUNvbG9ycygpXG4gICAgY29uc3QgeyBhY3RpdmF0b3JSZWYsIGdldEFjdGl2YXRvclNpemVzLCBnZW5BY3RpdmF0b3JMaXN0ZW5lcnMgfSA9XG4gICAgICB1c2VBY3RpdmF0b3IocHJvcHMpXG5cbiAgICBjb25zdCBoYW5kbGVycyA9IHtcbiAgICAgIG1vdXNlZW50ZXI6ICgpID0+IChpc0FjdGl2ZS52YWx1ZSA9IHRydWUpLFxuICAgICAgbW91c2VsZWF2ZTogKCkgPT4gKGlzQWN0aXZlLnZhbHVlID0gZmFsc2UpLFxuICAgIH1cblxuICAgIGNvbnN0IGxpc3RlbmVycyA9IGdlbkFjdGl2YXRvckxpc3RlbmVycyhwcm9wcywgaGFuZGxlcnMpXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi10b29sdGlwJzogdHJ1ZSxcbiAgICAgICd2LXRvb2x0aXAtLXRvcCc6IHByb3BzLnRvcCxcbiAgICAgICd2LXRvb2x0aXAtLXJpZ2h0JzogcHJvcHMucmlnaHQsXG4gICAgICAndi10b29sdGlwLS1sZWZ0JzogcHJvcHMubGVmdCxcbiAgICAgICd2LXRvb2x0aXAtLWJvdHRvbSc6IHByb3BzLmJvdHRvbSxcbiAgICAgIC4uLmVsZXZhdGlvbkNsYXNzZXMudmFsdWUsXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3QgY29tcHV0ZVRvcFBvc2l0aW9uID0gY29tcHV0ZWQ8bnVtYmVyPigoKSA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICAocHJvcHMudG9wXG4gICAgICAgICAgPyBhY3RpdmF0b3IhLnRvcCEgLSB0b29sdGlwLmhlaWdodCFcbiAgICAgICAgICA6IHByb3BzLmJvdHRvbVxuICAgICAgICAgID8gYWN0aXZhdG9yLnRvcCEgKyBhY3RpdmF0b3IuaGVpZ2h0IVxuICAgICAgICAgIDogYWN0aXZhdG9yLnRvcCEgKyAoYWN0aXZhdG9yLmhlaWdodCEgLSB0b29sdGlwLmhlaWdodCEpIC8gMikgK1xuICAgICAgICArcHJvcHMub2Zmc2V0WVxuICAgICAgKVxuICAgIH0pXG5cbiAgICBjb25zdCBjb21wdXRlTGVmdFBvc2l0aW9uID0gY29tcHV0ZWQ8bnVtYmVyPigoKSA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICAocHJvcHMubGVmdFxuICAgICAgICAgID8gYWN0aXZhdG9yLmxlZnQhIC0gdG9vbHRpcC53aWR0aCFcbiAgICAgICAgICA6IHByb3BzLnJpZ2h0XG4gICAgICAgICAgPyBhY3RpdmF0b3IubGVmdCEgKyBhY3RpdmF0b3Iud2lkdGghXG4gICAgICAgICAgOiBhY3RpdmF0b3IubGVmdCEgKyAoYWN0aXZhdG9yLndpZHRoISAtIHRvb2x0aXAud2lkdGghKSAvIDIpICtcbiAgICAgICAgK3Byb3BzLm9mZnNldFhcbiAgICAgIClcbiAgICB9KVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgc3RyaW5nPj4oKCkgPT4gKHtcbiAgICAgIHRvcDogdG9vbHRpcC50b3AgPyAoY29udmVydFRvVW5pdCh0b29sdGlwLnRvcCkgYXMgc3RyaW5nKSA6ICcnLFxuICAgICAgbGVmdDogdG9vbHRpcC50b3AgPyAoY29udmVydFRvVW5pdCh0b29sdGlwLmxlZnQhKSBhcyBzdHJpbmcpIDogJycsXG4gICAgICBtYXhXaWR0aDogISFwcm9wcy5tYXhXaWR0aCA/IGAke3Byb3BzLm1heFdpZHRofXB4YCA6ICcnLFxuICAgICAgbWluV2lkdGg6ICEhcHJvcHMubWluV2lkdGggPyBgJHtwcm9wcy5taW5XaWR0aH1weGAgOiAnJyxcbiAgICAgIHpJbmRleDogcHJvcHMuekluZGV4LFxuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0QmFja2dyb3VuZENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGZ1bmN0aW9uIGdlbkFjdGl2YXRvcigpOiBWTm9kZSB8IG51bGwge1xuICAgICAgY29uc3Qgc2xvdENvbnRlbnQgPVxuICAgICAgICBzbG90cy5hY3RpdmF0b3IgJiZcbiAgICAgICAgc2xvdHMuYWN0aXZhdG9yKHtcbiAgICAgICAgICBvbjogbGlzdGVuZXJzLFxuICAgICAgICB9KVxuXG4gICAgICByZXR1cm4gaChzbG90Q29udGVudCFbMF0sIHsgcmVmOiBhY3RpdmF0b3JSZWYgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5Db250ZW50KCk6IFZOb2RlIHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgIHN0eWxlOiBzdHlsZXMudmFsdWUsXG4gICAgICAgIHJlZjogdG9vbHRpcFJlZixcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHdpdGhEaXJlY3RpdmVzKFxuICAgICAgICBoKCdzcGFuJywgcHJvcHNEYXRhLCBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKSksXG4gICAgICAgIFtbdlNob3csIGlzQWN0aXZlLnZhbHVlXV1cbiAgICAgIClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRUb29sdGlwUG9zaXRpb24oKSB7XG4gICAgICBpZiAodG9vbHRpcFJlZi52YWx1ZSkge1xuICAgICAgICB0b29sdGlwLndpZHRoID0gdG9vbHRpcFJlZi52YWx1ZSEub2Zmc2V0V2lkdGhcbiAgICAgICAgdG9vbHRpcC5oZWlnaHQgPSB0b29sdGlwUmVmLnZhbHVlIS5vZmZzZXRIZWlnaHRcbiAgICAgICAgdG9vbHRpcC50b3AgPSBjb21wdXRlVG9wUG9zaXRpb24udmFsdWVcbiAgICAgICAgdG9vbHRpcC5sZWZ0ID0gY29tcHV0ZUxlZnRQb3NpdGlvbi52YWx1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICB3YXRjaChcbiAgICAgICAgKCkgPT4gaXNBY3RpdmUudmFsdWUsXG4gICAgICAgICh0bykgPT4ge1xuICAgICAgICAgIGlmICh0bykge1xuICAgICAgICAgICAgY29uc3QgeyBsZWZ0LCB0b3AsIGhlaWdodCwgd2lkdGggfSA9IGdldEFjdGl2YXRvclNpemVzKClcblxuICAgICAgICAgICAgYWN0aXZhdG9yLmxlZnQgPSBsZWZ0IGFzIG51bWJlclxuICAgICAgICAgICAgYWN0aXZhdG9yLnRvcCA9IHRvcCBhcyBudW1iZXJcbiAgICAgICAgICAgIGFjdGl2YXRvci5oZWlnaHQgPSBoZWlnaHQgYXMgbnVtYmVyXG4gICAgICAgICAgICBhY3RpdmF0b3Iud2lkdGggPSB3aWR0aCBhcyBudW1iZXJcblxuICAgICAgICAgICAgdG9vbHRpcC50b3AgPSAwXG4gICAgICAgICAgICB0b29sdGlwLmxlZnQgPSAwXG5cbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShzZXRUb29sdGlwUG9zaXRpb24pXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7IGltbWVkaWF0ZTogdHJ1ZSB9XG4gICAgICApXG4gICAgfSlcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBjb250ZW50ID0gdXNlVHJhbnNpdGlvbihcbiAgICAgICAgZ2VuQ29udGVudCgpIGFzIFZOb2RlLFxuICAgICAgICBpc0FjdGl2ZS52YWx1ZSA/IHRyYW5zaXRpb25zLlNDQUxFX0lOIDogdHJhbnNpdGlvbnMuRkFERVxuICAgICAgKVxuXG4gICAgICByZXR1cm4gW2NvbnRlbnQsIGdlbkFjdGl2YXRvcigpXVxuICAgIH1cbiAgfSxcbn0pXG4iLCJleHBvcnQgeyBWVG9vbHRpcCB9IGZyb20gJy4vVlRvb2x0aXAnXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGgsIGNvbXB1dGVkLCBWTm9kZSB9IGZyb20gJ3Z1ZSdcbi8vIEhlbHBlcnNcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlQ29sb3JzLCBjb2xvclByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtY29sb3JzJ1xuXG5leHBvcnQgY29uc3QgVlRvb2xiYXIgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi10b29sYmFyJyxcbiAgcHJvcHM6IHtcbiAgICBmaXhlZDogQm9vbGVhbixcbiAgICBoZWlnaHQ6IHtcbiAgICAgIHR5cGU6IFsgU3RyaW5nLCBOdW1iZXIgXSxcbiAgICAgIGRlZmF1bHQ6IDU2XG4gICAgfSxcbiAgICAuLi5jb2xvclByb3BzKCcjZmZmZmZmJylcbiAgfSxcbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSk6ICgpID0+IFZOb2RlIHtcbiAgICBjb25zdCB7IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvciwgc2V0QmFja2dyb3VuZENzc0NvbG9yIH0gPSB1c2VDb2xvcnMoKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtdG9vbGJhcic6IHRydWUsXG4gICAgICAndi10b29sYmFyLS1maXhlZCc6IHByb3BzLmZpeGVkLFxuICAgICAgLi4uc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKVxuICAgIH0pKVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgc3RyaW5nPj4oKCkgPT4gKHtcbiAgICAgIGhlaWdodDogY29udmVydFRvVW5pdChwcm9wcy5oZWlnaHQpLFxuICAgICAgbGVmdDogcHJvcHMuZml4ZWQgPyBjb252ZXJ0VG9Vbml0KDApIDogJycsXG4gICAgICB0b3A6IHByb3BzLmZpeGVkID8gY29udmVydFRvVW5pdCgwKSA6ICcnLFxuICAgICAgLi4uc2V0QmFja2dyb3VuZENzc0NvbG9yKHByb3BzLmNvbG9yKVxuICAgIH0pKVxuXG4gICAgcmV0dXJuICgpID0+IGgoJ2RpdicsIHtcbiAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgc3R5bGU6IHN0eWxlcy52YWx1ZVxuICAgIH0sIHtcbiAgICAgIGRlZmF1bHQ6ICgpID0+IHNsb3RzLmRlZmF1bHQ/LigpXG4gICAgfSlcbiAgfVxufSlcbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaCB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IFZJY29uIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cydcblxuaW1wb3J0IHsgdXNlSWNvbnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1pY29ucydcblxuZXhwb3J0IGNvbnN0IFZUb29sYmFyTmF2QnRuID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtdG9vbGJhci1uYXYtYnRuJyxcbiAgZW1pdHM6IFsnY2xpY2snXSxcbiAgc2V0dXAoXywgeyBzbG90cywgZW1pdCB9KSB7XG4gICAgY29uc3QgeyBpY29ucyB9ID0gdXNlSWNvbnMoKVxuXG4gICAgY29uc3Qgb25DbGljayA9ICgpID0+IGVtaXQoJ2NsaWNrJylcblxuICAgIGNvbnN0IGdlbk5hdkJ0biA9ICgpID0+IHtcbiAgICAgIHJldHVybiBoKFZJY29uLCB7XG4gICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgaWNvbjogaWNvbnMuJG1lbnUsXG4gICAgICAgIG9uQ2xpY2ssXG4gICAgICB9KVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBjb250ZW50ID0gc2xvdHMuZGVmYXVsdD8uKCkgfHwgZ2VuTmF2QnRuKClcblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcbiAgICAgICAgY2xhc3M6ICd2LXRvb2xiYXJfX25hdi1idG4nLFxuICAgICAgfSwgY29udGVudClcbiAgICB9XG4gIH0sXG59KVxuIiwiaW1wb3J0IHsgVlRvb2xiYXIgfSBmcm9tICcuL1ZUb29sYmFyJ1xuaW1wb3J0IHsgVlRvb2xiYXJOYXZCdG4gfSBmcm9tICcuL1ZUb29sYmFyTmF2QnRuJ1xuaW1wb3J0IHsgY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5cbmNvbnN0IFZUb29sYmFySXRlbXMgPSBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsKCd2LXRvb2xiYXJfX2l0ZW1zJylcbmNvbnN0IFZUb29sYmFyTG9nbyA9IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwoJ3YtdG9vbGJhcl9fbG9nbycpXG5jb25zdCBWVG9vbGJhckNvbnRlbnQgPSBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsKCd2LXRvb2xiYXJfX2NvbnRlbnQnKVxuXG5leHBvcnQge1xuICBWVG9vbGJhcixcbiAgVlRvb2xiYXJMb2dvLFxuICBWVG9vbGJhckl0ZW1zLFxuICBWVG9vbGJhck5hdkJ0bixcbiAgVlRvb2xiYXJDb250ZW50XG59XG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGgsIHJlZiwgY29tcHV0ZWQsIFZOb2RlIH0gZnJvbSAndnVlJ1xuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZUNvbG9ycywgY29sb3JQcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcbi8vIEhlbHBlcnNcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuZXhwb3J0IGNvbnN0IFZOYXZpZ2F0aW9uID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtbmF2aWdhdGlvbicsXG4gIHByb3BzOiB7XG4gICAgZml4ZWQ6IEJvb2xlYW4sXG4gICAgcmlnaHQ6IEJvb2xlYW4sXG4gICAgbGVmdDogQm9vbGVhbixcbiAgICBvbkhvdmVyOiBCb29sZWFuLFxuICAgIG1pbmlWYXJpYW50OiBCb29sZWFuLFxuICAgIGV4cGFuZDogQm9vbGVhbixcbiAgICBvZmZzZXRUb3A6IHtcbiAgICAgIHR5cGU6IFsgU3RyaW5nLCBOdW1iZXIgXSxcbiAgICAgIGRlZmF1bHQ6IDBcbiAgICB9LFxuICAgIG1pbmlWYXJpYW50V2lkdGg6IHtcbiAgICAgIHR5cGU6IFsgU3RyaW5nLCBOdW1iZXIgXSxcbiAgICAgIGRlZmF1bHQ6IDU2XG4gICAgfSxcbiAgICBtYXhWYXJpYW50V2lkdGg6IHtcbiAgICAgIHR5cGU6IFsgU3RyaW5nLCBOdW1iZXIgXSxcbiAgICAgIGRlZmF1bHQ6IDIzN1xuICAgIH0sXG4gICAgLi4uY29sb3JQcm9wcygnI2ZmZmZmZicpXG4gIH0sXG4gIGVtaXRzOiBbICd1cGRhdGU6ZXhwYW5kJyBdLFxuXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzLCBlbWl0IH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3QgeyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IsIHNldEJhY2tncm91bmRDc3NDb2xvciB9ID0gdXNlQ29sb3JzKClcbiAgICBjb25zdCBpc0hvdmVyZWQgPSByZWY8Ym9vbGVhbj4oZmFsc2UpXG5cbiAgICBjb25zdCBpc0V4cGFuZGVkID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKHByb3BzLm9uSG92ZXIgJiYgaXNIb3ZlcmVkLnZhbHVlKSByZXR1cm4gdHJ1ZVxuICAgICAgaWYgKHByb3BzLmV4cGFuZCkgcmV0dXJuIHRydWVcbiAgICAgIGlmICghcHJvcHMuZXhwYW5kICYmIHByb3BzLm1pbmlWYXJpYW50KSByZXR1cm4gZmFsc2VcbiAgICAgIGlmICghcHJvcHMuZXhwYW5kICYmICFwcm9wcy5taW5pVmFyaWFudCkgcmV0dXJuIGZhbHNlXG4gICAgICByZXR1cm4gIXByb3BzLm1pbmlWYXJpYW50XG4gICAgfSlcblxuICAgIGNvbnN0IGNvbXB1dGVkV2lkdGggPSBjb21wdXRlZDxudW1iZXIgfCBzdHJpbmc+KCgpID0+IHtcbiAgICAgIGlmICghaXNFeHBhbmRlZC52YWx1ZSkgcmV0dXJuIHByb3BzLm1pbmlWYXJpYW50V2lkdGhcbiAgICAgIHJldHVybiBwcm9wcy5tYXhWYXJpYW50V2lkdGhcbiAgICB9KVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtbmF2aWdhdGlvbic6IHRydWUsXG4gICAgICAndi1uYXZpZ2F0aW9uLS1leHBhbmRlZCc6IGlzRXhwYW5kZWQudmFsdWUsXG4gICAgICAndi1uYXZpZ2F0aW9uLS1maXhlZCc6IHByb3BzLmZpeGVkLFxuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKSA6IHt9KVxuICAgIH0pKVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgc3RyaW5nPj4oKCkgPT4gKHtcbiAgICAgIHdpZHRoOiBjb252ZXJ0VG9Vbml0KGNvbXB1dGVkV2lkdGgudmFsdWUpLFxuICAgICAgbWF4SGVpZ2h0OiBgY2FsYygxMDB2aCAtICR7IGNvbnZlcnRUb1VuaXQocHJvcHMub2Zmc2V0VG9wKSB9KWAsXG4gICAgICB0b3A6IHByb3BzLmZpeGVkID8gY29udmVydFRvVW5pdChwcm9wcy5vZmZzZXRUb3ApIDogJycsXG4gICAgICBsZWZ0OiAhcHJvcHMucmlnaHQgJiYgcHJvcHMuZml4ZWQgPyBjb252ZXJ0VG9Vbml0KDApIDogJycsXG4gICAgICByaWdodDogcHJvcHMucmlnaHQgJiYgcHJvcHMuZml4ZWQgPyBjb252ZXJ0VG9Vbml0KDApIDogJycsXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pXG4gICAgfSkpXG5cbiAgICBjb25zdCBnZW5OYXZpZ2F0aW9uQ29udGVudCA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogJ3YtbmF2aWdhdGlvbl9fY29udGVudCdcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gc2xvdHMuZGVmYXVsdD8uKClcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3Qgb25Nb3VzZWVudGVyID0gKCkgPT4ge1xuICAgICAgaWYgKCFwcm9wcy5vbkhvdmVyIHx8IHByb3BzLm1pbmlWYXJpYW50KSByZXR1cm5cbiAgICAgIGlzSG92ZXJlZC52YWx1ZSA9IHRydWVcbiAgICAgIGVtaXQoJ3VwZGF0ZTpleHBhbmQnLCB0cnVlKVxuICAgIH1cblxuICAgIGNvbnN0IG9uTW91c2VsZWF2ZSA9ICgpID0+IHtcbiAgICAgIGlmICghcHJvcHMub25Ib3ZlciB8fCBwcm9wcy5taW5pVmFyaWFudCkgcmV0dXJuXG4gICAgICBpc0hvdmVyZWQudmFsdWUgPSBmYWxzZVxuICAgICAgZW1pdCgndXBkYXRlOmV4cGFuZCcsIGZhbHNlKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiBoKCdhc2lkZScsIHtcbiAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgc3R5bGU6IHN0eWxlcy52YWx1ZSxcbiAgICAgIG9uTW91c2VlbnRlcixcbiAgICAgIG9uTW91c2VsZWF2ZVxuICAgIH0sIGdlbk5hdmlnYXRpb25Db250ZW50KCkpXG4gIH1cbn0pXG4iLCJleHBvcnQgeyBWTmF2aWdhdGlvbiB9IGZyb20gJy4vVk5hdmlnYXRpb24nXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGggfSBmcm9tICd2dWUnXG5cbmV4cG9ydCBjb25zdCBWTWFpbiA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LW1haW4nLFxuICBzZXR1cChfLCB7IHNsb3RzIH0pIHtcbiAgICByZXR1cm4gKCkgPT4gaCgnZGl2Jywge1xuICAgICAgY2xhc3M6ICd2LW1haW4nLFxuICAgIH0sIHtcbiAgICAgIGRlZmF1bHQ6ICgpID0+IHNsb3RzLmRlZmF1bHQ/LigpLFxuICAgIH0pXG4gIH0sXG59KVxuIiwiZXhwb3J0IHsgVk1haW4gfSBmcm9tICcuL1ZNYWluJ1xuIiwiLy8gVnVlIEFQSVxuaW1wb3J0IHsgaCwgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJ1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWVGV4dEZpZWxkIH0gZnJvbSAnLi4vVlRleHRGaWVsZCdcblxuZXhwb3J0IGNvbnN0IFZUZXh0YXJlYSA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LXRleHRhcmVhJyxcblxuICBzZXR1cCgpIHtcbiAgICByZXR1cm4gKCkgPT5cbiAgICAgIGgoVlRleHRGaWVsZCwge1xuICAgICAgICB0YWc6ICd0ZXh0YXJlYScsXG4gICAgICAgIGNsYXNzOiAndi10ZXh0YXJlYScsXG4gICAgICB9KVxuICB9LFxufSlcbiIsImV4cG9ydCAqIGZyb20gJy4vVlRleHRhcmVhJ1xuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5cbmV4cG9ydCBjb25zdCBWU2tlbGV0b24gPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1za2VsZXRvbicsXG4gIHByb3BzOiB7XG4gICAgdGFnOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnZGl2JyxcbiAgICB9LFxuICAgIHdpZHRoOiB7XG4gICAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICB9LFxuICAgIGhlaWdodDoge1xuICAgICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICAgIGRlZmF1bHQ6IDIwLFxuICAgIH0sXG4gICAgcmFkaXVzOiB7XG4gICAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgICAgZGVmYXVsdDogNSxcbiAgICB9LFxuICAgIGxpZ2h0OiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB9LFxuICAgIGR5bmFtaWM6IEJvb2xlYW4sXG4gIH0sXG4gIHNldHVwKHByb3BzKSB7XG4gICAgcmV0dXJuICgpID0+IGgocHJvcHMudGFnLCB7XG4gICAgICBjbGFzczoge1xuICAgICAgICAndi1za2VsZXRvbic6IHRydWUsXG4gICAgICAgICd2LXNrZWxldG9uLS1saWdodCc6IHByb3BzLmxpZ2h0LFxuICAgICAgICAndi1za2VsZXRvbi0tZHluYW1pYyc6IHByb3BzLmR5bmFtaWMsXG4gICAgICB9LFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgd2lkdGg6IHByb3BzLndpZHRoICYmIGNvbnZlcnRUb1VuaXQocHJvcHMud2lkdGgpLFxuICAgICAgICBmbGV4QmFzaXM6IHByb3BzLndpZHRoICYmIGNvbnZlcnRUb1VuaXQocHJvcHMud2lkdGgpIHx8ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiBjb252ZXJ0VG9Vbml0KHByb3BzLmhlaWdodCksXG4gICAgICAgIGJvcmRlclJhZGl1czogY29udmVydFRvVW5pdChwcm9wcy5yYWRpdXMpXG4gICAgICB9LFxuICAgIH0pXG4gIH0sXG59KVxuIiwiZXhwb3J0IHsgVlNrZWxldG9uIH0gZnJvbSAnLi9WU2tlbGV0b24nXG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyBoLCBjb21wdXRlZCwgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJ1xuXG4vLyBFZmZlY3RzXG5pbXBvcnQgeyBjb2xvclByb3BzLCB1c2VDb2xvcnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG5cbi8vIEhlbHBlcnNcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWUmVzaXplIH0gZnJvbSAnLi4vVlJlc2l6ZSdcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuXG5leHBvcnQgY29uc3QgVkRhdGFUYWJsZUNlbGwgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1kYXRhLXRhYmxlLWNlbGwnLFxuICBwcm9wczoge1xuICAgIGRhcms6IEJvb2xlYW4sXG4gICAgcmVzaXplYWJsZTogQm9vbGVhbixcbiAgICBhbGlnbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3N0YXJ0JyxcbiAgICB9LFxuICAgIHdpZHRoOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogNzUsXG4gICAgfSxcbiAgICByZXNpemVyQ29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdwcmltYXJ5JyxcbiAgICB9LFxuICAgIGNvbnRlbnRDb2xvcjogU3RyaW5nLFxuICAgIC4uLmNvbG9yUHJvcHMoKSxcbiAgfSBhcyBhbnksXG5cbiAgZW1pdHM6IFsncmVzaXplJ10sXG5cbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMsIGVtaXQgfSk6ICgpID0+IFZOb2RlIHtcbiAgICBjb25zdCB7XG4gICAgICBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IsXG4gICAgICBzZXRUZXh0Q3NzQ29sb3IsXG4gICAgICBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IsXG4gICAgICBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IsXG4gICAgfSA9IHVzZUNvbG9ycygpXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1kYXRhLXRhYmxlX19jZWxsJzogdHJ1ZSxcbiAgICAgIC4uLihwcm9wcy5jb250ZW50Q29sb3IgPyBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IocHJvcHMuY29udGVudENvbG9yKSA6IHt9KSxcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgd2lkdGg6IGNvbnZlcnRUb1VuaXQoK3Byb3BzLndpZHRoKSxcbiAgICAgIC4uLihwcm9wcy5jb250ZW50Q29sb3IgPyBzZXRUZXh0Q3NzQ29sb3IocHJvcHMuY29udGVudENvbG9yKSA6IHt9KSxcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBmdW5jdGlvbiBnZW5SZXNpemUoKTogVk5vZGUge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICByaWdodDogdHJ1ZSxcbiAgICAgICAgZW1pdDogdHJ1ZSxcbiAgICAgICAgY29sb3I6IHByb3BzLnJlc2l6ZXJDb2xvcixcbiAgICAgICAgb25SZXNpemU6ICgkc2l6ZSkgPT4gZW1pdCgncmVzaXplJywgJHNpemUpLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaChWUmVzaXplLCBwcm9wc0RhdGEpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuQ2VsbENvbnRlbnQoKTogVk5vZGUge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LWRhdGEtdGFibGVfX2NlbGwtY29udGVudCc6IHRydWUsXG4gICAgICAgICAgW2B0ZXh0LWFsaWduLS0keyBwcm9wcy5hbGlnbiB9YF06ICEhcHJvcHMuYWxpZ24sXG4gICAgICAgIH0sXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIHNsb3RzLmRlZmF1bHQgJiYgc2xvdHMuZGVmYXVsdCgpKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgICBzdHlsZTogc3R5bGVzLnZhbHVlLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBbXG4gICAgICAgIGdlbkNlbGxDb250ZW50KCksXG4gICAgICAgIHByb3BzLnJlc2l6ZWFibGUgJiYgZ2VuUmVzaXplKCksXG4gICAgICBdKVxuICAgIH1cbiAgfSxcbn0pXG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyBoLCBjb21wdXRlZCwgd2l0aERpcmVjdGl2ZXMsIGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSdcblxuLy8gRWZmZWN0c1xuaW1wb3J0IHsgdXNlQ29sb3JzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtY29sb3JzJ1xuaW1wb3J0IHsgdXNlSWNvbnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1pY29ucydcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkljb24gfSBmcm9tICcuLi9WSWNvbidcbmltcG9ydCB7IFZDaGVja2JveCB9IGZyb20gJy4uL1ZDaGVja2JveCdcbmltcG9ydCB7IFZEYXRhVGFibGVDZWxsIH0gZnJvbSAnLi9WRGF0YVRhYmxlQ2VsbCdcbmltcG9ydCB7IFZUZXh0RmllbGQgfSBmcm9tICcuLi9WVGV4dEZpZWxkJ1xuXG4vLyBEaXJlY3RpdmVzXG5pbXBvcnQgeyB2U2hvdyB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IGNsaWNrT3V0c2lkZSB9IGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMvdi1jbGljay1vdXRzaWRlJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyBEYXRhQ29sdW1uIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnXG5cbmV4cG9ydCBjb25zdCBWRGF0YVRhYmxlSGVhZGVyID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtZGF0YS10YWJsZS1oZWFkZXInLFxuXG4gIHByb3BzOiB7XG4gICAgc2hvd1NlcXVlbmNlOiBCb29sZWFuLFxuICAgIHNob3dDaGVja2JveDogQm9vbGVhbixcbiAgICBjb2xzOiBBcnJheSxcbiAgICBjb2xXaWR0aDoge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IDEyNSxcbiAgICB9LFxuICAgIGFsaWduOiBTdHJpbmcsXG4gICAgb3B0aW9uczogT2JqZWN0LFxuICB9IGFzIGFueSxcblxuICBlbWl0czogWydzb3J0JywgJ2ZpbHRlcicsICdzZWxlY3QtYWxsJywgJ3VwZGF0ZTpjb2xzJ10sXG5cbiAgc2V0dXAocHJvcHMsIHsgZW1pdCwgc2xvdHMgfSkge1xuICAgIGNvbnN0IHsgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yLCBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IgfSA9IHVzZUNvbG9ycygpXG4gICAgY29uc3QgeyBpY29ucywgIH0gPSB1c2VJY29ucygpXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1kYXRhLXRhYmxlX19oZWFkZXInOiB0cnVlLFxuICAgICAgLi4uKHByb3BzLm9wdGlvbnMuY29sb3JcbiAgICAgICAgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMub3B0aW9ucy5jb2xvcilcbiAgICAgICAgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgLi4uKHByb3BzLm9wdGlvbnMuY29sb3JcbiAgICAgICAgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMub3B0aW9ucy5jb2xvcilcbiAgICAgICAgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBjb21wdXRlZENvbnRlbnRDb2xvciA9IGNvbXB1dGVkPHN0cmluZz4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLm9wdGlvbnMuZGFya1xuICAgICAgICA/IHByb3BzLm9wdGlvbnM/LmNvbnRlbnRDb2xvciB8fCAnd2hpdGUnXG4gICAgICAgIDogcHJvcHMub3B0aW9ucz8uY29udGVudENvbG9yXG4gICAgfSlcblxuICAgIGNvbnN0IGNvbHMgPSBjb21wdXRlZDxEYXRhQ29sdW1uW10+KCgpID0+IFsuLi5wcm9wcy5jb2xzXSlcblxuICAgIGNvbnN0IG9uU29ydCA9IChpdGVtKSA9PiB7XG4gICAgICBlbWl0KCdzb3J0JywgaXRlbSlcbiAgICB9XG5cbiAgICBjb25zdCBvbklucHV0ID0gKCR2YWx1ZSwgaXRlbSkgPT4ge1xuICAgICAgaXRlbS5maWx0ZXJlZCA9ICEhJHZhbHVlXG4gICAgICBlbWl0KCdmaWx0ZXInLCB7IHZhbHVlOiAkdmFsdWUsIGNvbDogaXRlbSB9KVxuICAgIH1cblxuICAgIGNvbnN0IHNob3dGaWx0ZXIgPSAoaXRlbSkgPT4ge1xuICAgICAgaWYgKGl0ZW0uc2hvd0ZpbHRlcikgcmV0dXJuXG4gICAgICBpdGVtLnNob3dGaWx0ZXIgPSB0cnVlXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuU29ydEJ1dHRvbiA9IChpdGVtKSA9PiB7XG4gICAgICBjb25zdCBjbGFzc2VzID0ge1xuICAgICAgICAndi1kYXRhLXRhYmxlLWNvbF9fYWN0aW9ucy1zb3J0JzogdHJ1ZSxcbiAgICAgICAgJ3YtZGF0YS10YWJsZS1jb2xfX2FjdGlvbnMtc29ydC0tYWN0aXZlJzogaXRlbS5zb3J0ZWQsXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICBjbGFzczogY2xhc3NlcyxcbiAgICAgICAgaWNvbjogaWNvbnMuJGFycm93VXAsXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IG9uU29ydChpdGVtKSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoVkljb24sIHByb3BzRGF0YSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5GaWx0ZXJCdXR0b24gPSAoaXRlbSkgPT4ge1xuICAgICAgY29uc3QgY2xhc3NlcyA9IHtcbiAgICAgICAgJ3YtZGF0YS10YWJsZS1jb2xfX2FjdGlvbnMtZmlsdGVyJzogdHJ1ZSxcbiAgICAgICAgJ3YtZGF0YS10YWJsZS1jb2xfX2FjdGlvbnMtZmlsdGVyLS1hY3RpdmUnOiBpdGVtLmZpbHRlcmVkLFxuICAgICAgfVxuXG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMsXG4gICAgICAgIGljb246IGljb25zLiRmaWx0ZXIsXG4gICAgICAgIGNvbG9yOiAhaXRlbS5jZWxsQ2xhc3MgPyBjb21wdXRlZENvbnRlbnRDb2xvci52YWx1ZSA6ICcnLFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiBzaG93RmlsdGVyKGl0ZW0pLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaChWSWNvbiwgcHJvcHNEYXRhKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkhlYWRlckFjdGlvbnMgPSAoaXRlbSkgPT4ge1xuICAgICAgcmV0dXJuIGgoJ3NwYW4nLCB7IGNsYXNzOiAndi1kYXRhLXRhYmxlLWNvbF9fYWN0aW9ucycgfSwgW1xuICAgICAgICBpdGVtLnNvcnRhYmxlICYmIGdlblNvcnRCdXR0b24oaXRlbSksXG4gICAgICAgIGl0ZW0uZmlsdGVyYWJsZSAmJiBnZW5GaWx0ZXJCdXR0b24oaXRlbSksXG4gICAgICBdKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkZpbHRlcklucHV0ID0gKGl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgbGFiZWw6ICdzZWFyY2gnLFxuICAgICAgICBkYXJrOiBwcm9wcy5vcHRpb25zLmRhcmssXG4gICAgICAgIGNvbG9yOiAhaXRlbS5jZWxsQ2xhc3MgPyBjb21wdXRlZENvbnRlbnRDb2xvci52YWx1ZSA6ICcnLFxuICAgICAgICBwcmVwZW5kSWNvbjogaWNvbnMuJHNlYXJjaCxcbiAgICAgICAgY2xlYXJhYmxlOiB0cnVlLFxuICAgICAgICBvbklucHV0OiAoJHZhbHVlKSA9PiBvbklucHV0KCR2YWx1ZSwgaXRlbSksXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKFZUZXh0RmllbGQsIHByb3BzRGF0YSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5GaWx0ZXJXcmFwcGVyID0gKGNvbCkgPT4ge1xuICAgICAgY29uc3QgY29sb3IgPSBwcm9wcy5vcHRpb25zLmRhcmtcbiAgICAgICAgPyBwcm9wcy5vcHRpb25zPy5jb2xvciB8fCAnZ3JleSBkYXJrZW4tMydcbiAgICAgICAgOiBwcm9wcy5vcHRpb25zPy5jb2xvciB8fCAnd2hpdGUnXG5cbiAgICAgIGNvbnN0IHNsb3ROYW1lID0gYCR7IGNvbC5rZXkgfS1maWx0ZXJgXG5cbiAgICAgIGNvbnN0IGZpbHRlclNsb3QgPSBzbG90c1tzbG90TmFtZV0gJiYgc2xvdHNbc2xvdE5hbWVdISh7XG4gICAgICAgIGZpbHRlcjogKGV2ZW50KSA9PiBvbklucHV0KGV2ZW50LCBjb2wpLFxuICAgICAgfSlcblxuICAgICAgY29uc3QgZGlyZWN0aXZlID0gY29sLnNob3dGaWx0ZXJcbiAgICAgICAgPyB7XG4gICAgICAgICAgaGFuZGxlcjogKCkgPT4gc2V0VGltZW91dCgoKSA9PiAoY29sLnNob3dGaWx0ZXIgPSBmYWxzZSkpLFxuICAgICAgICAgIGNsb3NlQ29uZGl0aW9uYWw6IGZhbHNlLFxuICAgICAgICB9XG4gICAgICAgIDogdW5kZWZpbmVkXG5cbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1kYXRhLXRhYmxlLWNvbF9fZmlsdGVyJzogIWZpbHRlclNsb3QsXG4gICAgICAgICAgJ3YtZGF0YS10YWJsZS1jb2xfX2N1c3RvbS1maWx0ZXInOiAhIWZpbHRlclNsb3QsXG4gICAgICAgICAgJ2VsZXZhdGlvbi01JzogdHJ1ZSxcbiAgICAgICAgICBbY29sLmNlbGxDbGFzc106ICEhY29sLmNlbGxDbGFzcyxcbiAgICAgICAgICAuLi4oY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IoY29sb3IpIDoge30pLFxuICAgICAgICB9LFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIC4uLihjb2xvciA/IHNldEJhY2tncm91bmRDc3NDb2xvcihjb2xvcikgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIGNvbC5maWx0ZXJhYmxlICYmXG4gICAgICAgIHdpdGhEaXJlY3RpdmVzKGgoJ2RpdicsIHByb3BzRGF0YSwgZmlsdGVyU2xvdCB8fCBnZW5GaWx0ZXJJbnB1dChjb2wpKSwgW1xuICAgICAgICAgIFtjbGlja091dHNpZGUsIGRpcmVjdGl2ZV0sXG4gICAgICAgICAgW3ZTaG93LCBjb2wuc2hvd0ZpbHRlcl0sXG4gICAgICAgIF0pXG4gICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuSGVhZGVyVGl0bGUgPSAoY29sKTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2RpdicsIHsgY2xhc3M6ICd2LWRhdGEtdGFibGUtY29sX190aXRsZScgfSwgY29sLnRpdGxlKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbk51bWJlckNlbGwgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgJ3YtZGF0YS10YWJsZS1jb2xfX251bWJlcic6IHRydWUsXG4gICAgICAgICAgW3Byb3BzLmNlbGxDbGFzc106ICEhcHJvcHMuY2VsbENsYXNzLFxuICAgICAgICB9LFxuICAgICAgICBjb250ZW50Q29sb3I6IGNvbXB1dGVkQ29udGVudENvbG9yLnZhbHVlLFxuICAgICAgICBjb2xvcjogcHJvcHMub3B0aW9ucy5jb2xvcixcbiAgICAgICAgd2lkdGg6IDUwLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaChWRGF0YVRhYmxlQ2VsbCwgcHJvcHNEYXRhLCB7IGRlZmF1bHQ6ICgpID0+ICfihJYnIH0pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQ2hlY2tib3hDZWxsID0gKCkgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgJ3YtZGF0YS10YWJsZS1jb2xfX2NoZWNrYm94JzogdHJ1ZSxcbiAgICAgICAgICBbcHJvcHMuY2VsbENsYXNzXTogISFwcm9wcy5jZWxsQ2xhc3MsXG4gICAgICAgIH0sXG4gICAgICAgIGRhcms6IHByb3BzLm9wdGlvbnMuZGFyayxcbiAgICAgICAgY29udGVudENvbG9yOiBjb21wdXRlZENvbnRlbnRDb2xvci52YWx1ZSxcbiAgICAgICAgY29sb3I6IHByb3BzLm9wdGlvbnMuY29sb3IsXG4gICAgICAgIHdpZHRoOiA1MCxcbiAgICAgIH1cblxuICAgICAgY29uc3QgY29udGVudCA9IHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT5cbiAgICAgICAgICBoKFZDaGVja2JveCwge1xuICAgICAgICAgICAgY29sb3I6IGNvbXB1dGVkQ29udGVudENvbG9yLnZhbHVlLFxuICAgICAgICAgICAgb25DaGVja2VkOiAoZSkgPT4gZW1pdCgnc2VsZWN0LWFsbCcsIGUpLFxuICAgICAgICAgIH0pLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaChWRGF0YVRhYmxlQ2VsbCwgcHJvcHNEYXRhLCBjb250ZW50KVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkhlYWRlckNlbGwgPSAoY29sKSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGRhcms6IHByb3BzLm9wdGlvbnMuZGFyayxcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1kYXRhLXRhYmxlLWNvbCc6IHRydWUsXG4gICAgICAgICAgJ3YtZGF0YS10YWJsZS1jb2wtLXNvcnRlZCc6IGNvbC5zb3J0ZWQsXG4gICAgICAgICAgW2NvbC5jZWxsQ2xhc3NdOiAhIWNvbC5jZWxsQ2xhc3MsXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRlbnRDb2xvcjogIWNvbC5jZWxsQ2xhc3MgPyBjb21wdXRlZENvbnRlbnRDb2xvci52YWx1ZSA6ICcnLFxuICAgICAgICBjb2xvcjogIWNvbC5jZWxsQ2xhc3MgPyBwcm9wcy5vcHRpb25zLmNvbG9yIDogJycsXG4gICAgICAgIHdpZHRoOiBjb2wud2lkdGgsXG4gICAgICAgIHJlc2l6ZWFibGU6IGNvbC5yZXNpemVhYmxlLFxuICAgICAgICByZXNpemVyQ29sb3I6IHByb3BzLm9wdGlvbnM/LnJlc2l6ZXJDb2xvcixcbiAgICAgICAgYWxpZ246IGNvbC5hbGlnbiB8fCBwcm9wcy5hbGlnbixcbiAgICAgICAgb25SZXNpemU6ICgkc2l6ZSkgPT4gKGNvbC53aWR0aCA9ICRzaXplKSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoVkRhdGFUYWJsZUNlbGwsIHByb3BzRGF0YSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbXG4gICAgICAgICAgZ2VuSGVhZGVyVGl0bGUoY29sKSxcbiAgICAgICAgICBnZW5IZWFkZXJBY3Rpb25zKGNvbCksXG4gICAgICAgICAgZ2VuRmlsdGVyV3JhcHBlcihjb2wpLFxuICAgICAgICBdLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5IZWFkZXJDaGlsZHJlbiA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGNoaWxkcmVuOiBWTm9kZVtdID0gW11cbiAgICAgIGNvbnN0IGhlYWRlclNsb3QgPSBzbG90cy5oZWFkZXIgJiYgc2xvdHMuaGVhZGVyKHByb3BzKVxuXG4gICAgICBwcm9wcy5zaG93U2VxdWVuY2UgJiYgY2hpbGRyZW4ucHVzaChnZW5OdW1iZXJDZWxsKCkpXG4gICAgICBwcm9wcy5zaG93Q2hlY2tib3ggJiYgY2hpbGRyZW4ucHVzaChnZW5DaGVja2JveENlbGwoKSlcblxuICAgICAgY29scy52YWx1ZSEuZm9yRWFjaCgoY29sOiBEYXRhQ29sdW1uKSA9PiB7XG4gICAgICAgIGNvbC53aWR0aCA9IGNvbC53aWR0aCB8fCBwcm9wcy5jb2xXaWR0aFxuXG4gICAgICAgIGlmICghY29sLmhhc093blByb3BlcnR5KCdzaG93JykpIHtcbiAgICAgICAgICBjb2wuc2hvdyA9ICFjb2wuc2hvd1xuICAgICAgICB9XG5cbiAgICAgICAgIWhlYWRlclNsb3QhWzBdLmNoaWxkcmVuICYmXG4gICAgICAgIGNvbC5zaG93ICYmXG4gICAgICAgIGNoaWxkcmVuLnB1c2goZ2VuSGVhZGVyQ2VsbChjb2wpKVxuICAgICAgfSlcblxuICAgICAgaGVhZGVyU2xvdCFbMF0uY2hpbGRyZW4gJiYgY2hpbGRyZW4ucHVzaChoZWFkZXJTbG90IGFzIGFueSlcblxuICAgICAgcmV0dXJuIGNoaWxkcmVuXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgIHN0eWxlOiBzdHlsZXMudmFsdWUsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIGdlbkhlYWRlckNoaWxkcmVuKCkpXG4gICAgfVxuICB9LFxufSlcbiIsIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGgsIHJlZiwgd2F0Y2gsIGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnXG5cbi8vIEVmZmVjdHNcbmltcG9ydCB7IGNvbG9yUHJvcHMsIHVzZUNvbG9ycyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkRhdGFUYWJsZUNlbGwgfSBmcm9tICcuL1ZEYXRhVGFibGVDZWxsJ1xuaW1wb3J0IHsgVkNoZWNrYm94IH0gZnJvbSAnLi4vVkNoZWNrYm94J1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tICd2dWUnXG5cbmV4cG9ydCBjb25zdCBWRGF0YVRhYmxlQm9keSA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWRhdGEtdGFibGUtYm9keScsXG5cbiAgcHJvcHM6IHtcbiAgICBjb2xzOiBBcnJheSxcbiAgICByb3dzOiBBcnJheSxcbiAgICBkYXJrOiBCb29sZWFuLFxuICAgIHNob3dTZXF1ZW5jZTogQm9vbGVhbixcbiAgICBzaG93Q2hlY2tib3g6IEJvb2xlYW4sXG4gICAgY2hlY2tBbGxSb3dzOiBCb29sZWFuLFxuICAgIGFsaWduOiBTdHJpbmcsXG4gICAgY29sV2lkdGg6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiAxMjUsXG4gICAgfSxcbiAgICBwYWdlOiBOdW1iZXIsXG4gICAgcm93c09uUGFnZTogTnVtYmVyLFxuICAgIC4uLmNvbG9yUHJvcHMoKSxcbiAgfSBhcyBhbnksXG5cbiAgZW1pdHM6IFsnc2VsZWN0JywgJ2NsaWNrOnJvdycsICdkYmxjbGljazpyb3cnLCAnY29udGV4dG1lbnU6cm93J10sXG5cbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMsIGVtaXQgfSk6ICgpID0+IFZOb2RlIHtcbiAgICBjb25zdCBjaGVja2VkUm93cyA9IHJlZihbXSlcblxuICAgIGNvbnN0IHsgc2V0QmFja2dyb3VuZENzc0NvbG9yLCBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IgfSA9IHVzZUNvbG9ycygpXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1kYXRhLXRhYmxlX19ib2R5JzogdHJ1ZSxcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0QmFja2dyb3VuZENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IHJvd3NPblRhYmxlID0gY29tcHV0ZWQ8YW55W10+KCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5yb3dzPy5zbGljZShcbiAgICAgICAgKHByb3BzLnBhZ2UgLSAxKSAqIHByb3BzLnJvd3NPblBhZ2UsXG4gICAgICAgIHByb3BzLnBhZ2UgKiBwcm9wcy5yb3dzT25QYWdlLFxuICAgICAgKVxuICAgIH0pXG5cbiAgICB3YXRjaChcbiAgICAgICgpID0+IHByb3BzLmNoZWNrQWxsUm93cyxcbiAgICAgICh0bykgPT4ge1xuICAgICAgICBpZiAodG8pIG9uU2VsZWN0Um93cyhwcm9wcy5yb3dzKVxuICAgICAgICBlbHNlIG9uU2VsZWN0Um93cyhbXSlcbiAgICAgIH0sXG4gICAgKVxuXG4gICAgZnVuY3Rpb24gb25TZWxlY3RSb3dzKHJvd3MpIHtcbiAgICAgIGNoZWNrZWRSb3dzLnZhbHVlID0gcm93c1xuICAgICAgZW1pdCgnc2VsZWN0JywgY2hlY2tlZFJvd3MudmFsdWUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuTnVtYmVyQ2VsbChjb3VudCk6IFZOb2RlIHtcbiAgICAgIHJldHVybiBoKFxuICAgICAgICBWRGF0YVRhYmxlQ2VsbCxcbiAgICAgICAge1xuICAgICAgICAgIHdpZHRoOiA1MCxcbiAgICAgICAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgZGFyazogcHJvcHMuZGFyayxcbiAgICAgICAgICBjb2xvcjogcHJvcHMuY29sb3IsXG4gICAgICAgICAgY2xhc3M6ICd2LWRhdGEtdGFibGVfX3Jvdy1udW1iZXInLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gY291bnQgKyAxLFxuICAgICAgICB9LFxuICAgICAgKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbkNoZWNrYm94Q2VsbChyb3cpOiBWTm9kZSB7XG4gICAgICByZXR1cm4gaChcbiAgICAgICAgVkRhdGFUYWJsZUNlbGwsXG4gICAgICAgIHtcbiAgICAgICAgICB3aWR0aDogNTAsXG4gICAgICAgICAgYWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgIGRhcms6IHByb3BzLmRhcmssXG4gICAgICAgICAgY29sb3I6IHByb3BzLmNvbG9yLFxuICAgICAgICAgIGNsYXNzOiAndi1kYXRhLXRhYmxlX19yb3ctY2hlY2tib3gnLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT5cbiAgICAgICAgICAgIGgoVkNoZWNrYm94LCB7XG4gICAgICAgICAgICAgIG1vZGVsVmFsdWU6IGNoZWNrZWRSb3dzLnZhbHVlLFxuICAgICAgICAgICAgICBjb2xvcjogcHJvcHMuZGFyayA/ICd3aGl0ZScgOiAnJyxcbiAgICAgICAgICAgICAgdmFsdWU6IHJvdyxcbiAgICAgICAgICAgICAgb25DaGVja2VkOiBvblNlbGVjdFJvd3MsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSxcbiAgICAgIClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5Sb3dDZWxsKGNvbCwgcm93KTogVk5vZGUge1xuICAgICAgY29uc3QgeyBmb3JtYXQgfSA9IGNvbFxuICAgICAgY29uc3Qgc2xvdENvbnRlbnQgPVxuICAgICAgICBzbG90c1tjb2wua2V5XSAmJlxuICAgICAgICBzbG90c1tjb2wua2V5XSEoe1xuICAgICAgICAgIHJvdyxcbiAgICAgICAgICBmb3JtYXQsXG4gICAgICAgIH0pXG5cbiAgICAgIHJldHVybiBoKFxuICAgICAgICBWRGF0YVRhYmxlQ2VsbCxcbiAgICAgICAge1xuICAgICAgICAgIHdpZHRoOiBjb2wud2lkdGgsXG4gICAgICAgICAgYWxpZ246IGNvbC5hbGlnbiB8fCBwcm9wcy5hbGlnbixcbiAgICAgICAgICBkYXJrOiBwcm9wcy5kYXJrLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT5cbiAgICAgICAgICAgIHNsb3RDb250ZW50XG4gICAgICAgICAgICAgID8gc2xvdENvbnRlbnRcbiAgICAgICAgICAgICAgOiBmb3JtYXRcbiAgICAgICAgICAgICAgPyBmb3JtYXQocm93KVxuICAgICAgICAgICAgICA6IFN0cmluZyhyb3dbY29sLmtleV0pLFxuICAgICAgICB9LFxuICAgICAgKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlblRhYmxlUm93KHJvdywgcm93Q291bnQ6IG51bWJlcik6IFZOb2RlIHtcbiAgICAgIGNvbnN0IHJvd0NlbGxzOiBWTm9kZVtdID0gW11cblxuICAgICAgcHJvcHMuc2hvd1NlcXVlbmNlICYmIHJvd0NlbGxzLnB1c2goZ2VuTnVtYmVyQ2VsbChyb3dDb3VudCkpXG4gICAgICBwcm9wcy5zaG93Q2hlY2tib3ggJiYgcm93Q2VsbHMucHVzaChnZW5DaGVja2JveENlbGwocm93KSlcblxuICAgICAgcHJvcHMuY29scy5mb3JFYWNoKChjb2wpID0+IHtcbiAgICAgICAgY29sLnNob3cgJiYgcm93Q2VsbHMucHVzaChnZW5Sb3dDZWxsKGNvbCwgcm93KSlcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiBoKFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzOiB7ICd2LWRhdGEtdGFibGVfX3Jvdyc6IHRydWUgfSxcbiAgICAgICAgICBvbkNsaWNrOiAoKSA9PiBlbWl0KCdjbGljazpyb3cnLCByb3cpLFxuICAgICAgICAgIG9uRGJsY2xpY2s6ICgpID0+IGVtaXQoJ2RibGNsaWNrOnJvdycsIHJvdyksXG4gICAgICAgICAgb25Db250ZXh0bWVudTogKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgICAgZW1pdCgnY29udGV4dG1lbnU6cm93Jywgcm93KVxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHJvd0NlbGxzLFxuICAgICAgKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlblRhYmxlUm93cygpOiBWTm9kZVtdIHtcbiAgICAgIGNvbnN0IHRhYmxlUm93czogVk5vZGVbXSA9IFtdXG4gICAgICBjb25zdCByb3dzTGVuZ3RoID0gcm93c09uVGFibGUudmFsdWU/Lmxlbmd0aFxuICAgICAgY29uc3QgY291bnQgPSAocHJvcHMucGFnZSAtIDEpICogcHJvcHMucm93c09uUGFnZVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd3NMZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB0YWJsZVJvd3MucHVzaChnZW5UYWJsZVJvdyhyb3dzT25UYWJsZS52YWx1ZVtpXSwgY291bnQgKyBpKSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRhYmxlUm93c1xuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiBoKCdkaXYnLCB7XG4gICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgIHN0eWxlOiBzdHlsZXMudmFsdWUsXG4gICAgfSwgZ2VuVGFibGVSb3dzKCkpXG4gIH0sXG59KVxuIiwiLy8gVnVlIEFQSVxuaW1wb3J0IHsgd2F0Y2gsIGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQsIGgsIHJlZiwgUHJvcFR5cGUgfSBmcm9tICd2dWUnXG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZJY29uIH0gZnJvbSAnLi4vVkljb24nXG5pbXBvcnQgeyBWQnV0dG9uIH0gZnJvbSAnLi4vVkJ1dHRvbidcbmltcG9ydCB7IFZNZW51IH0gZnJvbSAnLi4vVk1lbnUnXG5cbi8vIEVmZmVjdHNcbmltcG9ydCB7IHVzZUNvbG9ycyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcblxuaW1wb3J0IHsgdXNlSWNvbnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1pY29ucydcbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvYmFzZSdcbmltcG9ydCB7IElEYXRhVGFibGVGb290ZXJPcHRpb25zIH0gZnJvbSAnLi90eXBlcydcblxuZXhwb3J0IGNvbnN0IFZEYXRhVGFibGVGb290ZXIgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1kYXRhLXRhYmxlLWZvb3RlcicsXG4gIHByb3BzOiB7XG4gICAgcGFnZXM6IE51bWJlcixcbiAgICBwYWdlOiBOdW1iZXIsXG4gICAgZmlyc3RPblBhZ2U6IE51bWJlcixcbiAgICBsYXN0T25QYWdlOiBOdW1iZXIsXG4gICAgcGFnZUNvcnJlY3Rpb246IE51bWJlcixcbiAgICByb3dzTGVuZ3RoOiBOdW1iZXIsXG4gICAgcm93c09uUGFnZTogTnVtYmVyLFxuICAgIG9wdGlvbnM6IE9iamVjdCBhcyBQcm9wVHlwZTxJRGF0YVRhYmxlRm9vdGVyT3B0aW9ucz4sXG4gIH0gYXMgYW55LFxuXG4gIGVtaXRzOiBbXG4gICAgJ2xhc3QtcGFnZScsXG4gICAgJ2NvcnJlY3QtcGFnZScsXG4gICAgJ3NlbGVjdC1yb3dzLWNvdW50JyxcbiAgICAnbmV4dC1wYWdlJyxcbiAgICAncHJldi1wYWdlJyxcbiAgXSxcblxuICBzZXR1cChwcm9wcywgeyBlbWl0LCBzbG90cyB9KTogKCkgPT4gVk5vZGUge1xuICAgIGNvbnN0IHtcbiAgICAgIHNldEJhY2tncm91bmRDc3NDb2xvcixcbiAgICAgIHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcixcbiAgICAgIHNldFRleHRDbGFzc05hbWVDb2xvcixcbiAgICAgIHNldFRleHRDc3NDb2xvcixcbiAgICB9ID0gdXNlQ29sb3JzKClcbiAgICBjb25zdCB7IGljb25zIH0gPSB1c2VJY29ucygpXG5cbiAgICBjb25zdCBhY3RpdmF0b3IgPSByZWY8TWF5YmU8SFRNTEVsZW1lbnQ+PihudWxsKVxuXG4gICAgY29uc3QgcGFnaW5hdGlvbkRpc3BsYXlUZXh0ID0gY29tcHV0ZWQ8c3RyaW5nPigoKSA9PiB7XG4gICAgICByZXR1cm4gYCR7IHByb3BzLmZpcnN0T25QYWdlIH0gLSAkeyBwcm9wcy5sYXN0T25QYWdlIH1cbiAgICAgICAgb2YgJHsgcHJvcHMucm93c0xlbmd0aCB9YFxuICAgIH0pXG5cbiAgICBjb25zdCBpc0xhc3RQYWdlID0gY29tcHV0ZWQ8Ym9vbGVhbj4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLnBhZ2UgPj0gcHJvcHMucGFnZXNcbiAgICB9KVxuXG4gICAgd2F0Y2goXG4gICAgICAoKSA9PiBpc0xhc3RQYWdlLnZhbHVlLFxuICAgICAgKHRvKSA9PiB0byAmJiBlbWl0KCdsYXN0LXBhZ2UnKSxcbiAgICApXG5cbiAgICBmdW5jdGlvbiBjaGFuZ2VUYWJsZVJvd3NQYWdlKGlzTmV4dCkge1xuICAgICAgaWYgKHByb3BzLnBhZ2UgPT09IHByb3BzLnBhZ2VzICYmIGlzTmV4dCkgcmV0dXJuXG5cbiAgICAgIGNvbnN0IGV2ZW50ID0gaXNOZXh0ID8gJ25leHQtcGFnZScgOiAncHJldi1wYWdlJ1xuICAgICAgZW1pdChldmVudCwgaXNOZXh0ID8gMSA6IC0xKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlblBhZ2luYXRpb25CdXR0b24oaXNOZXh0ID0gZmFsc2UpOiBWTm9kZSB7XG4gICAgICBjb25zdCBidG5Db2xvciA9IHByb3BzLm9wdGlvbnM/LnBhZ2luYXRpb24/LmJ1dHRvbnNDb2xvciB8fCAncHJpbWFyeSdcbiAgICAgIGNvbnN0IGNvbnRlbnRDb2xvciA9IHByb3BzLm9wdGlvbnMuY29udGVudENvbG9yIHx8ICd3aGl0ZSdcblxuICAgICAgY29uc3QgZGlzYWJsZUlmID1cbiAgICAgICAgKGlzTmV4dCAmJiBwcm9wcy5sYXN0T25QYWdlID49IHByb3BzLnJvd3NMZW5ndGgpIHx8XG4gICAgICAgICghaXNOZXh0ICYmIHByb3BzLmZpcnN0T25QYWdlID09PSAxKVxuXG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIHdpZHRoOiA0MixcbiAgICAgICAgY29sb3I6IGJ0bkNvbG9yLFxuICAgICAgICBlbGV2YXRpb246IDMsXG4gICAgICAgIGRpc2FibGVkOiBkaXNhYmxlSWYsXG4gICAgICAgIHRleHQ6IGRpc2FibGVJZixcbiAgICAgICAgb25DbGljazogKCkgPT4gY2hhbmdlVGFibGVSb3dzUGFnZShpc05leHQpLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaChWQnV0dG9uLCBwcm9wc0RhdGEsIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT5cbiAgICAgICAgICBoKFZJY29uLCB7XG4gICAgICAgICAgICBpY29uOiBpc05leHQgPyBpY29ucy4kYXJyb3dSaWdodCA6IGljb25zLiRhcnJvd0xlZnQsXG4gICAgICAgICAgICBjb2xvcjogZGlzYWJsZUlmID8gJ2dyZXkgbGlnaHRlbi0xJyA6IGNvbnRlbnRDb2xvcixcbiAgICAgICAgICB9KSxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuUGFnaW5hdGlvblBhZ2VEaXNwbGF5KCk6IFZOb2RlIHtcbiAgICAgIGNvbnN0IGRpc3BsYXlDb2xvciA9IHByb3BzLm9wdGlvbnM/LnBhZ2luYXRpb24/LmRpc3BsYXlDb2xvciB8fCAncHJpbWFyeSdcblxuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICB3aWR0aDogNDIsXG4gICAgICAgIHN0eWxlOiB7IG1hcmdpbjogJzAgMTBweCcgfSxcbiAgICAgICAgY29sb3I6IGRpc3BsYXlDb2xvcixcbiAgICAgICAgZWxldmF0aW9uOiAzLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaChWQnV0dG9uLCBwcm9wc0RhdGEsIHsgZGVmYXVsdDogKCkgPT4gcHJvcHMucGFnZSB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlblJvd3NDb3VudFNlbGVjdExpc3QgPSAoKSA9PiB7XG4gICAgICBjb25zdCBvcHRpb25zID0gcHJvcHMub3B0aW9ucy5jb3VudHM/LnJvd3NQZXJQYWdlT3B0aW9ucyB8fCBbNSwgMTAsIDE1LCAyMF1cbiAgICAgIGNvbnN0IGNvbG9yID0gcHJvcHMub3B0aW9ucz8uY291bnRzPy5kaXNwbGF5Q29sb3IgfHwgJ3ByaW1hcnknXG4gICAgICBjb25zdCBjb250ZW50Q29sb3IgPSBwcm9wcy5vcHRpb25zLmNvbnRlbnRDb2xvciB8fCAnd2hpdGUnXG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAgICd2LWRhdGEtdGFibGVfX3Jvd3MtY291bnQtbGlzdCc6IHRydWUsXG4gICAgICAgICAgICAuLi4oY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IoY29sb3IpIDoge30pLFxuICAgICAgICAgICAgLi4uKGNvbnRlbnRDb2xvciA/IHNldFRleHRDbGFzc05hbWVDb2xvcihjb250ZW50Q29sb3IpIDoge30pLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIC4uLihjb2xvciA/IHNldEJhY2tncm91bmRDc3NDb2xvcihjb2xvcikgOiB7fSksXG4gICAgICAgICAgICAuLi4oY29udGVudENvbG9yID8gc2V0VGV4dENzc0NvbG9yKGNvbnRlbnRDb2xvcikgOiB7fSksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSwgb3B0aW9ucy5tYXAoKGl0KSA9PiBoKCdkaXYnLCB7XG4gICAgICAgICAgY2xhc3M6ICd2LWRhdGEtdGFibGVfX3Jvd3MtY291bnQtaXRlbScsXG4gICAgICAgICAgb25DbGljazogKCkgPT4gZW1pdCgnc2VsZWN0LXJvd3MtY291bnQnLCBpdCksXG4gICAgICAgIH0sIFtpdF0pKSxcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5NZW51ID0gKCkgPT4ge1xuXG4gICAgICByZXR1cm4gaChWTWVudSwge1xuICAgICAgICBhY3RpdmF0b3I6IGFjdGl2YXRvci52YWx1ZSEsXG4gICAgICAgIG1heEhlaWdodDogMjQwLFxuICAgICAgICB6SW5kZXg6IDEyLFxuICAgICAgICBvcGVuT25DbGljazogdHJ1ZSxcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gZ2VuUm93c0NvdW50U2VsZWN0TGlzdCgpLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5Sb3dzQ291bnRGaWVsZCA9ICgpID0+IHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzOiAndi1kYXRhLXRhYmxlX19yb3dzLWNvdW50LXZhbHVlJyxcbiAgICAgICAgdGV4dENvbG9yOiBwcm9wcy5vcHRpb25zLmNvbnRlbnRDb2xvcixcbiAgICAgIH0sIHByb3BzLnJvd3NPblBhZ2UpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuUm93c0NvdW50U2VsZWN0ID0gKCkgPT4ge1xuICAgICAgY29uc3QgZGlzcGxheUNvbG9yID0gcHJvcHMub3B0aW9ucz8uY291bnRzPy5kaXNwbGF5Q29sb3IgfHwgJ3ByaW1hcnknXG5cbiAgICAgIHJldHVybiBoKFZCdXR0b24sIHtcbiAgICAgICAgY29sb3I6IGRpc3BsYXlDb2xvcixcbiAgICAgICAgcmVmOiBhY3RpdmF0b3IsXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtcbiAgICAgICAgICBnZW5Sb3dzQ291bnRGaWVsZCgpLFxuICAgICAgICAgIGFjdGl2YXRvci52YWx1ZSAmJiBnZW5NZW51KCksXG4gICAgICAgIF0sXG4gICAgICB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlblJvd3NDb3VudFNlbGVjdENhcHRpb24oKTogVk5vZGUge1xuICAgICAgY29uc3QgY29sb3IgPSBwcm9wcy5vcHRpb25zLmNvbnRlbnRDb2xvclxuXG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgJ3YtZGF0YS10YWJsZV9fcGFnaW5hdGlvbi1sYWJlbCc6IHRydWUsXG4gICAgICAgICAgLi4uKGNvbG9yID8gc2V0VGV4dENsYXNzTmFtZUNvbG9yKGNvbG9yKSA6IHt9KSxcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAuLi4oY29sb3IgPyBzZXRUZXh0Q3NzQ29sb3IoY29sb3IpIDoge30pLFxuICAgICAgICB9LFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICBwcm9wc0RhdGEsXG4gICAgICAgIHByb3BzLm9wdGlvbnM/LmNvdW50cz8ucm93c1BlclBhZ2VUZXh0IHx8ICdSb3dzIHBlciBwYWdlJyxcbiAgICAgIClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5Sb3dzQ291bnRTZWxlY3RCbG9jaygpOiBWTm9kZSB7XG4gICAgICByZXR1cm4gaCgnZGl2JywgeyBjbGFzczogJ3YtZGF0YS10YWJsZV9fcGFnaW5hdGlvbi1zZWxlY3QnIH0sIFtcbiAgICAgICAgZ2VuUm93c0NvdW50U2VsZWN0Q2FwdGlvbigpLFxuICAgICAgICBnZW5Sb3dzQ291bnRTZWxlY3QoKSxcbiAgICAgIF0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuUGFnZXNDb3VudERpc3BsYXkoKTogVk5vZGUge1xuICAgICAgY29uc3QgY29sb3IgPSBwcm9wcy5vcHRpb25zLmNvbnRlbnRDb2xvclxuXG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgJ3YtZGF0YS10YWJsZV9fcGFnaW5hdGlvbi1wYWdlcyc6IHRydWUsXG4gICAgICAgICAgLi4uKGNvbG9yID8gc2V0VGV4dENsYXNzTmFtZUNvbG9yKGNvbG9yKSA6IHt9KSxcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAuLi4oY29sb3IgPyBzZXRUZXh0Q3NzQ29sb3IoY29sb3IpIDoge30pLFxuICAgICAgICB9LFxuICAgICAgfVxuXG4gICAgICBwcm9wcy5wYWdlQ29ycmVjdGlvbiAmJiBlbWl0KCdjb3JyZWN0LXBhZ2UnLCAtcHJvcHMucGFnZUNvcnJlY3Rpb24pXG5cbiAgICAgIHJldHVybiBoKFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgcHJvcHNEYXRhLFxuICAgICAgICAocHJvcHMucm93c0xlbmd0aCAmJiBzbG90c1sncGFnaW5hdGlvbi10ZXh0J10/LigpKSB8fFxuICAgICAgICAocHJvcHMucm93c0xlbmd0aCAmJiBwYWdpbmF0aW9uRGlzcGxheVRleHQudmFsdWUpIHx8XG4gICAgICAgICctJyxcbiAgICAgIClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5QYWdpbmF0aW9uQnV0dG9uc0Jsb2NrKCk6IFZOb2RlIHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7IGNsYXNzOiB7ICd2LWRhdGEtdGFibGVfX3BhZ2luYXRpb24tcm91dGUnOiB0cnVlIH0gfSwgW1xuICAgICAgICBnZW5QYWdpbmF0aW9uQnV0dG9uKCksXG4gICAgICAgIGdlblBhZ2luYXRpb25QYWdlRGlzcGxheSgpLFxuICAgICAgICBnZW5QYWdpbmF0aW9uQnV0dG9uKHRydWUpLFxuICAgICAgXSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5QYWdpbmF0aW9uQmxvY2soKTogVk5vZGUge1xuICAgICAgcmV0dXJuIGgoJ2RpdicsIHsgY2xhc3M6ICd2LWRhdGEtdGFibGVfX3BhZ2luYXRpb24nIH0sIFtcbiAgICAgICAgZ2VuUm93c0NvdW50U2VsZWN0QmxvY2soKSxcbiAgICAgICAgZ2VuUGFnZXNDb3VudERpc3BsYXkoKSxcbiAgICAgICAgZ2VuUGFnaW5hdGlvbkJ1dHRvbnNCbG9jaygpLFxuICAgICAgXSlcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LWRhdGEtdGFibGVfX2Zvb3Rlcic6IHRydWUsXG4gICAgICAgICAgLi4uKHByb3BzLm9wdGlvbnMuY29sb3JcbiAgICAgICAgICAgID8gc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yKHByb3BzLm9wdGlvbnMuY29sb3IpXG4gICAgICAgICAgICA6IHt9KSxcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAuLi4ocHJvcHMub3B0aW9ucy5jb2xvclxuICAgICAgICAgICAgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMub3B0aW9ucy5jb2xvcilcbiAgICAgICAgICAgIDoge30pLFxuICAgICAgICB9LFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBnZW5QYWdpbmF0aW9uQmxvY2soKSlcbiAgICB9XG4gIH0sXG59KVxuIiwiLy8gVnVlIEFQSVxuaW1wb3J0IHsgaCwgd2F0Y2gsIGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQsIHJlYWN0aXZlIH0gZnJvbSAndnVlJ1xuXG4vLyBFZmZlY3RzXG5pbXBvcnQgeyB1c2VDb2xvcnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG4vLyBpbXBvcnQgeyB1c2VUaGVtZSB9IGZyb20gJy4uLy4uL2VmZmVjdHMvdXNlLXRoZW1lJ1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWRGF0YVRhYmxlSGVhZGVyIH0gZnJvbSAnLi9WRGF0YVRhYmxlSGVhZGVyJ1xuaW1wb3J0IHsgVkRhdGFUYWJsZUJvZHkgfSBmcm9tICcuL1ZEYXRhVGFibGVCb2R5J1xuaW1wb3J0IHsgVkRhdGFUYWJsZUZvb3RlciB9IGZyb20gJy4vVkRhdGFUYWJsZUZvb3RlcidcblxuLy8gSGVscGVyc1xuaW1wb3J0IHsgYWRkU2NvcGVkU2xvdCB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSwgUHJvcFR5cGUgfSBmcm9tICd2dWUnXG5pbXBvcnQge1xuICBEYXRhQ29sdW1uLFxuICBEYXRhQ29sdW1uUHJvcHMsXG4gIEZvb3Rlck9wdGlvbnMsXG4gIEhlYWRlck9wdGlvbnMsXG4gIFRhYmxlRmlsdGVyLFxufSBmcm9tICcuLi8uLi8uLi90eXBlcydcblxudHlwZSBUYWJsZVN0YXRlID0ge1xuICBjb2xzOiBEYXRhQ29sdW1uW11cbiAgcm93czogeyBba2V5OiBzdHJpbmddOiBhbnkgfVtdXG4gIGNoZWNrZWRSb3dzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9W11cbiAgcm93c09uUGFnZTogbnVtYmVyXG4gIHBhZ2U6IG51bWJlclxuICBpc0FsbFJvd3NDaGVja2VkOiBib29sZWFuXG59XG5cbmV4cG9ydCBjb25zdCBWRGF0YVRhYmxlID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtZGF0YS10YWJsZScsXG4gIHByb3BzOiB7XG4gICAgY29sczoge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICBkZWZhdWx0OiAoKSA9PiBbXSxcbiAgICB9LFxuICAgIHJvd3M6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgZGVmYXVsdDogKCkgPT4gW10sXG4gICAgfSxcbiAgICBkYXJrOiBCb29sZWFuLFxuICAgIHNob3dTZXF1ZW5jZTogQm9vbGVhbixcbiAgICBzaG93Q2hlY2tib3g6IEJvb2xlYW4sXG4gICAgYWxpZ246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHZhbGlkYXRvcjogKHZhbCkgPT4gWydsZWZ0JywgJ2NlbnRlcicsICdyaWdodCddLmluY2x1ZGVzKHZhbCksXG4gICAgfSxcbiAgICBjb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3doaXRlJyxcbiAgICB9LFxuICAgIGhlYWRlck9wdGlvbnM6IHtcbiAgICAgIHR5cGU6IE9iamVjdCBhcyBQcm9wVHlwZTxIZWFkZXJPcHRpb25zPixcbiAgICAgIGRlZmF1bHQ6ICgpID0+ICh7fSksXG4gICAgfSxcbiAgICBmb290ZXJPcHRpb25zOiB7XG4gICAgICB0eXBlOiBPYmplY3QgYXMgUHJvcFR5cGU8Rm9vdGVyT3B0aW9ucz4sXG4gICAgICBkZWZhdWx0OiAoKSA9PiAoe30pLFxuICAgIH0sXG4gICAgY3VzdG9tRmlsdGVyOiBGdW5jdGlvbixcbiAgfSBhcyBhbnksXG5cbiAgZW1pdHM6IFtcbiAgICAnbGFzdC1wYWdlJyxcbiAgICAnc2VsZWN0OnJvdycsXG4gICAgJ2NsaWNrOnJvdycsXG4gICAgJ2RibGNsaWNrOnJvdycsXG4gICAgJ2NvbnRleHRtZW51OnJvdycsXG4gIF0sXG5cbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMsIGVtaXQgfSkge1xuICAgIGNvbnN0IGRhdGEgPSByZWFjdGl2ZTxUYWJsZVN0YXRlPih7XG4gICAgICBjb2xzOiBbXSxcbiAgICAgIHJvd3M6IFtdLFxuICAgICAgY2hlY2tlZFJvd3M6IFtdLFxuICAgICAgcm93c09uUGFnZTogMjAsXG4gICAgICBwYWdlOiAxLFxuICAgICAgaXNBbGxSb3dzQ2hlY2tlZDogZmFsc2UsXG4gICAgfSlcblxuICAgIGNvbnN0IHsgc2V0QmFja2dyb3VuZENzc0NvbG9yLCBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IgfSA9IHVzZUNvbG9ycygpXG5cbiAgICBjb25zdCBmaWx0ZXJzID0ge31cblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LWRhdGEtdGFibGUnOiB0cnVlLFxuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IHN0eWxlcyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3QgaGVhZGVyT3B0aW9ucyA9IGNvbXB1dGVkPEhlYWRlck9wdGlvbnM+KCgpID0+ICh7XG4gICAgICBjb2xvcjogcHJvcHMuY29sb3IsXG4gICAgICBkYXJrOiBwcm9wcy5kYXJrLFxuICAgICAgLi4ucHJvcHMuaGVhZGVyT3B0aW9ucyxcbiAgICB9KSlcblxuICAgIGNvbnN0IGZvb3Rlck9wdGlvbnMgPSBjb21wdXRlZDxGb290ZXJPcHRpb25zPigoKSA9PiAoe1xuICAgICAgY29sb3I6IHByb3BzLmNvbG9yLFxuICAgICAgZGFyazogcHJvcHMuZGFyayxcbiAgICAgIC4uLnByb3BzLmZvb3Rlck9wdGlvbnMsXG4gICAgfSkpXG5cbiAgICBjb25zdCBwYWdlcyA9IGNvbXB1dGVkPG51bWJlcj4oKCkgPT4ge1xuICAgICAgcmV0dXJuIE1hdGguY2VpbChkYXRhLnJvd3M/Lmxlbmd0aCAvIGRhdGEucm93c09uUGFnZSlcbiAgICB9KVxuXG4gICAgY29uc3QgZmlyc3RPblBhZ2UgPSBjb21wdXRlZDxudW1iZXI+KCgpID0+IHtcbiAgICAgIHJldHVybiBkYXRhLnBhZ2UgPT09IDEgPyAxIDogKGRhdGEucGFnZSAtIDEpICogZGF0YS5yb3dzT25QYWdlICsgMVxuICAgIH0pXG5cbiAgICBjb25zdCBsYXN0T25QYWdlID0gY29tcHV0ZWQ8bnVtYmVyPigoKSA9PiB7XG4gICAgICByZXR1cm4gZGF0YS5wYWdlICogZGF0YS5yb3dzT25QYWdlID4gZGF0YS5yb3dzPy5sZW5ndGhcbiAgICAgICAgPyBkYXRhLnJvd3M/Lmxlbmd0aFxuICAgICAgICA6IGRhdGEucGFnZSAqIGRhdGEucm93c09uUGFnZVxuICAgIH0pXG5cbiAgICBjb25zdCBwYWdlQ29ycmVjdGlvbiA9IGNvbXB1dGVkPG51bWJlciB8IG51bGw+KCgpID0+IHtcbiAgICAgIGlmICgoZGF0YS5wYWdlIC0gMSkgKiBkYXRhLnJvd3NPblBhZ2UgPiBkYXRhLnJvd3M/Lmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKFxuICAgICAgICAgIChkYXRhLnBhZ2UgKiBkYXRhLnJvd3NPblBhZ2UgLSBkYXRhLnJvd3M/Lmxlbmd0aCkgLyBkYXRhLnJvd3NPblBhZ2VcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH0pXG5cbiAgICB3YXRjaChcbiAgICAgICgpID0+IHByb3BzLmNvbHMsXG4gICAgICAodG8pID0+IChkYXRhLmNvbHMgPSB0byksXG4gICAgICB7IGltbWVkaWF0ZTogdHJ1ZSB9XG4gICAgKVxuXG4gICAgd2F0Y2goXG4gICAgICAoKSA9PiBwcm9wcy5yb3dzLFxuICAgICAgKHRvKSA9PiAoZGF0YS5yb3dzID0gdG8pLFxuICAgICAgeyBpbW1lZGlhdGU6IHRydWUgfVxuICAgIClcblxuICAgIGZ1bmN0aW9uIG9uU2VsZWN0QWxsKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICBkYXRhLmlzQWxsUm93c0NoZWNrZWQgPSB2YWx1ZVxuICAgICAgZGF0YS5yb3dzLmZvckVhY2goKHJvdykgPT4gKHJvdy5jaGVja2VkID0gdmFsdWUpKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uU2VsZWN0PFQgZXh0ZW5kcyBUYWJsZVN0YXRlWydyb3dzJ10+KHJvd3M6IFQpIHtcbiAgICAgIGRhdGEuY2hlY2tlZFJvd3MgPSByb3dzXG4gICAgICBlbWl0KCdzZWxlY3Q6cm93JywgZGF0YS5jaGVja2VkUm93cylcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvblByZXZQYWdlKG51bTogbnVtYmVyKSB7XG4gICAgICBkYXRhLnBhZ2UgPSBkYXRhLnBhZ2UgPiAxID8gZGF0YS5wYWdlICsgbnVtIDogZGF0YS5wYWdlXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25OZXh0UGFnZShudW06IG51bWJlcikge1xuICAgICAgaWYgKGRhdGEucm93cy5sZW5ndGggLSBkYXRhLnBhZ2UgKiBkYXRhLnJvd3NPblBhZ2UgPiAwKSB7XG4gICAgICAgIGRhdGEucGFnZSArPSBudW1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvblNvcnQ8VCBleHRlbmRzIERhdGFDb2x1bW4sIFMgZXh0ZW5kcyBEYXRhQ29sdW1uUHJvcHM+KFxuICAgICAgY29sOiBUICYgU1xuICAgICkge1xuICAgICAgaWYgKGNvbC5zb3J0ZWQpIHtcbiAgICAgICAgY29sLnNvcnRlZCA9ICFjb2wuc29ydGVkXG4gICAgICAgIHJldHVybiBzb3J0Q29sdW1uKGNvbClcbiAgICAgIH1cblxuICAgICAgZGF0YS5jb2xzLmZvckVhY2goKGM6IFQgJiBTKSA9PiAoYy5zb3J0ZWQgPSBjb2wua2V5ID09PSBjLmtleSkpXG5cbiAgICAgIHNvcnRDb2x1bW4oY29sKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNvcnRDb2x1bW48VCBleHRlbmRzIERhdGFDb2x1bW4sIFMgZXh0ZW5kcyBEYXRhQ29sdW1uUHJvcHM+KFxuICAgICAgY29sOiBUICYgU1xuICAgICkge1xuICAgICAgaWYgKCFjb2wuc29ydGVkKSB7XG4gICAgICAgIHJldHVybiBkYXRhLnJvd3MhLnJldmVyc2UoKVxuICAgICAgfVxuXG4gICAgICBjb25zdCBleGVjdXRvciA9XG4gICAgICAgIGNvbC5zb3J0IHx8XG4gICAgICAgICgoYSwgYikgPT4ge1xuICAgICAgICAgIGlmIChjb2wuZm9ybWF0KSByZXR1cm4gY29sLmZvcm1hdChhKSA+IGNvbC5mb3JtYXQoYikgPyAxIDogLTFcbiAgICAgICAgICBpZiAoY29sLnNvcnRlZCkgcmV0dXJuIGFbY29sLmtleV0gPiBiW2NvbC5rZXldID8gMSA6IC0xXG4gICAgICAgIH0pXG5cbiAgICAgIGRhdGEucm93cy5zb3J0KGV4ZWN1dG9yIGFzIGFueSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkZpbHRlcih7IHZhbHVlLCBjb2wgfTogVGFibGVGaWx0ZXIpIHtcbiAgICAgIGlmICghdmFsdWUgJiYgZmlsdGVyc1tjb2wua2V5XSkgZGVsZXRlIGZpbHRlcnNbY29sLmtleV1cblxuICAgICAgaWYgKHZhbHVlKSBmaWx0ZXJzW2NvbC5rZXldID0gdmFsdWVcblxuICAgICAgaWYgKGNvbC5maWx0ZXIpIHtcbiAgICAgICAgcmV0dXJuIChkYXRhLnJvd3MgPSBjb2wuZmlsdGVyKHsgdmFsdWUsIGNvbCB9KSlcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcy5jdXN0b21GaWx0ZXIpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLmN1c3RvbUZpbHRlcihmaWx0ZXJzIGFzIGFueSlcbiAgICAgIH1cbiAgICAgIGlmICghT2JqZWN0LmtleXMoZmlsdGVycykubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAoZGF0YS5yb3dzID0gcHJvcHMucm93cylcbiAgICAgIH1cblxuICAgICAgZGF0YS5yb3dzID0gZmlsdGVyUm93cyhwcm9wcy5yb3dzLCBwcm9wcy5jb2xzKVxuICAgICAgZGF0YS5wYWdlID0gMVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uU2VsZWN0Um93c0NvdW50KGNvdW50OiBudW1iZXIpIHtcbiAgICAgIGRhdGEucm93c09uUGFnZSA9IGNvdW50XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmlsdGVyUm93czxULCBDIGV4dGVuZHMgRGF0YUNvbHVtbj4ocm93czogVFtdLCBjb2xzOiBDW10pIHtcbiAgICAgIGNvbnN0IGZpbHRlcktleXMgPSBPYmplY3Qua2V5cyhmaWx0ZXJzKVxuXG4gICAgICByZXR1cm4gcm93cy5yZWR1Y2UoKGFjYywgcm93KSA9PiB7XG4gICAgICAgIGNvbnN0IHJvd1Jlc3VsdHM6IFRbXSA9IFtdXG5cbiAgICAgICAgZmlsdGVyS2V5cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICBjb25zdCB7IGZvcm1hdCB9ID0gY29scy5maW5kKChjb2wpID0+IGNvbC5rZXkgPT09IGtleSkgYXMgRGF0YUNvbHVtblxuXG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBmb3JtYXQgPyBmb3JtYXQocm93KSA6IHJvd1trZXldXG5cbiAgICAgICAgICBjb25zdCByb3dLZXlWYWx1ZSA9IGAke3ZhbHVlfWAudG9Mb3dlckNhc2UoKVxuICAgICAgICAgIGNvbnN0IGZpbHRlclZhbHVlID0gYCR7ZmlsdGVyc1trZXldfWAudG9Mb3dlckNhc2UoKVxuXG4gICAgICAgICAgaWYgKHJvd0tleVZhbHVlLmluY2x1ZGVzKGZpbHRlclZhbHVlKSkge1xuICAgICAgICAgICAgcm93UmVzdWx0cy5wdXNoKHJvd1trZXldKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgcm93UmVzdWx0cy5sZW5ndGggPT09IGZpbHRlcktleXMubGVuZ3RoICYmXG4gICAgICAgICAgcm93UmVzdWx0cy5ldmVyeSgodmFsdWUpID0+ICEhdmFsdWUpXG4gICAgICAgICkge1xuICAgICAgICAgIGFjYy5wdXNoKHJvdylcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhY2NcbiAgICAgIH0sIFtdIGFzIFRbXSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5UYWJsZVRvb2xzKCk6IFZOb2RlIHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHsgY2xhc3M6ICd2LWRhdGEtdGFibGVfX3Rvb2xiYXInIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBzbG90cy50b29sYmFyICYmIHNsb3RzLnRvb2xiYXIoKSxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuVGFibGVIZWFkZXIoKTogVk5vZGUge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjb2xzOiBkYXRhLmNvbHMsXG4gICAgICAgIGNvbG9yOiBwcm9wcy5jb2xvcixcbiAgICAgICAgc2hvd0NoZWNrYm94OiBwcm9wcy5zaG93Q2hlY2tib3gsXG4gICAgICAgIGRhcms6IHByb3BzLmRhcmssXG4gICAgICAgIGFsaWduOiBwcm9wcy5hbGlnbixcbiAgICAgICAgc2hvd1NlcXVlbmNlOiBwcm9wcy5zaG93U2VxdWVuY2UsXG4gICAgICAgIG9wdGlvbnM6IGhlYWRlck9wdGlvbnMudmFsdWUsXG4gICAgICAgIG9uRmlsdGVyLFxuICAgICAgICBvblNvcnQsXG4gICAgICAgIG9uU2VsZWN0QWxsLFxuICAgICAgfVxuXG4gICAgICBjb25zdCBjb250ZW50ID0gZGF0YS5jb2xzLnJlZHVjZSgoYWNjLCBjb2wpID0+IHtcbiAgICAgICAgY29uc3Qgc2xvdE5hbWUgPSBgJHtjb2wua2V5fS1maWx0ZXJgXG5cbiAgICAgICAgaWYgKGNvbCAmJiBzbG90c1tzbG90TmFtZV0pIHtcbiAgICAgICAgICBhY2Nbc2xvdE5hbWVdID0gYWRkU2NvcGVkU2xvdChzbG90TmFtZSwgc2xvdHMpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYWNjXG4gICAgICB9LCB7fSBhcyBhbnkpXG5cbiAgICAgIGNvbnRlbnQuaGVhZGVyID0gYWRkU2NvcGVkU2xvdCgnaGVhZGVyJywgc2xvdHMpXG5cbiAgICAgIHJldHVybiBoKFZEYXRhVGFibGVIZWFkZXIsIHByb3BzRGF0YSwgY29udGVudClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5UYWJsZUJvZHkoKTogVk5vZGUge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjb2xzOiBkYXRhLmNvbHMsXG4gICAgICAgIHJvd3M6IGRhdGEucm93cyxcbiAgICAgICAgcGFnZTogZGF0YS5wYWdlLFxuICAgICAgICByb3dzT25QYWdlOiBkYXRhLnJvd3NPblBhZ2UsXG4gICAgICAgIHNob3dDaGVja2JveDogcHJvcHMuc2hvd0NoZWNrYm94LFxuICAgICAgICBjaGVja0FsbFJvd3M6IGRhdGEuaXNBbGxSb3dzQ2hlY2tlZCxcbiAgICAgICAgYWxpZ246IHByb3BzLmFsaWduLFxuICAgICAgICBkYXJrOiBwcm9wcy5kYXJrLFxuICAgICAgICBzaG93U2VxdWVuY2U6IHByb3BzLnNob3dTZXF1ZW5jZSxcbiAgICAgICAgY29sb3I6IHByb3BzLmNvbG9yLFxuICAgICAgICBvblNlbGVjdCxcbiAgICAgICAgWydvbkNsaWNrOnJvdyddOiAoZSkgPT4gZW1pdCgnY2xpY2s6cm93JywgZSksXG4gICAgICAgIFsnb25EYmxjbGljazpyb3cnXTogKGUpID0+IGVtaXQoJ2RibGNsaWNrOnJvdycsIGUpLFxuICAgICAgICBbJ29uQ29udGV4dG1lbnU6cm93J106IChlKSA9PiBlbWl0KCdjb250ZXh0bWVudTpyb3cnLCBlKSxcbiAgICAgIH1cblxuICAgICAgY29uc3QgY29udGVudCA9IHByb3BzLmNvbHMucmVkdWNlKChhY2MsIGNvbCkgPT4ge1xuICAgICAgICBpZiAoY29sICYmIHNsb3RzW2NvbC5rZXldKSB7XG4gICAgICAgICAgYWNjW2NvbC5rZXldID0gYWRkU2NvcGVkU2xvdChjb2wua2V5LCBzbG90cylcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjXG4gICAgICB9LCB7fSlcblxuICAgICAgcmV0dXJuIGgoVkRhdGFUYWJsZUJvZHksIHByb3BzRGF0YSwgY29udGVudClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5UYWJsZUZvb3RlcigpOiBWTm9kZSB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIHBhZ2VzOiBwYWdlcy52YWx1ZSxcbiAgICAgICAgcGFnZTogZGF0YS5wYWdlLFxuICAgICAgICBmaXJzdE9uUGFnZTogZmlyc3RPblBhZ2UudmFsdWUsXG4gICAgICAgIGxhc3RPblBhZ2U6IGxhc3RPblBhZ2UudmFsdWUsXG4gICAgICAgIHBhZ2VDb3JyZWN0aW9uOiBwYWdlQ29ycmVjdGlvbi52YWx1ZSxcbiAgICAgICAgcm93c09uUGFnZTogZGF0YS5yb3dzT25QYWdlLFxuICAgICAgICByb3dzTGVuZ3RoOiBkYXRhLnJvd3M/Lmxlbmd0aCxcbiAgICAgICAgb3B0aW9uczogZm9vdGVyT3B0aW9ucy52YWx1ZSxcbiAgICAgICAgb25QcmV2UGFnZSxcbiAgICAgICAgb25OZXh0UGFnZSxcbiAgICAgICAgb25TZWxlY3RSb3dzQ291bnQsXG4gICAgICAgIG9uTGFzdFBhZ2U6ICgpID0+IGVtaXQoJ2xhc3QtcGFnZScsIHByb3BzLnJvd3MubGVuZ3RoKSxcbiAgICAgICAgb25Db3JyZWN0UGFnZTogKHZhbCkgPT4gKGRhdGEucGFnZSArPSB2YWwpLFxuICAgICAgfVxuXG4gICAgICBjb25zdCBjb250ZW50ID0gc2xvdHNbJ3BhZ2luYXRpb24tdGV4dCddXG4gICAgICAgID8ge1xuICAgICAgICAgIFsncGFnaW5hdGlvbi10ZXh0J106ICgpID0+XG4gICAgICAgICAgICAgIHNsb3RzWydwYWdpbmF0aW9uLXRleHQnXSAmJlxuICAgICAgICAgICAgICBzbG90c1sncGFnaW5hdGlvbi10ZXh0J10oe1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBmaXJzdE9uUGFnZS52YWx1ZSxcbiAgICAgICAgICAgICAgICBsYXN0OiBsYXN0T25QYWdlLnZhbHVlLFxuICAgICAgICAgICAgICAgIGxlbmd0aDogZGF0YS5yb3dzPy5sZW5ndGgsXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH1cbiAgICAgICAgOiAnJ1xuXG4gICAgICByZXR1cm4gaChWRGF0YVRhYmxlRm9vdGVyLCBwcm9wc0RhdGEsIGNvbnRlbnQpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuVGFibGVJbm5lcigpOiBWTm9kZSB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiAndi1kYXRhLXRhYmxlX19pbm5lcicsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIFtnZW5UYWJsZUhlYWRlcigpLCBnZW5UYWJsZUJvZHkoKV0pXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgIHN0eWxlOiBzdHlsZXMudmFsdWUsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIFtcbiAgICAgICAgc2xvdHMudG9vbGJhciAmJiBnZW5UYWJsZVRvb2xzKCksXG4gICAgICAgIGdlblRhYmxlSW5uZXIoKSxcbiAgICAgICAgZ2VuVGFibGVGb290ZXIoKSxcbiAgICAgIF0pXG4gICAgfVxuICB9LFxufSlcbiIsImV4cG9ydCAqIGZyb20gJy4vVkRhdGFUYWJsZSdcbiIsIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGgsIGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSdcblxuLy8gRWZmZWN0c1xuaW1wb3J0IHsgdXNlQ29sb3JzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtY29sb3JzJ1xuaW1wb3J0IHsgdXNlSWNvbnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1pY29ucydcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkljb24gfSBmcm9tICcuLi9WSWNvbidcblxuZXhwb3J0IGNvbnN0IFZEYXRlcGlja2VySGVhZGVyID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtZGF0ZS1waWNrZXItaGVhZGVyJyxcblxuICBwcm9wczoge1xuICAgIG9uTmV4dDogRnVuY3Rpb24sXG4gICAgb25QcmV2OiBGdW5jdGlvbixcbiAgICBjb2xvcjogU3RyaW5nLFxuICB9IGFzIGFueSxcblxuICBlbWl0czogWyd0YWJsZSddLFxuXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzLCBlbWl0IH0pIHtcbiAgICBjb25zdCB7IHNldFRleHRDbGFzc05hbWVDb2xvciwgc2V0VGV4dENzc0NvbG9yIH0gPSB1c2VDb2xvcnMoKVxuICAgIGNvbnN0IHsgaWNvbnMgfSA9IHVzZUljb25zKClcblxuICAgIGNvbnN0IGdlbkhlYWRlckJ1dHRvbiA9IChpc1JpZ2h0KSA9PiB7XG4gICAgICBjb25zdCBpY29uID0gaXNSaWdodCA/IGljb25zLiRhcnJvd1JpZ2h0IDogaWNvbnMuJGFycm93TGVmdFxuXG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiAndi1kYXRlLXBpY2tlcl9faGVhZGVyLWJ1dHRvbicsXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGljb25Qcm9wc0RhdGEgPSB7XG4gICAgICAgIGljb24sXG4gICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgICAgICB9LFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldFRleHRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IChpc1JpZ2h0ID8gcHJvcHMub25OZXh0KCkgOiBwcm9wcy5vblByZXYoKSksXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGFycm93QnRuID0gaChWSWNvbiwgaWNvblByb3BzRGF0YSlcblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgYXJyb3dCdG4pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuSGVhZGVyRGlzcGxheSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1kYXRlLXBpY2tlcl9faGVhZGVyLWRpc3BsYXknOiB0cnVlLFxuICAgICAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldFRleHRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0VGV4dENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICAgICAgfSxcbiAgICAgICAgb25DbGljazogKCkgPT4gZW1pdCgndGFibGUnKSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCkpXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+XG4gICAgICBoKFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzOiAndi1kYXRlLXBpY2tlcl9faGVhZGVyJyxcbiAgICAgICAgfSxcbiAgICAgICAgW2dlbkhlYWRlckJ1dHRvbihmYWxzZSksIGdlbkhlYWRlckRpc3BsYXkoKSwgZ2VuSGVhZGVyQnV0dG9uKHRydWUpXVxuICAgICAgKVxuICB9LFxufSlcbiIsImV4cG9ydCB0eXBlIERhdGVMb2NhbGVzID0ge1xuICBtb250aHM6IHN0cmluZ1tdXG4gIG1vbnRoc0FiYnI6IHN0cmluZ1tdXG4gIHdlZWs6IHN0cmluZ1tdXG59XG5cbmV4cG9ydCB0eXBlIERhdGVUcmFuc2xhdGlvbnMgPSB7XG4gIHJ1OiBEYXRlTG9jYWxlc1xuICBlbjogRGF0ZUxvY2FsZXNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1vbnRoKGRhdGU6IERhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RnVsbFllYXIoZGF0ZTogRGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREYXRlKGRhdGU6IERhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREYXkoZGF0ZTogRGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXREYXkoKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SG91cnMoZGF0ZTogRGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRIb3VycygpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNaW51dGVzKGRhdGU6IERhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TWludXRlcygpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRGdWxsWWVhcihkYXRlLCB2YWx1ZSkge1xuICByZXR1cm4gZGF0ZS5zZXRGdWxsWWVhcih2YWx1ZSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldE1vbnRoKGRhdGUsIHZhbHVlKSB7XG4gIHJldHVybiBkYXRlLnNldE1vbnRoKHZhbHVlKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0RGF0ZShkYXRlLCB2YWx1ZSkge1xuICByZXR1cm4gZGF0ZS5zZXREYXRlKHZhbHVlKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZERhdGUoZGF0ZSkge1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGRhdGUpICE9PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICByZXR1cm4gIWlzTmFOKGRhdGUuZ2V0VGltZSgpKVxufVxuXG5mdW5jdGlvbiBnZXREYXlOYW1lQWJicihkYXRlLCBkYXlzKSB7XG4gIGlmICh0eXBlb2YgZGF0ZSAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0ludmFsaWQgVHlwZScpXG4gIH1cbiAgcmV0dXJuIGRheXNbZ2V0RGF5KGRhdGUpXVxufVxuXG5mdW5jdGlvbiBnZXRNb250aE5hbWUobW9udGg6IG51bWJlciwgbW9udGhzOiBzdHJpbmdbXSkge1xuICBpZiAoIW1vbnRocykge1xuICAgIHRocm93IEVycm9yKCdtaXNzaW5nIHNlY29uZCBwYXJhbWV0ZXIgTW9udGhzIGFycmF5JylcbiAgfVxuXG4gIHJldHVybiBtb250aHNbbW9udGhdXG59XG5cbmZ1bmN0aW9uIGdldE1vbnRoTmFtZUFiYnIobW9udGgsIG1vbnRoc0FiYnIpIHtcbiAgaWYgKCFtb250aHNBYmJyKSB7XG4gICAgdGhyb3cgRXJyb3IoJ21pc3NpbmcgMm5kIHBhcmFtdGVyIE1vbnRocyBhcnJheScpXG4gIH1cbiAgaWYgKHR5cGVvZiBtb250aCA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbW9udGhzQWJicltnZXRNb250aChtb250aCldXG4gIH1cbiAgaWYgKHR5cGVvZiBtb250aCA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gbW9udGhzQWJiclttb250aF1cbiAgfVxuICB0aHJvdyBUeXBlRXJyb3IoJ0ludmFsaWQgdHlwZScpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXREYXRlKFxuICBkYXRlOiBEYXRlLFxuICBmb3JtYXQ6IHN0cmluZyxcbiAgdHJhbnNsYXRpb246IERhdGVMb2NhbGVzXG4pIHtcbiAgY29uc3QgeWVhciA9IGdldEZ1bGxZZWFyKGRhdGUpXG4gIGNvbnN0IG1vbnRoID0gZ2V0TW9udGgoZGF0ZSkgKyAxXG4gIGNvbnN0IGRheSA9IGdldERhdGUoZGF0ZSlcblxuICByZXR1cm4gZm9ybWF0XG4gICAgLnJlcGxhY2UoL2RkLywgKCcwJyArIGRheSkuc2xpY2UoLTIpKVxuICAgIC5yZXBsYWNlKC9kLywgYCR7ZGF5fWApXG4gICAgLnJlcGxhY2UoL3l5eXkvLCBgJHt5ZWFyfWApXG4gICAgLnJlcGxhY2UoL3l5LywgU3RyaW5nKHllYXIpLnNsaWNlKDIpKVxuICAgIC5yZXBsYWNlKC9NTU1NLywgZ2V0TW9udGhOYW1lKGdldE1vbnRoKGRhdGUpLCB0cmFuc2xhdGlvbi5tb250aHMpKVxuICAgIC5yZXBsYWNlKC9NTU0vLCBnZXRNb250aE5hbWVBYmJyKGdldE1vbnRoKGRhdGUpLCB0cmFuc2xhdGlvbi5tb250aHNBYmJyKSlcbiAgICAucmVwbGFjZSgvTU0vLCAoJzAnICsgbW9udGgpLnNsaWNlKC0yKSlcbiAgICAucmVwbGFjZSgvTSg/IWF8w6R8ZSkvLCBgJHttb250aH1gKVxuICAgIC5yZXBsYWNlKC9EKD8hZXzDqXxpKS8sIGdldERheU5hbWVBYmJyKGRhdGUsIHRyYW5zbGF0aW9uLndlZWspKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVEYXRlSW5wdXQodmFsKSB7XG4gIHJldHVybiAoXG4gICAgdmFsID09PSBudWxsIHx8XG4gICAgdmFsIGluc3RhbmNlb2YgRGF0ZSB8fFxuICAgIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnIHx8XG4gICAgdHlwZW9mIHZhbCA9PT0gJ251bWJlcidcbiAgKVxufVxuIiwiaW1wb3J0IHsgaCwgVk5vZGUgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyBnZXRGdWxsWWVhciwgZ2V0TW9udGgsIGdldERhdGUsIGdldERheSB9IGZyb20gJy4vdXRpbHMnXG5pbXBvcnQgeyBEYXRlUGlja2VyRGF0ZSB9IGZyb20gJy4uLy4uLy4uL3R5cGVzJ1xuXG5leHBvcnQgZnVuY3Rpb24gZ2VuVGFibGVSb3dzKFxuICB2Tm9kZXNBcnJheTogVk5vZGVbXSxcbiAgcm93Q2xhc3NOYW1lOiBzdHJpbmcsXG4gIGNlbGxzSW5Sb3c6IG51bWJlclxuKSB7XG4gIGNvbnN0IHRhYmxlUm93czogVk5vZGVbXSA9IFtdXG4gIGxldCB2Tm9kZXNJblJvdzogVk5vZGVbXSA9IFtdXG5cbiAgY29uc3QgZ2VuVGFibGVSb3cgPSAoY2VsbFZOb2RlcykgPT4ge1xuICAgIHJldHVybiBoKCdkaXYnLCB7IGNsYXNzOiByb3dDbGFzc05hbWUgfSwgY2VsbFZOb2RlcylcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDw9IHZOb2Rlc0FycmF5Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGkgJiYgIShpICUgY2VsbHNJblJvdykpIHtcbiAgICAgIHRhYmxlUm93cy5wdXNoKGdlblRhYmxlUm93KHZOb2Rlc0luUm93KSlcbiAgICAgIHZOb2Rlc0luUm93ID0gW11cbiAgICB9XG5cbiAgICB2Tm9kZXNJblJvdy5wdXNoKHZOb2Rlc0FycmF5W2ldKVxuICB9XG5cbiAgaWYgKHZOb2Rlc0luUm93Lmxlbmd0aCkge1xuICAgIHRhYmxlUm93cy5wdXNoKGdlblRhYmxlUm93KHZOb2Rlc0luUm93KSBhcyBhbnkpXG4gIH1cblxuICByZXR1cm4gdGFibGVSb3dzXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0RhdGVTdHJpbmcoZGF0ZSkge1xuICByZXR1cm4gbmV3IERhdGUoZGF0ZS55ZWFyLCBkYXRlLm1vbnRoLCBkYXRlLmRhdGUpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZURhdGUoc2VsZWN0ZWREYXRlOiBEYXRlIHwgc3RyaW5nKTogRGF0ZVBpY2tlckRhdGUge1xuICBjb25zdCBkYXRlID0gbmV3IERhdGUoc2VsZWN0ZWREYXRlKVxuICBjb25zdCBkYXkgPSBnZXREYXkoZGF0ZSlcblxuICByZXR1cm4ge1xuICAgIHllYXI6IGdldEZ1bGxZZWFyKGRhdGUpLFxuICAgIG1vbnRoOiBnZXRNb250aChkYXRlKSxcbiAgICBkYXRlOiBnZXREYXRlKGRhdGUpLFxuICAgIG1sczogZGF0ZS5nZXRUaW1lKCksXG4gICAgZGF5LFxuICB9XG59XG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyBoLCByZWYsIGluamVjdCwgY29tcHV0ZWQsIHdhdGNoLCBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnXG5cbi8vIEhlbHBlcnNcbmltcG9ydCB7IGdlblRhYmxlUm93cywgcGFyc2VEYXRlLCB0b0RhdGVTdHJpbmcgfSBmcm9tICcuL2hlbHBlcnMnXG5cbi8vIEVmZmVjdHNcbmltcG9ydCB7IHVzZVRyYW5zaXRpb24gfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS10cmFuc2l0aW9uJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgVk5vZGUsIFJlZiB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IERhdGVQaWNrZXJCdG5IYW5kbGVycywgRGF0ZVBpY2tlckRhdGUgfSBmcm9tICcuLi8uLi8uLi90eXBlcydcbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvYmFzZSdcblxudHlwZSBVcGRhdGVQYXJhbXMgPSB7XG4gIG1vbnRoPzogbnVtYmVyXG4gIHllYXI/OiBudW1iZXJcbn1cblxuZXhwb3J0IGNvbnN0IFZEYXRlUGlja2VyRGF0ZXMgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1kYXRlLXBpY2tlci1kYXRlcycsXG5cbiAgcHJvcHM6IHtcbiAgICBsb2NhbGU6IEFycmF5LFxuICAgIHllYXI6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgbW9udGg6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgZGF0ZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICB2YWx1ZTogT2JqZWN0LFxuICAgIG1vbmRheUZpcnN0OiBCb29sZWFuLFxuICAgIGRpc2FibGVkRGF0ZXM6IE9iamVjdCxcbiAgfSBhcyBhbnksXG5cbiAgZW1pdHM6IFsndXBkYXRlOm1vbnRoJywgJ3VwZGF0ZTp2YWx1ZSddLFxuXG4gIHNldHVwKHByb3BzLCB7IGVtaXQsIHNsb3RzIH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3QgRklSU1RfTU9OVEggPSAwXG4gICAgY29uc3QgTEFTVF9NT05USCA9IDExXG4gICAgY29uc3QgREFZUyA9IFswLCAxLCAyLCAzLCA0LCA1LCA2XVxuICAgIGNvbnN0IEFOSU1BVElPTl9USU1FT1VUID0gMFxuXG4gICAgY29uc3QgZGF0ZXMgPSByZWY8KERhdGVQaWNrZXJEYXRlIHwgbnVsbClbXT4oW10pXG4gICAgY29uc3QgaXNEYXRlc0NoYW5nZWQgPSByZWY8Ym9vbGVhbj4oZmFsc2UpXG4gICAgY29uc3QgdG9kYXkgPSBwYXJzZURhdGUobmV3IERhdGUoKSlcblxuICAgIGNvbnN0IGhhbmRsZXJzID0gaW5qZWN0KCdoYW5kbGVycycpIGFzIFJlZjxEYXRlUGlja2VyQnRuSGFuZGxlcnM+XG5cbiAgICBoYW5kbGVycy52YWx1ZSA9IHtcbiAgICAgIG9uTmV4dDogKCkgPT4gdXBkYXRlTW9udGgodHJ1ZSksXG4gICAgICBvblByZXY6ICgpID0+IHVwZGF0ZU1vbnRoKGZhbHNlKSxcbiAgICB9XG5cbiAgICBpZiAocHJvcHMubW9uZGF5Rmlyc3QpIHtcbiAgICAgIERBWVMucHVzaChEQVlTLnNwbGljZSgwLCAxKVswXSlcbiAgICB9XG5cbiAgICBjb25zdCBkYXlzSW5Nb250aCA9IGNvbXB1dGVkPG51bWJlcj4oKCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKHByb3BzLnllYXIsIHByb3BzLm1vbnRoICsgMSwgMCkuZ2V0RGF0ZSgpXG4gICAgfSlcblxuICAgIHdhdGNoKFxuICAgICAgKCkgPT4gcHJvcHMubW9udGgsXG4gICAgICAoKSA9PiBnZW5UYWJsZURhdGVzKCksXG4gICAgICB7IGltbWVkaWF0ZTogdHJ1ZSB9LFxuICAgIClcblxuICAgIHdhdGNoKFxuICAgICAgKCkgPT4gaXNEYXRlc0NoYW5nZWQudmFsdWUsXG4gICAgICAoKSA9PiBzZXRUaW1lb3V0KCgpID0+IChpc0RhdGVzQ2hhbmdlZC52YWx1ZSA9IGZhbHNlKSwgQU5JTUFUSU9OX1RJTUVPVVQpLFxuICAgIClcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZU1vbnRoKGlzTmV4dDogYm9vbGVhbikge1xuICAgICAgY29uc3QgcGFyYW1zOiBVcGRhdGVQYXJhbXMgPSB7fVxuXG4gICAgICBwYXJhbXMubW9udGggPSBwcm9wcy5tb250aCArIChpc05leHQgPyAxIDogLTEpXG5cbiAgICAgIGlmICghaXNOZXh0ICYmIHBhcmFtcy5tb250aCEgPCBGSVJTVF9NT05USCkgcGFyYW1zLm1vbnRoID0gTEFTVF9NT05USFxuICAgICAgaWYgKGlzTmV4dCAmJiBwYXJhbXMubW9udGghID4gTEFTVF9NT05USCkgcGFyYW1zLm1vbnRoID0gRklSU1RfTU9OVEhcbiAgICAgIGlmIChpc05leHQgJiYgIXBhcmFtcy5tb250aCkgcGFyYW1zLnllYXIgPSBwcm9wcy55ZWFyICsgMVxuICAgICAgaWYgKCFpc05leHQgJiYgcGFyYW1zLm1vbnRoID09PSBMQVNUX01PTlRIKSBwYXJhbXMueWVhciA9IHByb3BzLnllYXIgLSAxXG5cbiAgICAgIGlzRGF0ZXNDaGFuZ2VkLnZhbHVlID0gdHJ1ZVxuICAgICAgZW1pdCgndXBkYXRlOm1vbnRoJywgcGFyYW1zKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbldlZWtEYXlzKCk6IFZOb2RlW10ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogJ3YtZGF0ZS1waWNrZXItZGF0ZXNfX2RheScsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBEQVlTLm1hcCgoZGF5KSA9PlxuICAgICAgICBoKCdzcGFuJywgcHJvcHNEYXRhLCBwcm9wcy5sb2NhbGUhW2RheV0gYXMgc3RyaW5nKSxcbiAgICAgIClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5EYXRlT2JqZWN0KGRhdGUpOiBEYXRlUGlja2VyRGF0ZSB7XG4gICAgICBjb25zdCB7IHllYXIsIG1vbnRoIH0gPSBwcm9wc1xuICAgICAgcmV0dXJuIHBhcnNlRGF0ZShuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZGF0ZSkpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0RW1wdGllc0JlZm9yZUZpcnN0RGF0ZShkYXRlT2JqZWN0KSB7XG4gICAgICBjb25zdCBmaXJzdERheSA9IERBWVNbMF1cbiAgICAgIGNvbnN0IHN0YXJ0RGF5ID0gZmlyc3REYXkgJiYgIWRhdGVPYmplY3QuZGF5ID8gZGF0ZU9iamVjdC5kYXkgOiBmaXJzdERheVxuICAgICAgY29uc3QgdGlsbERheSA9XG4gICAgICAgIGZpcnN0RGF5ICYmICFkYXRlT2JqZWN0LmRheSA/IERBWVMubGVuZ3RoIC0gMSA6IGRhdGVPYmplY3QuZGF5XG5cbiAgICAgIGZvciAobGV0IGkgPSBzdGFydERheTsgaSA8PSB0aWxsRGF5OyBpICs9IDEpIHtcbiAgICAgICAgZGF0ZXMudmFsdWVbaV0gPSB7IGRhdGU6IG51bGwgfSBhcyBhbnlcbiAgICAgIH1cblxuICAgICAgZGF0ZXMudmFsdWVbdGlsbERheV0gPSBkYXRlT2JqZWN0XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuVGFibGVEYXRlcygpIHtcbiAgICAgIGRhdGVzLnZhbHVlID0gW11cbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IGRheXNJbk1vbnRoLnZhbHVlOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgZGF0ZU9iamVjdCA9IGdlbkRhdGVPYmplY3QoaSlcblxuICAgICAgICBpZiAoaSA9PT0gMSkge1xuICAgICAgICAgIHNldEVtcHRpZXNCZWZvcmVGaXJzdERhdGUoZGF0ZU9iamVjdClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRlcy52YWx1ZVtkYXRlcy52YWx1ZS5sZW5ndGhdID0gZGF0ZU9iamVjdCBhcyBhbnlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXBhcmVEYXRlcyhkYXRlMSwgZGF0ZTIpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGRhdGUxLmRhdGUgPT09IGRhdGUyLmRhdGUgJiZcbiAgICAgICAgZGF0ZTEubW9udGggPT09IGRhdGUyLm1vbnRoICYmXG4gICAgICAgIGRhdGUxLnllYXIgPT09IGRhdGUyLnllYXJcbiAgICAgIClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXREaXNhYmxlZChkYXRlOiBEYXRlUGlja2VyRGF0ZSk6IGJvb2xlYW4ge1xuICAgICAgaWYgKCFkYXRlLmRhdGUpIHJldHVybiBmYWxzZVxuICAgICAgaWYgKCFwcm9wcy5kaXNhYmxlZERhdGVzKSByZXR1cm4gISFkYXRlLmlzSG9saWRheVxuXG4gICAgICBjb25zdCB7IGRpc2FibGVkRGF0ZXMgfSA9IHByb3BzXG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIChkaXNhYmxlZERhdGVzLmRheXNPZk1vbnRoICYmIGRpc2FibGVEYXlzT2ZNb250aChkYXRlKSkgfHxcbiAgICAgICAgKGRpc2FibGVkRGF0ZXMuZnJvbSAmJiBkaXNhYmxlRnJvbVRvKGRhdGUsIGRpc2FibGVkRGF0ZXMpKSB8fFxuICAgICAgICAoZGlzYWJsZWREYXRlcy5kYXRlcyAmJiBkaXNhYmxlRGF0ZXMoZGF0ZSkpIHx8XG4gICAgICAgIChkaXNhYmxlZERhdGVzLmRheXMgJiYgZGlzYWJsZURheXMoZGF0ZSkpIHx8XG4gICAgICAgIChkaXNhYmxlZERhdGVzLnJhbmdlcyAmJiBkaXNhYmxlUmFuZ2VzKGRhdGUpKSB8fFxuICAgICAgICAoZGlzYWJsZWREYXRlcy5jdXN0b20gJiYgZGlzYWJsZWREYXRlcy5jdXN0b20oZGF0ZSkpXG4gICAgICApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlzYWJsZUZyb21UbyhkYXRlOiBEYXRlUGlja2VyRGF0ZSwgeyBmcm9tLCB0byB9KTogYm9vbGVhbiB7XG4gICAgICBjb25zdCBkYXRlRnJvbTogRGF0ZVBpY2tlckRhdGUgPSBwYXJzZURhdGUoZnJvbSlcbiAgICAgIGNvbnN0IGRhdGVUbzogRGF0ZVBpY2tlckRhdGUgPSBwYXJzZURhdGUodG8pXG5cbiAgICAgIHJldHVybiBkYXRlLm1scyA+PSBkYXRlRnJvbS5tbHMgJiYgZGF0ZS5tbHMgPD0gZGF0ZVRvLm1sc1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpc2FibGVEYXlzT2ZNb250aChkYXRlOiBEYXRlUGlja2VyRGF0ZSk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHByb3BzLmRpc2FibGVkRGF0ZXMuZGF5c09mTW9udGguc29tZSgoaXQpID0+IGl0ID09PSBkYXRlLmRhdGUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlzYWJsZURhdGVzKGRhdGU6IERhdGVQaWNrZXJEYXRlKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gcHJvcHMuZGlzYWJsZWREYXRlcy5kYXRlcy5maW5kKChkKSA9PiB7XG4gICAgICAgIHJldHVybiBTdHJpbmcoZCkgPT09IFN0cmluZyh0b0RhdGVTdHJpbmcoZGF0ZSkpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpc2FibGVEYXlzKGRhdGU6IERhdGVQaWNrZXJEYXRlKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gcHJvcHMuZGlzYWJsZWREYXRlcy5kYXlzLmZpbmQoKGQpID0+IGQgPT09IGRhdGUuZGF5KSA+PSAwXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlzYWJsZVJhbmdlcyhkYXRlOiBEYXRlUGlja2VyRGF0ZSkge1xuICAgICAgY29uc3QgeyByYW5nZXMgfSA9IHByb3BzLmRpc2FibGVkRGF0ZXNcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGRpc2FibGVGcm9tVG8oZGF0ZSwgcmFuZ2VzW2ldKSkgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5EYXRlQ2VsbChkYXRlOiBEYXRlUGlja2VyRGF0ZSk6IFZOb2RlIHtcbiAgICAgIGNvbnN0IGlzU2VsZWN0ZWQ6IGJvb2xlYW4gPSBjb21wYXJlRGF0ZXMoZGF0ZSwgcHJvcHMudmFsdWUpXG4gICAgICBjb25zdCBpc1RvZGF5OiBib29sZWFuID0gY29tcGFyZURhdGVzKGRhdGUsIHRvZGF5KVxuXG4gICAgICBkYXRlLmlzSG9saWRheSA9IHNldERpc2FibGVkKGRhdGUpXG5cbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1kYXRlLXBpY2tlci1kYXRlc19fY2VsbCc6ICEhZGF0ZS5kYXRlLFxuICAgICAgICAgICd2LWRhdGUtcGlja2VyLWRhdGVzX19jZWxsLS1lbXB0eSc6ICFkYXRlLmRhdGUsXG4gICAgICAgICAgJ3YtZGF0ZS1waWNrZXItZGF0ZXNfX2NlbGwtLXNlbGVjdGVkJzpcbiAgICAgICAgICAgIGlzU2VsZWN0ZWQgJiYgIXByb3BzLnZhbHVlLmRlZmF1bHQsXG4gICAgICAgICAgJ3YtZGF0ZS1waWNrZXItZGF0ZXNfX2NlbGwtLWN1cnJlbnQtZGF0ZSc6IGlzVG9kYXksXG4gICAgICAgICAgJ3YtZGF0ZS1waWNrZXItZGF0ZXNfX2NlbGwtLWhvbGlkYXknOiBkYXRlLmRhdGUgJiYgZGF0ZS5pc0hvbGlkYXksXG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IGRhdGUuZGF0ZSAmJiBlbWl0KCd1cGRhdGU6dmFsdWUnLCBkYXRlKSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgW1xuICAgICAgICAoZGF0ZS5kYXRlICYmIHNsb3RzLmRhdGUgJiYgc2xvdHMuZGF0ZShkYXRlKSkgfHwgZGF0ZS5kYXRlLFxuICAgICAgXSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5EYXRlQ2VsbHMoKTogVk5vZGVbXSB7XG4gICAgICByZXR1cm4gZGF0ZXMudmFsdWUucmVkdWNlKChhY2MsIGRhdGVPYmplY3QpID0+IHtcbiAgICAgICAgYWNjLnB1c2goZ2VuRGF0ZUNlbGwoZGF0ZU9iamVjdCEpKVxuICAgICAgICByZXR1cm4gYWNjXG4gICAgICB9LCBbXSBhcyBWTm9kZVtdKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbkRhdGVSb3dzKCk6IFZOb2RlW10ge1xuICAgICAgY29uc3QgZGF0ZXNWTm9kZXMgPSBnZW5EYXRlQ2VsbHMoKVxuXG4gICAgICByZXR1cm4gZ2VuVGFibGVSb3dzKGRhdGVzVk5vZGVzLCAndi1kYXRlLXBpY2tlci1kYXRlc19fcm93JywgREFZUy5sZW5ndGgpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuRGF0ZXMoKTogTWF5YmU8Vk5vZGU+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgICghaXNEYXRlc0NoYW5nZWQudmFsdWUgJiZcbiAgICAgICAgICBoKCdkaXYnLCB7IGNsYXNzOiAndi1kYXRlLXBpY2tlci1kYXRlc19fZGF0ZXMnIH0sIGdlbkRhdGVSb3dzKCkpKSB8fFxuICAgICAgICBudWxsXG4gICAgICApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuV2VlaygpOiBWTm9kZSB7XG4gICAgICByZXR1cm4gaCgnZGl2JywgeyBjbGFzczogJ3YtZGF0ZS1waWNrZXItZGF0ZXNfX3dlZWsnIH0sIGdlbldlZWtEYXlzKCkpXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+XG4gICAgICBoKCdkaXYnLCB7IGNsYXNzOiAndi1kYXRlLXBpY2tlci1kYXRlcycgfSwgW1xuICAgICAgICBnZW5XZWVrKCksXG4gICAgICAgIHVzZVRyYW5zaXRpb24oZ2VuRGF0ZXMoKSBhcyBhbnksICdmYWRlJyksXG4gICAgICBdKVxuICB9LFxufSlcbiIsIi8vIFZVZSBBUElcbmltcG9ydCB7IGgsIHJlZiwgd2F0Y2hFZmZlY3QsIGluamVjdCwgY29tcHV0ZWQsIGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSdcblxuLy8gSGVscGVyc1xuaW1wb3J0IHsgZ2VuVGFibGVSb3dzIH0gZnJvbSAnLi9oZWxwZXJzJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgVk5vZGUsIFJlZiB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IERhdGVQaWNrZXJCdG5IYW5kbGVycyB9IGZyb20gJy4uLy4uLy4uL3R5cGVzJ1xuXG4vLyBFZmZlY3RzXG5pbXBvcnQgeyB1c2VUcmFuc2l0aW9uIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtdHJhbnNpdGlvbidcblxuZXhwb3J0IGNvbnN0IFZEYXRlUGlja2VyWWVhcnMgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1kYXRlLXBpY2tlci15ZWFycycsXG5cbiAgcHJvcHM6IHtcbiAgICB5ZWFyOiBbTnVtYmVyLCBTdHJpbmddLFxuICB9IGFzIGFueSxcblxuICBlbWl0czogWyd1cGRhdGU6eWVhciddLFxuXG4gIHNldHVwKHByb3BzLCB7IGVtaXQgfSkge1xuICAgIGNvbnN0IExJTUlUID0gMTAwXG4gICAgY29uc3QgT05fVEFCTEUgPSAyMFxuICAgIGNvbnN0IENFTExTX0lOX1JPVyA9IDRcbiAgICBjb25zdCBDVVJSRU5UX1lFQVIgPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKClcbiAgICBjb25zdCBBTklNQVRJT05fVElNRU9VVCA9IDEwMFxuXG4gICAgY29uc3QgeWVhcnMgPSByZWY8QXJyYXk8bnVtYmVyW10+PihbXSlcbiAgICBjb25zdCBvblRhYmxlSW5kZXggPSByZWY8bnVtYmVyPigwKVxuICAgIGNvbnN0IGlzTGlzdENoYW5nZWQgPSByZWY8Ym9vbGVhbj4oZmFsc2UpXG4gICAgY29uc3QgdHJhbnNpdGlvbiA9IHJlZjxzdHJpbmc+KCcnKVxuXG4gICAgY29uc3QgaGFuZGxlcnMgPSBpbmplY3QoJ2hhbmRsZXJzJykgYXMgUmVmPERhdGVQaWNrZXJCdG5IYW5kbGVycz5cblxuICAgIHdhdGNoRWZmZWN0KFxuICAgICAgKCkgPT5cbiAgICAgICAgaXNMaXN0Q2hhbmdlZC52YWx1ZSAmJlxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBpc0xpc3RDaGFuZ2VkLnZhbHVlID0gZmFsc2VcbiAgICAgICAgfSwgQU5JTUFUSU9OX1RJTUVPVVQpXG4gICAgKVxuXG4gICAgY29uc3QgY29tcHV0ZWRZZWFyID0gY29tcHV0ZWQ8bnVtYmVyPih7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiArcHJvcHMueWVhciEgfHwgQ1VSUkVOVF9ZRUFSXG4gICAgICB9LFxuICAgICAgc2V0KHZhbDogbnVtYmVyKSB7XG4gICAgICAgIGVtaXQoJ3VwZGF0ZTp5ZWFyJywgdmFsKVxuICAgICAgfSxcbiAgICB9KVxuXG4gICAgaWYgKGhhbmRsZXJzPy52YWx1ZSkge1xuICAgICAgaGFuZGxlcnMudmFsdWUgPSB7XG4gICAgICAgIG9uTmV4dDogKCkgPT4gY2hhbmdlWWVhcnNMaXN0KHRydWUpLFxuICAgICAgICBvblByZXY6ICgpID0+IGNoYW5nZVllYXJzTGlzdChmYWxzZSksXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0Q3VycmVudFRyYW5zaXRpb24oaXNOZXh0KSB7XG4gICAgICB0cmFuc2l0aW9uLnZhbHVlID0gaXNOZXh0ID8gJ2ZhZGUtaW4tZG93bicgOiAnZmFkZS1pbi11cCdcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRUYWJsZUluZGV4KCkge1xuICAgICAgb25UYWJsZUluZGV4LnZhbHVlID0geWVhcnMudmFsdWUuZmluZEluZGV4KChyb3cpID0+IHtcbiAgICAgICAgcmV0dXJuIHJvdy5maW5kKCh5ZWFyKSA9PiB5ZWFyID09PSBjb21wdXRlZFllYXIudmFsdWUpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoYW5nZVllYXJzTGlzdChpc05leHQpIHtcbiAgICAgIGNvbnN0IG1heCA9IHllYXJzLnZhbHVlLmxlbmd0aCAtIDFcbiAgICAgIGNvbnN0IHZhbCA9IGlzTmV4dCA/IDEgOiAtMVxuXG4gICAgICBpZiAoXG4gICAgICAgIChvblRhYmxlSW5kZXgudmFsdWUgPT09IG1heCAmJiB2YWwgPiAwKSB8fFxuICAgICAgICAob25UYWJsZUluZGV4LnZhbHVlID09PSAwICYmIHZhbCA8IDApXG4gICAgICApXG4gICAgICAgIHJldHVyblxuXG4gICAgICBzZXRDdXJyZW50VHJhbnNpdGlvbihpc05leHQpXG5cbiAgICAgIG9uVGFibGVJbmRleC52YWx1ZSArPSB2YWxcbiAgICAgIGlzTGlzdENoYW5nZWQudmFsdWUgPSB0cnVlXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuVGFibGVZZWFycygpIHtcbiAgICAgIGNvbnN0IGZyb21ZZWFyID0gQ1VSUkVOVF9ZRUFSIC0gTElNSVRcbiAgICAgIGNvbnN0IG1heFllYXJzID0gTElNSVQgKiAyXG5cbiAgICAgIGxldCB5ZWFyc0xpc3Q6IG51bWJlcltdID0gW11cblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbWF4WWVhcnM7IGkgKz0gMSkge1xuICAgICAgICBpZiAoeWVhcnNMaXN0Lmxlbmd0aCA9PT0gT05fVEFCTEUpIHtcbiAgICAgICAgICB5ZWFycy52YWx1ZS5wdXNoKHllYXJzTGlzdClcbiAgICAgICAgICB5ZWFyc0xpc3QgPSBbXVxuICAgICAgICB9XG4gICAgICAgIHllYXJzTGlzdC5wdXNoKGZyb21ZZWFyICsgaSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5ZZWFyQ2VsbCh5ZWFyKTogVk5vZGUge1xuICAgICAgY29uc3QgaXNTZWxlY3RlZCA9IHllYXIgPT09IGNvbXB1dGVkWWVhci52YWx1ZVxuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LWRhdGUtcGlja2VyLXllYXJzX19jZWxsJzogdHJ1ZSxcbiAgICAgICAgICAndi1kYXRlLXBpY2tlci15ZWFyc19fY2VsbC0tc2VsZWN0ZWQnOiBpc1NlbGVjdGVkLFxuICAgICAgICAgICd2LWRhdGUtcGlja2VyLXllYXJzX19jZWxsLS1jdXJyZW50LXllYXInOiB5ZWFyID09PSBDVVJSRU5UX1lFQVIsXG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IChjb21wdXRlZFllYXIudmFsdWUgPSB5ZWFyKSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgeWVhcilcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5ZZWFyc1Jvd3MoKTogVk5vZGVbXSB7XG4gICAgICBjb25zdCBjdXJyZW50WWVhcnMgPSB5ZWFycy52YWx1ZVtvblRhYmxlSW5kZXgudmFsdWVdXG4gICAgICBjb25zdCB5ZWFyc1ZOb2RlcyA9IGN1cnJlbnRZZWFycy5tYXAoZ2VuWWVhckNlbGwpXG5cbiAgICAgIHJldHVybiBnZW5UYWJsZVJvd3MoeWVhcnNWTm9kZXMsICd2LWRhdGUtcGlja2VyLXllYXJzX19yb3cnLCBDRUxMU19JTl9ST1cpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuWWVhcnMoKTogVk5vZGUgfCBudWxsIHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHsgY2xhc3M6ICd2LWRhdGUtcGlja2VyLXllYXJzX195ZWFycycgfVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKCFpc0xpc3RDaGFuZ2VkLnZhbHVlICYmIGgoJ2RpdicsIHByb3BzRGF0YSwgZ2VuWWVhcnNSb3dzKCkpKSB8fCBudWxsXG4gICAgICApXG4gICAgfVxuXG4gICAgZ2VuVGFibGVZZWFycygpXG4gICAgc2V0VGFibGVJbmRleCgpXG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgY29udGVudCA9IHVzZVRyYW5zaXRpb24oZ2VuWWVhcnMoKSBhcyBWTm9kZSwgdHJhbnNpdGlvbi52YWx1ZSlcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHsgY2xhc3M6IHsgJ3YtZGF0ZS1waWNrZXIteWVhcnMnOiB0cnVlIH0gfVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBjb250ZW50KVxuICAgIH1cbiAgfSxcbn0pXG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyBoLCBpbmplY3QsIGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnXG5cbi8vIEhlbHBlcnNcbmltcG9ydCB7IGdlblRhYmxlUm93cyB9IGZyb20gJy4vaGVscGVycydcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgRGF0ZVBpY2tlckJ0bkhhbmRsZXJzIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnXG5cbmV4cG9ydCBjb25zdCBWRGF0ZVBpY2tlck1vbnRocyA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWRhdGUtcGlja2VyLW1vbnRocycsXG5cbiAgcHJvcHM6IHtcbiAgICBsYW5nOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnZW4nLFxuICAgIH0sXG4gICAgbW9udGg6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgeWVhcjogW1N0cmluZywgTnVtYmVyXSxcbiAgICBsb2NhbGU6IEFycmF5LFxuICB9IGFzIGFueSxcblxuICBlbWl0czogWyd1cGRhdGU6bW9udGgnLCAndXBkYXRlOnllYXInXSxcblxuICBzZXR1cChwcm9wcywgeyBlbWl0IH0pIHtcbiAgICBjb25zdCBDRUxMU19JTl9ST1cgPSAzXG4gICAgY29uc3QgTU9OVEhTID0gWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMV1cbiAgICBjb25zdCBDVVJSRU5UX01PTlRIID0gbmV3IERhdGUoKS5nZXRNb250aCgpXG5cbiAgICBjb25zdCBoYW5kbGVyczogYW55ID0gaW5qZWN0KCdoYW5kbGVycycpIGFzIERhdGVQaWNrZXJCdG5IYW5kbGVyc1xuXG4gICAgaGFuZGxlcnMudmFsdWUgPSB7XG4gICAgICBvbk5leHQ6ICgpID0+IHVwZGF0ZVllYXIodHJ1ZSksXG4gICAgICBvblByZXY6ICgpID0+IHVwZGF0ZVllYXIoZmFsc2UpLFxuICAgIH1cblxuICAgIGNvbnN0IGNvbXB1dGVkTW9udGggPSBjb21wdXRlZDxudW1iZXI+KHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLm1vbnRoICE9PSB1bmRlZmluZWQgPyArcHJvcHMubW9udGggOiBDVVJSRU5UX01PTlRIXG4gICAgICB9LFxuICAgICAgc2V0KHZhbCkge1xuICAgICAgICBlbWl0KCd1cGRhdGU6bW9udGgnLCB2YWwpXG4gICAgICB9LFxuICAgIH0pXG5cbiAgICBmdW5jdGlvbiB1cGRhdGVZZWFyKGlzTmV4dDogYm9vbGVhbikge1xuICAgICAgY29uc3QgeWVhciA9ICtwcm9wcy55ZWFyICsgKGlzTmV4dCA/IDEgOiAtMSlcbiAgICAgIGVtaXQoJ3VwZGF0ZTp5ZWFyJywgeWVhcilcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5Nb250aENlbGwobW9udGgpOiBWTm9kZSB7XG4gICAgICBjb25zdCBpc1NlbGVjdGVkID0gbW9udGggPT09IGNvbXB1dGVkTW9udGgudmFsdWVcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1kYXRlLXBpY2tlci1tb250aHNfX2NlbGwnOiB0cnVlLFxuICAgICAgICAgICd2LWRhdGUtcGlja2VyLW1vbnRoc19fY2VsbC0tc2VsZWN0ZWQnOiBpc1NlbGVjdGVkLFxuICAgICAgICAgICd2LWRhdGUtcGlja2VyLW1vbnRoc19fY2VsbC0tY3VycmVudC1tb250aCc6IG1vbnRoID09PSBDVVJSRU5UX01PTlRILFxuICAgICAgICB9LFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiAoY29tcHV0ZWRNb250aC52YWx1ZSA9IG1vbnRoKSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgcHJvcHMubG9jYWxlW21vbnRoXSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5Nb250aFJvd3MoKTogVk5vZGVbXSB7XG4gICAgICBjb25zdCBtb250aHNWTm9kZXMgPSBNT05USFMubWFwKGdlbk1vbnRoQ2VsbClcblxuICAgICAgcmV0dXJuIGdlblRhYmxlUm93cyhcbiAgICAgICAgbW9udGhzVk5vZGVzLFxuICAgICAgICAndi1kYXRlLXBpY2tlci1tb250aHNfX3JvdycsXG4gICAgICAgIENFTExTX0lOX1JPV1xuICAgICAgKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiAndi1kYXRlLXBpY2tlci1tb250aHMnLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBnZW5Nb250aFJvd3MoKSlcbiAgICB9XG4gIH0sXG59KVxuIiwiZXhwb3J0IGNvbnN0IGxvY2FsZSA9IHtcbiAgcnU6IHtcbiAgICBtb250aHM6IFtcbiAgICAgICfQr9C90LLQsNGA0YwnLFxuICAgICAgJ9Ck0LXQstCy0YDQsNC70YwnLFxuICAgICAgJ9Cc0LDRgNGCJyxcbiAgICAgICfQkNC/0YDQtdC70YwnLFxuICAgICAgJ9Cc0LDQuScsXG4gICAgICAn0JjRjtC90YwnLFxuICAgICAgJ9CY0Y7Qu9GMJyxcbiAgICAgICfQkNCy0LPRg9GB0YInLFxuICAgICAgJ9Ch0LXQvdGC0Y/QsdGA0YwnLFxuICAgICAgJ9Ce0LrRgtGP0LHRgNGMJyxcbiAgICAgICfQndC+0Y/QsdGA0YwnLFxuICAgICAgJ9CU0LXQutCw0LHRgNGMJyxcbiAgICBdLFxuICAgIG1vbnRoc0FiYnI6IFtcbiAgICAgICfQr9C90LInLFxuICAgICAgJ9Ck0LXQsicsXG4gICAgICAn0JzQsNGAJyxcbiAgICAgICfQkNC/0YAnLFxuICAgICAgJ9Cc0LDQuScsXG4gICAgICAn0JjRjtC9JyxcbiAgICAgICfQmNGO0LsnLFxuICAgICAgJ9CQ0LLQsycsXG4gICAgICAn0KHQtdC9JyxcbiAgICAgICfQntC60YInLFxuICAgICAgJ9Cd0L7RjycsXG4gICAgICAn0JTQtdC6JyxcbiAgICBdLFxuICAgIHdlZWs6IFsn0JLRgScsICfQn9C9JywgJ9CS0YInLCAn0KHRgCcsICfQp9GCJywgJ9Cf0YInLCAn0KHQsSddLFxuICB9LFxuICBlbjoge1xuICAgIG1vbnRoczogW1xuICAgICAgJ0phbnVhcnknLFxuICAgICAgJ0ZlYnJ1YXJ5JyxcbiAgICAgICdNYXJjaCcsXG4gICAgICAnQXByaWwnLFxuICAgICAgJ01heScsXG4gICAgICAnSnVuZScsXG4gICAgICAnSnVseScsXG4gICAgICAnQXVndXN0JyxcbiAgICAgICdTZXB0ZW1iZXInLFxuICAgICAgJ09jdG9iZXInLFxuICAgICAgJ05vdmVtYmVyJyxcbiAgICAgICdEZWNlbWJlcicsXG4gICAgXSxcbiAgICBtb250aHNBYmJyOiBbXG4gICAgICAnSmFuJyxcbiAgICAgICdGZWInLFxuICAgICAgJ01hcicsXG4gICAgICAnQXByJyxcbiAgICAgICdNYXknLFxuICAgICAgJ0p1bicsXG4gICAgICAnSnVsJyxcbiAgICAgICdBdWcnLFxuICAgICAgJ1NlcCcsXG4gICAgICAnT2N0JyxcbiAgICAgICdOb3YnLFxuICAgICAgJ0RlYycsXG4gICAgXSxcbiAgICB3ZWVrOiBbJ1N1JywgJ01vJywgJ1R1JywgJ1dlJywgJ1RoJywgJ0ZyJywgJ1NhJ10sXG4gIH0sXG59XG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyBjb21wdXRlZCwgZGVmaW5lQ29tcG9uZW50LCBoLCBwcm92aWRlLCByZWFjdGl2ZSwgcmVmIH0gZnJvbSAndnVlJ1xuXG4vLyBFZmZlY3RzXG5pbXBvcnQgeyB1c2VDb2xvcnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG5pbXBvcnQgeyBlbGV2YXRpb25Qcm9wcywgdXNlRWxldmF0aW9uIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtZWxldmF0aW9uJ1xuaW1wb3J0IHsgdXNlVHJhbnNpdGlvbiB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXRyYW5zaXRpb24nXG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZUZXh0RmllbGQgfSBmcm9tICcuLi9WVGV4dEZpZWxkJ1xuaW1wb3J0IHsgVkRhdGVwaWNrZXJIZWFkZXIgfSBmcm9tICcuL1ZEYXRlcGlja2VySGVhZGVyJ1xuaW1wb3J0IHsgVkRhdGVQaWNrZXJEYXRlcyB9IGZyb20gJy4vVkRhdGVQaWNrZXJEYXRlcydcbmltcG9ydCB7IFZEYXRlUGlja2VyWWVhcnMgfSBmcm9tICcuL1ZEYXRlUGlja2VyWWVhcnMnXG5pbXBvcnQgeyBWRGF0ZVBpY2tlck1vbnRocyB9IGZyb20gJy4vVkRhdGVQaWNrZXJNb250aHMnXG5pbXBvcnQgeyBWTWVudSB9IGZyb20gJy4uL1ZNZW51J1xuXG4vLyBIZWxwZXJzXG5pbXBvcnQgeyBwYXJzZURhdGUgfSBmcm9tICcuL2hlbHBlcnMnXG5pbXBvcnQgeyBhZGRTY29wZWRTbG90IH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuLy8gVXRpbHNcbmltcG9ydCB7IGZvcm1hdERhdGUgfSBmcm9tICcuL3V0aWxzJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyBEYXRlUGlja2VyQnRuSGFuZGxlcnMsIERhdGVQaWNrZXJEYXRlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnXG5pbXBvcnQgeyBNYXliZSB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL2Jhc2UnXG5cbi8vIFNlcnZpY2VzXG5pbXBvcnQgeyBsb2NhbGUgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9sb2NhbGUnXG5cbnR5cGUgRGF0ZVBpY2tlckRhdGEgPSB7XG4gIHllYXI6IG51bWJlciB8IG51bGxcbiAgbW9udGg6IG51bWJlciB8IG51bGxcbiAgZGF0ZTogbnVtYmVyIHwgbnVsbFxuICBkYXk6IG51bWJlciB8IG51bGxcbiAgc2VsZWN0ZWQ6IERhdGVQaWNrZXJEYXRlIHwgbnVsbFxuICB0YWJsZU1vbnRoOiBudW1iZXIgfCBudWxsXG4gIHRhYmxlWWVhcjogbnVtYmVyIHwgbnVsbFxuICBjb252ZXJ0ZWREYXRlU3RyaW5nOiBzdHJpbmcgfCBudWxsXG4gIGlzWWVhcnM6IGJvb2xlYW5cbiAgaXNNb250aHM6IGJvb2xlYW5cbiAgaXNEYXRlczogYm9vbGVhblxuICBpc0FjdGl2ZTogYm9vbGVhblxufVxuXG5leHBvcnQgY29uc3QgVkRhdGVQaWNrZXIgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1kYXRlLXBpY2tlcicsXG4gIHByb3BzOiB7XG4gICAgZGFyazogQm9vbGVhbixcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICBjbGVhcmFibGU6IEJvb2xlYW4sXG4gICAgcmVhZG9ubHk6IEJvb2xlYW4sXG4gICAgdHlwZWFibGU6IEJvb2xlYW4sXG4gICAgbW9uZGF5Rmlyc3Q6IEJvb2xlYW4sXG4gICAgdG9kYXk6IEJvb2xlYW4sXG4gICAgdXNlTWxzOiBCb29sZWFuLFxuICAgIHVzZVV0YzogQm9vbGVhbixcbiAgICBsYW5nOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnZW4nLFxuICAgIH0sXG4gICAgbGFiZWw6IFN0cmluZyxcbiAgICBwcmVwZW5kSWNvbjogU3RyaW5nLFxuICAgIGZvcm1hdDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3l5eXkgTU0gZGQgRCcsXG4gICAgfSxcbiAgICBydWxlczogQXJyYXksXG4gICAgdmFsdWU6IFtTdHJpbmcsIERhdGUsIE51bWJlcl0sXG4gICAgbW9kZWxWYWx1ZTogW1N0cmluZywgRGF0ZSwgTnVtYmVyXSxcbiAgICBkaXNhYmxlZERhdGVzOiBPYmplY3QsXG4gICAgaGlnaGxpZ2h0ZWQ6IE9iamVjdCxcbiAgICBjb250ZW50Q29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdwcmltYXJ5JyxcbiAgICB9LFxuICAgIGNvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnd2hpdGUnLFxuICAgIH0sXG4gICAgLi4uZWxldmF0aW9uUHJvcHMoKSxcbiAgfSBhcyBhbnksXG5cbiAgZW1pdHM6IFsndXBkYXRlOnZhbHVlJywgJ3VwZGF0ZTptb2RlbFZhbHVlJywgJ3NlbGVjdGVkJ10sXG5cbiAgc2V0dXAocHJvcHMsIHsgZW1pdCwgc2xvdHMgfSkge1xuICAgIGNvbnN0IGRhdGE6IERhdGVQaWNrZXJEYXRhID0gcmVhY3RpdmUoe1xuICAgICAgeWVhcjogbnVsbCxcbiAgICAgIG1vbnRoOiBudWxsLFxuICAgICAgZGF0ZTogbnVsbCxcbiAgICAgIGRheTogbnVsbCxcbiAgICAgIHNlbGVjdGVkOiBudWxsLFxuICAgICAgdGFibGVNb250aDogbnVsbCxcbiAgICAgIHRhYmxlWWVhcjogbnVsbCxcbiAgICAgIGNvbnZlcnRlZERhdGVTdHJpbmc6IG51bGwsXG4gICAgICBpc1llYXJzOiBmYWxzZSxcbiAgICAgIGlzTW9udGhzOiBmYWxzZSxcbiAgICAgIGlzRGF0ZXM6IHRydWUsXG4gICAgICBpc0FjdGl2ZTogZmFsc2UsXG4gICAgfSlcblxuICAgIGNvbnN0IHtcbiAgICAgIHNldFRleHRDbGFzc05hbWVDb2xvcixcbiAgICAgIHNldFRleHRDc3NDb2xvcixcbiAgICAgIHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcixcbiAgICAgIHNldEJhY2tncm91bmRDc3NDb2xvcixcbiAgICB9ID0gdXNlQ29sb3JzKClcbiAgICBjb25zdCB7IGVsZXZhdGlvbkNsYXNzZXMgfSA9IHVzZUVsZXZhdGlvbihwcm9wcylcblxuICAgIGNvbnN0IGxvY2FsZU1vbnRoczogc3RyaW5nW10gPSBsb2NhbGVbcHJvcHMubGFuZ10ubW9udGhzQWJiclxuICAgIGNvbnN0IGxvY2FsZVdlZWs6IHN0cmluZ1tdID0gbG9jYWxlW3Byb3BzLmxhbmddLndlZWtcbiAgICBjb25zdCBjb250ZW50Q29sb3I6IHN0cmluZyA9IHByb3BzLmRhcmsgPyAnd2hpdGUnIDogcHJvcHMuY29udGVudENvbG9yXG5cbiAgICBjb25zdCBoYW5kbGVycyA9IHJlZjxEYXRlUGlja2VyQnRuSGFuZGxlcnM+KHt9KVxuICAgIGNvbnN0IGFjdGl2YXRvciA9IHJlZjxNYXliZTxWTm9kZT4+KG51bGwpXG4gICAgY29uc3QgY2xvc2VDb25kaXRpb25hbCA9IHJlZjxib29sZWFuPihmYWxzZSlcblxuICAgIHByb3ZpZGUoJ2hhbmRsZXJzJywgaGFuZGxlcnMpXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1kYXRlLXBpY2tlcic6IHRydWUsXG4gICAgICAndi1kYXRlLXBpY2tlci0tdHlwZWFibGUnOiBwcm9wcy50eXBlYWJsZSxcbiAgICAgICd2LWRhdGUtcGlja2VyLS1yZWFkb25seSc6ICFwcm9wcy50eXBlYWJsZSB8fCBwcm9wcy5yZWFkb25seSxcbiAgICB9KSlcblxuICAgIGNvbnN0IHRhYmxlQ2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtZGF0ZS1waWNrZXJfX3RhYmxlJzogdHJ1ZSxcbiAgICAgIC4uLmVsZXZhdGlvbkNsYXNzZXMudmFsdWUsXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgICAgLi4uKGNvbnRlbnRDb2xvciA/IHNldFRleHRDbGFzc05hbWVDb2xvcihjb250ZW50Q29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3QgdGFibGVTdHlsZXMgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0QmFja2dyb3VuZENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICAgIC4uLihjb250ZW50Q29sb3IgPyBzZXRUZXh0Q3NzQ29sb3IoY29udGVudENvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IGhlYWRlclZhbHVlID0gY29tcHV0ZWQ8c3RyaW5nPigoKSA9PiB7XG4gICAgICByZXR1cm4gZGF0YS5pc1llYXJzIHx8IGRhdGEuaXNNb250aHNcbiAgICAgICAgPyBgJHtkYXRhLnRhYmxlWWVhcn1gXG4gICAgICAgIDogZGF0YS5pc0RhdGVzXG4gICAgICAgID8gYCR7ZGF0YS50YWJsZVllYXJ9ICR7bG9jYWxlTW9udGhzW2RhdGEudGFibGVNb250aCFdfWBcbiAgICAgICAgOiAnJ1xuICAgIH0pXG5cbiAgICBjb25zdCBkaXNwbGF5RGF0ZSA9IGNvbXB1dGVkPHN0cmluZz4oKCkgPT4ge1xuICAgICAgY29uc3QgeyBtb250aCwgZGF0ZSwgZGF5IH0gPSBkYXRhLnNlbGVjdGVkIGFzIERhdGVQaWNrZXJEYXRlXG4gICAgICByZXR1cm4gYCR7bG9jYWxlTW9udGhzW21vbnRoXX0gJHtkYXRlfSAke2xvY2FsZVdlZWtbZGF5XX1gXG4gICAgfSlcblxuICAgIGNvbnN0IGNvbXB1dGVkVmFsdWUgPSBjb21wdXRlZDxzdHJpbmcgfCBudW1iZXIgfCBEYXRlPigoKSA9PiB7XG4gICAgICBjb25zdCB7IHllYXIsIG1vbnRoLCBkYXRlIH0gPSBkYXRhLnNlbGVjdGVkIGFzIERhdGVQaWNrZXJEYXRlXG4gICAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgbW9udGgsIGRhdGUgYXMgbnVtYmVyKVxuICAgIH0pXG5cbiAgICBmdW5jdGlvbiBzZXRJbml0RGF0ZSgpIHtcbiAgICAgIGlmIChwcm9wcy52YWx1ZSkgc2V0UGFyc2VkRGF0ZShwcm9wcy52YWx1ZSlcbiAgICAgIGVsc2UgaWYgKHByb3BzLm1vZGVsVmFsdWUpIHNldFBhcnNlZERhdGUocHJvcHMubW9kZWxWYWx1ZSlcbiAgICAgIGVsc2Ugc2V0UGFyc2VkRGF0ZSgpXG5cbiAgICAgIGlmIChwcm9wcy50b2RheSB8fCBwcm9wcy52YWx1ZSB8fCBwcm9wcy5tb2RlbFZhbHVlKSB7XG4gICAgICAgIGRhdGEuY29udmVydGVkRGF0ZVN0cmluZyA9IGNvbnZlcnRUb0Zvcm1hdCgpIGFzIHN0cmluZ1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uVGFibGVDaGFuZ2UoKTogdm9pZCB8IGJvb2xlYW4ge1xuICAgICAgaWYgKGRhdGEuaXNZZWFycykge1xuICAgICAgICBkYXRhLmlzWWVhcnMgPSBmYWxzZVxuICAgICAgICByZXR1cm4gKGRhdGEuaXNNb250aHMgPSB0cnVlKVxuICAgICAgfVxuICAgICAgaWYgKGRhdGEuaXNNb250aHMpIHtcbiAgICAgICAgZGF0YS5pc01vbnRocyA9IGZhbHNlXG4gICAgICAgIHJldHVybiAoZGF0YS5pc1llYXJzID0gdHJ1ZSlcbiAgICAgIH1cbiAgICAgIGlmIChkYXRhLmlzRGF0ZXMpIHtcbiAgICAgICAgZGF0YS5pc0RhdGVzID0gZmFsc2VcbiAgICAgICAgcmV0dXJuIChkYXRhLmlzTW9udGhzID0gdHJ1ZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXREYXRhRGF0ZTxUIGV4dGVuZHMgRGF0ZVBpY2tlckRhdGU+KHtcbiAgICAgIHllYXIsXG4gICAgICBtb250aCxcbiAgICAgIGRhdGUsXG4gICAgICBkYXksXG4gICAgfTogVCkge1xuICAgICAgZGF0YS50YWJsZU1vbnRoID0gbW9udGhcbiAgICAgIGRhdGEudGFibGVZZWFyID0geWVhclxuXG4gICAgICBkYXRhLnllYXIgPSB5ZWFyXG4gICAgICBkYXRhLm1vbnRoID0gbW9udGhcbiAgICAgIGRhdGEuZGF0ZSA9IGRhdGVcbiAgICAgIGRhdGEuZGF5ID0gZGF5XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0UGFyc2VkRGF0ZShzZWxlY3RlZERhdGU6IHN0cmluZyB8IG51bGwgPSBudWxsKSB7XG4gICAgICBjb25zdCBkYXRlRm9yUGFyc2luZyA9IHNlbGVjdGVkRGF0ZSB8fCBuZXcgRGF0ZSgpXG5cbiAgICAgIGRhdGEuc2VsZWN0ZWQgPSBwYXJzZURhdGUoZGF0ZUZvclBhcnNpbmcpXG4gICAgICAhc2VsZWN0ZWREYXRlICYmIChkYXRhLnNlbGVjdGVkIS5kZWZhdWx0ID0gIXNlbGVjdGVkRGF0ZSlcblxuICAgICAgc2V0RGF0YURhdGUoZGF0YS5zZWxlY3RlZCEpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25ZZWFyVXBkYXRlKHllYXI6IG51bWJlcikge1xuICAgICAgZGF0YS50YWJsZVllYXIgPSB5ZWFyXG4gICAgICBkYXRhLmlzTW9udGhzID0gdHJ1ZVxuICAgICAgZGF0YS5pc1llYXJzID0gZmFsc2VcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbk1vbnRoVXBkYXRlKG1vbnRoOiBudW1iZXIpIHtcbiAgICAgIGRhdGEudGFibGVNb250aCA9IG1vbnRoXG4gICAgICBkYXRhLmlzTW9udGhzID0gZmFsc2VcbiAgICAgIGRhdGEuaXNZZWFycyA9IGZhbHNlXG4gICAgICBkYXRhLmlzRGF0ZXMgPSB0cnVlXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25EYXRlVXBkYXRlKGRhdGU6IERhdGVQaWNrZXJEYXRlKSB7XG4gICAgICBpZiAoIWRhdGUpIHJldHVyblxuXG4gICAgICBjbG9zZUNvbmRpdGlvbmFsLnZhbHVlID0gdHJ1ZVxuXG4gICAgICBkYXRhLnNlbGVjdGVkID0gZGF0ZVxuICAgICAgZGF0YS50YWJsZU1vbnRoID0gZGF0ZS5tb250aFxuICAgICAgZGF0YS50YWJsZVllYXIgPSBkYXRlLnllYXJcblxuICAgICAgZGF0YS5jb252ZXJ0ZWREYXRlU3RyaW5nID0gY29udmVydFRvRm9ybWF0KCkgYXMgc3RyaW5nXG5cbiAgICAgIGVtaXQoJ3VwZGF0ZTp2YWx1ZScsIGNvbXB1dGVkVmFsdWUudmFsdWUpXG4gICAgICBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIGNvbXB1dGVkVmFsdWUudmFsdWUpXG4gICAgICBlbWl0KCdzZWxlY3RlZCcsIGNvbXB1dGVkVmFsdWUudmFsdWUpXG5cbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiAoY2xvc2VDb25kaXRpb25hbC52YWx1ZSA9IGZhbHNlKSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkRhdGVNb250aFVwZGF0ZShkYXRlT2JqZWN0KSB7XG4gICAgICBkYXRhLnRhYmxlTW9udGggPSBkYXRlT2JqZWN0Lm1vbnRoXG4gICAgICBpZiAoZGF0ZU9iamVjdC55ZWFyKSBkYXRhLnRhYmxlWWVhciA9IGRhdGVPYmplY3QueWVhclxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uRGF0ZUlucHV0KGRhdGU6IHN0cmluZyk6IGFueSB7XG4gICAgICBvbkRhdGVVcGRhdGUoc3RyaW5nVG9EYXRlKGRhdGUpISlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdHJpbmdUb0RhdGUoZGF0ZTogc3RyaW5nKTogRGF0ZVBpY2tlckRhdGUgfCBudWxsIHtcbiAgICAgIGlmIChkYXRlLmxlbmd0aCA9PT0gMTApIHtcbiAgICAgICAgY29uc3QgZGF0ZUFycmF5ID0gZGF0ZS50cmltKCkuc3BsaXQoL1xcVy8pXG5cbiAgICAgICAgaWYgKGRhdGVBcnJheVswXS5sZW5ndGggPCA0KSB7XG4gICAgICAgICAgZGF0ZSA9IGRhdGVBcnJheS5yZXZlcnNlKCkuam9pbignLicpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFyc2VEYXRlKG5ldyBEYXRlKERhdGUucGFyc2UoZGF0ZSkpKVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb252ZXJ0VG9Gb3JtYXQoKTogc3RyaW5nIHtcbiAgICAgIGlmICghZGF0YS5zZWxlY3RlZCkgcmV0dXJuICcnXG4gICAgICByZXR1cm4gZm9ybWF0RGF0ZShcbiAgICAgICAgbmV3IERhdGUoXG4gICAgICAgICAgZGF0YS5zZWxlY3RlZCEueWVhcixcbiAgICAgICAgICBkYXRhLnNlbGVjdGVkIS5tb250aCxcbiAgICAgICAgICBkYXRhLnNlbGVjdGVkIS5kYXRlIGFzIG51bWJlclxuICAgICAgICApLFxuICAgICAgICBwcm9wcy5mb3JtYXQsXG4gICAgICAgIGxvY2FsZVtwcm9wcy5sYW5nXVxuICAgICAgKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbkRpc3BsYXlWYWx1ZSh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKTogVk5vZGUge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogJ3YtZGF0ZS1waWNrZXJfX2Rpc3BsYXktdmFsdWUnLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdXNlVHJhbnNpdGlvbihcbiAgICAgICAgaCgnc3BhbicsIHByb3BzRGF0YSwgdmFsdWUpLFxuICAgICAgICAnc2NhbGUtaW4tb3V0JyxcbiAgICAgICAgJ291dC1pbidcbiAgICAgIClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5EYXRlcGlja2VyRGlzcGxheUlubmVyKCk6IFZOb2RlIHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6ICd2LWRhdGUtcGlja2VyX19kaXNwbGF5LWlubmVyJyxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgW1xuICAgICAgICBnZW5EaXNwbGF5VmFsdWUoZGF0YS5zZWxlY3RlZD8ueWVhciBhcyBudW1iZXIpLFxuICAgICAgICBnZW5EaXNwbGF5VmFsdWUoZGlzcGxheURhdGUudmFsdWUpLFxuICAgICAgXSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5EYXRlcGlja2VyRGlzcGxheSgpOiBWTm9kZSB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgJ3YtZGF0ZS1waWNrZXJfX2Rpc3BsYXknOiB0cnVlLFxuICAgICAgICAgIC4uLihjb250ZW50Q29sb3IgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IoY29udGVudENvbG9yKSA6IHt9KSxcbiAgICAgICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgICAgICB9LFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIC4uLihjb250ZW50Q29sb3IgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IoY29udGVudENvbG9yKSA6IHt9KSxcbiAgICAgICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRUZXh0Q3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgICAgICB9LFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBnZW5EYXRlcGlja2VyRGlzcGxheUlubmVyKCkpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuRGF0ZXBpY2tlckhlYWRlcigpOiBWTm9kZSB7XG4gICAgICByZXR1cm4gaChcbiAgICAgICAgVkRhdGVwaWNrZXJIZWFkZXIsXG4gICAgICAgIHtcbiAgICAgICAgICBvbk5leHQ6ICgpID0+IGhhbmRsZXJzLnZhbHVlLm9uTmV4dCEoKSxcbiAgICAgICAgICBvblByZXY6ICgpID0+IGhhbmRsZXJzLnZhbHVlLm9uUHJldiEoKSxcbiAgICAgICAgICBvblRhYmxlOiBvblRhYmxlQ2hhbmdlLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gaGVhZGVyVmFsdWUudmFsdWUsXG4gICAgICAgIH1cbiAgICAgIClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5EYXRlcGlja2VyWWVhcnNUYWJsZSgpOiBWTm9kZSB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIHllYXI6IGRhdGEudGFibGVZZWFyLFxuICAgICAgICBbJ29uVXBkYXRlOnllYXInXTogb25ZZWFyVXBkYXRlLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaChWRGF0ZVBpY2tlclllYXJzLCBwcm9wc0RhdGEpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuRGF0ZXBpY2tlck1vbnRoc1RhYmxlKCk6IFZOb2RlIHtcbiAgICAgIHJldHVybiBoKFZEYXRlUGlja2VyTW9udGhzLCB7XG4gICAgICAgIGxhbmc6IHByb3BzLmxhbmcsXG4gICAgICAgIG1vbnRoOiBkYXRhLnRhYmxlTW9udGgsXG4gICAgICAgIHllYXI6IGRhdGEudGFibGVZZWFyLFxuICAgICAgICBsb2NhbGU6IGxvY2FsZU1vbnRocyxcbiAgICAgICAgWydvblVwZGF0ZTptb250aCddOiBvbk1vbnRoVXBkYXRlLFxuICAgICAgICBbJ29uVXBkYXRlOnllYXInXTogb25ZZWFyVXBkYXRlLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5EYXRlcGlja2VyRGF0ZXNUYWJsZSgpOiBWTm9kZSB7XG4gICAgICByZXR1cm4gaChcbiAgICAgICAgVkRhdGVQaWNrZXJEYXRlcyxcbiAgICAgICAge1xuICAgICAgICAgIGxvY2FsZTogbG9jYWxlV2VlayxcbiAgICAgICAgICBtb25kYXlGaXJzdDogcHJvcHMubW9uZGF5Rmlyc3QsXG4gICAgICAgICAgbW9udGg6IGRhdGEudGFibGVNb250aCxcbiAgICAgICAgICB5ZWFyOiBkYXRhLnRhYmxlWWVhcixcbiAgICAgICAgICB2YWx1ZTogZGF0YS5zZWxlY3RlZCxcbiAgICAgICAgICBkaXNhYmxlZERhdGVzOiBwcm9wcy5kaXNhYmxlZERhdGVzLFxuICAgICAgICAgIFsnb25VcGRhdGU6dmFsdWUnXTogb25EYXRlVXBkYXRlLFxuICAgICAgICAgIFsnb25VcGRhdGU6bW9udGgnXTogb25EYXRlTW9udGhVcGRhdGUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkYXRlOiBzbG90cy5kYXRlICYmIGFkZFNjb3BlZFNsb3QoJ2RhdGUnLCBzbG90cyksXG4gICAgICAgIH1cbiAgICAgIClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5EYXRlcGlja2VyQm9keSgpOiBWTm9kZSB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgJ3YtZGF0ZS1waWNrZXJfX2JvZHknOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHByb3BzRGF0YSxcbiAgICAgICAgdXNlVHJhbnNpdGlvbihcbiAgICAgICAgICAoKGRhdGEuaXNZZWFycyAmJiBnZW5EYXRlcGlja2VyWWVhcnNUYWJsZSgpKSB8fFxuICAgICAgICAgICAgKGRhdGEuaXNNb250aHMgJiYgZ2VuRGF0ZXBpY2tlck1vbnRoc1RhYmxlKCkpIHx8XG4gICAgICAgICAgICAoZGF0YS5pc0RhdGVzICYmIGdlbkRhdGVwaWNrZXJEYXRlc1RhYmxlKCkpKSBhcyBWTm9kZSxcbiAgICAgICAgICAnc2xpZGUtaW4tbGVmdCcsXG4gICAgICAgICAgJ291dC1pbidcbiAgICAgICAgKVxuICAgICAgKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbkRhdGVwaWNrZXJJbnB1dCgpOiBWTm9kZSB7XG4gICAgICByZXR1cm4gaChWVGV4dEZpZWxkLCB7XG4gICAgICAgIG1vZGVsVmFsdWU6IGRhdGEuY29udmVydGVkRGF0ZVN0cmluZyEsXG4gICAgICAgIGRhcms6IHByb3BzLmRhcmssXG4gICAgICAgIGxhYmVsOiBwcm9wcy5sYWJlbCxcbiAgICAgICAgcmVhZG9ubHk6ICFwcm9wcy50eXBlYWJsZSxcbiAgICAgICAgZGlzYWJsZWQ6IHByb3BzLmRpc2FibGVkLFxuICAgICAgICBwcmVwZW5kSWNvbjogcHJvcHMucHJlcGVuZEljb24sXG4gICAgICAgIHJ1bGVzOiBwcm9wcy5ydWxlcyxcbiAgICAgICAgY2xlYXJhYmxlOiBwcm9wcy5jbGVhcmFibGUsXG4gICAgICAgIHJlZjogYWN0aXZhdG9yLFxuICAgICAgICBvbklucHV0OiBvbkRhdGVJbnB1dCxcbiAgICAgICAgb25DbGVhcjogKCkgPT4ge1xuICAgICAgICAgIGRhdGEuY29udmVydGVkRGF0ZVN0cmluZyA9ICcnXG4gICAgICAgICAgZW1pdCgndXBkYXRlOnZhbHVlJywgbnVsbClcbiAgICAgICAgICBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIG51bGwpXG4gICAgICAgICAgZW1pdCgnc2VsZWN0ZWQnLCBudWxsKVxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5EYXRlcGlja2VyVGFibGUoKTogVk5vZGUge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogdGFibGVDbGFzc2VzLnZhbHVlLFxuICAgICAgICBzdHlsZTogdGFibGVTdHlsZXMudmFsdWUsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIFtcbiAgICAgICAgZ2VuRGF0ZXBpY2tlckRpc3BsYXkoKSxcbiAgICAgICAgZ2VuRGF0ZXBpY2tlckhlYWRlcigpLFxuICAgICAgICBnZW5EYXRlcGlja2VyQm9keSgpLFxuICAgICAgXSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5NZW51KCkge1xuICAgICAgcmV0dXJuIGgoXG4gICAgICAgIFZNZW51LFxuICAgICAgICB7XG4gICAgICAgICAgYWN0aXZhdG9yOiBhY3RpdmF0b3IudmFsdWUhLFxuICAgICAgICAgIGludGVybmFsQWN0aXZhdG9yOiB0cnVlLFxuICAgICAgICAgIGlucHV0QWN0aXZhdG9yOiAnLnYtaW5wdXRfX3RleHQtZmllbGQnLFxuICAgICAgICAgIHdpZHRoOiAnYXV0bycsXG4gICAgICAgICAgbWF4SGVpZ2h0OiAnYXV0bycsXG4gICAgICAgICAgYm90dG9tOiBwcm9wcy50eXBlYWJsZSxcbiAgICAgICAgICBvcGVuT25DbGljazogdHJ1ZSxcbiAgICAgICAgICBjbG9zZU9uQ2xpY2s6IGNsb3NlQ29uZGl0aW9uYWwudmFsdWUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBnZW5EYXRlcGlja2VyVGFibGUoKSxcbiAgICAgICAgfVxuICAgICAgKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbkRhdGVwaWNrZXIoKTogVk5vZGUge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgW1xuICAgICAgICBnZW5EYXRlcGlja2VySW5wdXQoKSxcbiAgICAgICAgYWN0aXZhdG9yLnZhbHVlICYmIGdlbk1lbnUoKSxcbiAgICAgIF0pXG4gICAgfVxuXG4gICAgc2V0SW5pdERhdGUoKVxuXG4gICAgcmV0dXJuICgpID0+IGdlbkRhdGVwaWNrZXIoKVxuICB9LFxufSlcbiIsImV4cG9ydCAqIGZyb20gJy4vVkRhdGVQaWNrZXInXG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyBoLCBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnXG5cbi8vIEVmZmVjdHNcbmltcG9ydCB7IHVzZUNvbG9ycyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcblxuZXhwb3J0IGNvbnN0IFZQcm9ncmVzc0xpbmVhciA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LXByb2dyZXNzLWxpbmVhcicsXG4gIHByb3BzOiB7XG4gICAgdmFsdWU6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gICAgbW9kZWxWYWx1ZToge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgfSxcbiAgICBidWZmZXJWYWx1ZToge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgfSxcbiAgICBoZWlnaHQ6IHtcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgICBkZWZhdWx0OiA0LFxuICAgIH0sXG4gICAgY29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdwcmltYXJ5JyxcbiAgICB9LFxuICAgIGJhY2tncm91bmRDb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3ByaW1hcnknLFxuICAgIH0sXG4gICAgYmFja2dyb3VuZE9wYWNpdHk6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcwLjMnLFxuICAgIH0sXG4gICAgaW5kZXRlcm1pbmF0ZTogQm9vbGVhbixcbiAgICByZXZlcnNlOiBCb29sZWFuLFxuICAgIHJvdW5kZWQ6IEJvb2xlYW4sXG4gICAgc3RyZWFtOiBCb29sZWFuLFxuICAgIHN0cmlwZWQ6IEJvb2xlYW4sXG4gIH0sXG4gIHNldHVwKHByb3BzKSB7XG4gICAgY29uc3QgeyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IsIHNldEJhY2tncm91bmRDc3NDb2xvciB9ID0gdXNlQ29sb3JzKClcblxuICAgIGNvbnN0IGdlblByb2dyZXNzQmFyID0gKHR5cGUgPSAnJykgPT4ge1xuICAgICAgY29uc3QgYmFyV2lkdGggPSBwcm9wcy52YWx1ZSB8fCBwcm9wcy5tb2RlbFZhbHVlXG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgJ3YtcHJvZ3Jlc3MtbGluZWFyX19iYXInOiB0cnVlLFxuICAgICAgICAgIFt0eXBlXTogISF0eXBlLFxuICAgICAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgd2lkdGg6ICFwcm9wcy5pbmRldGVybWluYXRlID8gYmFyV2lkdGggKyAnJScgOiAnJyxcbiAgICAgICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5Qcm9ncmVzc0J1ZmZlciA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGJ1ZmZlcldpZHRoID0gcHJvcHMudmFsdWUgfHwgcHJvcHMubW9kZWxWYWx1ZVxuXG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgJ3YtcHJvZ3Jlc3MtbGluZWFyX19idWZmZXInOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIHdpZHRoOiBidWZmZXJXaWR0aCA/IGJ1ZmZlcldpZHRoICsgJyUnIDogJycsXG4gICAgICAgIH0sXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuUHJvZ3Jlc3NCYWNrZ3JvdW5kKCkge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LXByb2dyZXNzLWxpbmVhcl9fYmFja2dyb3VuZCc6IHRydWUsXG4gICAgICAgICAgLi4uKHByb3BzLmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMuYmFja2dyb3VuZENvbG9yKVxuICAgICAgICAgICAgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgb3BhY2l0eTogcHJvcHMuYmFja2dyb3VuZE9wYWNpdHksXG4gICAgICAgICAgLi4uKHByb3BzLmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMuYmFja2dyb3VuZENvbG9yKVxuICAgICAgICAgICAgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuUHJvZ3Jlc3NJbmRldGVybWluYXRlKCkge1xuICAgICAgcmV0dXJuIGgoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3M6IHsgJ3YtcHJvZ3Jlc3MtbGluZWFyX19pbmRldGVybWluYXRlJzogdHJ1ZSB9LFxuICAgICAgICB9LFxuICAgICAgICBbZ2VuUHJvZ3Jlc3NCYXIoJ2xvbmcnKSwgZ2VuUHJvZ3Jlc3NCYXIoJ3Nob3J0JyldXG4gICAgICApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuUHJvZ3Jlc3NMaW5lYXIoKSB7XG4gICAgICByZXR1cm4gaChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzczogJ3YtcHJvZ3Jlc3MtbGluZWFyJyxcbiAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgaGVpZ2h0OiBgJHtwcm9wcy5oZWlnaHR9cHhgLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIFtcbiAgICAgICAgICBnZW5Qcm9ncmVzc0JhY2tncm91bmQoKSxcbiAgICAgICAgICBnZW5Qcm9ncmVzc0J1ZmZlcigpLFxuICAgICAgICAgIHByb3BzLmluZGV0ZXJtaW5hdGUgPyBnZW5Qcm9ncmVzc0luZGV0ZXJtaW5hdGUoKSA6IGdlblByb2dyZXNzQmFyKCksXG4gICAgICAgIF1cbiAgICAgIClcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4gZ2VuUHJvZ3Jlc3NMaW5lYXIoKVxuICB9LFxufSlcbiIsIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGgsIHJlZiwgcmVhY3RpdmUsIGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQsIG9uQmVmb3JlTW91bnQgfSBmcm9tICd2dWUnXG5cbi8vIEVmZmVjdHNcbmltcG9ydCB7IHZhbGlkYXRpb25Qcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXZhbGlkYXRpb24nXG5pbXBvcnQgeyB1c2VDb2xvcnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gJ3Z1ZSdcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVklucHV0IH0gZnJvbSAnLi4vVklucHV0J1xuaW1wb3J0IHsgVlNlbGVjdExpc3QgfSBmcm9tICcuLi9WU2VsZWN0J1xuaW1wb3J0IHsgVk1lbnUgfSBmcm9tICcuLi9WTWVudSdcbmltcG9ydCB7IFZQcm9ncmVzc0xpbmVhciB9IGZyb20gJy4uL1ZQcm9ncmVzc0xpbmVhcidcblxuLy8gSGVscGVyc1xuaW1wb3J0IHsgZ2V0S2V5VmFsdWVGcm9tVGFyZ2V0IH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxudHlwZSBTZWxlY3RTdGF0ZSA9IHtcbiAgZm9jdXNlZDogYm9vbGVhblxuICBpc01lbnVBY3RpdmU6IGJvb2xlYW5cbiAgc2VhcmNoOiBzdHJpbmdcbiAgc2VsZWN0OiBhbnlcbn1cblxuZXhwb3J0IGNvbnN0IFZBdXRvY29tcGxldGUgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1hdXRvY29tcGxldGUnLFxuICBwcm9wczoge1xuICAgIGxhYmVsOiBTdHJpbmcsXG4gICAgaXRlbXM6IEFycmF5LFxuICAgIGRhcms6IEJvb2xlYW4sXG4gICAgdmFsdWVLZXk6IFN0cmluZyxcbiAgICBpZEtleTogU3RyaW5nLFxuICAgIGxpc3RDb2xvcjogU3RyaW5nLFxuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIHR5cGVhYmxlOiBCb29sZWFuLFxuICAgIGxvYWRpbmc6IEJvb2xlYW4sXG4gICAgbW9kZWxWYWx1ZToge1xuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICB9LFxuICAgIGNvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAncHJpbWFyeScsXG4gICAgfSxcbiAgICAuLi52YWxpZGF0aW9uUHJvcHMoKSxcbiAgfSBhcyBhbnksXG5cbiAgZW1pdHM6IFtcbiAgICAnaW5wdXQnLFxuICAgICdibHVyJyxcbiAgICAnZm9jdXMnLFxuICAgICdzZWxlY3QnLFxuICAgICd1cGRhdGU6bW9kZWxWYWx1ZScsXG4gICAgJ3VwZGF0ZTp2YWx1ZScsXG4gIF0sXG5cbiAgc2V0dXAocHJvcHMsIHsgZW1pdCB9KTogKCkgPT4gVk5vZGUge1xuICAgIGNvbnN0IHN0YXRlOiBTZWxlY3RTdGF0ZSA9IHJlYWN0aXZlKHtcbiAgICAgIGZvY3VzZWQ6IGZhbHNlLFxuICAgICAgaXNNZW51QWN0aXZlOiBmYWxzZSxcbiAgICAgIHNlYXJjaDogJycsXG4gICAgICBzZWxlY3Q6IG51bGwsXG4gICAgfSlcblxuICAgIGNvbnN0IHsgc2V0VGV4dENzc0NvbG9yLCBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IgfSA9IHVzZUNvbG9ycygpXG4gICAgY29uc3QgYWN0aXZhdG9yID0gcmVmKG51bGwpXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1hdXRvY29tcGxldGUnOiB0cnVlLFxuICAgICAgJ3YtYXV0b2NvbXBsZXRlLS1kaXNhYmxlZCc6IHByb3BzLmRpc2FibGVkLFxuICAgICAgJ3YtYXV0b2NvbXBsZXRlLS1mb2N1c2VkJzogc3RhdGUuZm9jdXNlZCxcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldFRleHRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PigoKSA9PiAoe1xuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0VGV4dENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IHZhbHVlUHJvcGVydHkgPSBjb21wdXRlZDxhbnk+KCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5tb2RlbFZhbHVlIHx8IHByb3BzLnZhbHVlXG4gICAgfSlcblxuICAgIGNvbnN0IGlucHV0VmFsdWUgPSBjb21wdXRlZDxzdHJpbmc+KCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy52YWx1ZUtleSAmJiB2YWx1ZVByb3BlcnR5LnZhbHVlXG4gICAgICAgID8gZ2V0S2V5VmFsdWVGcm9tVGFyZ2V0KHByb3BzLnZhbHVlS2V5LCB2YWx1ZVByb3BlcnR5LnZhbHVlKVxuICAgICAgICA6IHZhbHVlUHJvcGVydHkudmFsdWVcbiAgICB9KVxuXG4gICAgY29uc3Qgb25Gb2N1cyA9ICgpID0+IHtcbiAgICAgIHN0YXRlLmZvY3VzZWQgPSB0cnVlXG4gICAgICBzdGF0ZS5pc01lbnVBY3RpdmUgPSB0cnVlXG4gICAgICBlbWl0KCdmb2N1cycpXG4gICAgfVxuXG4gICAgY29uc3Qgb25CbHVyID0gKCkgPT4ge1xuICAgICAgaWYgKCF2YWx1ZVByb3BlcnR5LnZhbHVlICYmICFzdGF0ZS5zZWFyY2gpIHN0YXRlLnNlYXJjaCA9ICcnXG4gICAgICBpZiAoIXN0YXRlLnNlYXJjaCAmJiB2YWx1ZVByb3BlcnR5LnZhbHVlKSBzdGF0ZS5zZWFyY2ggPSBpbnB1dFZhbHVlLnZhbHVlXG4gICAgICBzdGF0ZS5mb2N1c2VkID0gZmFsc2VcbiAgICAgIGVtaXQoJ2JsdXInKVxuICAgIH1cblxuICAgIGNvbnN0IG9uSW5wdXQgPSAoZSkgPT4ge1xuICAgICAgc3RhdGUuc2VhcmNoID0gZS50YXJnZXQudmFsdWVcbiAgICAgIGVtaXQoJ2lucHV0JywgZS50YXJnZXQudmFsdWUpXG4gICAgfVxuXG4gICAgY29uc3Qgb25DbGVhciA9ICgpID0+IHtcbiAgICAgIHN0YXRlLnNlYXJjaCA9ICcnXG4gICAgICBzdGF0ZS5zZWxlY3QgPSBudWxsXG4gICAgICBlbWl0KCdzZWxlY3QnLCBudWxsKVxuICAgICAgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCBudWxsKVxuICAgICAgZW1pdCgndXBkYXRlOnZhbHVlJywgbnVsbClcbiAgICB9XG5cbiAgICBjb25zdCBvblNlbGVjdCA9IChpdCkgPT4ge1xuICAgICAgc3RhdGUuc2VhcmNoID0gcHJvcHMudmFsdWVLZXlcbiAgICAgICAgPyBnZXRLZXlWYWx1ZUZyb21UYXJnZXQocHJvcHMudmFsdWVLZXksIGl0KVxuICAgICAgICA6IGl0XG4gICAgICBzdGF0ZS5zZWxlY3QgPSBpdFxuICAgICAgZW1pdCgnc2VsZWN0JywgaXQpXG4gICAgICBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIGl0KVxuICAgICAgZW1pdCgndXBkYXRlOnZhbHVlJywgaXQpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuSW5wdXQgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2lucHV0Jywge1xuICAgICAgICB2YWx1ZTogc3RhdGUuc2VhcmNoLFxuICAgICAgICBkaXNhYmxlZDogcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIHJlYWRvbmx5OiBwcm9wcy5yZWFkb25seSAmJiAhcHJvcHMudHlwZWFibGUsXG4gICAgICAgIHJlZjogYWN0aXZhdG9yLFxuICAgICAgICBjbGFzczogJ3YtYXV0b2NvbXBsZXRlX19pbnB1dCcsXG4gICAgICAgIG9uSW5wdXQsXG4gICAgICAgIG9uRm9jdXMsXG4gICAgICAgIG9uQmx1cixcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQXV0b2NvbXBsZXRlTGlzdCA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaChWU2VsZWN0TGlzdCwge1xuICAgICAgICBpdGVtczogcHJvcHMuaXRlbXMsXG4gICAgICAgIHZhbHVlS2V5OiBwcm9wcy52YWx1ZUtleSxcbiAgICAgICAgaWRLZXk6IHByb3BzLmlkS2V5LFxuICAgICAgICBhY3RpdmU6IHN0YXRlLmlzTWVudUFjdGl2ZSxcbiAgICAgICAgY29sb3I6IHByb3BzLmRhcmsgPyAnd2hpdGUnIDogcHJvcHMuY29sb3IsXG4gICAgICAgIGxpc3RDb2xvcjogcHJvcHMubGlzdENvbG9yLFxuICAgICAgICBzZWxlY3Q6IHN0YXRlLnNlbGVjdCxcbiAgICAgICAgb25TZWxlY3QsXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlbk1lbnUgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoXG4gICAgICAgIFZNZW51LFxuICAgICAgICB7XG4gICAgICAgICAgYWN0aXZhdG9yOiBhY3RpdmF0b3IudmFsdWUhLFxuICAgICAgICAgIG9wZW5PbkNsaWNrOiB0cnVlLFxuICAgICAgICAgIG1heEhlaWdodDogMjQwLFxuICAgICAgICAgIGJvdHRvbTogdHJ1ZSxcbiAgICAgICAgICBvbkhpZGU6ICgpID0+IChzdGF0ZS5pc01lbnVBY3RpdmUgPSBzdGF0ZS5mb2N1c2VkKSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGRlZmF1bHQ6IGdlbkF1dG9jb21wbGV0ZUxpc3QsXG4gICAgICAgIH1cbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5MaW5lYXJQcm9ncmVzcyA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzczogeyAndi1hdXRvY29tcGxldGVfX2xvYWRpbmcnOiB0cnVlIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGgoVlByb2dyZXNzTGluZWFyLCB7XG4gICAgICAgICAgaGVpZ2h0OiAyLFxuICAgICAgICAgIGluZGV0ZXJtaW5hdGU6IHRydWUsXG4gICAgICAgICAgY29sb3I6IHByb3BzLmNvbG9yLFxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcHJvcHMuY29sb3IsXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQXV0b2NvbXBsZXRlID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgICAgIHN0eWxlOiBzdHlsZXMudmFsdWUsXG4gICAgICAgIH0sXG4gICAgICAgIFtcbiAgICAgICAgICBnZW5JbnB1dCgpLFxuICAgICAgICAgIHByb3BzLmxvYWRpbmcgJiYgZ2VuTGluZWFyUHJvZ3Jlc3MoKSxcbiAgICAgICAgICBhY3RpdmF0b3IudmFsdWUgJiYgZ2VuTWVudSgpLFxuICAgICAgICBdXG4gICAgICApXG4gICAgfVxuXG4gICAgb25CZWZvcmVNb3VudCgoKSA9PiB7XG4gICAgICBzdGF0ZS5zZWxlY3QgPSB2YWx1ZVByb3BlcnR5LnZhbHVlXG4gICAgICBzdGF0ZS5zZWFyY2ggPSBpbnB1dFZhbHVlLnZhbHVlXG4gICAgfSlcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGxhYmVsOiBwcm9wcy5sYWJlbCxcbiAgICAgICAgZm9jdXNlZDogc3RhdGUuaXNNZW51QWN0aXZlLFxuICAgICAgICBoYXNTdGF0ZTogISFzdGF0ZS5zZWFyY2gsXG4gICAgICAgIGRhcms6IHByb3BzLmRhcmssXG4gICAgICAgIGRpc2FibGVkOiBwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgY2xlYXJhYmxlOiBwcm9wcy5jbGVhcmFibGUsXG4gICAgICAgIGNvbG9yOiBwcm9wcy5jb2xvcixcbiAgICAgICAgcnVsZXM6IHByb3BzLnJ1bGVzLFxuICAgICAgICB2YWx1ZTogdmFsdWVQcm9wZXJ0eS52YWx1ZSB8fCBzdGF0ZS5zZWFyY2gsXG4gICAgICAgIG9uQ2xlYXIsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKFZJbnB1dCwgcHJvcHNEYXRhLCB7XG4gICAgICAgICd0ZXh0LWZpZWxkJzogKCkgPT4gZ2VuQXV0b2NvbXBsZXRlKCksXG4gICAgICB9KVxuICAgIH1cbiAgfSxcbn0pXG4iLCJleHBvcnQgKiBmcm9tICcuL1ZBdXRvY29tcGxldGUnXG4iLCJleHBvcnQgKiBmcm9tICcuL1ZQcm9ncmVzc0xpbmVhcidcbiIsImV4cG9ydCAqIGZyb20gJy4vVlByb2dyZXNzQ2lyY3VsYXInXG4iLCJleHBvcnQgKiBmcm9tICcuL1ZBcHAnXG5leHBvcnQgKiBmcm9tICcuL1ZCdXR0b24nXG5leHBvcnQgKiBmcm9tICcuL1ZDYXJkJ1xuZXhwb3J0ICogZnJvbSAnLi9WR3JpZCdcbmV4cG9ydCAqIGZyb20gJy4vVk92ZXJsYXknXG5leHBvcnQgKiBmcm9tICcuL1ZNb2RhbCdcbmV4cG9ydCAqIGZyb20gJy4vVk1lbnUnXG5leHBvcnQgKiBmcm9tICcuL1ZUZXh0RmllbGQnXG5leHBvcnQgKiBmcm9tICcuL1ZJbnB1dCdcbmV4cG9ydCAqIGZyb20gJy4vVkZpbGVJbnB1dCdcbmV4cG9ydCAqIGZyb20gJy4vVlNlbGVjdCdcbmV4cG9ydCAqIGZyb20gJy4vVkZvcm0nXG5leHBvcnQgKiBmcm9tICcuL1ZMYWJlbCdcbmV4cG9ydCAqIGZyb20gJy4vVkJhZGdlJ1xuZXhwb3J0ICogZnJvbSAnLi9WR3JvdXAnXG5leHBvcnQgKiBmcm9tICcuL1ZSZXNpemUnXG5leHBvcnQgKiBmcm9tICcuL1ZJY29uJ1xuZXhwb3J0ICogZnJvbSAnLi9WQ2hpcCdcbmV4cG9ydCAqIGZyb20gJy4vVkxpc3QnXG5leHBvcnQgKiBmcm9tICcuL1ZDaGVja2JveCdcbmV4cG9ydCAqIGZyb20gJy4vVlRvb2x0aXAnXG5leHBvcnQgKiBmcm9tICcuL1ZUb29sYmFyJ1xuZXhwb3J0ICogZnJvbSAnLi9WTmF2aWdhdGlvbidcbmV4cG9ydCAqIGZyb20gJy4vVk1haW4nXG5leHBvcnQgKiBmcm9tICcuL1ZUZXh0YXJlYSdcbmV4cG9ydCAqIGZyb20gJy4vVlNrZWxldG9uJ1xuZXhwb3J0ICogZnJvbSAnLi9WRGF0YVRhYmxlJ1xuZXhwb3J0ICogZnJvbSAnLi9WRGF0ZVBpY2tlcidcbmV4cG9ydCAqIGZyb20gJy4vVkF1dG9jb21wbGV0ZSdcbmV4cG9ydCAqIGZyb20gJy4vVlByb2dyZXNzTGluZWFyJ1xuZXhwb3J0ICogZnJvbSAnLi9WUHJvZ3Jlc3NDaXJjdWxhcidcbiIsImV4cG9ydCAqIGZyb20gJy4vdi1jbGljay1vdXRzaWRlJ1xuZXhwb3J0ICogZnJvbSAnLi92LXJlc2l6ZSdcbiIsImltcG9ydCAqIGFzIGNvbXBvbmVudHMgZnJvbSAnLi9jb21wb25lbnRzJ1xuaW1wb3J0ICogYXMgZGlyZWN0aXZlcyBmcm9tICcuL2RpcmVjdGl2ZXMnXG5pbXBvcnQgeyBVc2VyT3B0aW9ucyB9IGZyb20gJy4uL3R5cGVzJ1xuXG5leHBvcnQgY2xhc3MgVnVlbGFuZCB7XG4gIHN0YXRpYyBpbnN0YWxsZWQ6IGJvb2xlYW4gPSBmYWxzZVxuICBzdGF0aWMgb3B0aW9uczogVXNlck9wdGlvbnNcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zPzogVXNlck9wdGlvbnMpIHtcbiAgICBWdWVsYW5kLm9wdGlvbnMgPSBvcHRpb25zIVxuICB9XG5cbiAgc3RhdGljIGluc3RhbGwoYXBwOiBhbnkpIHtcbiAgICBpZiAoVnVlbGFuZC5pbnN0YWxsZWQpIHJldHVyblxuXG4gICAgVnVlbGFuZC5pbnN0YWxsZWQgPSB0cnVlXG5cbiAgICBPYmplY3Qua2V5cyhjb21wb25lbnRzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkgJiYgKGNvbXBvbmVudHMgYXMgYW55KVtrZXldKSB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IChjb21wb25lbnRzIGFzIGFueSlba2V5XVxuICAgICAgICBhcHAuY29tcG9uZW50KGtleSwgY29tcG9uZW50IGFzIHR5cGVvZiBhcHApXG4gICAgICB9XG4gICAgfSlcblxuICAgIE9iamVjdC5rZXlzKGRpcmVjdGl2ZXMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleSAmJiAoZGlyZWN0aXZlcyBhcyBhbnkpW2tleV0pIHtcbiAgICAgICAgYXBwLmRpcmVjdGl2ZShrZXksIChkaXJlY3RpdmVzIGFzIGFueSlba2V5XSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgYXBwLnByb3ZpZGUoJyRvcHRpb25zJywgVnVlbGFuZC5vcHRpb25zKVxuICB9XG59XG4iLCJpbXBvcnQgeyBWdWVsYW5kIH0gZnJvbSAnLi9saWJyYXJ5J1xuXG5leHBvcnQgKiBmcm9tICcuL2NvbXBvbmVudHMnXG5leHBvcnQgeyBWdWVsYW5kIH1cblxuZXhwb3J0IGRlZmF1bHQgVnVlbGFuZFxuIl0sIm5hbWVzIjpbInJlc2l6ZSIsIm1vdW50ZWQiLCJlbCIsImJpbmRpbmciLCJjYWxsYmFjayIsInZhbHVlIiwib3B0aW9ucyIsInBhc3NpdmUiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiX29uUmVzaXplIiwibW9kaWZpZXJzIiwicXVpZXQiLCJiZWZvcmVVbm1vdW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImJyZWFrcG9pbnRzIiwic20iLCJtZCIsImxnIiwieGwiLCJ0aHJvdHRsZSIsImZuIiwidGltZW91dCIsImxhc3RUaGlzIiwibGFzdEFyZ3MiLCJpc1Rocm90dGxlZCIsIndyYXBwZXIiLCJhcmdzIiwiY2FsbCIsInNldFRpbWVvdXQiLCJhcHBseSIsImRlZmluZUNvbXBvbmVudCIsInByb3ZpZGUiLCJyZWFjdGl2ZSIsImgiLCJ3aXRoRGlyZWN0aXZlcyIsIm9uTW91bnRlZCIsIlZBcHAiLCJuYW1lIiwiZGlyZWN0aXZlcyIsInByb3BzIiwiZ2xvYmFsIiwidHlwZSIsIk9iamVjdCIsInNldHVwIiwic2xvdHMiLCJUSFJPVFRMSU5HX1RJTUVPVVQiLCJzdGF0ZSIsImN1cnJlbnQiLCJ4bEFuZExlc3MiLCJsZ0FuZExlc3MiLCJtZEFuZExlc3MiLCJzbUFuZExlc3MiLCJzZXRDdXJyZW50QnJlYWtwb2ludE5hbWUiLCJzY3JlZW4iLCJzZXRJbnRlcnZhbHMiLCJzZXRTaXplcyIsIl9hIiwiaW5uZXJXaWR0aCIsInRocm90dGxlZFJlc2l6ZUxpc3RlbmVyIiwiZ2VuQXBwV3JhcHBlciIsImlzQ3NzQ29sb3IiLCJjb2xvciIsIm1hdGNoIiwiY29sb3JQcm9wcyIsImRlZmF1bHRDb2xvciIsIlN0cmluZyIsInVzZUNvbG9ycyIsInNldFRleHRDbGFzc05hbWVDb2xvciIsImNsYXNzZXMiLCJ0cmltIiwic3BsaXQiLCJjb2xvck5hbWUiLCJjb2xvck1vZGlmaWVyIiwic2V0VGV4dENzc0NvbG9yIiwic3R5bGVzIiwic2V0QmFja2dyb3VuZENzc0NvbG9yIiwic2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yIiwiY29tcHV0ZWQiLCJlbGV2YXRpb25Qcm9wcyIsImVsZXZhdGlvbiIsIk51bWJlciIsInVzZUVsZXZhdGlvbiIsImVsZXZhdGlvbkNsYXNzZXMiLCJwb3NpdGlvblByb3BzIiwiYWJzb2x1dGUiLCJCb29sZWFuIiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwidXNlUG9zaXRpb24iLCJwb3NpdGlvbkNsYXNzZXMiLCJjcmVhdGVTaW1wbGVGdW5jdGlvbmFsIiwiYyIsInJlcGxhY2UiLCJfIiwicHJvcHNEYXRhIiwiYWRkT25jZUxpc3RlbmVyIiwiZXZlbnROYW1lIiwiY2IiLCJvbmNlIiwiZXZlbnQiLCJjb252ZXJ0VG9Vbml0Iiwic3RyIiwidW5pdCIsImlzTmFOIiwid2FybmluZyIsIndhcm5pbmdUZXh0IiwiY29uc29sZSIsIndhcm4iLCJjb3B5V2l0aG91dExpbmsiLCJvYmoiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJhZGRTY29wZWRTbG90Iiwic2xvdE5hbWUiLCJzY29wZWQiLCJhcmciLCJnZXRLZXlWYWx1ZUZyb21UYXJnZXQiLCJ2YWx1ZUtleSIsInRhcmdldCIsInJlZHVjZSIsImFjYyIsIml0IiwibWFwVG9WYWxBcnJheSIsIm1hcCIsIkFycmF5IiwiZnJvbSIsInZhbHVlcyIsImdldFN0cmluZ0tleXNWYWx1ZSIsInRvQ2FtZWxDYXNlIiwicmVzIiwicyIsImkiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwiVlByb2dyZXNzQ2lyY3VsYXIiLCJpbmRldGVybWluYXRlIiwic2l6ZSIsIndpZHRoIiwicm90YXRlIiwicmFkaXVzIiwibm9ybWFsaXplZFZhbHVlIiwicGFyc2VGbG9hdCIsImNpcmN1bWZlcmVuY2UiLCJNYXRoIiwiUEkiLCJzdHJva2VEYXNoQXJyYXkiLCJyb3VuZCIsInN0cm9rZURhc2hPZmZzZXQiLCJ2aWV3Qm94U2l6ZSIsInN0cm9rZVdpZHRoIiwiaGVpZ2h0Iiwic3ZnU3R5bGUiLCJ0cmFuc2Zvcm0iLCJnZW5DaXJjbGUiLCJvZmZzZXQiLCJmaWxsIiwiY3giLCJjeSIsInIiLCJnZW5TdmciLCJjaGlsZHJlbiIsInhtbG5zIiwidmlld0JveCIsInN0eWxlIiwiZ2VuSW5mbyIsIlZCdXR0b24iLCJkaXNhYmxlZCIsIm91dGxpbmVkIiwicm91bmRlZCIsImxvYWRpbmciLCJ0ZXh0IiwiZGFyayIsImxhYmVsIiwiZW1pdHMiLCJlbWl0IiwiaXNGbGF0IiwiaXNMb2FkYWJsZSIsImlzRWxldmV0YWJsZSIsImVsZXZhdGlvbnMiLCJnZW5Mb2FkZXIiLCJnZW5MYWJlbCIsImdlbkNvbnRlbnQiLCJvbkNsaWNrIiwiVkNhcmQiLCJnZW5DYXJkIiwiVkNhcmRUaXRsZSIsIlZDYXJkU3VidGl0bGUiLCJWQ2FyZENvbnRlbnQiLCJWQ2FyZEFjdGlvbnMiLCJwb3NpdGlvbnMiLCJWUm93IiwiYWxpZ24iLCJ2YWxpZGF0b3IiLCJpbmNsdWRlcyIsImFsaWduQ29udGVudCIsImp1c3RpZnkiLCJub0d1dHRlciIsImJwIiwiY2xzIiwiZm9yRWFjaCIsInBvcyIsImNvbFByb3BzIiwicCIsIm9yZGVyUHJvcHMiLCJvZmZzZXRQcm9wcyIsIlZDb2wiLCJvcmRlciIsImNvbHMiLCJvcmRlcnMiLCJwcm9wVmFsdWUiLCJvZmZzZXRzIiwiVkxheW91dCIsImNvbHVtbiIsIndyYXAiLCJWU3BhY2VyIiwiVk92ZXJsYXkiLCJoaWRlIiwiYWN0aXZlIiwiZml4ZWQiLCJyZWYiLCJyZW5kZXIiLCJUSU1FT1VUIiwib3ZlcmxheVByb3BzIiwib3ZlcmxheSIsIm92ZXJsYXlDb2xvciIsInVzZU92ZXJsYXkiLCJvdmVybGF5T24iLCJjb250YWluZXIiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJvdmVybGF5UHJvcHNPYmplY3QiLCJvdmVybGF5RWxlbWVudCIsIm92ZXJsYXlWTm9kZSIsInJlbmRlck92ZXJsYXkiLCJjcmVhdGVPdmVybGF5IiwicGFyZW50Tm9kZSIsImluc2VydEJlZm9yZSIsInJlbW92ZU92ZXJsYXkiLCJyZW1vdmUiLCJyZW1vdmVDaGlsZCIsImZpcnN0Q2hpbGQiLCJUcmFuc2l0aW9uIiwidHJhbnNpdGlvblByb3BzIiwidHJhbnNpdGlvbiIsInVzZVRyYW5zaXRpb24iLCJ2Tm9kZSIsIm1vZGUiLCJ3YXRjaCIsInVzZVRvZ2dsZSIsInByb3BOYW1lIiwiaXNBY3RpdmUiLCJwcm9wIiwidG8iLCJpbW1lZGlhdGUiLCJ2U2hvdyIsIlZNb2RhbCIsIm1vZGVsVmFsdWUiLCJtb2RhbFJlZiIsImdlbk1vZGFsIiwidmFsIiwiYXV0b1Bvc2l0aW9uUHJvcHMiLCJwb3NpdGlvblgiLCJwb3NpdGlvblkiLCJ1c2VBdXRvUG9zaXRpb24iLCJkaW1lbnNpb25zIiwiYWN0aXZhdG9yIiwiY29udGVudCIsInBhZ2VZT2Zmc2V0IiwicGFnZVdpZHRoIiwiY29udGVudFJlZiIsIm9mZnNldFkiLCJjb250ZW50Qm90dG9tUG9pbnQiLCJnZXRSZWN0IiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImlzQWJzb2x1dGVQb3NpdGlvbmVkIiwiZ2V0SW5uZXJIZWlnaHQiLCJpbm5lckhlaWdodCIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudEhlaWdodCIsImdldFNjcm9sbFRvcCIsInNjcm9sbFRvcCIsImdldFNjcm9sbExlZnQiLCJwYWdlWE9mZnNldCIsInNjcm9sbExlZnQiLCJnZXRDb250ZW50QWJzb2x1dGVCb3R0b21Qb2ludCIsImdldENvbnRlbnRCb3R0b21Qb2ludCIsImNhbGNDb250ZW50Qm90dG9tUG9zaXRpb24iLCJmdWxsSGVpZ2h0IiwiY29udGVudEJvdHRvbVBvc2l0aW9uIiwiY2FsY0xlZnRQb3NpdGlvbiIsImNhbGNBYnNvbHV0ZVRvcCIsInRvcFBvc2l0aW9uIiwiY2FsY0JvdHRvbVBvc2l0aW9uIiwiY2FsY0F1dG9Cb3R0b21Qb3NpdGlvbiIsImNhbGNQb3NpdGlvblkiLCJzbmFwU2hvdCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImRpc3BsYXkiLCJ1cGRhdGVEaW1lbnNpb25zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRBY3RpdmF0b3JEaW1lbnNpb25zIiwic2V0Q29udGVudERpbWVuc2lvbnMiLCJvZmZzZXRIZWlnaHQiLCJzZXREaW1lbnNpb25zIiwiYWN0aXZhdG9yRWwiLCJhY3RpdmF0b3JQcm9wcyIsImludGVybmFsQWN0aXZhdG9yIiwidXNlQWN0aXZhdG9yIiwiYWN0aXZhdG9yUmVmIiwiYWN0aXZhdG9yU2l6ZXMiLCJsaXN0ZW5lcnMiLCJnZXRBY3RpdmF0b3IiLCJlIiwiJGVsIiwiaW5wdXRBY3RpdmF0b3IiLCJxdWVyeVNlbGVjdG9yIiwiY3VycmVudFRhcmdldCIsImdldEFjdGl2YXRvclNpemVzIiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsIm9mZnNldFdpZHRoIiwiZ2VuQWN0aXZhdG9yTGlzdGVuZXJzIiwiaGFuZGxlcnMiLCJvcGVuT25Ib3ZlciIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwib3Blbk9uQ2xpY2siLCJjbGljayIsIm9wZW5PbkNvbnRleHRtZW51IiwiY29udGV4dG1lbnUiLCJhZGRBY3RpdmF0b3JFdmVudHMiLCJldmVudHMiLCJrZXlzIiwia2V5IiwicmVtb3ZlQWN0aXZhdG9yRXZlbnRzIiwidXNlRGV0YWNoIiwic2V0RGV0YWNoZWQiLCJzZWxlY3RvciIsImFwcGVuZENoaWxkIiwicmVtb3ZlRGV0YWNoZWQiLCJjbGlja0hhbmRsZXIiLCJjb250YWlucyIsIl9iaW5kcyIsIl9iIiwiY2xvc2VDb25kaXRpb25hbCIsIl9jIiwiX2QiLCJoYW5kbGVyIiwicmVtb3ZlTGlzdGVuZXIiLCJib2R5IiwiX29uQ2xpY2siLCJjbGlja091dHNpZGUiLCJiZWZvcmVNb3VudCIsImJlZm9yZVVwZGF0ZSIsIm9uQmVmb3JlVW5tb3VudCIsIlZNZW51IiwibWF4SGVpZ2h0IiwiekluZGV4IiwiY2xvc2VPbkNsaWNrIiwib2Zmc2V0WCIsInNldERpbWVuc2lvbnNPbiIsImZsYWciLCJ0aGVuIiwiZGlyZWN0aXZlIiwidW5kZWZpbmVkIiwiY2FsY1dpZHRoIiwiY29udGVudENsYXNzZXMiLCJjb250ZW50U3R5bGVzIiwib25Db250ZW50Q2xpY2siLCJvblJlc2l6ZSIsImdlbkFjdGl2YXRvclNsb3QiLCJzbG90Q29udGVudCIsIm9uIiwiZ2VuQ29udGVudFNsb3QiLCJ2YWxpZGF0aW9uUHJvcHMiLCJydWxlcyIsIkRhdGUiLCJ1c2VWYWxpZGF0aW9uIiwiZXJyb3JTdGF0ZSIsImlubmVyRXJyb3IiLCJpbm5lckVycm9yTWVzc2FnZSIsImlzRGlydHkiLCJ2YWxpZGF0aW9uQ2xhc3NlcyIsImNvbXB1dGVkQ29sb3IiLCJoYXNSdWxlcyIsImxlbmd0aCIsImRpcnR5IiwidXBkYXRlIiwiZXJyIiwibXNnIiwidmFsaWRhdGUiLCJsZW4iLCJydWxlIiwicmVzdWx0IiwidXNlSW5wdXRTdGF0ZXMiLCJhdHRycyIsImZvY3VzZWQiLCJpc0Rpc2FibGVkIiwiaXNSZWFkb25seSIsInJlYWRvbmx5Iiwib25Gb2N1cyIsIm9uQ2hhbmdlIiwib25CbHVyIiwib25TZWxlY3QiLCJWTGFiZWwiLCJzaXplUHJvcHMiLCJkZWZhdWx0U2l6ZSIsInVzZVNpemUiLCJzaXplcyIsImZpbmQiLCJWSWNvbiIsImNsaWNrYWJsZSIsImljb24iLCJ0YWciLCJpY29uVGFnIiwiY29tcHV0ZWRJY29uIiwiZm9udFNpemUiLCJnZXRTaXplcyIsImV4cGxpY2l0U2l6ZSIsImluamVjdCIsIm9uQmVmb3JlTW91bnQiLCJWSW5wdXQiLCJjb21wb25lbnRzIiwiaW5oZXJpdEF0dHJzIiwicHJlcGVuZEljb24iLCJhcHBlbmRJY29uIiwiZmlsZSIsImhpbnRzIiwiaGludE1lc3NhZ2UiLCJ0ZXh0Q29sb3IiLCJmb3JtIiwidGV4dENsYXNzQ29sb3IiLCJ0ZXh0Q3NzQ29sb3IiLCJoYXNQcmVwZW5kSWNvbiIsImhhc0FwcGVuZEljb24iLCJnZW5JY29uIiwiaWNvbk5hbWUiLCJnZW5QcmVwZW5kSWNvbiIsImdlbkFwcGVuZEljb24iLCJnZW5UZXh0RmllbGRTbG90IiwicHJlcGVuZEljb25Db250ZW50IiwiYXBwZW5kSWNvbkNvbnRlbnQiLCJ0ZXh0RmllbGRDb250ZW50IiwiZ2VuSGludE1lc3NhZ2UiLCJnZW5IaW50cyIsImdlblNlbGVjdFNsb3QiLCJzZWxlY3QiLCJhZGQiLCJWVGV4dEZpZWxkIiwiY29tcHV0ZWRWYWx1ZSIsImdldCIsInNldCIsIm9uSW5wdXQiLCJnZW5JbnB1dEZpZWxkIiwicGxhY2Vob2xkZXIiLCJnZW5UZXh0RmllbGRXcmFwcGVyIiwiY2xzQ29sb3IiLCJjc3NDb2xvciIsIkZhSWNvbnMiLCJNYXRlcmlhbEljb25zIiwiTWF0ZXJpYWxTaXplcyIsIkZhU2l6ZXMiLCJ1c2VJY29ucyIsImljb25zIiwiVkNoaXAiLCJ0aXRsZSIsImNsb3NhYmxlIiwiZ2VuQ2xvc2VJY29uIiwiJGNsb3NlIiwiZ2VuQ2hpcENvbnRlbnQiLCJWRmlsZUlucHV0IiwibXVsdGlwbGUiLCJjaGlwQ29sb3IiLCJpbnB1dFJlZiIsImZpbGVzIiwiTWFwIiwic3JjUmVmIiwiaW5wdXRGaWxlcyIsImNsZWFyIiwiZiIsIm9uQ2xvc2UiLCJzcmNFbGVtZW50IiwiZ2VuRmlsZUlucHV0IiwicG9zaXRpb24iLCJ2aXNpYmlsaXR5IiwiZ2VuQ2hpcHMiLCJnZW5DaGlwc0NvbnRhaW5lciIsImdlbkNvbXBvbmVudCIsIiRwYXBlcmNsaXAiLCJWTGlzdCIsImFjdGl2ZUNsYXNzIiwiaXRlbXMiLCJpc1RydXN0ZWRTZWxlY3QiLCJyZWdpc3RlciIsIml0ZW0iLCJoYXMiLCJ1bnJlZ2lzdGVyIiwiZGlzcGF0Y2hFdmVudCIsInNldEFjdGl2ZUl0ZW0iLCJ0b2dnbGVJdGVtIiwiaXNBcnJheSIsInByZXBhcmVJbmRleGVzIiwicHVzaCIsInNldFNlbGVjdGVkSXRlbXMiLCJpbmQiLCJWTGlzdEl0ZW0iLCJpdGVtUmVmIiwibGlzdCIsIlZMaXN0SXRlbVRpdGxlIiwiVkxpc3RJdGVtU3VidGl0bGUiLCJWTGlzdEl0ZW1Db250ZW50IiwiVkxpc3RJdGVtSWNvbiIsIlZTZWxlY3RMaXN0Iiwic2VsZWN0ZWQiLCJjb21wdXRlZFNlbGVjdCIsImZpbmRJbmRleCIsIml0ZW1WYWx1ZSIsInNlbGVjdGVkVmFsdWUiLCJnZW5JdGVtcyIsImdlbkl0ZW1zTGlzdCIsIlZTZWxlY3QiLCJnZW5JbnB1dCIsImdlblNlbGVjdExpc3QiLCJvblNob3ciLCJvbkhpZGUiLCJnZW5FeHBhbmRJY29uIiwiJGNoZXZyb25Eb3duIiwiZ2VuU2VsZWN0IiwiVkZvcm0iLCJmaWVsZHMiLCJhZGRGaWVsZFZhbGlkYXRvciIsInJlbW92ZUZpZWxkVmFsaWRhdG9yIiwiZmlsdGVyIiwidiIsInByb21pc2VzIiwic29tZSIsInJlamVjdCIsIm9uU3VibWl0IiwicHJldmVudERlZmF1bHQiLCJWQmFkZ2UiLCJkb3QiLCJhdmF0YXIiLCJib3JkZXIiLCJ0b2dnbGUiLCJyZXF1aXJlZCIsImNhbGNQb3NpdGlvbiIsIm9mZnNldFZhbCIsImNvbXB1dGVkTGVmdCIsImNvbXB1dGVkUmlnaHQiLCJjb21wdXRlZFRvcCIsImNvbXB1dGVkQm90dG9tIiwiYmFkZ2VDbGFzc2VzIiwiYWRkQ29udGVudCIsImdlbkJhZGdlU2xvdCIsImJhZGdlIiwiZ2VuQmFkZ2UiLCJ3aXRoQ3R4IiwiY3JlYXRlQmxvY2siLCJjcmVhdGVUcmFuc2l0aW9uIiwiaG9va3MiLCJpbml0IiwicHJvcFNpemUiLCJQUklNQVJZX1RSQU5TSVRJT04iLCJyZXNldFN0eWxlcyIsImdldENoaWxkcmVuU2l6ZXMiLCJwcm90b3R5cGUiLCJnZXRDb21wdXRlZFN0eWxlIiwic2V0SW5pdFN0eWxlcyIsIngiLCJleHBhbmRIb29rcyIsImV4cGFuZGVkUGFyZW50Q2xhc3MiLCJvbkJlZm9yZUVudGVyIiwib25FbnRlciIsImNsYXNzTGlzdCIsIm9uQWZ0ZXJFbnRlciIsIm9uQmVmb3JlTGVhdmUiLCJvbkxlYXZlIiwib25BZnRlckxlYXZlIiwiRXhwYW5kVHJhbnNpdGlvbiIsIlZHcm91cCIsImV4cGFuZCIsInN1Ymdyb3VwIiwiZ2VuSGVhZGVyQ29udGVudCIsImhlYWRlciIsImdlblN1YkV4cGFuZEljb24iLCJnZW5Hcm91cEhlYWRlciIsIiRjYXJldERvd24iLCJnZW5Hcm91cENoaWxkQ29udGVudCIsIlZSZXNpemUiLCJjdXN0b21DbGFzcyIsIm1pblNpemUiLCJkYXRhIiwic3RhcnRPZmZzZXQiLCJwYXJlbnRIZWlnaHQiLCJwYXJlbnRXaWR0aCIsIm1hcmdpbkxlZnQiLCJtYXJnaW5Ub3AiLCJyZXNpemVSZWYiLCJpc0RpcmVjdFkiLCJpc05lZWRSZXZlcnNlIiwiY3VycmVudFNpemUiLCJzaXplUHJvcCIsInJldmVyc2VEaXJlY3Rpb24iLCJyZXZlcnNlT2Zmc2V0S2V5Iiwic2lkZSIsImRpcmVjdGlvbiIsIm1vdmVSZXZlcnNlIiwicmV2ZXJzZVRvIiwic2V0T3JFbWl0U2l6ZSIsInJlc2V0TWluTWF4U3R5bGVzIiwibWluSGVpZ2h0IiwibWF4V2lkdGgiLCJtaW5XaWR0aCIsInNldFBhcmVudCIsInBhcmVudCIsImNvbXB1dGVTaXplcyIsInNldFN0YXJ0UG9zaXRpb25zIiwiZGlzYWJsZVNlbGVjdGlvbiIsImluaXRSZXNpemUiLCJzZXRTdGFydE9mZnNldCIsInJlc2V0Iiwib25Nb3VzZXVwIiwicmVtb3ZlSGFuZGxlcnMiLCJvbk1vdXNlZG93biIsIlZDaGVja2JveCIsIm9uSWNvbiIsIm9mZkljb24iLCJpc0NoZWNrZWQiLCJpc1ZhbHVlU2V0IiwidmFsaWRhdGVWYWx1ZSIsImdlbkxhYmVsV3JhcHBlciIsIiRjaGVja09uIiwiJGNoZWNrT2ZmIiwiZ2VuQ2hlY2tib3giLCJjb21wdXRlVmFsdWUiLCJ0cmFuc2l0aW9ucyIsIlZUb29sdGlwIiwidG9vbHRpcCIsInRvb2x0aXBSZWYiLCJjb21wdXRlVG9wUG9zaXRpb24iLCJjb21wdXRlTGVmdFBvc2l0aW9uIiwiZ2VuQWN0aXZhdG9yIiwic2V0VG9vbHRpcFBvc2l0aW9uIiwiU0NBTEVfSU4iLCJGQURFIiwiVlRvb2xiYXIiLCJWVG9vbGJhck5hdkJ0biIsImdlbk5hdkJ0biIsIiRtZW51IiwiVlRvb2xiYXJJdGVtcyIsIlZUb29sYmFyTG9nbyIsIlZUb29sYmFyQ29udGVudCIsIlZOYXZpZ2F0aW9uIiwib25Ib3ZlciIsIm1pbmlWYXJpYW50IiwibWluaVZhcmlhbnRXaWR0aCIsIm1heFZhcmlhbnRXaWR0aCIsImlzSG92ZXJlZCIsImlzRXhwYW5kZWQiLCJjb21wdXRlZFdpZHRoIiwiZ2VuTmF2aWdhdGlvbkNvbnRlbnQiLCJvbk1vdXNlZW50ZXIiLCJvbk1vdXNlbGVhdmUiLCJWTWFpbiIsIlZUZXh0YXJlYSIsIlZTa2VsZXRvbiIsImxpZ2h0IiwiZHluYW1pYyIsImZsZXhCYXNpcyIsImJvcmRlclJhZGl1cyIsIlZEYXRhVGFibGVDZWxsIiwicmVzaXplYWJsZSIsInJlc2l6ZXJDb2xvciIsImNvbnRlbnRDb2xvciIsImdlblJlc2l6ZSIsIiRzaXplIiwiZ2VuQ2VsbENvbnRlbnQiLCJWRGF0YVRhYmxlSGVhZGVyIiwic2hvd1NlcXVlbmNlIiwic2hvd0NoZWNrYm94IiwiY29sV2lkdGgiLCJjb21wdXRlZENvbnRlbnRDb2xvciIsIm9uU29ydCIsIiR2YWx1ZSIsImZpbHRlcmVkIiwiY29sIiwic2hvd0ZpbHRlciIsImdlblNvcnRCdXR0b24iLCJzb3J0ZWQiLCIkYXJyb3dVcCIsImdlbkZpbHRlckJ1dHRvbiIsIiRmaWx0ZXIiLCJjZWxsQ2xhc3MiLCJnZW5IZWFkZXJBY3Rpb25zIiwic29ydGFibGUiLCJmaWx0ZXJhYmxlIiwiZ2VuRmlsdGVySW5wdXQiLCIkc2VhcmNoIiwiY2xlYXJhYmxlIiwiZ2VuRmlsdGVyV3JhcHBlciIsImZpbHRlclNsb3QiLCJnZW5IZWFkZXJUaXRsZSIsImdlbk51bWJlckNlbGwiLCJnZW5DaGVja2JveENlbGwiLCJvbkNoZWNrZWQiLCJnZW5IZWFkZXJDZWxsIiwiZ2VuSGVhZGVyQ2hpbGRyZW4iLCJoZWFkZXJTbG90IiwiaGFzT3duUHJvcGVydHkiLCJzaG93IiwiVkRhdGFUYWJsZUJvZHkiLCJyb3dzIiwiY2hlY2tBbGxSb3dzIiwicGFnZSIsInJvd3NPblBhZ2UiLCJjaGVja2VkUm93cyIsInJvd3NPblRhYmxlIiwib25TZWxlY3RSb3dzIiwiY291bnQiLCJyb3ciLCJnZW5Sb3dDZWxsIiwiZm9ybWF0IiwiZ2VuVGFibGVSb3ciLCJyb3dDb3VudCIsInJvd0NlbGxzIiwib25EYmxjbGljayIsIm9uQ29udGV4dG1lbnUiLCJnZW5UYWJsZVJvd3MiLCJ0YWJsZVJvd3MiLCJyb3dzTGVuZ3RoIiwiVkRhdGFUYWJsZUZvb3RlciIsInBhZ2VzIiwiZmlyc3RPblBhZ2UiLCJsYXN0T25QYWdlIiwicGFnZUNvcnJlY3Rpb24iLCJwYWdpbmF0aW9uRGlzcGxheVRleHQiLCJpc0xhc3RQYWdlIiwiY2hhbmdlVGFibGVSb3dzUGFnZSIsImlzTmV4dCIsImdlblBhZ2luYXRpb25CdXR0b24iLCJidG5Db2xvciIsInBhZ2luYXRpb24iLCJidXR0b25zQ29sb3IiLCJkaXNhYmxlSWYiLCIkYXJyb3dSaWdodCIsIiRhcnJvd0xlZnQiLCJnZW5QYWdpbmF0aW9uUGFnZURpc3BsYXkiLCJkaXNwbGF5Q29sb3IiLCJtYXJnaW4iLCJnZW5Sb3dzQ291bnRTZWxlY3RMaXN0IiwiY291bnRzIiwicm93c1BlclBhZ2VPcHRpb25zIiwiZ2VuTWVudSIsImdlblJvd3NDb3VudEZpZWxkIiwiZ2VuUm93c0NvdW50U2VsZWN0IiwiZ2VuUm93c0NvdW50U2VsZWN0Q2FwdGlvbiIsInJvd3NQZXJQYWdlVGV4dCIsImdlblJvd3NDb3VudFNlbGVjdEJsb2NrIiwiZ2VuUGFnZXNDb3VudERpc3BsYXkiLCJnZW5QYWdpbmF0aW9uQnV0dG9uc0Jsb2NrIiwiZ2VuUGFnaW5hdGlvbkJsb2NrIiwiVkRhdGFUYWJsZSIsImhlYWRlck9wdGlvbnMiLCJmb290ZXJPcHRpb25zIiwiY3VzdG9tRmlsdGVyIiwiRnVuY3Rpb24iLCJpc0FsbFJvd3NDaGVja2VkIiwiZmlsdGVycyIsImNlaWwiLCJvblNlbGVjdEFsbCIsImNoZWNrZWQiLCJvblByZXZQYWdlIiwibnVtIiwib25OZXh0UGFnZSIsInNvcnRDb2x1bW4iLCJyZXZlcnNlIiwiZXhlY3V0b3IiLCJzb3J0IiwiYSIsImIiLCJvbkZpbHRlciIsImZpbHRlclJvd3MiLCJvblNlbGVjdFJvd3NDb3VudCIsImZpbHRlcktleXMiLCJyb3dSZXN1bHRzIiwicm93S2V5VmFsdWUiLCJ0b0xvd2VyQ2FzZSIsImZpbHRlclZhbHVlIiwiZXZlcnkiLCJnZW5UYWJsZVRvb2xzIiwidG9vbGJhciIsImdlblRhYmxlSGVhZGVyIiwiZ2VuVGFibGVCb2R5IiwiZ2VuVGFibGVGb290ZXIiLCJvbkxhc3RQYWdlIiwib25Db3JyZWN0UGFnZSIsInN0YXJ0IiwibGFzdCIsImdlblRhYmxlSW5uZXIiLCJWRGF0ZXBpY2tlckhlYWRlciIsIm9uTmV4dCIsIm9uUHJldiIsImdlbkhlYWRlckJ1dHRvbiIsImlzUmlnaHQiLCJpY29uUHJvcHNEYXRhIiwiYXJyb3dCdG4iLCJnZW5IZWFkZXJEaXNwbGF5IiwiZ2V0TW9udGgiLCJkYXRlIiwiZ2V0RnVsbFllYXIiLCJnZXREYXRlIiwiZ2V0RGF5IiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwic2V0RnVsbFllYXIiLCJzZXRNb250aCIsInNldERhdGUiLCJpc1ZhbGlkRGF0ZSIsInRvU3RyaW5nIiwiZ2V0VGltZSIsImdldERheU5hbWVBYmJyIiwiZGF5cyIsIlR5cGVFcnJvciIsImdldE1vbnRoTmFtZSIsIm1vbnRoIiwibW9udGhzIiwiRXJyb3IiLCJnZXRNb250aE5hbWVBYmJyIiwibW9udGhzQWJiciIsImZvcm1hdERhdGUiLCJ0cmFuc2xhdGlvbiIsInllYXIiLCJkYXkiLCJ3ZWVrIiwidmFsaWRhdGVEYXRlSW5wdXQiLCJ2Tm9kZXNBcnJheSIsInJvd0NsYXNzTmFtZSIsImNlbGxzSW5Sb3ciLCJ2Tm9kZXNJblJvdyIsImNlbGxWTm9kZXMiLCJ0b0RhdGVTdHJpbmciLCJwYXJzZURhdGUiLCJzZWxlY3RlZERhdGUiLCJtbHMiLCJWRGF0ZVBpY2tlckRhdGVzIiwibG9jYWxlIiwibW9uZGF5Rmlyc3QiLCJkaXNhYmxlZERhdGVzIiwiRklSU1RfTU9OVEgiLCJMQVNUX01PTlRIIiwiREFZUyIsIkFOSU1BVElPTl9USU1FT1VUIiwiZGF0ZXMiLCJpc0RhdGVzQ2hhbmdlZCIsInRvZGF5IiwidXBkYXRlTW9udGgiLCJzcGxpY2UiLCJkYXlzSW5Nb250aCIsImdlblRhYmxlRGF0ZXMiLCJwYXJhbXMiLCJnZW5XZWVrRGF5cyIsImdlbkRhdGVPYmplY3QiLCJzZXRFbXB0aWVzQmVmb3JlRmlyc3REYXRlIiwiZGF0ZU9iamVjdCIsImZpcnN0RGF5Iiwic3RhcnREYXkiLCJ0aWxsRGF5IiwiY29tcGFyZURhdGVzIiwiZGF0ZTEiLCJkYXRlMiIsInNldERpc2FibGVkIiwiaXNIb2xpZGF5IiwiZGF5c09mTW9udGgiLCJkaXNhYmxlRGF5c09mTW9udGgiLCJkaXNhYmxlRnJvbVRvIiwiZGlzYWJsZURhdGVzIiwiZGlzYWJsZURheXMiLCJyYW5nZXMiLCJkaXNhYmxlUmFuZ2VzIiwiY3VzdG9tIiwiZGF0ZUZyb20iLCJkYXRlVG8iLCJkIiwiZ2VuRGF0ZUNlbGwiLCJpc1NlbGVjdGVkIiwiaXNUb2RheSIsImdlbkRhdGVDZWxscyIsImdlbkRhdGVSb3dzIiwiZGF0ZXNWTm9kZXMiLCJnZW5EYXRlcyIsImdlbldlZWsiLCJ3YXRjaEVmZmVjdCIsIlZEYXRlUGlja2VyWWVhcnMiLCJMSU1JVCIsIk9OX1RBQkxFIiwiQ0VMTFNfSU5fUk9XIiwiQ1VSUkVOVF9ZRUFSIiwieWVhcnMiLCJvblRhYmxlSW5kZXgiLCJpc0xpc3RDaGFuZ2VkIiwiY29tcHV0ZWRZZWFyIiwiY2hhbmdlWWVhcnNMaXN0Iiwic2V0Q3VycmVudFRyYW5zaXRpb24iLCJzZXRUYWJsZUluZGV4IiwibWF4IiwiZ2VuVGFibGVZZWFycyIsImZyb21ZZWFyIiwibWF4WWVhcnMiLCJ5ZWFyc0xpc3QiLCJnZW5ZZWFyQ2VsbCIsImdlblllYXJzUm93cyIsImN1cnJlbnRZZWFycyIsInllYXJzVk5vZGVzIiwiZ2VuWWVhcnMiLCJWRGF0ZVBpY2tlck1vbnRocyIsImxhbmciLCJNT05USFMiLCJDVVJSRU5UX01PTlRIIiwidXBkYXRlWWVhciIsImNvbXB1dGVkTW9udGgiLCJnZW5Nb250aENlbGwiLCJnZW5Nb250aFJvd3MiLCJtb250aHNWTm9kZXMiLCJydSIsImVuIiwiVkRhdGVQaWNrZXIiLCJ0eXBlYWJsZSIsInVzZU1scyIsInVzZVV0YyIsImhpZ2hsaWdodGVkIiwidGFibGVNb250aCIsInRhYmxlWWVhciIsImNvbnZlcnRlZERhdGVTdHJpbmciLCJpc1llYXJzIiwiaXNNb250aHMiLCJpc0RhdGVzIiwibG9jYWxlTW9udGhzIiwibG9jYWxlV2VlayIsInRhYmxlQ2xhc3NlcyIsInRhYmxlU3R5bGVzIiwiaGVhZGVyVmFsdWUiLCJkaXNwbGF5RGF0ZSIsInNldEluaXREYXRlIiwic2V0UGFyc2VkRGF0ZSIsImNvbnZlcnRUb0Zvcm1hdCIsIm9uVGFibGVDaGFuZ2UiLCJzZXREYXRhRGF0ZSIsImRhdGVGb3JQYXJzaW5nIiwib25ZZWFyVXBkYXRlIiwib25Nb250aFVwZGF0ZSIsIm9uRGF0ZVVwZGF0ZSIsIm9uRGF0ZU1vbnRoVXBkYXRlIiwib25EYXRlSW5wdXQiLCJzdHJpbmdUb0RhdGUiLCJkYXRlQXJyYXkiLCJqb2luIiwiZ2VuRGlzcGxheVZhbHVlIiwiZ2VuRGF0ZXBpY2tlckRpc3BsYXlJbm5lciIsImdlbkRhdGVwaWNrZXJEaXNwbGF5IiwiZ2VuRGF0ZXBpY2tlckhlYWRlciIsIm9uVGFibGUiLCJnZW5EYXRlcGlja2VyWWVhcnNUYWJsZSIsImdlbkRhdGVwaWNrZXJNb250aHNUYWJsZSIsImdlbkRhdGVwaWNrZXJEYXRlc1RhYmxlIiwiZ2VuRGF0ZXBpY2tlckJvZHkiLCJnZW5EYXRlcGlja2VySW5wdXQiLCJvbkNsZWFyIiwiZ2VuRGF0ZXBpY2tlclRhYmxlIiwiZ2VuRGF0ZXBpY2tlciIsIlZQcm9ncmVzc0xpbmVhciIsImJ1ZmZlclZhbHVlIiwiYmFja2dyb3VuZENvbG9yIiwiYmFja2dyb3VuZE9wYWNpdHkiLCJzdHJlYW0iLCJzdHJpcGVkIiwiZ2VuUHJvZ3Jlc3NCYXIiLCJiYXJXaWR0aCIsImdlblByb2dyZXNzQnVmZmVyIiwiYnVmZmVyV2lkdGgiLCJnZW5Qcm9ncmVzc0JhY2tncm91bmQiLCJvcGFjaXR5IiwiZ2VuUHJvZ3Jlc3NJbmRldGVybWluYXRlIiwiZ2VuUHJvZ3Jlc3NMaW5lYXIiLCJWQXV0b2NvbXBsZXRlIiwiaWRLZXkiLCJsaXN0Q29sb3IiLCJpc01lbnVBY3RpdmUiLCJzZWFyY2giLCJ2YWx1ZVByb3BlcnR5IiwiaW5wdXRWYWx1ZSIsImdlbkF1dG9jb21wbGV0ZUxpc3QiLCJnZW5MaW5lYXJQcm9ncmVzcyIsImdlbkF1dG9jb21wbGV0ZSIsImhhc1N0YXRlIiwiVnVlbGFuZCIsImFwcCIsImluc3RhbGxlZCIsImNvbXBvbmVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///433\n")},895:function(Q){Q.exports=__WEBPACK_EXTERNAL_MODULE__895__}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var B=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](B,B.exports,__webpack_require__),B.exports}__webpack_require__.d=function(Q,F){for(var B in F)__webpack_require__.o(F,B)&&!__webpack_require__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:F[B]})},__webpack_require__.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},__webpack_require__.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(433);return __webpack_exports__}()}));