import './VButton.scss';
import { defineComponent, h, computed } from 'vue';
import { colorProps, useColors } from '../../effects/use-colors';
import { elevationProps, useElevation } from '../../effects/use-elevation';
import { positionProps, usePosition } from '../../effects/use-position';
export const VButton = defineComponent({
    name: 'v-button',
    emits: ['click'],
    props: {
        disabled: Boolean,
        outlined: Boolean,
        absolute: Boolean,
        left: Boolean,
        right: Boolean,
        text: Boolean,
        label: String,
        ...colorProps(),
        ...elevationProps(),
        ...positionProps(),
    },
    setup(props, { slots, emit }) {
        const { setTextColor, setBackground } = useColors();
        const { elevationClasses } = useElevation(props);
        const { positionClasses } = usePosition(props);
        const isFlat = computed(() => {
            return props.text || props.outlined;
        });
        const classes = computed(() => ({
            'v-button': true,
            'v-button--disabled': props.disabled,
            'v-button--text': props.text || props.outlined,
            'v-button--outlined': props.outlined,
            ...elevationClasses.value,
            ...positionClasses.value,
        }));
        function genLabel() {
            const propsData = {
                class: {
                    'v-button__label': true,
                },
            };
            return h('span', propsData, props.label);
        }
        return () => {
            const setColor = isFlat.value ? setTextColor : setBackground;
            const content = [];
            const propsData = {
                class: classes.value,
                onClick: () => !props.disabled && emit('click')
            };
            props.label && content.push(genLabel());
            slots.default && content.push(slots.default());
            return h('button', props.color && !props.disabled
                ? setColor(props.color, propsData) : propsData, content);
        };
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkJ1dHRvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZCdXR0b24vVkJ1dHRvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLGdCQUFnQixDQUFBO0FBR3ZCLE9BQU8sRUFBRSxlQUFlLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxNQUFNLEtBQUssQ0FBQTtBQUdsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLDBCQUEwQixDQUFBO0FBQ2hFLE9BQU8sRUFBRSxjQUFjLEVBQUUsWUFBWSxFQUFFLE1BQU0sNkJBQTZCLENBQUE7QUFDMUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQTtBQUt2RSxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsZUFBZSxDQUFDO0lBQ3JDLElBQUksRUFBRSxVQUFVO0lBQ2hCLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQztJQUNoQixLQUFLLEVBQUU7UUFDTCxRQUFRLEVBQUUsT0FBTztRQUNqQixRQUFRLEVBQUUsT0FBTztRQUNqQixRQUFRLEVBQUUsT0FBTztRQUNqQixJQUFJLEVBQUUsT0FBTztRQUNiLEtBQUssRUFBRSxPQUFPO1FBQ2QsSUFBSSxFQUFFLE9BQU87UUFDYixLQUFLLEVBQUUsTUFBTTtRQUNiLEdBQUcsVUFBVSxFQUFFO1FBQ2YsR0FBRyxjQUFjLEVBQUU7UUFDbkIsR0FBRyxhQUFhLEVBQUU7S0FDWjtJQUVSLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO1FBQzFCLE1BQU0sRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLEdBQUcsU0FBUyxFQUFFLENBQUE7UUFFbkQsTUFBTSxFQUFFLGdCQUFnQixFQUFFLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBRWhELE1BQU0sRUFBRSxlQUFlLEVBQUUsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUE7UUFFOUMsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFVLEdBQUcsRUFBRTtZQUNwQyxPQUFPLEtBQUssQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQTtRQUNyQyxDQUFDLENBQUMsQ0FBQTtRQUVGLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBMEIsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUNyRCxVQUFVLEVBQUUsSUFBSTtZQUNoQixvQkFBb0IsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUNwQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxRQUFRO1lBQzlDLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3BDLEdBQUcsZ0JBQWdCLENBQUMsS0FBSztZQUN6QixHQUFHLGVBQWUsQ0FBQyxLQUFLO1NBQ3pCLENBQUMsQ0FDSCxDQUFBO1FBRUQsU0FBUyxRQUFRO1lBQ2YsTUFBTSxTQUFTLEdBQUc7Z0JBQ2hCLEtBQUssRUFBRTtvQkFDTCxpQkFBaUIsRUFBRSxJQUFJO2lCQUN4QjthQUNGLENBQUE7WUFFRCxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUMxQyxDQUFDO1FBRUQsT0FBTyxHQUFHLEVBQUU7WUFDVixNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQTtZQUM1RCxNQUFNLE9BQU8sR0FBVSxFQUFFLENBQUE7WUFFekIsTUFBTSxTQUFTLEdBQUc7Z0JBQ2hCLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSztnQkFDcEIsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDO2FBQ2hELENBQUE7WUFFRCxLQUFLLENBQUMsS0FBSyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQTtZQUV2QyxLQUFLLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7WUFFOUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUNmLEtBQUssQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUTtnQkFDNUIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQ2hELE9BQU8sQ0FDUixDQUFBO1FBQ0gsQ0FBQyxDQUFBO0lBQ0gsQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFN0eWxlc1xuaW1wb3J0ICcuL1ZCdXR0b24uc2NzcydcblxuLy8gVnVlIEFQSVxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcblxuLy8gQ29tcG9zaXRpb25zXG5pbXBvcnQgeyBjb2xvclByb3BzLCB1c2VDb2xvcnMgfSBmcm9tICcuLi8uLi9lZmZlY3RzL3VzZS1jb2xvcnMnXG5pbXBvcnQgeyBlbGV2YXRpb25Qcm9wcywgdXNlRWxldmF0aW9uIH0gZnJvbSAnLi4vLi4vZWZmZWN0cy91c2UtZWxldmF0aW9uJ1xuaW1wb3J0IHsgcG9zaXRpb25Qcm9wcywgdXNlUG9zaXRpb24gfSBmcm9tICcuLi8uLi9lZmZlY3RzL3VzZS1wb3NpdGlvbidcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuXG5leHBvcnQgY29uc3QgVkJ1dHRvbiA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWJ1dHRvbicsXG4gIGVtaXRzOiBbJ2NsaWNrJ10sXG4gIHByb3BzOiB7XG4gICAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gICAgb3V0bGluZWQ6IEJvb2xlYW4sXG4gICAgYWJzb2x1dGU6IEJvb2xlYW4sXG4gICAgbGVmdDogQm9vbGVhbixcbiAgICByaWdodDogQm9vbGVhbixcbiAgICB0ZXh0OiBCb29sZWFuLFxuICAgIGxhYmVsOiBTdHJpbmcsXG4gICAgLi4uY29sb3JQcm9wcygpLFxuICAgIC4uLmVsZXZhdGlvblByb3BzKCksXG4gICAgLi4ucG9zaXRpb25Qcm9wcygpLFxuICB9IGFzIGFueSxcblxuICBzZXR1cChwcm9wcywgeyBzbG90cywgZW1pdCB9KTogKCkgPT4gVk5vZGUge1xuICAgIGNvbnN0IHsgc2V0VGV4dENvbG9yLCBzZXRCYWNrZ3JvdW5kIH0gPSB1c2VDb2xvcnMoKVxuXG4gICAgY29uc3QgeyBlbGV2YXRpb25DbGFzc2VzIH0gPSB1c2VFbGV2YXRpb24ocHJvcHMpXG5cbiAgICBjb25zdCB7IHBvc2l0aW9uQ2xhc3NlcyB9ID0gdXNlUG9zaXRpb24ocHJvcHMpXG5cbiAgICBjb25zdCBpc0ZsYXQgPSBjb21wdXRlZDxib29sZWFuPigoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMudGV4dCB8fCBwcm9wcy5vdXRsaW5lZFxuICAgIH0pXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAgICd2LWJ1dHRvbic6IHRydWUsXG4gICAgICAgICd2LWJ1dHRvbi0tZGlzYWJsZWQnOiBwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgJ3YtYnV0dG9uLS10ZXh0JzogcHJvcHMudGV4dCB8fCBwcm9wcy5vdXRsaW5lZCxcbiAgICAgICAgJ3YtYnV0dG9uLS1vdXRsaW5lZCc6IHByb3BzLm91dGxpbmVkLFxuICAgICAgICAuLi5lbGV2YXRpb25DbGFzc2VzLnZhbHVlLFxuICAgICAgICAuLi5wb3NpdGlvbkNsYXNzZXMudmFsdWUsXG4gICAgICB9KSxcbiAgICApXG5cbiAgICBmdW5jdGlvbiBnZW5MYWJlbCgpIHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1idXR0b25fX2xhYmVsJzogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ3NwYW4nLCBwcm9wc0RhdGEsIHByb3BzLmxhYmVsKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBzZXRDb2xvciA9IGlzRmxhdC52YWx1ZSA/IHNldFRleHRDb2xvciA6IHNldEJhY2tncm91bmRcbiAgICAgIGNvbnN0IGNvbnRlbnQ6IGFueVtdID0gW11cblxuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgb25DbGljazogKCkgPT4gIXByb3BzLmRpc2FibGVkICYmIGVtaXQoJ2NsaWNrJylcbiAgICAgIH1cblxuICAgICAgcHJvcHMubGFiZWwgJiYgY29udGVudC5wdXNoKGdlbkxhYmVsKCkpXG5cbiAgICAgIHNsb3RzLmRlZmF1bHQgJiYgY29udGVudC5wdXNoKHNsb3RzLmRlZmF1bHQoKSlcblxuICAgICAgcmV0dXJuIGgoJ2J1dHRvbicsXG4gICAgICAgIHByb3BzLmNvbG9yICYmICFwcm9wcy5kaXNhYmxlZFxuICAgICAgICAgID8gc2V0Q29sb3IocHJvcHMuY29sb3IsIHByb3BzRGF0YSkgOiBwcm9wc0RhdGEsXG4gICAgICAgIGNvbnRlbnQsXG4gICAgICApXG4gICAgfVxuICB9LFxufSlcbiJdfQ==