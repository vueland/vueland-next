import { h, computed, defineComponent } from 'vue';
import { colorProps, useColors } from '../../composables/use-colors';
import { convertToUnit } from '../../helpers';
import { VResize } from '../VResize';
export const VDataTableCell = defineComponent({
    name: 'v-data-table-cell',
    props: {
        resizeable: Boolean,
        align: {
            type: String,
            default: 'start',
        },
        width: {
            type: [String, Number],
            default: 75,
        },
        resizerColor: {
            type: String,
            default: 'primary',
        },
        contentColor: String,
        ...colorProps(),
    },
    emits: ['resize'],
    setup(props, { slots, emit }) {
        const { setTextClassNameColor, setTextCssColor, setBackgroundCssColor, setBackgroundClassNameColor, } = useColors();
        const classes = computed(() => ({
            'v-data-table__cell': true,
            'v-data-table__cell--themeable': !props.color,
            ...(props.contentColor ? setTextClassNameColor(props.contentColor) : {}),
            ...(props.color ? setBackgroundClassNameColor(props.color) : {}),
        }));
        const styles = computed(() => ({
            width: convertToUnit(+props.width),
            ...(props.contentColor ? setTextCssColor(props.contentColor) : {}),
            ...(props.color ? setBackgroundCssColor(props.color) : {}),
        }));
        const genResize = () => {
            const propsData = {
                right: true,
                emit: true,
                color: props.resizerColor,
                onResize: ($size) => emit('resize', $size),
            };
            return h(VResize, propsData);
        };
        const genCellContent = () => {
            const propsData = {
                class: {
                    'v-data-table__cell-content': true,
                    [`text-align--${props.align}`]: !!props.align,
                },
            };
            return h('div', propsData, slots.default && slots.default());
        };
        return () => {
            const propsData = {
                class: classes.value,
                style: styles.value,
            };
            return h('div', propsData, [
                genCellContent(),
                props.resizeable && genResize(),
            ]);
        };
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkRhdGFUYWJsZUNlbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WRGF0YVRhYmxlL1ZEYXRhVGFibGVDZWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxNQUFNLEtBQUssQ0FBQTtBQUdsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLDhCQUE4QixDQUFBO0FBR3BFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFHN0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUtwQyxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsZUFBZSxDQUFDO0lBQzVDLElBQUksRUFBRSxtQkFBbUI7SUFDekIsS0FBSyxFQUFFO1FBQ0wsVUFBVSxFQUFFLE9BQU87UUFDbkIsS0FBSyxFQUFFO1lBQ0wsSUFBSSxFQUFFLE1BQU07WUFDWixPQUFPLEVBQUUsT0FBTztTQUNqQjtRQUNELEtBQUssRUFBRTtZQUNMLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7WUFDdEIsT0FBTyxFQUFFLEVBQUU7U0FDWjtRQUNELFlBQVksRUFBRTtZQUNaLElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLFNBQVM7U0FDbkI7UUFDRCxZQUFZLEVBQUUsTUFBTTtRQUNwQixHQUFHLFVBQVUsRUFBRTtLQUNUO0lBRVIsS0FBSyxFQUFFLENBQUMsUUFBUSxDQUFDO0lBRWpCLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO1FBQzFCLE1BQU0sRUFDSixxQkFBcUIsRUFDckIsZUFBZSxFQUNmLHFCQUFxQixFQUNyQiwyQkFBMkIsR0FDNUIsR0FBRyxTQUFTLEVBQUUsQ0FBQTtRQUVmLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBMEIsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUN2RCxvQkFBb0IsRUFBRSxJQUFJO1lBQzFCLCtCQUErQixFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUs7WUFDN0MsR0FBRyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ3hFLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQywyQkFBMkIsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUNqRSxDQUFDLENBQUMsQ0FBQTtRQUVILE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQzdCLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQ2xDLEdBQUcsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDbEUsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1NBQzNELENBQUMsQ0FBQyxDQUFBO1FBRUgsTUFBTSxTQUFTLEdBQUcsR0FBVSxFQUFFO1lBQzVCLE1BQU0sU0FBUyxHQUFHO2dCQUNoQixLQUFLLEVBQUUsSUFBSTtnQkFDWCxJQUFJLEVBQUUsSUFBSTtnQkFDVixLQUFLLEVBQUUsS0FBSyxDQUFDLFlBQVk7Z0JBQ3pCLFFBQVEsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUM7YUFDM0MsQ0FBQTtZQUVELE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQTtRQUM5QixDQUFDLENBQUE7UUFFRCxNQUFNLGNBQWMsR0FBRyxHQUFVLEVBQUU7WUFDakMsTUFBTSxTQUFTLEdBQUc7Z0JBQ2hCLEtBQUssRUFBRTtvQkFDTCw0QkFBNEIsRUFBRSxJQUFJO29CQUNsQyxDQUFDLGVBQWdCLEtBQUssQ0FBQyxLQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSztpQkFDaEQ7YUFDRixDQUFBO1lBRUQsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFBO1FBQzlELENBQUMsQ0FBQTtRQUVELE9BQU8sR0FBRyxFQUFFO1lBQ1YsTUFBTSxTQUFTLEdBQUc7Z0JBQ2hCLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSztnQkFDcEIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLO2FBQ3BCLENBQUE7WUFFRCxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO2dCQUN6QixjQUFjLEVBQUU7Z0JBQ2hCLEtBQUssQ0FBQyxVQUFVLElBQUksU0FBUyxFQUFFO2FBQ2hDLENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQTtJQUNILENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBWdWUgQVBJXG5pbXBvcnQgeyBoLCBjb21wdXRlZCwgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJ1xuXG4vLyBFZmZlY3RzXG5pbXBvcnQgeyBjb2xvclByb3BzLCB1c2VDb2xvcnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy91c2UtY29sb3JzJ1xuXG4vLyBIZWxwZXJzXG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0IH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVlJlc2l6ZSB9IGZyb20gJy4uL1ZSZXNpemUnXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gJ3Z1ZSdcblxuZXhwb3J0IGNvbnN0IFZEYXRhVGFibGVDZWxsID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtZGF0YS10YWJsZS1jZWxsJyxcbiAgcHJvcHM6IHtcbiAgICByZXNpemVhYmxlOiBCb29sZWFuLFxuICAgIGFsaWduOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnc3RhcnQnLFxuICAgIH0sXG4gICAgd2lkdGg6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiA3NSxcbiAgICB9LFxuICAgIHJlc2l6ZXJDb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3ByaW1hcnknLFxuICAgIH0sXG4gICAgY29udGVudENvbG9yOiBTdHJpbmcsXG4gICAgLi4uY29sb3JQcm9wcygpLFxuICB9IGFzIGFueSxcblxuICBlbWl0czogWydyZXNpemUnXSxcblxuICBzZXR1cChwcm9wcywgeyBzbG90cywgZW1pdCB9KTogKCkgPT4gVk5vZGUge1xuICAgIGNvbnN0IHtcbiAgICAgIHNldFRleHRDbGFzc05hbWVDb2xvcixcbiAgICAgIHNldFRleHRDc3NDb2xvcixcbiAgICAgIHNldEJhY2tncm91bmRDc3NDb2xvcixcbiAgICAgIHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcixcbiAgICB9ID0gdXNlQ29sb3JzKClcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LWRhdGEtdGFibGVfX2NlbGwnOiB0cnVlLFxuICAgICAgJ3YtZGF0YS10YWJsZV9fY2VsbC0tdGhlbWVhYmxlJzogIXByb3BzLmNvbG9yLFxuICAgICAgLi4uKHByb3BzLmNvbnRlbnRDb2xvciA/IHNldFRleHRDbGFzc05hbWVDb2xvcihwcm9wcy5jb250ZW50Q29sb3IpIDoge30pLFxuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IHN0eWxlcyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICB3aWR0aDogY29udmVydFRvVW5pdCgrcHJvcHMud2lkdGgpLFxuICAgICAgLi4uKHByb3BzLmNvbnRlbnRDb2xvciA/IHNldFRleHRDc3NDb2xvcihwcm9wcy5jb250ZW50Q29sb3IpIDoge30pLFxuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0QmFja2dyb3VuZENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IGdlblJlc2l6ZSA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIHJpZ2h0OiB0cnVlLFxuICAgICAgICBlbWl0OiB0cnVlLFxuICAgICAgICBjb2xvcjogcHJvcHMucmVzaXplckNvbG9yLFxuICAgICAgICBvblJlc2l6ZTogKCRzaXplKSA9PiBlbWl0KCdyZXNpemUnLCAkc2l6ZSksXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKFZSZXNpemUsIHByb3BzRGF0YSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5DZWxsQ29udGVudCA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgJ3YtZGF0YS10YWJsZV9fY2VsbC1jb250ZW50JzogdHJ1ZSxcbiAgICAgICAgICBbYHRleHQtYWxpZ24tLSR7IHByb3BzLmFsaWduIH1gXTogISFwcm9wcy5hbGlnbixcbiAgICAgICAgfSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCkpXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgIHN0eWxlOiBzdHlsZXMudmFsdWUsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIFtcbiAgICAgICAgZ2VuQ2VsbENvbnRlbnQoKSxcbiAgICAgICAgcHJvcHMucmVzaXplYWJsZSAmJiBnZW5SZXNpemUoKSxcbiAgICAgIF0pXG4gICAgfVxuICB9LFxufSlcbiJdfQ==