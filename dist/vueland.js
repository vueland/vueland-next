!function(Q,F){"object"==typeof exports&&"object"==typeof module?module.exports=F(require("vue")):"function"==typeof define&&define.amd?define("vueland",["vue"],F):"object"==typeof exports?exports.vueland=F(require("vue")):Q.vueland=F(Q.Vue)}("undefined"!=typeof self?self:this,(function(__WEBPACK_EXTERNAL_MODULE__895__){return function(){"use strict";var __webpack_modules__={433:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"VApp\": function() { return /* reexport */ VApp; },\n  \"VAutocomplete\": function() { return /* reexport */ VAutocomplete; },\n  \"VBadge\": function() { return /* reexport */ VBadge; },\n  \"VButton\": function() { return /* reexport */ VButton_VButton; },\n  \"VCard\": function() { return /* reexport */ VCard; },\n  \"VCardActions\": function() { return /* reexport */ VCardActions; },\n  \"VCardContent\": function() { return /* reexport */ VCardContent; },\n  \"VCardSubtitle\": function() { return /* reexport */ VCardSubtitle; },\n  \"VCardTitle\": function() { return /* reexport */ VCardTitle; },\n  \"VCheckbox\": function() { return /* reexport */ VCheckbox; },\n  \"VChip\": function() { return /* reexport */ VChip; },\n  \"VCol\": function() { return /* reexport */ VCol; },\n  \"VDataTable\": function() { return /* reexport */ VDataTable; },\n  \"VDatePicker\": function() { return /* reexport */ VDatePicker; },\n  \"VFileInput\": function() { return /* reexport */ VFileInput; },\n  \"VForm\": function() { return /* reexport */ VForm; },\n  \"VGroup\": function() { return /* reexport */ VGroup; },\n  \"VIcon\": function() { return /* reexport */ VIcon; },\n  \"VInput\": function() { return /* reexport */ VInput; },\n  \"VLabel\": function() { return /* reexport */ VLabel; },\n  \"VLayout\": function() { return /* reexport */ VLayout; },\n  \"VList\": function() { return /* reexport */ VList; },\n  \"VListItem\": function() { return /* reexport */ VListItem; },\n  \"VListItemContent\": function() { return /* reexport */ VListItemContent; },\n  \"VListItemIcon\": function() { return /* reexport */ VListItemIcon; },\n  \"VListItemSubtitle\": function() { return /* reexport */ VListItemSubtitle; },\n  \"VListItemTitle\": function() { return /* reexport */ VListItemTitle; },\n  \"VMain\": function() { return /* reexport */ VMain; },\n  \"VMenu\": function() { return /* reexport */ VMenu; },\n  \"VModal\": function() { return /* reexport */ VModal; },\n  \"VNavigation\": function() { return /* reexport */ VNavigation; },\n  \"VOverlay\": function() { return /* reexport */ VOverlay; },\n  \"VProgressCircular\": function() { return /* reexport */ VProgressCircular; },\n  \"VProgressLinear\": function() { return /* reexport */ VProgressLinear; },\n  \"VResize\": function() { return /* reexport */ VResize; },\n  \"VRow\": function() { return /* reexport */ VRow; },\n  \"VSelect\": function() { return /* reexport */ VSelect; },\n  \"VSelectList\": function() { return /* reexport */ VSelectList; },\n  \"VSkeleton\": function() { return /* reexport */ VSkeleton; },\n  \"VSpacer\": function() { return /* reexport */ VSpacer; },\n  \"VTextField\": function() { return /* reexport */ VTextField; },\n  \"VTextarea\": function() { return /* reexport */ VTextarea; },\n  \"VToolbar\": function() { return /* reexport */ VToolbar; },\n  \"VToolbarContent\": function() { return /* reexport */ VToolbarContent; },\n  \"VToolbarItems\": function() { return /* reexport */ VToolbarItems; },\n  \"VToolbarLogo\": function() { return /* reexport */ VToolbarLogo; },\n  \"VToolbarNavBtn\": function() { return /* reexport */ VToolbarNavBtn; },\n  \"VTooltip\": function() { return /* reexport */ VTooltip; },\n  \"Vueland\": function() { return /* reexport */ Vueland; },\n  \"default\": function() { return /* binding */ src; }\n});\n\n// NAMESPACE OBJECT: ./src/components/index.ts\nvar components_namespaceObject = {};\n__webpack_require__.r(components_namespaceObject);\n__webpack_require__.d(components_namespaceObject, {\n  \"VApp\": function() { return VApp; },\n  \"VAutocomplete\": function() { return VAutocomplete; },\n  \"VBadge\": function() { return VBadge; },\n  \"VButton\": function() { return VButton_VButton; },\n  \"VCard\": function() { return VCard; },\n  \"VCardActions\": function() { return VCardActions; },\n  \"VCardContent\": function() { return VCardContent; },\n  \"VCardSubtitle\": function() { return VCardSubtitle; },\n  \"VCardTitle\": function() { return VCardTitle; },\n  \"VCheckbox\": function() { return VCheckbox; },\n  \"VChip\": function() { return VChip; },\n  \"VCol\": function() { return VCol; },\n  \"VDataTable\": function() { return VDataTable; },\n  \"VDatePicker\": function() { return VDatePicker; },\n  \"VFileInput\": function() { return VFileInput; },\n  \"VForm\": function() { return VForm; },\n  \"VGroup\": function() { return VGroup; },\n  \"VIcon\": function() { return VIcon; },\n  \"VInput\": function() { return VInput; },\n  \"VLabel\": function() { return VLabel; },\n  \"VLayout\": function() { return VLayout; },\n  \"VList\": function() { return VList; },\n  \"VListItem\": function() { return VListItem; },\n  \"VListItemContent\": function() { return VListItemContent; },\n  \"VListItemIcon\": function() { return VListItemIcon; },\n  \"VListItemSubtitle\": function() { return VListItemSubtitle; },\n  \"VListItemTitle\": function() { return VListItemTitle; },\n  \"VMain\": function() { return VMain; },\n  \"VMenu\": function() { return VMenu; },\n  \"VModal\": function() { return VModal; },\n  \"VNavigation\": function() { return VNavigation; },\n  \"VOverlay\": function() { return VOverlay; },\n  \"VProgressCircular\": function() { return VProgressCircular; },\n  \"VProgressLinear\": function() { return VProgressLinear; },\n  \"VResize\": function() { return VResize; },\n  \"VRow\": function() { return VRow; },\n  \"VSelect\": function() { return VSelect; },\n  \"VSelectList\": function() { return VSelectList; },\n  \"VSkeleton\": function() { return VSkeleton; },\n  \"VSpacer\": function() { return VSpacer; },\n  \"VTextField\": function() { return VTextField; },\n  \"VTextarea\": function() { return VTextarea; },\n  \"VToolbar\": function() { return VToolbar; },\n  \"VToolbarContent\": function() { return VToolbarContent; },\n  \"VToolbarItems\": function() { return VToolbarItems; },\n  \"VToolbarLogo\": function() { return VToolbarLogo; },\n  \"VToolbarNavBtn\": function() { return VToolbarNavBtn; },\n  \"VTooltip\": function() { return VTooltip; }\n});\n\n// NAMESPACE OBJECT: ./src/directives/index.ts\nvar directives_namespaceObject = {};\n__webpack_require__.r(directives_namespaceObject);\n__webpack_require__.d(directives_namespaceObject, {\n  \"clickOutside\": function() { return clickOutside; },\n  \"resize\": function() { return resize; }\n});\n\n// EXTERNAL MODULE: external {\"root\":\"Vue\",\"commonjs\":\"vue\",\"commonjs2\":\"vue\",\"amd\":\"vue\"}\nvar external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_ = __webpack_require__(895);\n;// CONCATENATED MODULE: ./src/directives/v-resize/index.ts\nvar resize = {\n  mounted: function mounted(el, binding) {\n    var callback = binding.value;\n    var options = binding.options || {\n      passive: true\n    };\n    window.addEventListener('resize', callback, options);\n    el._onResize = {\n      callback: callback,\n      options: options\n    };\n\n    if (!binding.modifiers || !binding.modifiers.quiet) {\n      callback();\n    }\n  },\n  beforeUnmount: function beforeUnmount(el) {\n    if (!el._onResize) return;\n    var _el$_onResize = el._onResize,\n        callback = _el$_onResize.callback,\n        options = _el$_onResize.options;\n    window.removeEventListener('resize', callback, options);\n    delete el._onResize;\n  }\n};\n;// CONCATENATED MODULE: ./src/services/breakpoints.ts\nvar breakpoints = {\n  sm: 576,\n  md: 768,\n  lg: 992,\n  xl: 1200\n};\n;// CONCATENATED MODULE: ./src/utils/thottle.ts\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar throttle = function throttle(fn, timeout) {\n  var lastThis = null;\n  var lastArgs = null;\n  var isThrottled = false;\n\n  function wrapper() {\n    if (isThrottled) {\n      lastThis = this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      lastArgs = args;\n      return;\n    }\n\n    lastArgs && fn.call.apply(fn, [lastThis].concat(_toConsumableArray(lastArgs)));\n    isThrottled = true;\n    setTimeout(function () {\n      isThrottled = false;\n\n      if (lastArgs) {\n        wrapper.apply(lastThis, lastArgs);\n      }\n\n      lastThis = null;\n      lastArgs = null;\n    }, timeout);\n  }\n\n  return wrapper;\n};\n;// CONCATENATED MODULE: ./src/components/VApp/VApp.ts\n\n\n\n\nvar VApp = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-app',\n  directives: {\n    resize: resize\n  },\n  props: {\n    global: {\n      type: Object,\n      \"default\": null\n    }\n  },\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var THROTTLING_TIMEOUT = 60;\n    var state = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({\n      current: null,\n      xlAndLess: false,\n      lgAndLess: false,\n      mdAndLess: false,\n      smAndLess: false\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.provide)('breakpoints', state);\n\n    var setCurrentBreakpointName = function setCurrentBreakpointName(screen) {\n      if (screen >= breakpoints.xl) {\n        return state.current = 'xl';\n      }\n\n      if (screen >= breakpoints.lg && screen < breakpoints.xl) {\n        return state.current = 'lg';\n      }\n\n      if (screen >= breakpoints.md && screen < breakpoints.lg) {\n        return state.current = 'md';\n      }\n\n      if (screen >= breakpoints.sm && screen < breakpoints.md) {\n        return state.current = 'sm';\n      }\n\n      return null;\n    };\n\n    var setIntervals = function setIntervals(screen) {\n      var xl = breakpoints.xl,\n          lg = breakpoints.lg,\n          md = breakpoints.md,\n          sm = breakpoints.sm;\n      state.xlAndLess = screen <= xl && screen > lg;\n      state.lgAndLess = screen <= lg && screen > md;\n      state.mdAndLess = screen <= md && screen > sm;\n      state.smAndLess = screen <= sm;\n    };\n\n    var setSizes = function setSizes() {\n      var _a;\n\n      var screen = ((_a = props.global) === null || _a === void 0 ? void 0 : _a.innerWidth) || window.innerWidth;\n      setCurrentBreakpointName(screen);\n      setIntervals(screen);\n    };\n\n    var throttledResizeListener = throttle(setSizes, THROTTLING_TIMEOUT);\n\n    var genAppWrapper = function genAppWrapper() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-app--wrapper'\n      }, {\n        \"default\": function _default() {\n          return slots[\"default\"] && slots[\"default\"]();\n        }\n      });\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onMounted)(function () {\n      setSizes();\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.withDirectives)((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-app'\n      }, genAppWrapper()), [[resize, throttledResizeListener]]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VApp/index.ts\n\n;// CONCATENATED MODULE: ./src/utils/color-parser.ts\nfunction isCssColor(color) {\n  return !!color.match(/^(#|var\\(--|(rgb|hsl)a?\\()/);\n}\n;// CONCATENATED MODULE: ./src/composable/use-colors.ts\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || use_colors_unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction use_colors_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return use_colors_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return use_colors_arrayLikeToArray(o, minLen); }\n\nfunction use_colors_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\nvar colorProps = function colorProps() {\n  var defaultColor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return {\n    color: {\n      type: String,\n      \"default\": defaultColor\n    }\n  };\n};\nvar useColors = function useColors() {\n  var setTextClassNameColor = function setTextClassNameColor(color) {\n    var classes = {};\n\n    if (!isCssColor(color)) {\n      var _color$trim$split = color.trim().split(' ', 2),\n          _color$trim$split2 = _slicedToArray(_color$trim$split, 2),\n          colorName = _color$trim$split2[0],\n          colorModifier = _color$trim$split2[1];\n\n      colorName && (classes[\"\".concat(colorName, \"--text\")] = true);\n      colorModifier && (classes[\"text--\".concat(colorModifier)] = true);\n    }\n\n    return classes;\n  };\n\n  var setTextCssColor = function setTextCssColor(color) {\n    var styles = {};\n\n    if (isCssColor(color)) {\n      styles.color = color;\n    }\n\n    return styles;\n  };\n\n  var setBackgroundCssColor = function setBackgroundCssColor(color) {\n    var styles = {};\n\n    if (isCssColor(color)) {\n      styles['background-color'] = color;\n      styles['border-color'] = color;\n    }\n\n    return styles;\n  };\n\n  var setBackgroundClassNameColor = function setBackgroundClassNameColor(color) {\n    var classes = {};\n\n    if (!isCssColor(color)) {\n      var _color$trim$split3 = color.trim().split(' ', 2),\n          _color$trim$split4 = _slicedToArray(_color$trim$split3, 2),\n          colorName = _color$trim$split4[0],\n          colorModifier = _color$trim$split4[1];\n\n      colorName && (classes[colorName] = true);\n      colorModifier && (classes[colorModifier] = true);\n    }\n\n    return classes;\n  };\n\n  return {\n    setTextCssColor: setTextCssColor,\n    setTextClassNameColor: setTextClassNameColor,\n    setBackgroundCssColor: setBackgroundCssColor,\n    setBackgroundClassNameColor: setBackgroundClassNameColor\n  };\n};\n;// CONCATENATED MODULE: ./src/composable/use-elevation.ts\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nfunction elevationProps() {\n  return {\n    elevation: [String, Number]\n  };\n}\nfunction useElevation(props) {\n  var elevationClasses = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n    return _defineProperty({}, \"elevation-\".concat(props.elevation), !!props.elevation);\n  });\n  return {\n    elevationClasses: elevationClasses\n  };\n}\n;// CONCATENATED MODULE: ./src/composable/use-position.ts\n\nvar positionProps = function positionProps() {\n  return {\n    absolute: Boolean,\n    left: Boolean,\n    right: Boolean,\n    top: Boolean,\n    bottom: Boolean\n  };\n};\nvar usePosition = function usePosition(props) {\n  var positionClasses = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n    return {\n      'position--absolute': props.absolute,\n      'to--left': props.left,\n      'to--right': props.right,\n      'to--top': props.top,\n      'to--bottom': props.bottom\n    };\n  });\n  return {\n    positionClasses: positionClasses\n  };\n};\n;// CONCATENATED MODULE: ./src/helpers/index.ts\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { helpers_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction helpers_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nvar createSimpleFunctional = function createSimpleFunctional(c) {\n  var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'div';\n  var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n    name: name || c.replace(/__/g, '-'),\n    setup: function setup(_, _ref) {\n      var slots = _ref.slots;\n      var propsData = {\n        \"class\": helpers_defineProperty({}, c.trim(), true)\n      };\n      return function () {\n        return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(el, propsData, slots[\"default\"] && slots[\"default\"]());\n      };\n    }\n  });\n};\nvar addOnceListener = function addOnceListener(el, eventName, cb) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  var once = function once(event) {\n    cb(event);\n    el.removeEventListener(eventName, once, options);\n  };\n\n  el.addEventListener(eventName, once, options);\n};\nvar convertToUnit = function convertToUnit(str) {\n  var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'px';\n\n  if (isNaN(+str)) {\n    return String(str);\n  } else {\n    return \"\".concat(Number(str)).concat(unit);\n  }\n};\nvar warning = function warning(warningText) {\n  console.warn(warningText);\n};\nvar copyWithoutLink = function copyWithoutLink(obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\nvar addScopedSlot = function addScopedSlot(slotName, slots) {\n  return function (scoped) {\n    var arg = _objectSpread({}, scoped);\n\n    return slots[slotName] && slots[slotName](arg);\n  };\n};\nvar getKeyValueFromTarget = function getKeyValueFromTarget(valueKey, target) {\n  return valueKey.split('.').reduce(function (acc, it) {\n    return acc[it];\n  }, target);\n};\nvar mapToValArray = function mapToValArray(map) {\n  return Array.from(map.values());\n};\nvar uniqueArray = function uniqueArray(arr) {\n  return Object.values(arr.reduce(function (map, it) {\n    if (!map[it.name]) map[it.name] = it;\n    return map;\n  }, {}));\n};\nvar getStringKeysValue = function getStringKeysValue(str, value) {\n  return str.split('.').reduce(function (acc, it) {\n    return acc[it];\n  }, value);\n};\nvar toCamelCase = function toCamelCase() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return args.reduce(function (res, s, i) {\n    if (i === 0) res += s;else res += s[0].toUpperCase() + s.slice(1);\n    return res;\n  }, '');\n};\n;// CONCATENATED MODULE: ./src/components/VProgressCircular/VProgressCircular.ts\nfunction VProgressCircular_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VProgressCircular_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VProgressCircular_ownKeys(Object(source), !0).forEach(function (key) { VProgressCircular_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VProgressCircular_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VProgressCircular_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar VProgressCircular = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-progress-circular',\n  props: VProgressCircular_objectSpread({\n    indeterminate: Boolean,\n    size: {\n      type: [Number, String],\n      \"default\": 32\n    },\n    width: {\n      type: [Number, String],\n      \"default\": 4\n    },\n    value: {\n      type: [Number, String],\n      \"default\": 0\n    },\n    rotate: {\n      type: [Number, String],\n      \"default\": 0\n    }\n  }, colorProps()),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var radius = 20;\n\n    var _useColors = useColors(),\n        setTextClassNameColor = _useColors.setTextClassNameColor,\n        setTextCssColor = _useColors.setTextCssColor;\n\n    var normalizedValue = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      if (props.value < 0) return 0;\n      if (props.value > 100) return 100;\n      return parseFloat(props.value);\n    });\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VProgressCircular_objectSpread({\n        'v-progress-circular': true,\n        'v-progress-circular--indeterminate': props.indeterminate\n      }, props.color ? setTextClassNameColor(props.color) : {});\n    });\n    var circumference = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return 2 * Math.PI * radius;\n    });\n    var strokeDashArray = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return Math.round(circumference.value * 1000) / 1000;\n    });\n    var strokeDashOffset = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return (100 - normalizedValue.value) / 100 * circumference.value + 'px';\n    });\n    var viewBoxSize = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return radius / (1 - Number(props.width) / +props.size);\n    });\n    var strokeWidth = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return Number(props.width) / +props.size * viewBoxSize.value * 2;\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VProgressCircular_objectSpread({\n        width: convertToUnit(props.size),\n        height: convertToUnit(props.size)\n      }, props.color ? setTextCssColor(props.color) : {});\n    });\n    var svgStyle = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        transform: \"rotate(\".concat(+props.rotate, \"deg)\")\n      };\n    });\n\n    function genCircle(name, offset) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('circle', {\n        \"class\": \"v-progress-circular__\".concat(name),\n        fill: 'transparent',\n        cx: 2 * viewBoxSize.value,\n        cy: 2 * viewBoxSize.value,\n        r: radius,\n        'stroke-width': strokeWidth.value,\n        'stroke-dasharray': strokeDashArray.value,\n        'stroke-dashoffset': offset\n      });\n    }\n\n    var genSvg = function genSvg() {\n      var children = [props.indeterminate || genCircle('underlay', 0), genCircle('overlay', strokeDashOffset.value)];\n      var propsData = {\n        xmlns: 'http://www.w3.org/2000/svg',\n        viewBox: \"\".concat(viewBoxSize.value, \" \").concat(viewBoxSize.value, \" \").concat(2 * viewBoxSize.value, \" \").concat(2 * viewBoxSize.value),\n        style: svgStyle.value\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('svg', propsData, children);\n    };\n\n    var genInfo = function genInfo() {\n      var propsData = {\n        \"class\": 'v-progress-circular__info'\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, slots[\"default\"] && slots[\"default\"]());\n    };\n\n    return function () {\n      var propsData = {\n        \"class\": classes.value,\n        style: styles.value\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [genSvg(), genInfo()]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VButton/VButton.ts\nfunction VButton_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VButton_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VButton_ownKeys(Object(source), !0).forEach(function (key) { VButton_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VButton_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VButton_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\nvar VButton_VButton = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-button',\n  props: VButton_objectSpread({\n    disabled: Boolean,\n    outlined: Boolean,\n    rounded: Boolean,\n    round: Boolean,\n    absolute: Boolean,\n    loading: Boolean,\n    left: Boolean,\n    right: Boolean,\n    text: Boolean,\n    dark: Boolean,\n    label: String,\n    width: [String, Number],\n    color: {\n      type: String,\n      \"default\": 'grey lighten-1'\n    }\n  }, elevationProps()),\n  emits: ['click'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n\n    var _useColors = useColors(),\n        setTextClassNameColor = _useColors.setTextClassNameColor,\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor,\n        setTextCssColor = _useColors.setTextCssColor;\n\n    var _useElevation = useElevation(props),\n        elevationClasses = _useElevation.elevationClasses;\n\n    var _usePosition = usePosition(props),\n        positionClasses = _usePosition.positionClasses;\n\n    var isFlat = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.text || props.outlined;\n    });\n    var isLoadable = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return !props.text && !props.outlined && props.loading;\n    });\n    var isElevetable = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return !isLoadable.value && !props.disabled;\n    });\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var elevations = isElevetable.value ? elevationClasses.value : {};\n      return VButton_objectSpread(VButton_objectSpread(VButton_objectSpread(VButton_objectSpread({\n        'v-button': true,\n        'v-button--text': props.text || props.outlined,\n        'v-button--outlined': props.outlined,\n        'v-button--rounded': !props.round && props.rounded,\n        'v-button--round': props.round,\n        'v-button--disabled': props.disabled || isLoadable.value,\n        'v-button--loading': props.loading\n      }, elevations), positionClasses.value), props.color && isFlat.value ? setTextClassNameColor(props.color) : {}), props.color && !isFlat.value ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var width = props.width || 40;\n      return VButton_objectSpread(VButton_objectSpread({\n        width: (props.width || props.round) && convertToUnit(width),\n        height: props.round && convertToUnit(width)\n      }, props.color && isFlat.value ? setTextCssColor(props.color) : {}), props.color && !isFlat.value ? setBackgroundCssColor(props.color) : {});\n    });\n\n    var genLoader = function genLoader() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', {\n        \"class\": 'v-button__loader'\n      }, slots.loading && slots.loading() || (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VProgressCircular, {\n        indeterminate: true,\n        size: 23,\n        width: 2\n      }));\n    };\n\n    var genLabel = function genLabel() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', {\n        \"class\": 'v-button__label'\n      }, props.label);\n    };\n\n    var genContent = function genContent() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-button__content'\n      }, [slots[\"default\"] && slots[\"default\"]() || props.label && genLabel()]);\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('button', {\n        \"class\": classes.value,\n        style: styles.value,\n        onClick: function onClick() {\n          return !props.disabled && emit('click');\n        }\n      }, [genContent(), props.loading && genLoader()]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VButton/index.ts\n\n\n/* harmony default export */ var components_VButton = ((/* unused pure expression or super */ null && (VButton)));\n;// CONCATENATED MODULE: ./src/components/VCard/VCard.ts\nfunction VCard_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VCard_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VCard_ownKeys(Object(source), !0).forEach(function (key) { VCard_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VCard_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VCard_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar VCard = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-card',\n  props: VCard_objectSpread(VCard_objectSpread({\n    width: {\n      type: [String, Number],\n      \"default\": 350\n    }\n  }, colorProps()), elevationProps()),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var _useElevation = useElevation(props),\n        elevationClasses = _useElevation.elevationClasses;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VCard_objectSpread(VCard_objectSpread({\n        'v-card': true\n      }, elevationClasses.value), props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VCard_objectSpread({\n        width: \"\".concat(props.width, \"px\")\n      }, props.color ? setBackgroundCssColor(props.color) : {});\n    });\n\n    function genCard() {\n      var propsData = {\n        \"class\": classes.value,\n        style: styles.value\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, slots[\"default\"] && slots[\"default\"]());\n    }\n\n    return function () {\n      return genCard();\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VCard/index.ts\n\n\nvar VCardTitle = createSimpleFunctional('v-card__title');\nvar VCardSubtitle = createSimpleFunctional('v-card__subtitle');\nvar VCardContent = createSimpleFunctional('v-card__content');\nvar VCardActions = createSimpleFunctional('v-card__actions');\n;// CONCATENATED MODULE: ./src/components/VGrid/VRow.ts\nfunction VRow_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VRow_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VRow_ownKeys(Object(source), !0).forEach(function (key) { VRow_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VRow_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VRow_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar VRow_breakpoints = ['sm', 'md', 'lg', 'xl'];\nvar positions = ['start', 'center', 'end'];\nvar VRow = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-row',\n  props: VRow_objectSpread({\n    align: {\n      type: String,\n      \"default\": null,\n      validator: function validator(str) {\n        return [].concat(positions, ['baseline', 'stretch']).includes(str);\n      }\n    },\n    alignContent: {\n      type: String,\n      \"default\": null,\n      validator: function validator(str) {\n        return [].concat(positions, ['space-between', 'space-around', 'stretch']).includes(str);\n      }\n    },\n    justify: {\n      type: String,\n      \"default\": null,\n      validator: function validator(str) {\n        return [].concat(positions, ['space-between', 'space-around']).includes(str);\n      }\n    },\n    noGutter: Boolean\n  }, VRow_breakpoints.reduce(function (props, bp) {\n    props[\"justify-\".concat(bp)] = {\n      type: String,\n      \"default\": null,\n      validator: function validator(str) {\n        return [].concat(positions, ['space-between', 'space-around']).includes(str);\n      }\n    };\n    props[\"align-\".concat(bp)] = {\n      type: String,\n      \"default\": null,\n      validator: function validator(str) {\n        return [].concat(positions, ['baseline', 'stretch']).includes(str);\n      }\n    };\n    props[\"align-content-\".concat(bp)] = {\n      type: String,\n      \"default\": null,\n      validator: function validator(str) {\n        return [].concat(positions, ['space-between', 'space-around', 'stretch']).includes(str);\n      }\n    };\n    return props;\n  }, {})),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _objectSpread2;\n\n      return VRow_objectSpread((_objectSpread2 = {\n        'v-row': true,\n        'no-gutter': props.noGutter\n      }, VRow_defineProperty(_objectSpread2, \"justify-\".concat(props.justify), !!props.justify), VRow_defineProperty(_objectSpread2, \"align-\".concat(props.align), !!props.align), VRow_defineProperty(_objectSpread2, \"align-content-\".concat(props.alignContent), !!props.alignContent), _objectSpread2), VRow_breakpoints.reduce(function (cls, bp) {\n        ;\n        [].concat(positions, ['space-between', 'space-around']).forEach(function (pos) {\n          cls[\"justify-\".concat(bp, \"-\").concat(pos)] = pos === props[toCamelCase('justify', bp)];\n        });\n        [].concat(positions, ['baseline', 'stretch']).forEach(function (pos) {\n          cls[\"align-\".concat(bp, \"-\").concat(pos)] = pos === props[toCamelCase('align', bp)];\n        });\n        [].concat(positions, ['space-between', 'space-around', 'stretch']).forEach(function (pos) {\n          cls[\"align-content-\".concat(bp, \"-\").concat(pos)] = pos === props[toCamelCase('align', 'content', bp)];\n        });\n        return cls;\n      }, {}));\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value\n      }, {\n        \"default\": function _default() {\n          return slots[\"default\"] && slots[\"default\"]();\n        }\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VGrid/VCol.ts\nfunction VCol_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VCol_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VCol_ownKeys(Object(source), !0).forEach(function (key) { VCol_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VCol_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VCol_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar VCol_breakpoints = ['sm', 'md', 'lg', 'xl'];\nvar colProps = VCol_breakpoints.reduce(function (props, p) {\n  props[p] = {\n    type: [String, Number],\n    \"default\": null\n  };\n  return props;\n}, {});\nvar orderProps = VCol_breakpoints.reduce(function (props, p) {\n  props[\"order-\".concat(p)] = {\n    type: [String, Number],\n    \"default\": null\n  };\n  return props;\n}, {});\nvar offsetProps = VCol_breakpoints.reduce(function (props, p) {\n  props[\"offset-\".concat(p)] = {\n    type: [String, Number],\n    \"default\": null\n  };\n  return props;\n}, {});\nvar VCol = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-col',\n  props: VCol_objectSpread(VCol_objectSpread(VCol_objectSpread({\n    order: {\n      type: [String, Number],\n      \"default\": null\n    },\n    cols: {\n      type: [String, Number],\n      \"default\": null\n    },\n    offset: {\n      type: [String, Number],\n      \"default\": null\n    }\n  }, colProps), orderProps), offsetProps),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VCol_objectSpread(VCol_objectSpread(VCol_objectSpread(VCol_defineProperty({\n        'v-col': true\n      }, \"v-col-\".concat(props.cols), !!props.cols), VCol_breakpoints.reduce(function (cols, p) {\n        cols[\"\".concat(p, \"-\").concat(props[p])] = !!props[p];\n        return cols;\n      }, {})), {}, VCol_defineProperty({}, \"order-\".concat(props.order), props.order !== null), VCol_breakpoints.reduce(function (orders, p) {\n        var propValue = props[toCamelCase('order', p)];\n        orders[\"order-\".concat(p, \"-\").concat(propValue)] = !!propValue;\n        return orders;\n      }, {})), {}, VCol_defineProperty({}, \"offset-\".concat(props.offset), props.offset !== null), VCol_breakpoints.reduce(function (offsets, p) {\n        var propValue = props[toCamelCase('offset', p)];\n        offsets[\"offset-\".concat(p, \"-\").concat(propValue)] = !!propValue;\n        return offsets;\n      }, {}));\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value\n      }, {\n        \"default\": function _default() {\n          return slots[\"default\"] && slots[\"default\"]();\n        }\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VGrid/VLayout.ts\n\nvar VLayout = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-layout',\n  props: {\n    column: Boolean,\n    wrap: Boolean\n  },\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        'v-layout': true,\n        'flex-column': props.column,\n        'flex-wrap': props.wrap\n      };\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value\n      }, {\n        \"default\": function _default() {\n          return slots[\"default\"] && slots[\"default\"]();\n        }\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VGrid/index.ts\n\n\n\n\nvar VSpacer = createSimpleFunctional('v-spacer');\n;// CONCATENATED MODULE: ./src/components/VOverlay/VOverlay.ts\nfunction VOverlay_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VOverlay_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VOverlay_ownKeys(Object(source), !0).forEach(function (key) { VOverlay_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VOverlay_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VOverlay_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar VOverlay = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-overlay',\n  props: {\n    hide: Boolean,\n    active: Boolean,\n    color: String,\n    fixed: Boolean\n  },\n  setup: function setup(props) {\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VOverlay_objectSpread({\n        'v-overlay': true,\n        'v-overlay--hidden': props.hide,\n        'v-overlay--active': props.active\n      }, props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VOverlay_objectSpread({}, props.color ? setBackgroundCssColor(props.color) : {});\n    });\n    return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n      \"class\": classes.value,\n      style: styles.value,\n      ref: 'overlay'\n    });\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VOverlay/index.ts\n\n;// CONCATENATED MODULE: ./src/composable/use-overlay.ts\n\n\n\nfunction overlayProps() {\n  return {\n    overlay: Boolean,\n    overlayColor: {\n      type: String,\n      \"default\": '#000000'\n    }\n  };\n}\nfunction useOverlay(props, overlayOn) {\n  var container = document.createElement('div');\n  var overlayProps = {\n    active: false,\n    color: props.overlayColor\n  };\n  var overlayElement = null;\n\n  var overlayVNode = function overlayVNode() {\n    return VOverlay.setup(overlayProps, {});\n  };\n\n  var renderOverlay = function renderOverlay() {\n    return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.render)(overlayVNode(), container);\n  };\n\n  var createOverlay = function createOverlay() {\n    var _a;\n\n    (_a = overlayOn === null || overlayOn === void 0 ? void 0 : overlayOn.parentNode) === null || _a === void 0 ? void 0 : _a.insertBefore(overlayElement, overlayOn);\n    overlayElement === null || overlayElement === void 0 ? void 0 : overlayElement.classList.remove('v-overlay--hidden');\n    requestAnimationFrame(function () {\n      overlayElement === null || overlayElement === void 0 ? void 0 : overlayElement.classList.add('v-overlay--active');\n    });\n  };\n\n  var removeOverlay = function removeOverlay() {\n    overlayElement.classList.remove('v-overlay--active');\n    requestAnimationFrame(function () {\n      overlayElement === null || overlayElement === void 0 ? void 0 : overlayElement.classList.add('v-overlay--hidden');\n    });\n\n    var remove = function remove() {\n      var _a;\n\n      (_a = overlayElement === null || overlayElement === void 0 ? void 0 : overlayElement.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(overlayElement);\n    };\n\n    addOnceListener(overlayElement, 'transitionend', remove);\n  };\n\n  renderOverlay();\n  overlayElement = container.firstChild;\n  return {\n    createOverlay: createOverlay,\n    removeOverlay: removeOverlay\n  };\n}\n;// CONCATENATED MODULE: ./src/composable/use-transition.ts\n\nfunction transitionProps() {\n  return {\n    transition: String\n  };\n}\nfunction useTransition(vNode, transition) {\n  var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var props = {\n    name: transition,\n    mode: mode\n  };\n  return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.Transition, props, {\n    \"default\": function _default() {\n      return vNode;\n    }\n  });\n}\n;// CONCATENATED MODULE: ./src/composable/use-toggle.ts\n\nfunction useToggle(props, propName) {\n  var isActive = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(false);\n  var prop = propName ? propName : 'modelValue';\n  (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n    return props[prop];\n  }, function (to) {\n    return isActive.value = !!to;\n  }, {\n    immediate: true\n  });\n  return {\n    isActive: isActive\n  };\n}\n;// CONCATENATED MODULE: ./src/components/VModal/VModal.ts\nfunction VModal_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VModal_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VModal_ownKeys(Object(source), !0).forEach(function (key) { VModal_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VModal_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VModal_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\nvar VModal = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-modal',\n  props: VModal_objectSpread(VModal_objectSpread({\n    modelValue: Boolean,\n    width: {\n      type: [Number, String],\n      \"default\": null\n    }\n  }, overlayProps()), transitionProps()),\n  emits: ['update:modelValue'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n\n    var _useToggle = useToggle(props),\n        isActive = _useToggle.isActive;\n\n    var modalRef = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onMounted)(function () {\n      if (props.overlay) {\n        var _useOverlay = useOverlay(props, modalRef.value),\n            createOverlay = _useOverlay.createOverlay,\n            removeOverlay = _useOverlay.removeOverlay;\n\n        isActive.value && createOverlay();\n        (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n          return isActive.value;\n        }, function (to) {\n          to && createOverlay();\n          !to && removeOverlay();\n        });\n      }\n    });\n\n    function genContent() {\n      var propsData = {\n        \"class\": 'v-modal__content',\n        style: {\n          width: props.width ? convertToUnit(props.width) : ''\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, slots[\"default\"] && slots[\"default\"]());\n    }\n\n    function genModal() {\n      var propsData = VModal_defineProperty({\n        \"class\": 'v-modal',\n        ref: modalRef\n      }, 'onUpdate:modelValue', function onUpdateModelValue(val) {\n        return emit('update:modelValue', val);\n      });\n\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.withDirectives)((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, genContent()), [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.vShow, isActive.value]]);\n    }\n\n    return function () {\n      return useTransition(genModal(), props.transition);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VModal/index.ts\n\n;// CONCATENATED MODULE: ./src/composable/use-auto-position.ts\n\nfunction autoPositionProps() {\n  return {\n    positionX: {\n      type: Number,\n      \"default\": 0\n    },\n    positionY: {\n      type: Number,\n      \"default\": 0\n    }\n  };\n}\nfunction useAutoPosition(props) {\n  var dimensions = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({\n    activator: {\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n      width: 0,\n      height: 0\n    },\n    content: {\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n      width: 0,\n      height: 0\n    },\n    pageYOffset: 0,\n    pageWidth: 0\n  });\n  var contentRef = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n  var offsetY = +props.offsetY;\n  var activator;\n  var content;\n  var contentBottomBorder = 0;\n\n  var getRect = function getRect(el) {\n    var rect = el.getBoundingClientRect();\n    return {\n      top: rect.top,\n      left: rect.left,\n      bottom: rect.bottom,\n      right: rect.right,\n      width: rect.width,\n      height: rect.height\n    };\n  };\n\n  var isAbsolutePositioned = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n    return !!props.positionY || !!props.positionX;\n  });\n\n  var getInnerHeight = function getInnerHeight() {\n    if (!window) return 0;\n    return innerHeight || document.documentElement.clientHeight;\n  };\n\n  var getScrollTop = function getScrollTop() {\n    if (!window) return 0;\n    return pageYOffset || document.documentElement.scrollTop;\n  };\n\n  var getScrollLeft = function getScrollLeft() {\n    if (!window) return 0;\n    return pageXOffset || document.documentElement.scrollLeft;\n  };\n\n  var getContentAbsoluteBottomPoint = function getContentAbsoluteBottomPoint() {\n    return dimensions.content.height + props.positionY + getScrollTop();\n  };\n\n  var getContentBottomBorder = function getContentBottomBorder() {\n    var activator = dimensions.activator,\n        content = dimensions.content;\n\n    if (props.bottom) {\n      return content.height + activator.top + activator.height;\n    }\n\n    if (props.top) {\n      return activator.top;\n    }\n\n    return content.height + activator.top;\n  };\n\n  var calcContentBottomPosition = function calcContentBottomPosition() {\n    var fullHeight = getScrollTop() + getInnerHeight();\n    var contentBottomPosition = isAbsolutePositioned.value ? getContentAbsoluteBottomPoint() : getContentBottomBorder();\n    return fullHeight - contentBottomPosition;\n  };\n\n  var calcAbsoluteTop = function calcAbsoluteTop() {\n    var topPosition = props.positionY + getScrollTop();\n\n    if (offsetY >= contentBottomBorder) {\n      return topPosition + contentBottomBorder - offsetY;\n    }\n\n    return topPosition;\n  };\n\n  var calcBottomPosition = function calcBottomPosition() {\n    var activator = dimensions.activator,\n        content = dimensions.content;\n\n    if (offsetY >= contentBottomBorder) {\n      return activator.top - content.height - offsetY;\n    }\n\n    return activator.top + activator.height + offsetY;\n  };\n\n  var calcTopPosition = function calcTopPosition() {\n    var activator = dimensions.activator,\n        content = dimensions.content;\n\n    if (content.height + getScrollTop() + offsetY > activator.top) {\n      return activator.top + activator.height;\n    }\n\n    return activator.top - content.height;\n  };\n\n  var calcContentAutoPosition = function calcContentAutoPosition() {\n    if (offsetY >= contentBottomBorder) {\n      return dimensions.activator.top + contentBottomBorder - offsetY;\n    }\n\n    return dimensions.activator.top;\n  };\n\n  var calcPositionY = function calcPositionY() {\n    contentBottomBorder = calcContentBottomPosition();\n    if (props.positionY) return calcAbsoluteTop();\n    if (props.bottom) return calcBottomPosition();\n    if (props.top) return calcTopPosition();\n    return calcContentAutoPosition();\n  };\n\n  var calcPositionX = function calcPositionX() {\n    if (props.positionX) return props.positionX + getScrollLeft();\n    return dimensions.activator.left;\n  };\n\n  var snapShot = function snapShot(cb) {\n    requestAnimationFrame(function () {\n      if (!content || content.style.display !== 'none') return cb();\n      content.style.display = 'inline-block';\n      cb();\n      content.style.display = 'none';\n    });\n  };\n\n  var updateDimensions = function updateDimensions() {\n    return new Promise(function (resolve) {\n      snapShot(function () {\n        activator && setActivatorDimensions();\n        content && setContentDimensions();\n        resolve();\n      });\n    });\n  };\n\n  var setActivatorDimensions = function setActivatorDimensions() {\n    dimensions.activator = getRect(activator);\n    dimensions.activator.height = activator.offsetHeight;\n    dimensions.activator.top = dimensions.activator.top + getScrollTop();\n    dimensions.activator.left = dimensions.activator.left + getScrollLeft();\n  };\n\n  var setContentDimensions = function setContentDimensions() {\n    var rect = activator ? dimensions.activator : getRect(content);\n    dimensions.content.height = content.offsetHeight;\n    dimensions.content.top = calcPositionY();\n    dimensions.content.left = calcPositionX();\n    dimensions.content.width = rect.width;\n  };\n\n  var setDimensions = function setDimensions(activatorEl) {\n    if (!activator && !content) {\n      activator = activatorEl;\n      content = contentRef.value;\n    }\n\n    return updateDimensions();\n  };\n\n  return {\n    dimensions: dimensions,\n    contentRef: contentRef,\n    setDimensions: setDimensions,\n    updateDimensions: updateDimensions\n  };\n}\n;// CONCATENATED MODULE: ./src/composable/use-activator.ts\n\nfunction activatorProps() {\n  return {\n    activator: {\n      type: [Object, String]\n    },\n    internalActivator: Boolean\n  };\n}\nvar useActivator = function useActivator(props) {\n  var activatorRef = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n  var activatorSizes = {};\n  var listeners = {};\n\n  var getActivator = function getActivator(event) {\n    if (activatorRef.value) return activatorRef.value;\n    var target = props.internalActivator ? props.activator.$el : document;\n\n    if (props.inputActivator) {\n      return activatorRef.value = target.querySelector(props.inputActivator);\n    }\n\n    if (props.activator) {\n      if (typeof props.activator === 'string') {\n        return activatorRef.value = target.querySelector(props.activator);\n      }\n\n      return activatorRef.value = props.activator;\n    }\n\n    if (event) {\n      return activatorRef.value = event.target || event.currentTarget;\n    }\n\n    return null;\n  };\n\n  var getActivatorSizes = function getActivatorSizes() {\n    var el = activatorRef.value.$el || activatorRef.value;\n    activatorSizes.left = el.offsetLeft;\n    activatorSizes.top = el.offsetTop;\n    activatorSizes.height = el.offsetHeight;\n    activatorSizes.width = el.offsetWidth;\n    return activatorSizes;\n  };\n\n  var genActivatorListeners = function genActivatorListeners(props, handlers) {\n    if (props.openOnHover) {\n      listeners.mouseenter = function (e) {\n        return handlers.mouseenter(e);\n      };\n\n      listeners.mouseleave = function (e) {\n        return handlers.mouseleave(e);\n      };\n    }\n\n    if (props.openOnClick) {\n      listeners.click = function (e) {\n        return handlers.click(e);\n      };\n    }\n\n    if (props.openOnContextmenu) {\n      listeners.contextmenu = function (e) {\n        return handlers.contextmenu(e);\n      };\n    }\n\n    return listeners;\n  };\n\n  var addActivatorEvents = function addActivatorEvents() {\n    var events = Object.keys(listeners);\n\n    if (activatorRef.value) {\n      events.forEach(function (key) {\n        var el = activatorRef.value.$el || activatorRef.value;\n        el.addEventListener(key, listeners[key]);\n      });\n    }\n  };\n\n  var removeActivatorEvents = function removeActivatorEvents() {\n    var events = Object.keys(listeners);\n\n    if (activatorRef.value) {\n      events.forEach(function (key) {\n        var el = activatorRef.value.$el || activatorRef.value;\n        el.removeEventListener(key, listeners[key]);\n      });\n    }\n  };\n\n  return {\n    activatorRef: activatorRef,\n    getActivator: getActivator,\n    getActivatorSizes: getActivatorSizes,\n    addActivatorEvents: addActivatorEvents,\n    removeActivatorEvents: removeActivatorEvents,\n    genActivatorListeners: genActivatorListeners\n  };\n};\n;// CONCATENATED MODULE: ./src/composable/use-detach.ts\nfunction useDetach() {\n  var target;\n\n  var setDetached = function setDetached(el) {\n    var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    if (selector) target = document.querySelector(selector);\n    if (!selector) target = document.querySelector('.v-app');\n    if (!target) target = document.querySelector('#app');\n    if (!target) target = document.querySelector('body');\n    target.appendChild(el);\n  };\n\n  var removeDetached = function removeDetached(el) {\n    target.removeChild(el);\n  };\n\n  return {\n    setDetached: setDetached,\n    removeDetached: removeDetached\n  };\n}\n;// CONCATENATED MODULE: ./src/directives/v-click-outside/index.ts\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction clickHandler(e, el) {\n  var _a, _b, _c, _d;\n\n  if (el.contains(e.target) && ((_a = el._binds) === null || _a === void 0 ? void 0 : _a.value) && !((_b = el._binds) === null || _b === void 0 ? void 0 : _b.value.closeConditional)) return;\n  if (typeof ((_c = el._binds) === null || _c === void 0 ? void 0 : _c.value) === 'function') el._binds.value(e);\n  if (_typeof((_d = el._binds) === null || _d === void 0 ? void 0 : _d.value) === 'object') el._binds.value.handler(e);\n}\n\nfunction removeListener(el) {\n  document.body.removeEventListener('click', el._onClick, true);\n  delete el._onClick;\n  delete el._binds;\n}\n\nvar clickOutside = {\n  beforeMount: function beforeMount(el, binding) {\n    el._binds = binding;\n  },\n  mounted: function mounted(el) {\n    el._onClick = function (e) {\n      return clickHandler(e, el);\n    };\n\n    document.body.addEventListener('click', el._onClick, true);\n  },\n  beforeUpdate: function beforeUpdate(el, binding) {\n    el._binds = binding;\n  },\n  beforeUnmount: function beforeUnmount(el) {\n    removeListener(el);\n  }\n};\n;// CONCATENATED MODULE: ./src/components/VMenu/VMenu.ts\nfunction VMenu_typeof(obj) { \"@babel/helpers - typeof\"; return VMenu_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, VMenu_typeof(obj); }\n\nfunction VMenu_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VMenu_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VMenu_ownKeys(Object(source), !0).forEach(function (key) { VMenu_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VMenu_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VMenu_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\n\n\nvar VMenu = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-menu',\n  directives: {\n    clickOutside: clickOutside,\n    resize: resize\n  },\n  props: VMenu_objectSpread(VMenu_objectSpread(VMenu_objectSpread({\n    maxHeight: {\n      type: [Number, String],\n      \"default\": 200\n    },\n    width: {\n      type: [Number, String],\n      \"default\": 0\n    },\n    zIndex: {\n      type: [String, Number],\n      \"default\": 10\n    },\n    openOnHover: Boolean,\n    openOnClick: Boolean,\n    openOnContextmenu: Boolean,\n    closeOnClick: {\n      type: Boolean,\n      \"default\": true\n    },\n    elevation: {\n      type: [Number, String],\n      \"default\": 10\n    },\n    offsetX: {\n      type: [String, Number],\n      \"default\": 20\n    },\n    offsetY: {\n      type: [String, Number],\n      \"default\": 20\n    },\n    modelValue: Boolean,\n    inputActivator: {\n      type: String,\n      \"default\": ''\n    }\n  }, positionProps()), autoPositionProps()), activatorProps()),\n  emits: ['show', 'hide'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n\n    var _useElevation = useElevation(props),\n        elevationClasses = _useElevation.elevationClasses;\n\n    var _useToggle = useToggle(props),\n        isActive = _useToggle.isActive;\n\n    var _useAutoPosition = useAutoPosition(props),\n        contentRef = _useAutoPosition.contentRef,\n        setDimensions = _useAutoPosition.setDimensions,\n        dimensions = _useAutoPosition.dimensions;\n\n    var _useDetach = useDetach(),\n        setDetached = _useDetach.setDetached,\n        removeDetached = _useDetach.removeDetached;\n\n    var _useActivator = useActivator(props),\n        activatorRef = _useActivator.activatorRef,\n        getActivator = _useActivator.getActivator,\n        genActivatorListeners = _useActivator.genActivatorListeners,\n        addActivatorEvents = _useActivator.addActivatorEvents,\n        removeActivatorEvents = _useActivator.removeActivatorEvents;\n\n    var setDimensionsOn = function setDimensionsOn(e, flag) {\n      setDimensions(getActivator(e)).then(function () {\n        requestAnimationFrame(function () {\n          return isActive.value = flag;\n        });\n      });\n    };\n\n    var handlers = {\n      click: function click(e) {\n        return setDimensionsOn(e, props.openOnClick);\n      },\n      mouseenter: function mouseenter(e) {\n        return setDimensionsOn(e, props.openOnHover);\n      },\n      mouseleave: function mouseleave(e) {\n        return setDimensionsOn(e, !props.openOnHover);\n      },\n      contextmenu: function contextmenu(e) {\n        return setDimensionsOn(e, props.openOnContextmenu);\n      }\n    };\n    var listeners = genActivatorListeners(props, handlers);\n    var directive = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return isActive.value ? {\n        handler: function handler(e) {\n          if (props.internalActivator && activatorRef.value.contains(e.target)) return;\n          isActive.value = false;\n        },\n        closeConditional: props.closeOnClick\n      } : undefined;\n    });\n    var calcWidth = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.width || +dimensions.content.width;\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(isActive, function (to) {\n      to && emit('show');\n      !to && emit('hide');\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return [props.positionY, props.positionX];\n    }, function () {\n      return setDimensions(activatorRef.value);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.modelValue;\n    }, function (to) {\n      isActive.value = false;\n      setTimeout(function () {\n        return isActive.value = to;\n      });\n    });\n    var contentClasses = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VMenu_objectSpread({\n        'v-menu__content': true\n      }, elevationClasses.value);\n    });\n    var contentStyles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        top: convertToUnit(dimensions.content.top),\n        left: convertToUnit(dimensions.content.left),\n        zIndex: props.zIndex\n      };\n    });\n\n    var onContentClick = function onContentClick() {\n      isActive.value = !props.closeOnClick;\n    };\n\n    var onResize = function onResize() {\n      if (!isActive.value) return;\n      requestAnimationFrame(function () {\n        return setDimensions(activatorRef.value);\n      });\n    };\n\n    var genActivatorSlot = function genActivatorSlot() {\n      if (slots.activator) {\n        var slotContent = slots.activator({\n          on: listeners\n        });\n\n        if (VMenu_typeof(slotContent[0].type) === 'object') {\n          return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n            ref: activatorRef\n          }, (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(slotContent[0]));\n        }\n\n        return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(slotContent[0], {\n          ref: activatorRef\n        });\n      }\n\n      return null;\n    };\n\n    var genContentSlot = function genContentSlot() {\n      var propsData = {\n        ref: contentRef,\n        \"class\": contentClasses.value,\n        style: contentStyles.value,\n        onClick: onContentClick\n      };\n      var slotContent = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-menu__slot',\n        style: {\n          maxHeight: convertToUnit(props.maxHeight),\n          width: convertToUnit(calcWidth.value)\n        }\n      }, [slots[\"default\"] && slots[\"default\"]()]);\n      var content = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, slotContent);\n      var directives = [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.vShow, isActive.value], [resize, onResize], [clickOutside, directive.value]];\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.withDirectives)(content, directives);\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onMounted)(function () {\n      activatorRef.value = getActivator();\n      addActivatorEvents();\n      setDetached(contentRef.value);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeUnmount)(function () {\n      removeActivatorEvents();\n      removeDetached(contentRef.value);\n    });\n    return function () {\n      return [(0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": {\n          'v-menu': true\n        }\n      }), slots.activator && genActivatorSlot(), useTransition(genContentSlot(), 'fade')];\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VMenu/index.ts\n\n;// CONCATENATED MODULE: ./src/composable/use-validation.ts\n\nvar validationProps = function validationProps() {\n  return {\n    rules: {\n      type: Array,\n      \"default\": null\n    },\n    value: [String, Number, Date, Object]\n  };\n};\nvar useValidation = function useValidation(props) {\n  var errorState = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({\n    innerError: null,\n    innerErrorMessage: null,\n    isDirty: false\n  });\n\n  var validationClasses = function validationClasses() {\n    return {\n      'e-validatable': true\n    };\n  };\n\n  var computedColor = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n    return props.disabled ? 'disabled' : 'primary';\n  });\n  var hasRules = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n    return !!props.rules && props.rules.length > 0;\n  });\n\n  var dirty = function dirty() {\n    return errorState.isDirty = true;\n  };\n\n  var update = function update(err) {\n    var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (errorState.innerError !== err) {\n      errorState.innerError = err;\n    }\n\n    if (msg && errorState.innerErrorMessage !== msg) {\n      errorState.innerErrorMessage = msg;\n    }\n\n    if (!msg) errorState.innerErrorMessage = msg;\n    return errorState.innerError;\n  };\n\n  var validate = function validate() {\n    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : props.value;\n    if (!hasRules.value) return true;\n    dirty();\n\n    for (var i = 0, len = props.rules.length; i < len; i += 1) {\n      var rule = props.rules[i];\n      var result = void 0;\n      if (typeof rule === 'function') result = rule(val);\n\n      if (result === false || typeof result === 'string') {\n        update(true, result);\n        return false;\n      }\n\n      if (result === true && i === len - 1) {\n        update(false);\n        return true;\n      }\n    }\n  };\n\n  return {\n    errorState: errorState,\n    computedColor: computedColor,\n    validationClasses: validationClasses,\n    validate: validate,\n    dirty: dirty\n  };\n};\n;// CONCATENATED MODULE: ./src/composable/use-input-states.ts\n\nvar useInputStates = function useInputStates(props, _ref) {\n  var attrs = _ref.attrs,\n      emit = _ref.emit;\n  var state = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({\n    focused: false\n  });\n  var isDisabled = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n    if (props.disabled) return true;\n    if (typeof attrs.disabled === 'boolean') return attrs.disabled;\n    return attrs.disabled !== undefined;\n  });\n  var isReadonly = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n    if (props.readonly) return true;\n    if (typeof attrs.readonly === 'boolean') return attrs.readonly;\n    return attrs.readonly !== undefined;\n  });\n\n  var onFocus = function onFocus(e) {\n    if (isReadonly.value) return;\n    state.focused = true;\n    emit('focus', e);\n  };\n\n  var onChange = function onChange() {\n    if (isReadonly.value) return;\n    emit('change');\n  };\n\n  var onBlur = function onBlur(e) {\n    if (isReadonly.value) return;\n    state.focused = false;\n    emit('blur', e);\n  };\n\n  var onSelect = function onSelect(val) {\n    state.focused = false;\n    emit('update:modelValue', val);\n    emit('select', val);\n    onChange();\n  };\n\n  return {\n    state: state,\n    isReadonly: isReadonly,\n    isDisabled: isDisabled,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onChange: onChange,\n    onSelect: onSelect\n  };\n};\n;// CONCATENATED MODULE: ./src/components/VLabel/VLabel.ts\nfunction VLabel_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VLabel_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VLabel_ownKeys(Object(source), !0).forEach(function (key) { VLabel_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VLabel_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VLabel_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar VLabel = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-label',\n  props: VLabel_objectSpread({\n    disabled: Boolean,\n    focused: Boolean\n  }, colorProps()),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n\n    var _useColors = useColors(),\n        setTextClassNameColor = _useColors.setTextClassNameColor,\n        setTextCssColor = _useColors.setTextCssColor;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VLabel_objectSpread({\n        'v-label': true,\n        'v-label--disabled': props.disabled,\n        'v-label--focused': props.focused\n      }, !props.disabled ? setTextClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VLabel_objectSpread({}, !props.disabled ? setTextCssColor(props.color) : {});\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('label', {\n        \"class\": classes.value,\n        style: styles.value\n      }, {\n        \"default\": function _default() {\n          return slots[\"default\"] && slots[\"default\"]();\n        }\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/composable/use-size.ts\n\nvar sizeProps = function sizeProps() {\n  var defaultSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return {\n    sm: {\n      type: Boolean,\n      \"default\": defaultSize === 'sm'\n    },\n    md: {\n      type: Boolean,\n      \"default\": defaultSize === 'md'\n    },\n    lg: {\n      type: Boolean,\n      \"default\": defaultSize === 'lg'\n    },\n    xl: {\n      type: Boolean,\n      \"default\": defaultSize === 'xl'\n    }\n  };\n};\nvar useSize = function useSize(props) {\n  var sizes = Object.keys(sizeProps());\n  var size = computed(function () {\n    return sizes.find(function (s) {\n      return props[s];\n    });\n  });\n  return {\n    size: size\n  };\n};\n;// CONCATENATED MODULE: ./src/services/sizes.ts\nvar sizes;\n\n(function (sizes) {\n  sizes[sizes[\"sm\"] = 16] = \"sm\";\n  sizes[sizes[\"md\"] = 24] = \"md\";\n  sizes[sizes[\"lg\"] = 32] = \"lg\";\n  sizes[sizes[\"xl\"] = 40] = \"xl\";\n})(sizes || (sizes = {}));\n;// CONCATENATED MODULE: ./src/components/VIcon/VIcon.ts\nfunction VIcon_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VIcon_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VIcon_ownKeys(Object(source), !0).forEach(function (key) { VIcon_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VIcon_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VIcon_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\nvar VIcon = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-icon',\n  props: VIcon_objectSpread(VIcon_objectSpread({\n    disabled: Boolean,\n    clickable: Boolean,\n    size: [String, Number],\n    icon: String,\n    tag: {\n      type: String,\n      \"default\": 'i'\n    }\n  }, colorProps()), sizeProps('sm')),\n  emits: ['click'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n\n    var _useColors = useColors(),\n        setTextCssColor = _useColors.setTextCssColor,\n        setTextClassNameColor = _useColors.setTextClassNameColor;\n\n    var iconTag = props.clickable ? 'button' : props.tag;\n    var computedIcon = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _a;\n\n      return (_a = props.icon || slots[\"default\"] && slots[\"default\"]()[0].children) === null || _a === void 0 ? void 0 : _a.trim();\n    });\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VIcon_objectSpread(VIcon_defineProperty({\n        'v-icon': true,\n        'v-icon--disabled': props.disabled,\n        'v-icon--clickable': props.clickable\n      }, computedIcon.value, !!computedIcon.value), props.color ? setTextClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VIcon_objectSpread({\n        fontSize: getSizes()\n      }, props.color ? setTextCssColor(props.color) : {});\n    });\n\n    var getSizes = function getSizes() {\n      var sizeProps = {\n        sm: props.sm,\n        md: props.md,\n        lg: props.lg,\n        xl: props.xl\n      };\n      var explicitSize = Object.keys(sizeProps).find(function (key) {\n        return sizeProps[key];\n      });\n      return convertToUnit(props.size || explicitSize && sizes[explicitSize]);\n    };\n\n    var onClick = function onClick() {\n      if (!props.disabled && props.clickable) emit('click');\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(iconTag, {\n        \"class\": classes.value,\n        style: styles.value,\n        onClick: onClick\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VInput/VInput.ts\nfunction VInput_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VInput_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VInput_ownKeys(Object(source), !0).forEach(function (key) { VInput_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VInput_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VInput_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\nvar VInput = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-input',\n  components: {\n    VLabel: VLabel,\n    VIcon: VIcon\n  },\n  inheritAttrs: false,\n  props: VInput_objectSpread(VInput_objectSpread({\n    label: {\n      type: String,\n      \"default\": ''\n    },\n    prependIcon: {\n      type: String,\n      \"default\": ''\n    },\n    appendIcon: {\n      type: String,\n      \"default\": ''\n    },\n    disabled: Boolean,\n    focused: Boolean,\n    readonly: Boolean,\n    file: Boolean,\n    hints: {\n      type: Boolean,\n      \"default\": true\n    },\n    hintMessage: {\n      type: String,\n      \"default\": ''\n    },\n    textColor: {\n      type: String,\n      \"default\": ''\n    }\n  }, validationProps()), colorProps()),\n  emits: ['click'],\n  setup: function setup(props, _ref) {\n    var attrs = _ref.attrs,\n        emit = _ref.emit,\n        slots = _ref.slots;\n\n    var _useValidation = useValidation(props),\n        validate = _useValidation.validate,\n        errorState = _useValidation.errorState;\n\n    var _useColors = useColors(),\n        setTextCssColor = _useColors.setTextCssColor,\n        setTextClassNameColor = _useColors.setTextClassNameColor;\n\n    var _useInputStates = useInputStates(props, {\n      attrs: attrs,\n      emit: emit\n    }),\n        isDisabled = _useInputStates.isDisabled,\n        isReadonly = _useInputStates.isReadonly;\n\n    var form = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.inject)('form', null);\n    var textClassColor = setTextClassNameColor(props.textColor);\n    var textCssColor = setTextCssColor(props.textColor);\n    var hasPrependIcon = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return !!props.prependIcon || !!slots['prepend-icon'];\n    });\n    var hasAppendIcon = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return !!props.appendIcon || !!slots['append-icon'];\n    });\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VInput_objectSpread(VInput_objectSpread({\n        'v-input': true,\n        'v-input--primary': !props.color,\n        'v-input--focused': props.focused && !isReadonly.value,\n        'v-input--disabled': isDisabled.value,\n        'v-input--readonly': isReadonly.value,\n        'v-input--file': props.file,\n        'v-input--has-prepend-icon': hasPrependIcon.value,\n        'v-input--has-append-icon': hasAppendIcon.value,\n        'v-input--not-valid': !!errorState.innerError\n      }, !props.disabled && !errorState.innerError ? setTextClassNameColor(props.color) : {}), attrs[\"class\"]);\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VInput_objectSpread(VInput_objectSpread({}, !props.disabled && !errorState.innerError ? setTextCssColor(props.color) : {}), attrs.style);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.focused;\n    }, function (to) {\n      return !to && validate();\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.value;\n    }, function () {\n      return validate();\n    });\n\n    var genLabel = function genLabel() {\n      var label = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VLabel, {\n        \"class\": 'v-label--on-input',\n        disabled: isDisabled.value,\n        focused: props.focused,\n        color: !errorState.innerError ? props.color : ''\n      }, {\n        \"default\": function _default() {\n          return props.label;\n        }\n      });\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-input__label'\n      }, [label]);\n    };\n\n    var genIcon = function genIcon(iconName) {\n      var clickable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, {\n        icon: iconName,\n        size: 16,\n        disabled: props.disabled,\n        clickable: clickable\n      });\n    };\n\n    var genPrependIcon = function genPrependIcon() {\n      var _a;\n\n      var content;\n\n      if (props.prependIcon) {\n        content = genIcon(props.prependIcon);\n      } else {\n        content = (_a = slots['prepend-icon']) === null || _a === void 0 ? void 0 : _a.call(slots);\n      }\n\n      return content ? (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-input__prepend-icon'\n      }, content) : null;\n    };\n\n    var genAppendIcon = function genAppendIcon() {\n      var _a;\n\n      var content;\n\n      if (props.appendIcon) {\n        content = genIcon(props.appendIcon);\n      } else {\n        content = (_a = slots['append-icon']) === null || _a === void 0 ? void 0 : _a.call(slots);\n      }\n\n      return content ? (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-input__append-icon'\n      }, content) : null;\n    };\n\n    var genTextFieldSlot = function genTextFieldSlot() {\n      var _a;\n\n      var prependIconContent = genPrependIcon();\n      var appendIconContent = genAppendIcon();\n      var disabled = props.disabled;\n      var textFieldContent = (_a = slots['text-field']) === null || _a === void 0 ? void 0 : _a.call(slots, {\n        textCssColor: textCssColor,\n        textClassColor: textClassColor,\n        disabled: disabled\n      });\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-input__text-field'\n      }, [prependIconContent, textFieldContent, appendIconContent]);\n    };\n\n    var genHintMessage = function genHintMessage() {\n      return props.hintMessage || errorState.innerErrorMessage ? (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', {\n        \"class\": 'v-input__hints-message'\n      }, [errorState.innerErrorMessage]) : null;\n    };\n\n    var genHints = function genHints() {\n      return props.hints || props.rules ? (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-input__hints'\n      }, useTransition(genHintMessage(), 'fade')) : null;\n    };\n\n    var genSelectSlot = function genSelectSlot() {\n      var _a;\n\n      return slots.select ? (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-input__selects'\n      }, (_a = slots.select) === null || _a === void 0 ? void 0 : _a.call(slots)) : null;\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeMount)(function () {\n      if (props.rules) form === null || form === void 0 ? void 0 : form.add(validate);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeUnmount)(function () {\n      form === null || form === void 0 ? void 0 : form.remove(validate);\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        style: styles.value\n      }, [props.label && genLabel(), genTextFieldSlot(), genHints(), genSelectSlot()]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VTextField/VTextField.ts\nfunction VTextField_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VTextField_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VTextField_ownKeys(Object(source), !0).forEach(function (key) { VTextField_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VTextField_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VTextField_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar VTextField = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-text-field',\n  components: {\n    VInput: VInput\n  },\n  inheritAttrs: true,\n  props: {\n    modelValue: {\n      type: [String, Number],\n      \"default\": ''\n    }\n  },\n  emits: ['update:modelValue', 'input', 'blur', 'focus', 'change'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        attrs = _ref.attrs;\n\n    var _useInputStates = useInputStates(props, {\n      emit: emit,\n      attrs: attrs\n    }),\n        isReadonly = _useInputStates.isReadonly,\n        isDisabled = _useInputStates.isDisabled,\n        state = _useInputStates.state,\n        onFocus = _useInputStates.onFocus,\n        onBlur = _useInputStates.onBlur,\n        onChange = _useInputStates.onChange;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        'v-text-field': true,\n        'v-text-field--disabled': isDisabled.value,\n        'v-text-field--readonly': isReadonly.value\n      };\n    });\n    var computedValue = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)({\n      get: function get() {\n        return props.modelValue;\n      },\n      set: function set(val) {\n        emit('input', val);\n        emit('update:modelValue', val);\n      }\n    });\n\n    var onInput = function onInput(e) {\n      computedValue.value = e.target.value;\n    };\n\n    var genInputField = function genInputField(textClassColor, textCssColor) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('input', {\n        \"class\": VTextField_objectSpread({\n          'v-text-field__input': true\n        }, !attrs.disabled && textClassColor),\n        style: VTextField_objectSpread({}, !attrs.disabled ? textCssColor : {}),\n        disabled: attrs.disabled,\n        type: attrs.type ? attrs.type : 'text',\n        placeholder: attrs.placeholder,\n        readonly: attrs.readonly,\n        value: computedValue.value,\n        onInput: onInput,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        onChange: onChange\n      });\n    };\n\n    var genTextFieldWrapper = function genTextFieldWrapper(clsColor, cssColor) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value\n      }, genInputField(clsColor, cssColor));\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VInput, {\n        focused: state.focused,\n        value: computedValue.value\n      }, VTextField_defineProperty({}, 'text-field', function textField(_ref2) {\n        var textClassColor = _ref2.textClassColor,\n            textCssColor = _ref2.textCssColor;\n        return genTextFieldWrapper(textClassColor, textCssColor);\n      }));\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VTextField/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VInput/index.ts\n\n;// CONCATENATED MODULE: ./src/services/icons.ts\nvar FaIcons;\n\n(function (FaIcons) {\n  FaIcons[\"$add\"] = \"fas fa-plus\";\n  FaIcons[\"$delete\"] = \"fas fa-trash-alt\";\n  FaIcons[\"$sliders\"] = \"fas fa-sliders-h\";\n  FaIcons[\"$edit\"] = \"fas fa-pen\";\n  FaIcons[\"$menu\"] = \"fas fa-bars\";\n  FaIcons[\"$chevronDown\"] = \"fas fa-chevron-down\";\n  FaIcons[\"$caretDown\"] = \"fas fa-caret-down\";\n  FaIcons[\"$radioOn\"] = \"far fa-dot-circle\";\n  FaIcons[\"$radioOff\"] = \"far fa-circle\";\n  FaIcons[\"$checkOn\"] = \"fas fa-check-square\";\n  FaIcons[\"$checkOff\"] = \"far fa-square\";\n  FaIcons[\"$arrowRight\"] = \"fas fa-chevron-right\";\n  FaIcons[\"$arrowLeft\"] = \"fas fa-chevron-left\";\n  FaIcons[\"$arrowUp\"] = \"fas fa-arrow-up\";\n  FaIcons[\"$filter\"] = \"fas fa-align-justify\";\n  FaIcons[\"$marker\"] = \"fas fa-map-marker-alt\";\n  FaIcons[\"$search\"] = \"fas fa-search\";\n  FaIcons[\"$close\"] = \"fas fa-times\";\n  FaIcons[\"$paperclip\"] = \"fas fa-paperclip\";\n})(FaIcons || (FaIcons = {}));\n\nvar MaterialIcons;\n\n(function (MaterialIcons) {\n  MaterialIcons[\"$add\"] = \"add\";\n  MaterialIcons[\"$delete\"] = \"delete_forever\";\n  MaterialIcons[\"$sliders\"] = \"fas fa-sliders-h\";\n  MaterialIcons[\"$edit\"] = \"fas fa-pen\";\n  MaterialIcons[\"$menu\"] = \"fas fa-bars\";\n  MaterialIcons[\"$expand\"] = \"expand_more\";\n  MaterialIcons[\"$group\"] = \"expand_more\";\n  MaterialIcons[\"$subgroup\"] = \"arrow_drop_down\";\n  MaterialIcons[\"$dropdown\"] = \"fas fa-caret-down\";\n  MaterialIcons[\"$radioOn\"] = \"far fa-dot-circle\";\n  MaterialIcons[\"$radioOff\"] = \"far fa-circle\";\n  MaterialIcons[\"$checkOn\"] = \"check_box\";\n  MaterialIcons[\"$checkOff\"] = \"check_box_outline_blank\";\n  MaterialIcons[\"$arrowRight\"] = \"chevron_right\";\n  MaterialIcons[\"$arrowLeft\"] = \"chevron_left\";\n  MaterialIcons[\"$arrowUp\"] = \"arrow_upward\";\n  MaterialIcons[\"$filter\"] = \"filter_list\";\n  MaterialIcons[\"$marker\"] = \"fas fa-map-marker-alt\";\n  MaterialIcons[\"$search\"] = \"search\";\n  MaterialIcons[\"$close\"] = \"clear\";\n})(MaterialIcons || (MaterialIcons = {}));\n\nvar MaterialSizes;\n\n(function (MaterialSizes) {\n  MaterialSizes[MaterialSizes[\"xs\"] = 14] = \"xs\";\n  MaterialSizes[MaterialSizes[\"s\"] = 18] = \"s\";\n  MaterialSizes[MaterialSizes[\"md\"] = 20] = \"md\";\n  MaterialSizes[MaterialSizes[\"l\"] = 28] = \"l\";\n  MaterialSizes[MaterialSizes[\"xl\"] = 36] = \"xl\";\n})(MaterialSizes || (MaterialSizes = {}));\n\nvar FaSizes;\n\n(function (FaSizes) {\n  FaSizes[FaSizes[\"xs\"] = 12] = \"xs\";\n  FaSizes[FaSizes[\"s\"] = 14] = \"s\";\n  FaSizes[FaSizes[\"md\"] = 18] = \"md\";\n  FaSizes[FaSizes[\"l\"] = 24] = \"l\";\n  FaSizes[FaSizes[\"xl\"] = 32] = \"xl\";\n})(FaSizes || (FaSizes = {}));\n;// CONCATENATED MODULE: ./src/composable/use-icons.ts\n\n\nfunction useIcons() {\n  var options = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.inject)('$options');\n  var icons = FaIcons;\n\n  if (options === null || options === void 0 ? void 0 : options.icons) {\n    if (options.icons.includes('material-icons')) {\n      icons = MaterialIcons;\n    }\n  }\n\n  return {\n    icons: icons\n  };\n}\n;// CONCATENATED MODULE: ./src/components/VChip/VChip.ts\nfunction VChip_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VChip_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VChip_ownKeys(Object(source), !0).forEach(function (key) { VChip_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VChip_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VChip_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar VChip = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-chip',\n  props: VChip_objectSpread({\n    title: {\n      type: String,\n      \"default\": ''\n    },\n    textColor: {\n      type: String,\n      \"default\": '#ffffff'\n    },\n    disabled: Boolean,\n    closable: {\n      type: Boolean,\n      \"default\": true\n    }\n  }, colorProps('primary')),\n  emits: ['close'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor,\n        setTextCssColor = _useColors.setTextCssColor,\n        setTextClassNameColor = _useColors.setTextClassNameColor;\n\n    var _useIcons = useIcons(),\n        icons = _useIcons.icons;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VChip_objectSpread(VChip_objectSpread({\n        'v-chip': true,\n        'v-chip--disabled': props.disabled\n      }, !props.disabled ? setBackgroundClassNameColor(props.color) : {}), setTextClassNameColor(props.textColor));\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VChip_objectSpread(VChip_objectSpread({}, !props.disabled ? setBackgroundCssColor(props.color) : {}), setTextCssColor(props.textColor));\n    });\n\n    var genCloseIcon = function genCloseIcon() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, {\n        icon: icons.$close,\n        clickable: !props.disabled,\n        onClick: function onClick() {\n          return emit('close');\n        }\n      });\n    };\n\n    var genChipContent = function genChipContent() {\n      var _a;\n\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-chip__content'\n      }, ((_a = slots[\"default\"]) === null || _a === void 0 ? void 0 : _a.call(slots)) || props.title);\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', {\n        \"class\": classes.value,\n        style: styles.value\n      }, [genChipContent(), props.closable ? genCloseIcon() : null]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VFileInput/VFileInput.ts\n\n\n\n\n\n\nvar VFileInput = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-file-input',\n  props: {\n    disabled: Boolean,\n    multiple: Boolean,\n    chipColor: {\n      type: String,\n      \"default\": 'primary'\n    },\n    value: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    }\n  },\n  emits: ['update:value', 'delete'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        attrs = _ref.attrs;\n\n    var _useIcons = useIcons(),\n        icons = _useIcons.icons;\n\n    var _useInputStates = useInputStates(props, {\n      emit: emit,\n      attrs: attrs\n    }),\n        isDisabled = _useInputStates.isDisabled,\n        isReadonly = _useInputStates.isReadonly;\n\n    var inputRef = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n    var srcRef = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        'v-file-input': true,\n        'v-file-input--disabled': isDisabled.value,\n        'v-file-input--readonly': isReadonly.value,\n        'v-file-input--multiple': props.multiple\n      };\n    });\n\n    var onChange = function onChange(event) {\n      var files = Array.from(event.target.files);\n\n      if (props.multiple) {\n        files = uniqueArray(props.value.concat(files));\n      }\n\n      event.target.value = '';\n      emit('update:value', files);\n    };\n\n    var _onClose = function onClose(file) {\n      var files = props.value.filter(function (it) {\n        return file.name !== it.name;\n      });\n      emit('update:value', files);\n      emit('delete', file);\n    };\n\n    var onClick = function onClick(_ref2) {\n      var srcElement = _ref2.srcElement;\n      if (srcElement !== srcRef.value) return;\n      inputRef.value.click();\n    };\n\n    var genFileInput = function genFileInput() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('input', {\n        \"class\": 'v-file-input__field',\n        type: 'file',\n        multiple: props.multiple,\n        ref: inputRef,\n        style: {\n          position: 'absolute',\n          visibility: 'hidden'\n        },\n        onChange: onChange\n      });\n    };\n\n    var genChips = function genChips() {\n      return uniqueArray(props.value).map(function (file) {\n        return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VChip, {\n          title: file.name,\n          \"class\": 'ma-1',\n          color: props.chipColor,\n          onClose: function onClose() {\n            return _onClose(file);\n          }\n        });\n      });\n    };\n\n    var genChipsContainer = function genChipsContainer() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-file-input__container',\n        ref: srcRef\n      }, genChips());\n    };\n\n    var genComponent = function genComponent() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        onClick: onClick\n      }, [genFileInput(), genChipsContainer()]);\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VInput, {\n        prependIcon: icons.$paperclip,\n        file: true,\n        disabled: isDisabled.value\n      }, {\n        'text-field': function textField() {\n          return genComponent();\n        }\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VFileInput/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VList/VList.ts\nfunction VList_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VList_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VList_ownKeys(Object(source), !0).forEach(function (key) { VList_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VList_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VList_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar VList = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-list',\n  props: VList_objectSpread({\n    value: {\n      type: [Number, Array],\n      \"default\": null\n    },\n    multiple: Boolean,\n    active: {\n      type: Boolean,\n      \"default\": false\n    },\n    activeClass: {\n      type: String,\n      \"default\": ''\n    },\n    textColor: {\n      type: String,\n      \"default\": ''\n    }\n  }, colorProps()),\n  emits: ['update:value'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n\n    var _useColors = useColors(),\n        setTextClassNameColor = _useColors.setTextClassNameColor,\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setTextCssColor = _useColors.setTextCssColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var items = new Map();\n    var isTrustedSelect = false;\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VList_objectSpread(VList_objectSpread({\n        'v-list': true,\n        'v-list--active': props.active\n      }, setTextClassNameColor(props.textColor)), setBackgroundClassNameColor(props.color));\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VList_objectSpread(VList_objectSpread({}, setTextCssColor(props.textColor)), setBackgroundCssColor(props.color));\n    });\n\n    var register = function register(item) {\n      !items.has(item) && items.set(item, item);\n    };\n\n    var unregister = function unregister(item) {\n      items.has(item) && items[\"delete\"](item);\n    };\n\n    var dispatchEvent = function dispatchEvent(val) {\n      isTrustedSelect = true;\n      emit('update:value', val);\n    };\n\n    var setActiveItem = function setActiveItem(item) {\n      mapToValArray(items).forEach(function (it) {\n        it.isActive.value = it === item;\n      });\n    };\n\n    var toggleItem = function toggleItem(item) {\n      item.isActive.value = !item.isActive.value;\n    };\n\n    var prepareIndexes = function prepareIndexes() {\n      var values = mapToValArray(items);\n      var multiple = props.multiple;\n      var val = multiple ? [] : 0;\n      values.forEach(function (it, i) {\n        if (it.isActive.value) {\n          multiple && val.push(i);\n          !multiple && (val = i);\n        }\n      });\n      return val;\n    };\n\n    var onClick = function onClick(item) {\n      if (!props.active) return;\n      props.multiple && toggleItem(item);\n      !props.multiple && setActiveItem(item);\n      dispatchEvent(prepareIndexes());\n    };\n\n    var setItemState = function setItemState(value) {\n      if (value === null) return setActiveItem(value);\n      var values = mapToValArray(items);\n\n      if (props.multiple) {\n        ;\n        value.forEach(function (ind) {\n          return toggleItem(values[ind]);\n        });\n      } else {\n        setActiveItem(values[value]);\n      }\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.value;\n    }, function (to) {\n      if (!isTrustedSelect) setItemState(to);\n      isTrustedSelect && (isTrustedSelect = false);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onMounted)(function () {\n      return setItemState(props.value);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.provide)('list', {\n      add: register,\n      remove: unregister,\n      click: onClick,\n      activeClass: props.activeClass\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        style: styles.value\n      }, {\n        \"default\": function _default() {\n          return slots[\"default\"] && slots[\"default\"]();\n        }\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VList/VListItem.ts\nfunction VListItem_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nvar VListItem = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-list-item',\n  emits: ['click'],\n  setup: function setup(_, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n    var itemRef = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n    var isActive = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(false);\n    var list = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.inject)('list', null);\n    var item = {\n      itemRef: itemRef,\n      isActive: isActive\n    };\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VListItem_defineProperty({\n        'v-list-item': true,\n        'v-list-item--selected': !list.activeClass && isActive.value\n      }, list === null || list === void 0 ? void 0 : list.activeClass, isActive.value);\n    });\n\n    var onClick = function onClick() {\n      list === null || list === void 0 ? void 0 : list.click(item);\n      emit('click');\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeMount)(function () {\n      list === null || list === void 0 ? void 0 : list.add(item);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeUnmount)(function () {\n      list === null || list === void 0 ? void 0 : list.remove(item);\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        ref: itemRef,\n        onClick: onClick\n      }, {\n        \"default\": function _default() {\n          return slots[\"default\"] && slots[\"default\"]({\n            active: isActive\n          });\n        }\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VList/index.ts\n\n\n\nvar VListItemTitle = createSimpleFunctional('v-list-item__title');\nvar VListItemSubtitle = createSimpleFunctional('v-list-item__subtitle');\nvar VListItemContent = createSimpleFunctional('v-list-item__content');\nvar VListItemIcon = createSimpleFunctional('v-list-item__icon');\n\n;// CONCATENATED MODULE: ./src/components/VSelect/VSelectList.ts\nfunction VSelectList_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar VSelectList = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-select-list',\n  props: {\n    items: {\n      type: Array,\n      \"default\": null\n    },\n    color: {\n      type: String,\n      \"default\": '#ffffff'\n    },\n    textColor: {\n      type: String,\n      \"default\": ''\n    },\n    valueKey: {\n      type: String,\n      \"default\": ''\n    },\n    selected: {\n      type: [String, Number, Object],\n      \"default\": null\n    },\n    activeClass: {\n      type: String,\n      \"default\": ''\n    }\n  },\n  emits: ['select'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var computedSelect = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)({\n      get: function get() {\n        var key = props.valueKey;\n        var selectedValue = key ? props.selected ? getStringKeysValue(key, props.selected) : null : props.selected;\n        return props.selected ? props.items.findIndex(function (it) {\n          var itemValue = key ? getStringKeysValue(key, it) : it;\n          return itemValue === selectedValue;\n        }) : null;\n      },\n      set: function set(val) {\n        emit('select', props.items[val]);\n      }\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(computedSelect, function (to) {\n      return console.log(to);\n    });\n\n    var genItems = function genItems() {\n      return props.items.reduce(function (acc, it, i) {\n        var content = props.valueKey ? getStringKeysValue(props.valueKey, it) : it;\n        acc.push((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VListItem, {\n          key: i\n        }, {\n          \"default\": function _default() {\n            return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VListItemTitle, {}, {\n              \"default\": function _default() {\n                return content;\n              }\n            });\n          }\n        }));\n        return acc;\n      }, []);\n    };\n\n    var genItemsList = function genItemsList() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VList, VSelectList_defineProperty({\n        value: computedSelect.value,\n        active: true,\n        color: '#ffffff',\n        activeClass: props.activeClass\n      }, 'onUpdate:value', function onUpdateValue(val) {\n        return computedSelect.value = val;\n      }), {\n        \"default\": function _default() {\n          return genItems();\n        }\n      });\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-select-list'\n      }, [props.items ? genItemsList() : null]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VSelect/VSelect.ts\nfunction VSelect_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VSelect_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VSelect_ownKeys(Object(source), !0).forEach(function (key) { VSelect_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VSelect_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VSelect_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction VSelect_typeof(obj) { \"@babel/helpers - typeof\"; return VSelect_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, VSelect_typeof(obj); }\n\n\n\n\n\n\n\n\n\nvar VSelect = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-select',\n  props: {\n    modelValue: {\n      type: [String, Number, Object],\n      \"default\": null\n    },\n    items: {\n      type: Array,\n      \"default\": null\n    },\n    valueKey: {\n      type: String,\n      \"default\": ''\n    },\n    activeClass: {\n      type: String,\n      \"default\": 'primary white--text text--base'\n    }\n  },\n  emits: ['click', 'focus', 'select', 'blur', 'change', 'update:modelValue'],\n  setup: function setup(props, _ref) {\n    var attrs = _ref.attrs,\n        emit = _ref.emit;\n\n    var _useInputStates = useInputStates(props, {\n      attrs: attrs,\n      emit: emit\n    }),\n        isDisabled = _useInputStates.isDisabled,\n        isReadonly = _useInputStates.isReadonly,\n        state = _useInputStates.state,\n        onBlur = _useInputStates.onBlur,\n        onSelect = _useInputStates.onSelect,\n        onFocus = _useInputStates.onFocus;\n\n    var activator = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n    var computedValue = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      if (!!props.modelValue && VSelect_typeof(props.modelValue) === 'object') {\n        return getStringKeysValue(props.valueKey, props.modelValue);\n      }\n\n      return props.modelValue;\n    });\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        'v-select': true,\n        'v-select--expanded': state.focused,\n        'v-select--readonly': isReadonly.value,\n        'v-select--disabled': isDisabled.value\n      };\n    });\n\n    var genInput = function genInput(_ref2) {\n      var textCssColor = _ref2.textCssColor,\n          textClassColor = _ref2.textClassColor,\n          disabled = _ref2.disabled;\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('input', {\n        \"class\": VSelect_objectSpread({\n          'v-select__input': true\n        }, disabled ? textClassColor : {}),\n        style: VSelect_objectSpread({}, !disabled ? textCssColor : {}),\n        disabled: isDisabled.value,\n        type: attrs.type || 'text',\n        placeholder: attrs.placeholder,\n        value: computedValue.value,\n        readonly: true\n      });\n    };\n\n    var genSelectList = function genSelectList() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VMenu, {\n        internalActivator: true,\n        activator: activator.value,\n        inputActivator: '.v-input__text-field',\n        openOnClick: !isDisabled.value && !isReadonly.value,\n        maxHeight: 240,\n        zIndex: 12,\n        onShow: onFocus,\n        onHide: onBlur\n      }, {\n        \"default\": function _default() {\n          return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VSelectList, {\n            items: props.items,\n            selected: props.modelValue,\n            valueKey: props.valueKey,\n            activeClass: props.activeClass,\n            onSelect: onSelect\n          });\n        }\n      });\n    };\n\n    var genExpandIcon = function genExpandIcon() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, {\n        icon: FaIcons.$chevronDown,\n        color: !isDisabled.value ? attrs.color : '',\n        size: 16\n      });\n    };\n\n    var genSelect = function genSelect(_ref3) {\n      var textCssColor = _ref3.textCssColor,\n          textClassColor = _ref3.textClassColor,\n          disabled = _ref3.disabled;\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value\n      }, genInput({\n        textCssColor: textCssColor,\n        textClassColor: textClassColor,\n        disabled: disabled\n      }));\n    };\n\n    return function () {\n      var _h;\n\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VInput, {\n        ref: activator,\n        value: computedValue.value,\n        focused: state.focused\n      }, (_h = {}, VSelect_defineProperty(_h, 'text-field', function textField(_ref4) {\n        var textCssColor = _ref4.textCssColor,\n            textClassColor = _ref4.textClassColor,\n            disabled = _ref4.disabled;\n        return genSelect({\n          textCssColor: textCssColor,\n          textClassColor: textClassColor,\n          disabled: disabled\n        });\n      }), VSelect_defineProperty(_h, 'append-icon', function appendIcon() {\n        return genExpandIcon();\n      }), VSelect_defineProperty(_h, \"select\", function select() {\n        return activator.value ? genSelectList() : null;\n      }), _h));\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VSelect/index.ts\n\n\n;// CONCATENATED MODULE: ./src/components/VForm/VForm.ts\n\nvar VForm = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-form',\n  setup: function setup(_, _ref) {\n    var slots = _ref.slots;\n    var fields = [];\n\n    var addFieldValidator = function addFieldValidator(item) {\n      fields.push(item);\n    };\n\n    var removeFieldValidator = function removeFieldValidator(item) {\n      fields = fields.filter(function (v) {\n        return v !== item;\n      });\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.provide)('form', {\n      add: addFieldValidator,\n      remove: removeFieldValidator\n    });\n\n    var validate = function validate() {\n      var promises = [];\n      fields.forEach(function (v) {\n        promises.push(v());\n      });\n      return !promises.some(function (f) {\n        return !f;\n      }) ? Promise.resolve() : Promise.reject();\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('form', {\n        \"class\": 'v-form',\n        onSubmit: function onSubmit(e) {\n          return e.preventDefault();\n        }\n      }, {\n        \"default\": function _default() {\n          return slots[\"default\"] && slots[\"default\"]({\n            validate: validate\n          });\n        }\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VForm/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VLabel/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VBadge/VBadge.ts\nfunction VBadge_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VBadge_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VBadge_ownKeys(Object(source), !0).forEach(function (key) { VBadge_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VBadge_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VBadge_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\nvar VBadge = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-badge',\n  props: VBadge_objectSpread(VBadge_objectSpread({\n    dot: Boolean,\n    avatar: Boolean,\n    border: Boolean,\n    toggle: Boolean,\n    content: {\n      required: false\n    },\n    color: {\n      type: String,\n      \"default\": 'primary'\n    },\n    transition: {\n      type: String,\n      \"default\": 'scaleIn'\n    },\n    offsetY: {\n      type: [String, Number],\n      \"default\": 0\n    },\n    offsetX: {\n      type: [String, Number],\n      \"default\": 0\n    }\n  }, positionProps()), elevationProps()),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n\n    var _useElevation = useElevation(props),\n        elevationClasses = _useElevation.elevationClasses;\n\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var offset = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.dot ? 4 : 12;\n    });\n\n    var calcPosition = function calcPosition() {\n      var offsetVal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var value = offset.value - Number(offsetVal);\n      return \"\".concat(value, \"px\");\n    };\n\n    var computedLeft = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.left && calcPosition(props.offsetX);\n    });\n    var computedRight = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.right && calcPosition(props.offsetX);\n    });\n    var computedTop = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.top && calcPosition(props.offsetY);\n    });\n    var computedBottom = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.bottom && calcPosition(props.offsetY);\n    });\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        'v-badge': true,\n        'v-badge--border': props.border,\n        'v-badge--dot': props.dot,\n        'v-badge--avatar': props.avatar\n      };\n    });\n    var badgeClasses = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VBadge_objectSpread(VBadge_objectSpread({\n        'v-badge__badge': true\n      }, elevationClasses.value), props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VBadge_objectSpread({\n        top: computedTop.value,\n        right: computedRight.value,\n        bottom: computedBottom.value,\n        left: computedLeft.value\n      }, props.color ? setBackgroundCssColor(props.color) : {});\n    });\n\n    function addContent() {\n      if (props.dot) return undefined;\n      if (props.content) return String(props.content);\n      return undefined;\n    }\n\n    function genBadgeSlot() {\n      var propsData = {\n        \"class\": {\n          'v-badge__badge-slot': true\n        }\n      };\n      return slots.badge ? (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, slots.badge()) : null;\n    }\n\n    function genContent() {\n      var propsData = {\n        \"class\": {\n          'v-badge__content': true\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [addContent(), genBadgeSlot()]);\n    }\n\n    function genBadge() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": badgeClasses.value,\n        style: styles.value\n      }, genContent());\n    }\n\n    return function () {\n      var badge = genBadge();\n\n      if (props.toggle && !slots.badge) {\n        var _useToggle = useToggle(props, 'content'),\n            isActive = _useToggle.isActive;\n\n        badge = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.withDirectives)(badge, [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.vShow, isActive.value]]);\n      }\n\n      var propsData = {\n        \"class\": classes.value\n      };\n      var children = [useTransition(badge, props.transition), slots[\"default\"] && slots[\"default\"]()];\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, children);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VBadge/index.ts\n\n;// CONCATENATED MODULE: ./src/components/transitions/helpers.ts\nfunction helpers_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction helpers_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? helpers_ownKeys(Object(source), !0).forEach(function (key) { transitions_helpers_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : helpers_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction transitions_helpers_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nfunction createTransition(hooks) {\n  var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'in-out';\n  return function (vNode) {\n    return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.createBlock)(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.Transition, helpers_objectSpread({\n      mode: mode\n    }, hooks), {\n      \"default\": (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.withCtx)(function () {\n        return [vNode && (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(vNode)];\n      })\n    });\n  };\n}\n;// CONCATENATED MODULE: ./src/components/transitions/expand-transition.ts\nvar init = {\n  transition: null,\n  propSize: '',\n  height: 0,\n  width: 0\n};\nvar PRIMARY_TRANSITION = 'cubic-bezier(.25, .8, .5, 1)';\n\nvar resetStyles = function resetStyles(el) {\n  el.style[init.propSize] = '';\n  el.style.transition = '';\n};\n\nvar getChildrenSizes = function getChildrenSizes(el) {\n  return Array.prototype.reduce.call(el.children, function (acc, it) {\n    var size = getComputedStyle(it)[init.propSize];\n    return acc += parseFloat(size);\n  }, 0);\n};\n\nvar setInitStyles = function setInitStyles(el, x) {\n  init.propSize = x ? 'width' : 'height';\n  init.transition = getComputedStyle(el).transition;\n  init[init.propSize] = getChildrenSizes(el);\n};\n\nvar expandHooks = function expandHooks(expandedParentClass) {\n  var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return {\n    onBeforeEnter: function onBeforeEnter(el) {\n      el.style.transition = '';\n    },\n    onEnter: function onEnter(el) {\n      setInitStyles(el, x);\n      el.style[init.propSize] = '0';\n      el.style.transition = \".2s \".concat(init.propSize, \" \").concat(PRIMARY_TRANSITION);\n      requestAnimationFrame(function () {\n        el.style[init.propSize] = \"\".concat(init[init.propSize], \"px\");\n      });\n\n      if (expandedParentClass) {\n        el.parentNode.classList.add(expandedParentClass);\n      }\n    },\n    onAfterEnter: function onAfterEnter(el) {\n      el.parentNode.classList.remove(expandedParentClass);\n      resetStyles(el);\n    },\n    onBeforeLeave: function onBeforeLeave(el) {\n      setInitStyles(el, x);\n    },\n    onLeave: function onLeave(el) {\n      setInitStyles(el, x);\n      el.style.transition = \".2s \".concat(init.propSize, \" \").concat(PRIMARY_TRANSITION);\n      el.style[init.propSize] = \"\".concat(init[init.propSize], \"px\");\n      requestAnimationFrame(function () {\n        return el.style[init.propSize] = '0';\n      });\n    },\n    onAfterLeave: function onAfterLeave(el) {\n      requestAnimationFrame(function () {\n        return resetStyles(el);\n      });\n    }\n  };\n};\n;// CONCATENATED MODULE: ./src/components/transitions/index.ts\n\n\nvar ExpandTransition = createTransition(expandHooks('expand-transition'));\n;// CONCATENATED MODULE: ./src/components/VGroup/VGroup.ts\nfunction VGroup_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VGroup_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VGroup_ownKeys(Object(source), !0).forEach(function (key) { VGroup_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VGroup_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VGroup_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\nvar VGroup = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-group',\n  props: VGroup_objectSpread({\n    expand: Boolean,\n    subgroup: Boolean,\n    title: {\n      type: String,\n      \"default\": ''\n    },\n    activeClass: {\n      type: String,\n      \"default\": 'main--text text--evo'\n    },\n    prependIcon: {\n      type: String,\n      \"default\": ''\n    },\n    appendIcon: {\n      type: String,\n      \"default\": ''\n    }\n  }, colorProps()),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n\n    var _useIcons = useIcons(),\n        icons = _useIcons.icons;\n\n    var _useColors = useColors(),\n        setBackgroundCssColor = _useColors.setBackgroundCssColor,\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor;\n\n    var isActive = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(false);\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VGroup_objectSpread(VGroup_defineProperty({\n        'v-group': true,\n        'v-group--subgroup': props.subgroup,\n        'v-group--active': isActive.value,\n        'v-group--default': !isActive.value\n      }, props.activeClass, !!props.activeClass && isActive.value), setBackgroundClassNameColor(props.color));\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VGroup_objectSpread({}, setBackgroundCssColor(props.color));\n    });\n\n    var genHeaderContent = function genHeaderContent() {\n      var _a;\n\n      var content = props.title || ((_a = slots.header) === null || _a === void 0 ? void 0 : _a.call(slots));\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-group__header-content'\n      }, content);\n    };\n\n    var genExpandIcon = function genExpandIcon(icon) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-group__expand-icon'\n      }, icon);\n    };\n\n    var genSubExpandIcon = function genSubExpandIcon(icon) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-group__sub-expand-icon'\n      }, icon);\n    };\n\n    var genPrependIcon = function genPrependIcon(icon) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-group__prepend-icon'\n      }, icon);\n    };\n\n    var genAppendIcon = function genAppendIcon(icon) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-group__append-icon'\n      }, icon);\n    };\n\n    var genIcon = function genIcon(iconName) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, {\n        icon: iconName,\n        size: 16\n      });\n    };\n\n    var genGroupHeader = function genGroupHeader() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-group__header',\n        onClick: function onClick() {\n          return isActive.value = !isActive.value;\n        }\n      }, [props.subgroup && genSubExpandIcon(genIcon(icons.$caretDown)), props.prependIcon && genPrependIcon(genIcon(props.prependIcon)), genHeaderContent(), props.appendIcon && genAppendIcon(genIcon(props.appendIcon)), !props.subgroup && genExpandIcon(genIcon(icons.$chevronDown))]);\n    };\n\n    var genGroupChildContent = function genGroupChildContent() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.withDirectives)((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-group__content'\n      }, {\n        \"default\": function _default() {\n          var _a;\n\n          return (_a = slots[\"default\"]) === null || _a === void 0 ? void 0 : _a.call(slots);\n        }\n      }), [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.vShow, isActive.value]]);\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.expand;\n    }, function (to) {\n      return isActive.value = to;\n    }, {\n      immediate: true\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        style: styles.value\n      }, [genGroupHeader(), ExpandTransition(genGroupChildContent())]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VGroup/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VResize/VResize.ts\nfunction VResize_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VResize_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VResize_ownKeys(Object(source), !0).forEach(function (key) { VResize_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VResize_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VResize_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar VResize = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-resize',\n  props: VResize_objectSpread({\n    emit: {\n      type: Boolean,\n      \"default\": false\n    },\n    customClass: {\n      type: String\n    },\n    minSize: {\n      type: [String, Number],\n      \"default\": 50\n    },\n    color: {\n      type: String,\n      \"default\": 'primary'\n    }\n  }, positionProps()),\n  emits: ['resize'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var data = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({\n      parentNode: null,\n      startOffset: null,\n      offsetTop: 0,\n      offsetLeft: 0,\n      parentHeight: 0,\n      parentWidth: 0,\n      marginLeft: 0,\n      marginTop: 0,\n      left: 0,\n      top: 0,\n      isActive: false\n    });\n    var resizeRef = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VResize_objectSpread(VResize_defineProperty({\n        'v-resize': true,\n        'v-resize--active': data.isActive,\n        'v-resize--top': props.top,\n        'v-resize--bottom': props.bottom,\n        'v-resize--right': props.right,\n        'v-resize--left': props.left\n      }, props.customClass, !!props.customClass), props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VResize_objectSpread({}, props.color ? setBackgroundCssColor(props.color) : {});\n    });\n    var isDirectY = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.top || props.bottom;\n    });\n    var isNeedReverse = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.top || props.left;\n    });\n    var currentSize = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return isDirectY.value ? data.parentHeight : data.parentWidth;\n    });\n    var sizeProp = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return isDirectY.value ? 'height' : 'width';\n    });\n    var reverseDirection = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.top ? 'top' : 'left';\n    });\n    var reverseOffsetKey = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var side = reverseDirection.value;\n      return 'offset' + side[0].toUpperCase() + side.slice(1);\n    });\n    var offset = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return isDirectY.value ? data.offsetTop : data.offsetLeft;\n    });\n    var direction = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return isDirectY.value ? 'clientY' : 'clientX';\n    });\n\n    function moveReverse(size) {\n      var parentNode = data.parentNode,\n          left = data.left,\n          top = data.top;\n      var reverseTo = reverseDirection.value;\n      var value = !isDirectY.value ? currentSize.value - size + left : currentSize.value - size + top;\n      parentNode.style[reverseTo] = \"\".concat(value, \"px\");\n    }\n\n    function setOrEmitSize(size) {\n      if (props.emit) return emit('resize', size);\n      data.parentNode.style[sizeProp.value] = \"\".concat(size, \"px\");\n      isNeedReverse.value && moveReverse(size);\n    }\n\n    function resize(e) {\n      var size;\n\n      if (isNeedReverse.value) {\n        size = currentSize.value - (e[direction.value] - offset.value) + data.startOffset;\n      } else {\n        size = currentSize.value + (e[direction.value] - currentSize.value - offset.value - data.startOffset);\n      }\n\n      size > props.minSize && setOrEmitSize(size);\n    }\n\n    function resetMinMaxStyles() {\n      if (isDirectY.value) {\n        data.parentNode.style.maxHeight = '';\n        data.parentNode.style.minHeight = '';\n      } else {\n        data.parentNode.style.maxWidth = '';\n        data.parentNode.style.minWidth = '';\n      }\n    }\n\n    function setParent() {\n      var parent = resizeRef.value.parentNode;\n      data.parentNode = parent;\n    }\n\n    function computeSizes() {\n      var _getComputedStyle = getComputedStyle(data.parentNode),\n          top = _getComputedStyle.top,\n          left = _getComputedStyle.left,\n          height = _getComputedStyle.height,\n          width = _getComputedStyle.width,\n          marginLeft = _getComputedStyle.marginLeft,\n          marginTop = _getComputedStyle.marginTop;\n\n      data.offsetTop = data.parentNode.offsetTop;\n      data.offsetLeft = data.parentNode.offsetLeft;\n      data.marginLeft = parseFloat(marginLeft);\n      data.marginTop = parseFloat(marginTop);\n      data.parentHeight = parseFloat(height);\n      data.parentWidth = parseFloat(width);\n      data.top = parseFloat(top);\n      data.left = parseFloat(left);\n    }\n\n    function setStartPositions() {\n      var side = reverseDirection.value;\n      var offset = reverseOffsetKey.value;\n\n      if (data[side] === data[offset]) {\n        data.parentNode.style[side] = \"\".concat(data[offset], \"px\");\n      }\n    }\n\n    function disableSelection(e) {\n      e.preventDefault();\n    }\n\n    function initResize(e) {\n      if (!data.isActive) {\n        data.isActive = true;\n        computeSizes();\n        resetMinMaxStyles();\n        setStartPositions();\n        setStartOffset(e);\n      }\n\n      requestAnimationFrame(function () {\n        return resize(e);\n      });\n    }\n\n    function setStartOffset(e) {\n      if (isNeedReverse.value) data.startOffset = e[direction.value];else data.startOffset = e[direction.value] - currentSize.value;\n      data.startOffset -= offset.value;\n    }\n\n    function reset() {\n      data.isActive = false;\n      resetMinMaxStyles();\n    }\n\n    function onMouseup() {\n      reset();\n      removeHandlers();\n    }\n\n    function onMousedown() {\n      document.addEventListener('mousemove', initResize);\n      document.addEventListener('mouseup', onMouseup);\n      document.addEventListener('selectstart', disableSelection);\n    }\n\n    function removeHandlers() {\n      document.removeEventListener('mousemove', initResize);\n      document.removeEventListener('mouseup', onMouseup);\n      document.removeEventListener('selectstart', disableSelection);\n    }\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onMounted)(function () {\n      setParent();\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeUnmount)(function () {\n      document.removeEventListener('mousedown', onMousedown);\n    });\n    return function () {\n      var propsData = {\n        \"class\": classes.value,\n        style: styles.value,\n        key: 'resize',\n        ref: resizeRef,\n        onMousedown: onMousedown\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VResize/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VIcon/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VChip/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VCheckbox/VCheckbox.ts\nfunction VCheckbox_toConsumableArray(arr) { return VCheckbox_arrayWithoutHoles(arr) || VCheckbox_iterableToArray(arr) || VCheckbox_unsupportedIterableToArray(arr) || VCheckbox_nonIterableSpread(); }\n\nfunction VCheckbox_nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction VCheckbox_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return VCheckbox_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return VCheckbox_arrayLikeToArray(o, minLen); }\n\nfunction VCheckbox_iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction VCheckbox_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return VCheckbox_arrayLikeToArray(arr); }\n\nfunction VCheckbox_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\nvar VCheckbox = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-checkbox',\n  props: {\n    onIcon: {\n      type: String\n    },\n    offIcon: {\n      type: String\n    },\n    dark: Boolean,\n    label: String,\n    disabled: Boolean,\n    validate: Boolean,\n    modelValue: [Array, Boolean],\n    value: {\n      \"default\": null\n    },\n    color: {\n      type: String,\n      \"default\": 'primary'\n    }\n  },\n  emits: ['checked', 'update:modelValue'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var isChecked = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(false);\n    var form = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.inject)('form', null);\n\n    var _useValidation = useValidation(props),\n        validate = _useValidation.validate;\n\n    var _useIcons = useIcons(),\n        icons = _useIcons.icons;\n\n    var isArray = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return Array.isArray(props.modelValue);\n    });\n    var isValueSet = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.value !== null;\n    });\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        'v-checkbox': true,\n        'v-checkbox--disabled': props.disabled,\n        'v-checkbox--checked': isChecked.value,\n        'v-validatable': props.validate\n      };\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.modelValue;\n    }, function () {\n      if (isArray.value) {\n        if (isValueSet.value) {\n          isChecked.value = props.modelValue.includes(props.value);\n        } else {\n          warning('v-checkbox: set the \"value\" prop');\n        }\n      } else {\n        isChecked.value = !!props.modelValue;\n      }\n    }, {\n      immediate: true\n    });\n\n    var validateValue = function validateValue() {\n      return validate(isChecked.value);\n    };\n\n    var genLabel = function genLabel() {\n      var propsData = {\n        absolute: false,\n        color: props.dark ? 'white' : '',\n        disabled: props.disabled\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VLabel, propsData, {\n        \"default\": function _default() {\n          return props.label;\n        }\n      });\n    };\n\n    var genLabelWrapper = function genLabelWrapper() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-checkbox__label'\n      }, genLabel());\n    };\n\n    var genIcon = function genIcon() {\n      var onIcon = props.onIcon || icons.$checkOn;\n      var offIcon = props.offIcon || icons.$checkOff;\n      var icon = isChecked.value ? onIcon : offIcon;\n      var propsData = {\n        icon: icon,\n        color: props.color,\n        disabled: props.disabled\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, propsData);\n    };\n\n    var genCheckbox = function genCheckbox() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-checkbox__square'\n      }, genIcon());\n    };\n\n    var computeValue = function computeValue() {\n      if (isArray.value) {\n        var modelValue = VCheckbox_toConsumableArray(props.modelValue);\n\n        isChecked.value = !modelValue.includes(props.value);\n\n        if (!isChecked.value) {\n          modelValue = modelValue.filter(function (it) {\n            return it !== props.value;\n          });\n        } else {\n          modelValue.push(props.value);\n        }\n\n        return modelValue;\n      }\n\n      return isChecked.value = !isChecked.value;\n    };\n\n    var onClick = function onClick() {\n      if (props.disabled) return;\n      var value = computeValue();\n      props.validate && validateValue();\n      emit('update:modelValue', value);\n      emit('checked', value);\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeMount)(function () {\n      if (form) form.add(validateValue);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeUnmount)(function () {\n      form === null || form === void 0 ? void 0 : form.remove(validateValue);\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        onClick: onClick\n      }, [genCheckbox(), props.label && genLabelWrapper()]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VCheckbox/index.ts\n\n;// CONCATENATED MODULE: ./src/services/transitions.ts\nvar transitions;\n\n(function (transitions) {\n  transitions[\"FADE\"] = \"fade\";\n  transitions[\"FADE_IN_DOWN\"] = \"fade-in-down\";\n  transitions[\"FADE_IN_UP\"] = \"fade-in-up\";\n  transitions[\"SCALE_IN\"] = \"scale-in\";\n  transitions[\"SCALE_IN_OUT\"] = \"scale-in-out\";\n  transitions[\"SLIDE_IN_LEFT\"] = \"slide-in-left\";\n})(transitions || (transitions = {}));\n;// CONCATENATED MODULE: ./src/components/VTooltip/VTooltip.ts\nfunction VTooltip_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VTooltip_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VTooltip_ownKeys(Object(source), !0).forEach(function (key) { VTooltip_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VTooltip_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VTooltip_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\n\nvar VTooltip = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-tooltip',\n  props: VTooltip_objectSpread(VTooltip_objectSpread({\n    openOnHover: {\n      type: Boolean,\n      \"default\": true\n    },\n    color: {\n      type: String,\n      \"default\": 'grey lighten-1'\n    },\n    zIndex: [Number, String],\n    maxWidth: [Number, String],\n    minWidth: [Number, String],\n    modelValue: Boolean,\n    offsetX: {\n      type: [String, Number],\n      \"default\": 20\n    },\n    offsetY: {\n      type: [String, Number],\n      \"default\": 20\n    }\n  }, elevationProps()), positionProps()),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var tooltip = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({});\n    var activator = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({});\n    var tooltipRef = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n\n    var _useToggle = useToggle(props),\n        isActive = _useToggle.isActive;\n\n    var _useElevation = useElevation(props),\n        elevationClasses = _useElevation.elevationClasses;\n\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var _useActivator = useActivator(props),\n        activatorRef = _useActivator.activatorRef,\n        getActivatorSizes = _useActivator.getActivatorSizes,\n        genActivatorListeners = _useActivator.genActivatorListeners;\n\n    var handlers = {\n      mouseenter: function mouseenter() {\n        return isActive.value = true;\n      },\n      mouseleave: function mouseleave() {\n        return isActive.value = false;\n      }\n    };\n    var listeners = genActivatorListeners(props, handlers);\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VTooltip_objectSpread(VTooltip_objectSpread({\n        'v-tooltip': true,\n        'v-tooltip--top': props.top,\n        'v-tooltip--right': props.right,\n        'v-tooltip--left': props.left,\n        'v-tooltip--bottom': props.bottom\n      }, elevationClasses.value), props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var computeTopPosition = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return (props.top ? activator.top - tooltip.height : props.bottom ? activator.top + activator.height : activator.top + (activator.height - tooltip.height) / 2) + +props.offsetY;\n    });\n    var computeLeftPosition = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return (props.left ? activator.left - tooltip.width : props.right ? activator.left + activator.width : activator.left + (activator.width - tooltip.width) / 2) + +props.offsetX;\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VTooltip_objectSpread({\n        top: tooltip.top ? convertToUnit(tooltip.top) : '',\n        left: tooltip.top ? convertToUnit(tooltip.left) : '',\n        maxWidth: !!props.maxWidth ? \"\".concat(props.maxWidth, \"px\") : '',\n        minWidth: !!props.minWidth ? \"\".concat(props.minWidth, \"px\") : '',\n        zIndex: props.zIndex\n      }, props.color ? setBackgroundCssColor(props.color) : {});\n    });\n\n    function genActivator() {\n      var slotContent = slots.activator && slots.activator({\n        on: listeners\n      });\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(slotContent[0], {\n        ref: activatorRef\n      });\n    }\n\n    function genContent() {\n      var propsData = {\n        \"class\": classes.value,\n        style: styles.value,\n        ref: tooltipRef\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.withDirectives)((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', propsData, slots[\"default\"] && slots[\"default\"]()), [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.vShow, isActive.value]]);\n    }\n\n    function setTooltipPosition() {\n      if (tooltipRef.value) {\n        tooltip.width = tooltipRef.value.offsetWidth;\n        tooltip.height = tooltipRef.value.offsetHeight;\n        tooltip.top = computeTopPosition.value;\n        tooltip.left = computeLeftPosition.value;\n      }\n    }\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onMounted)(function () {\n      (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n        return isActive.value;\n      }, function (to) {\n        if (to) {\n          var _getActivatorSizes = getActivatorSizes(),\n              left = _getActivatorSizes.left,\n              top = _getActivatorSizes.top,\n              height = _getActivatorSizes.height,\n              width = _getActivatorSizes.width;\n\n          activator.left = left;\n          activator.top = top;\n          activator.height = height;\n          activator.width = width;\n          tooltip.top = 0;\n          tooltip.left = 0;\n          requestAnimationFrame(setTooltipPosition);\n        }\n      }, {\n        immediate: true\n      });\n    });\n    return function () {\n      var content = useTransition(genContent(), isActive.value ? transitions.SCALE_IN : transitions.FADE);\n      return [content, genActivator()];\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VTooltip/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VToolbar/VToolbar.ts\nfunction VToolbar_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VToolbar_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VToolbar_ownKeys(Object(source), !0).forEach(function (key) { VToolbar_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VToolbar_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VToolbar_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar VToolbar = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-toolbar',\n  props: VToolbar_objectSpread({\n    fixed: Boolean,\n    height: {\n      type: [String, Number],\n      \"default\": 56\n    }\n  }, colorProps('#ffffff')),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VToolbar_objectSpread({\n        'v-toolbar': true,\n        'v-toolbar--fixed': props.fixed\n      }, setBackgroundClassNameColor(props.color));\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VToolbar_objectSpread({\n        height: convertToUnit(props.height),\n        left: props.fixed ? convertToUnit(0) : '',\n        top: props.fixed ? convertToUnit(0) : ''\n      }, setBackgroundCssColor(props.color));\n    });\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        style: styles.value\n      }, {\n        \"default\": function _default() {\n          var _a;\n\n          return (_a = slots[\"default\"]) === null || _a === void 0 ? void 0 : _a.call(slots);\n        }\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VToolbar/VToolbarNavBtn.ts\n\n\n\nvar VToolbarNavBtn = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-toolbar-nav-btn',\n  emits: ['click'],\n  setup: function setup(_, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n\n    var _useIcons = useIcons(),\n        icons = _useIcons.icons;\n\n    var onClick = function onClick() {\n      return emit('click');\n    };\n\n    var genNavBtn = function genNavBtn() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, {\n        clickable: true,\n        icon: icons.$menu,\n        onClick: onClick\n      });\n    };\n\n    return function () {\n      var _a;\n\n      var content = ((_a = slots[\"default\"]) === null || _a === void 0 ? void 0 : _a.call(slots)) || genNavBtn();\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-toolbar__nav-btn'\n      }, content);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VToolbar/index.ts\n\n\n\nvar VToolbarItems = createSimpleFunctional('v-toolbar__items');\nvar VToolbarLogo = createSimpleFunctional('v-toolbar__logo');\nvar VToolbarContent = createSimpleFunctional('v-toolbar__content');\n\n;// CONCATENATED MODULE: ./src/components/VNavigation/VNavigation.ts\nfunction VNavigation_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VNavigation_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VNavigation_ownKeys(Object(source), !0).forEach(function (key) { VNavigation_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VNavigation_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VNavigation_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar VNavigation = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-navigation',\n  props: VNavigation_objectSpread({\n    fixed: Boolean,\n    right: Boolean,\n    left: Boolean,\n    onHover: Boolean,\n    miniVariant: Boolean,\n    expand: Boolean,\n    offsetTop: {\n      type: [String, Number],\n      \"default\": 0\n    },\n    miniVariantWidth: {\n      type: [String, Number],\n      \"default\": 56\n    },\n    maxVariantWidth: {\n      type: [String, Number],\n      \"default\": 237\n    }\n  }, colorProps('#ffffff')),\n  emits: ['update:expand'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var isHovered = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(false);\n    var isExpanded = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      if (props.onHover && isHovered.value) return true;\n      if (props.expand) return true;\n      if (!props.expand && props.miniVariant) return false;\n      if (!props.expand && !props.miniVariant) return false;\n      return !props.miniVariant;\n    });\n    var computedWidth = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      if (!isExpanded.value) return props.miniVariantWidth;\n      return props.maxVariantWidth;\n    });\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VNavigation_objectSpread({\n        'v-navigation': true,\n        'v-navigation--expanded': isExpanded.value,\n        'v-navigation--fixed': props.fixed\n      }, props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VNavigation_objectSpread({\n        width: convertToUnit(computedWidth.value),\n        maxHeight: \"calc(100vh - \".concat(convertToUnit(props.offsetTop), \")\"),\n        top: props.fixed ? convertToUnit(props.offsetTop) : '',\n        left: !props.right && props.fixed ? convertToUnit(0) : '',\n        right: props.right && props.fixed ? convertToUnit(0) : ''\n      }, props.color ? setBackgroundCssColor(props.color) : {});\n    });\n\n    var genNavigationContent = function genNavigationContent() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-navigation__content'\n      }, {\n        \"default\": function _default() {\n          var _a;\n\n          return (_a = slots[\"default\"]) === null || _a === void 0 ? void 0 : _a.call(slots);\n        }\n      });\n    };\n\n    var onMouseenter = function onMouseenter() {\n      if (!props.onHover || props.miniVariant) return;\n      isHovered.value = true;\n      emit('update:expand', true);\n    };\n\n    var onMouseleave = function onMouseleave() {\n      if (!props.onHover || props.miniVariant) return;\n      isHovered.value = false;\n      emit('update:expand', false);\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('aside', {\n        \"class\": classes.value,\n        style: styles.value,\n        onMouseenter: onMouseenter,\n        onMouseleave: onMouseleave\n      }, genNavigationContent());\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VNavigation/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VMain/VMain.ts\n\nvar VMain = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-main',\n  setup: function setup(_, _ref) {\n    var slots = _ref.slots;\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-main'\n      }, {\n        \"default\": function _default() {\n          var _a;\n\n          return (_a = slots[\"default\"]) === null || _a === void 0 ? void 0 : _a.call(slots);\n        }\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VMain/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VTextarea/VTextarea.ts\n\n\nvar VTextarea = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-textarea',\n  setup: function setup() {\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VTextField, {\n        tag: 'textarea',\n        \"class\": 'v-textarea'\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VTextarea/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VSkeleton/VSkeleton.ts\n\n\nvar VSkeleton = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-skeleton',\n  props: {\n    tag: {\n      type: String,\n      \"default\": 'div'\n    },\n    width: {\n      type: [Number, String],\n      \"default\": null\n    },\n    height: {\n      type: [Number, String],\n      \"default\": 20\n    },\n    radius: {\n      type: [Number, String],\n      \"default\": 5\n    },\n    light: {\n      type: Boolean,\n      \"default\": true\n    },\n    dynamic: Boolean\n  },\n  setup: function setup(props) {\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(props.tag, {\n        \"class\": {\n          'v-skeleton': true,\n          'v-skeleton--light': props.light,\n          'v-skeleton--dynamic': props.dynamic\n        },\n        style: {\n          width: props.width && convertToUnit(props.width),\n          flexBasis: props.width && convertToUnit(props.width) || '100%',\n          height: convertToUnit(props.height),\n          borderRadius: convertToUnit(props.radius)\n        }\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VSkeleton/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VDataTable/VDataTableCell.ts\nfunction VDataTableCell_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VDataTableCell_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VDataTableCell_ownKeys(Object(source), !0).forEach(function (key) { VDataTableCell_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VDataTableCell_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VDataTableCell_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar VDataTableCell = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-data-table-cell',\n  props: VDataTableCell_objectSpread({\n    dark: Boolean,\n    resizeable: Boolean,\n    align: {\n      type: String,\n      \"default\": 'start'\n    },\n    width: {\n      type: [String, Number],\n      \"default\": 75\n    },\n    resizerColor: {\n      type: String,\n      \"default\": 'primary'\n    },\n    contentColor: String\n  }, colorProps()),\n  emits: ['resize'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n\n    var _useColors = useColors(),\n        setTextClassNameColor = _useColors.setTextClassNameColor,\n        setTextCssColor = _useColors.setTextCssColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor,\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTableCell_objectSpread(VDataTableCell_objectSpread({\n        'v-data-table__cell': true\n      }, props.contentColor ? setTextClassNameColor(props.contentColor) : {}), props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTableCell_objectSpread(VDataTableCell_objectSpread({\n        width: convertToUnit(+props.width)\n      }, props.contentColor ? setTextCssColor(props.contentColor) : {}), props.color ? setBackgroundCssColor(props.color) : {});\n    });\n\n    function genResize() {\n      var propsData = {\n        right: true,\n        emit: true,\n        color: props.resizerColor,\n        onResize: function onResize($size) {\n          return emit('resize', $size);\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VResize, propsData);\n    }\n\n    function genCellContent() {\n      var propsData = {\n        \"class\": VDataTableCell_defineProperty({\n          'v-data-table__cell-content': true\n        }, \"text-align--\".concat(props.align), !!props.align)\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, slots[\"default\"] && slots[\"default\"]());\n    }\n\n    return function () {\n      var propsData = {\n        \"class\": classes.value,\n        style: styles.value\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [genCellContent(), props.resizeable && genResize()]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VDataTable/VDataTableHeader.ts\nfunction VDataTableHeader_toConsumableArray(arr) { return VDataTableHeader_arrayWithoutHoles(arr) || VDataTableHeader_iterableToArray(arr) || VDataTableHeader_unsupportedIterableToArray(arr) || VDataTableHeader_nonIterableSpread(); }\n\nfunction VDataTableHeader_nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction VDataTableHeader_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return VDataTableHeader_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return VDataTableHeader_arrayLikeToArray(o, minLen); }\n\nfunction VDataTableHeader_iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction VDataTableHeader_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return VDataTableHeader_arrayLikeToArray(arr); }\n\nfunction VDataTableHeader_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction VDataTableHeader_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VDataTableHeader_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VDataTableHeader_ownKeys(Object(source), !0).forEach(function (key) { VDataTableHeader_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VDataTableHeader_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VDataTableHeader_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\n\nvar VDataTableHeader = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-data-table-header',\n  props: {\n    showSequence: Boolean,\n    showCheckbox: Boolean,\n    cols: Array,\n    colWidth: {\n      type: [String, Number],\n      \"default\": 125\n    },\n    align: String,\n    options: Object\n  },\n  emits: ['sort', 'filter', 'select-all', 'update:cols'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var _useIcons = useIcons(),\n        icons = _useIcons.icons;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTableHeader_objectSpread({\n        'v-data-table__header': true\n      }, props.options.color ? setBackgroundClassNameColor(props.options.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTableHeader_objectSpread({}, props.options.color ? setBackgroundCssColor(props.options.color) : {});\n    });\n    var computedContentColor = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _a, _b;\n\n      return props.options.dark ? ((_a = props.options) === null || _a === void 0 ? void 0 : _a.contentColor) || 'white' : (_b = props.options) === null || _b === void 0 ? void 0 : _b.contentColor;\n    });\n    var cols = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTableHeader_toConsumableArray(props.cols);\n    });\n\n    var onSort = function onSort(item) {\n      emit('sort', item);\n    };\n\n    var _onInput = function onInput($value, item) {\n      item.filtered = !!$value;\n      emit('filter', {\n        value: $value,\n        col: item\n      });\n    };\n\n    var showFilter = function showFilter(item) {\n      if (item.showFilter) return;\n      item.showFilter = true;\n    };\n\n    var genSortButton = function genSortButton(item) {\n      var classes = {\n        'v-data-table-col__actions-sort': true,\n        'v-data-table-col__actions-sort--active': item.sorted\n      };\n      var propsData = {\n        clickable: true,\n        \"class\": classes,\n        icon: icons.$arrowUp,\n        onClick: function onClick() {\n          return onSort(item);\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, propsData);\n    };\n\n    var genFilterButton = function genFilterButton(item) {\n      var classes = {\n        'v-data-table-col__actions-filter': true,\n        'v-data-table-col__actions-filter--active': item.filtered\n      };\n      var propsData = {\n        clickable: true,\n        \"class\": classes,\n        icon: icons.$filter,\n        color: !item.cellClass ? computedContentColor.value : '',\n        onClick: function onClick() {\n          return showFilter(item);\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, propsData);\n    };\n\n    var genHeaderActions = function genHeaderActions(item) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', {\n        \"class\": 'v-data-table-col__actions'\n      }, [item.sortable && genSortButton(item), item.filterable && genFilterButton(item)]);\n    };\n\n    var genFilterInput = function genFilterInput(item) {\n      var propsData = {\n        label: 'search',\n        dark: props.options.dark,\n        color: !item.cellClass ? computedContentColor.value : '',\n        prependIcon: icons.$search,\n        clearable: true,\n        onInput: function onInput($value) {\n          return _onInput($value, item);\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VTextField, propsData);\n    };\n\n    var genFilterWrapper = function genFilterWrapper(col) {\n      var _a, _b;\n\n      var color = props.options.dark ? ((_a = props.options) === null || _a === void 0 ? void 0 : _a.color) || 'grey darken-3' : ((_b = props.options) === null || _b === void 0 ? void 0 : _b.color) || 'white';\n      var slotName = \"\".concat(col.key, \"-filter\");\n      var filterSlot = slots[slotName] && slots[slotName]({\n        filter: function filter(event) {\n          return _onInput(event, col);\n        }\n      });\n      var directive = col.showFilter ? {\n        handler: function handler() {\n          return setTimeout(function () {\n            return col.showFilter = false;\n          });\n        },\n        closeConditional: false\n      } : undefined;\n      var propsData = {\n        \"class\": VDataTableHeader_objectSpread(VDataTableHeader_defineProperty({\n          'v-data-table-col__filter': !filterSlot,\n          'v-data-table-col__custom-filter': !!filterSlot,\n          'elevation-5': true\n        }, col.cellClass, !!col.cellClass), color ? setBackgroundClassNameColor(color) : {}),\n        style: VDataTableHeader_objectSpread({}, color ? setBackgroundCssColor(color) : {})\n      };\n      return col.filterable && (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.withDirectives)((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, filterSlot || genFilterInput(col)), [[clickOutside, directive], [external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.vShow, col.showFilter]]);\n    };\n\n    var genHeaderTitle = function genHeaderTitle(col) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-data-table-col__title'\n      }, col.title);\n    };\n\n    var genNumberCell = function genNumberCell() {\n      var propsData = {\n        align: 'center',\n        \"class\": VDataTableHeader_defineProperty({\n          'v-data-table-col__number': true\n        }, props.cellClass, !!props.cellClass),\n        contentColor: computedContentColor.value,\n        color: props.options.color,\n        width: 50\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableCell, propsData, {\n        \"default\": function _default() {\n          return '№';\n        }\n      });\n    };\n\n    var genCheckboxCell = function genCheckboxCell() {\n      var propsData = {\n        align: 'center',\n        \"class\": VDataTableHeader_defineProperty({\n          'v-data-table-col__checkbox': true\n        }, props.cellClass, !!props.cellClass),\n        dark: props.options.dark,\n        contentColor: computedContentColor.value,\n        color: props.options.color,\n        width: 50\n      };\n      var content = {\n        \"default\": function _default() {\n          return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VCheckbox, {\n            color: computedContentColor.value,\n            onChecked: function onChecked(e) {\n              return emit('select-all', e);\n            }\n          });\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableCell, propsData, content);\n    };\n\n    var genHeaderCell = function genHeaderCell(col) {\n      var _a;\n\n      var propsData = {\n        dark: props.options.dark,\n        \"class\": VDataTableHeader_defineProperty({\n          'v-data-table-col': true,\n          'v-data-table-col--sorted': col.sorted\n        }, col.cellClass, !!col.cellClass),\n        contentColor: !col.cellClass ? computedContentColor.value : '',\n        color: !col.cellClass ? props.options.color : '',\n        width: col.width,\n        resizeable: col.resizeable,\n        resizerColor: (_a = props.options) === null || _a === void 0 ? void 0 : _a.resizerColor,\n        align: col.align || props.align,\n        onResize: function onResize($size) {\n          return col.width = $size;\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableCell, propsData, {\n        \"default\": function _default() {\n          return [genHeaderTitle(col), genHeaderActions(col), genFilterWrapper(col)];\n        }\n      });\n    };\n\n    var genHeaderChildren = function genHeaderChildren() {\n      var children = [];\n      var headerSlot = slots.header && slots.header(props);\n      props.showSequence && children.push(genNumberCell());\n      props.showCheckbox && children.push(genCheckboxCell());\n      cols.value.forEach(function (col) {\n        col.width = col.width || props.colWidth;\n\n        if (!col.hasOwnProperty('show')) {\n          col.show = !col.show;\n        }\n\n        !headerSlot[0].children && col.show && children.push(genHeaderCell(col));\n      });\n      headerSlot[0].children && children.push(headerSlot);\n      return children;\n    };\n\n    return function () {\n      var propsData = {\n        \"class\": classes.value,\n        style: styles.value\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, genHeaderChildren());\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VDataTable/VDataTableBody.ts\nfunction VDataTableBody_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VDataTableBody_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VDataTableBody_ownKeys(Object(source), !0).forEach(function (key) { VDataTableBody_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VDataTableBody_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VDataTableBody_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar VDataTableBody = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-data-table-body',\n  props: VDataTableBody_objectSpread({\n    cols: Array,\n    rows: Array,\n    dark: Boolean,\n    showSequence: Boolean,\n    showCheckbox: Boolean,\n    checkAllRows: Boolean,\n    align: String,\n    colWidth: {\n      type: [String, Number],\n      \"default\": 125\n    },\n    page: Number,\n    rowsOnPage: Number\n  }, colorProps()),\n  emits: ['select', 'click:row', 'dblclick:row', 'contextmenu:row'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n    var checkedRows = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)([]);\n\n    var _useColors = useColors(),\n        setBackgroundCssColor = _useColors.setBackgroundCssColor,\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor;\n\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTableBody_objectSpread({\n        'v-data-table__body': true\n      }, props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTableBody_objectSpread({}, props.color ? setBackgroundCssColor(props.color) : {});\n    });\n    var rowsOnTable = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _a;\n\n      return (_a = props.rows) === null || _a === void 0 ? void 0 : _a.slice((props.page - 1) * props.rowsOnPage, props.page * props.rowsOnPage);\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.checkAllRows;\n    }, function (to) {\n      if (to) onSelectRows(props.rows);else onSelectRows([]);\n    });\n\n    function onSelectRows(rows) {\n      checkedRows.value = rows;\n      emit('select', checkedRows.value);\n    }\n\n    function genNumberCell(count) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableCell, {\n        width: 50,\n        align: 'center',\n        dark: props.dark,\n        color: props.color,\n        \"class\": 'v-data-table__row-number'\n      }, {\n        \"default\": function _default() {\n          return count + 1;\n        }\n      });\n    }\n\n    function genCheckboxCell(row) {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableCell, {\n        width: 50,\n        align: 'center',\n        dark: props.dark,\n        color: props.color,\n        \"class\": 'v-data-table__row-checkbox'\n      }, {\n        \"default\": function _default() {\n          return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VCheckbox, {\n            modelValue: checkedRows.value,\n            color: props.dark ? 'white' : '',\n            value: row,\n            onChecked: onSelectRows\n          });\n        }\n      });\n    }\n\n    function genRowCell(col, row) {\n      var format = col.format;\n      var slotContent = slots[col.key] && slots[col.key]({\n        row: row,\n        format: format\n      });\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableCell, {\n        width: col.width,\n        align: col.align || props.align,\n        dark: props.dark\n      }, {\n        \"default\": function _default() {\n          return slotContent ? slotContent : format ? format(row) : String(row[col.key]);\n        }\n      });\n    }\n\n    function genTableRow(row, rowCount) {\n      var rowCells = [];\n      props.showSequence && rowCells.push(genNumberCell(rowCount));\n      props.showCheckbox && rowCells.push(genCheckboxCell(row));\n      props.cols.forEach(function (col) {\n        col.show && rowCells.push(genRowCell(col, row));\n      });\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": {\n          'v-data-table__row': true\n        },\n        onClick: function onClick() {\n          return emit('click:row', row);\n        },\n        onDblclick: function onDblclick() {\n          return emit('dblclick:row', row);\n        },\n        onContextmenu: function onContextmenu(e) {\n          e.preventDefault();\n          emit('contextmenu:row', row);\n        }\n      }, rowCells);\n    }\n\n    function genTableRows() {\n      var _a;\n\n      var tableRows = [];\n      var rowsLength = (_a = rowsOnTable.value) === null || _a === void 0 ? void 0 : _a.length;\n      var count = (props.page - 1) * props.rowsOnPage;\n\n      for (var i = 0; i < rowsLength; i += 1) {\n        tableRows.push(genTableRow(rowsOnTable.value[i], count + i));\n      }\n\n      return tableRows;\n    }\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        style: styles.value\n      }, genTableRows());\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VDataTable/VDataTableFooter.ts\nfunction VDataTableFooter_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VDataTableFooter_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VDataTableFooter_ownKeys(Object(source), !0).forEach(function (key) { VDataTableFooter_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VDataTableFooter_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VDataTableFooter_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\nvar VDataTableFooter = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-data-table-footer',\n  props: {\n    pages: Number,\n    page: Number,\n    firstOnPage: Number,\n    lastOnPage: Number,\n    pageCorrection: Number,\n    rowsLength: Number,\n    rowsOnPage: Number,\n    options: Object\n  },\n  emits: ['last-page', 'correct-page', 'select-rows-count', 'next-page', 'prev-page'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n\n    var _useColors = useColors(),\n        setBackgroundCssColor = _useColors.setBackgroundCssColor,\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setTextClassNameColor = _useColors.setTextClassNameColor,\n        setTextCssColor = _useColors.setTextCssColor;\n\n    var _useIcons = useIcons(),\n        icons = _useIcons.icons;\n\n    var activator = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n    var paginationDisplayText = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return \"\".concat(props.firstOnPage, \" - \").concat(props.lastOnPage, \"\\n        of \").concat(props.rowsLength);\n    });\n    var isLastPage = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.page >= props.pages;\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return isLastPage.value;\n    }, function (to) {\n      return to && emit('last-page');\n    });\n\n    function changeTableRowsPage(isNext) {\n      if (props.page === props.pages && isNext) return;\n      var event = isNext ? 'next-page' : 'prev-page';\n      emit(event, isNext ? 1 : -1);\n    }\n\n    function genPaginationButton() {\n      var isNext = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      var _a, _b;\n\n      var btnColor = ((_b = (_a = props.options) === null || _a === void 0 ? void 0 : _a.pagination) === null || _b === void 0 ? void 0 : _b.buttonsColor) || 'primary';\n      var contentColor = props.options.contentColor || 'white';\n      var disableIf = isNext && props.lastOnPage >= props.rowsLength || !isNext && props.firstOnPage === 1;\n      var propsData = {\n        width: 42,\n        color: btnColor,\n        elevation: 3,\n        disabled: disableIf,\n        text: disableIf,\n        onClick: function onClick() {\n          return changeTableRowsPage(isNext);\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VButton_VButton, propsData, {\n        \"default\": function _default() {\n          return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, {\n            icon: isNext ? icons.$arrowRight : icons.$arrowLeft,\n            color: disableIf ? 'grey lighten-1' : contentColor\n          });\n        }\n      });\n    }\n\n    function genPaginationPageDisplay() {\n      var _a, _b;\n\n      var displayColor = ((_b = (_a = props.options) === null || _a === void 0 ? void 0 : _a.pagination) === null || _b === void 0 ? void 0 : _b.displayColor) || 'primary';\n      var propsData = {\n        width: 42,\n        style: {\n          margin: '0 10px'\n        },\n        color: displayColor,\n        elevation: 3\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VButton_VButton, propsData, {\n        \"default\": function _default() {\n          return props.page;\n        }\n      });\n    }\n\n    var genRowsCountSelectList = function genRowsCountSelectList() {\n      var _a, _b, _c;\n\n      var options = ((_a = props.options.counts) === null || _a === void 0 ? void 0 : _a.rowsPerPageOptions) || [5, 10, 15, 20];\n      var color = ((_c = (_b = props.options) === null || _b === void 0 ? void 0 : _b.counts) === null || _c === void 0 ? void 0 : _c.displayColor) || 'primary';\n      var contentColor = props.options.contentColor || 'white';\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": VDataTableFooter_objectSpread(VDataTableFooter_objectSpread({\n          'v-data-table__rows-count-list': true\n        }, color ? setBackgroundClassNameColor(color) : {}), contentColor ? setTextClassNameColor(contentColor) : {}),\n        style: VDataTableFooter_objectSpread(VDataTableFooter_objectSpread({}, color ? setBackgroundCssColor(color) : {}), contentColor ? setTextCssColor(contentColor) : {})\n      }, options.map(function (it) {\n        return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n          \"class\": 'v-data-table__rows-count-item',\n          onClick: function onClick() {\n            return emit('select-rows-count', it);\n          }\n        }, [it]);\n      }));\n    };\n\n    var genMenu = function genMenu() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VMenu, {\n        activator: activator.value,\n        maxHeight: 240,\n        zIndex: 12,\n        openOnClick: true\n      }, {\n        \"default\": function _default() {\n          return genRowsCountSelectList();\n        }\n      });\n    };\n\n    var genRowsCountField = function genRowsCountField() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-data-table__rows-count-value',\n        textColor: props.options.contentColor\n      }, props.rowsOnPage);\n    };\n\n    var genRowsCountSelect = function genRowsCountSelect() {\n      var _a, _b;\n\n      var displayColor = ((_b = (_a = props.options) === null || _a === void 0 ? void 0 : _a.counts) === null || _b === void 0 ? void 0 : _b.displayColor) || 'primary';\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VButton_VButton, {\n        color: displayColor,\n        ref: activator\n      }, {\n        \"default\": function _default() {\n          return [genRowsCountField(), activator.value && genMenu()];\n        }\n      });\n    };\n\n    function genRowsCountSelectCaption() {\n      var _a, _b;\n\n      var color = props.options.contentColor;\n      var propsData = {\n        \"class\": VDataTableFooter_objectSpread({\n          'v-data-table__pagination-label': true\n        }, color ? setTextClassNameColor(color) : {}),\n        style: VDataTableFooter_objectSpread({}, color ? setTextCssColor(color) : {})\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', propsData, ((_b = (_a = props.options) === null || _a === void 0 ? void 0 : _a.counts) === null || _b === void 0 ? void 0 : _b.rowsPerPageText) || 'Rows per page');\n    }\n\n    function genRowsCountSelectBlock() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-data-table__pagination-select'\n      }, [genRowsCountSelectCaption(), genRowsCountSelect()]);\n    }\n\n    function genPagesCountDisplay() {\n      var _a;\n\n      var color = props.options.contentColor;\n      var propsData = {\n        \"class\": VDataTableFooter_objectSpread({\n          'v-data-table__pagination-pages': true\n        }, color ? setTextClassNameColor(color) : {}),\n        style: VDataTableFooter_objectSpread({}, color ? setTextCssColor(color) : {})\n      };\n      props.pageCorrection && emit('correct-page', -props.pageCorrection);\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, props.rowsLength && ((_a = slots['pagination-text']) === null || _a === void 0 ? void 0 : _a.call(slots)) || props.rowsLength && paginationDisplayText.value || '-');\n    }\n\n    function genPaginationButtonsBlock() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": {\n          'v-data-table__pagination-route': true\n        }\n      }, [genPaginationButton(), genPaginationPageDisplay(), genPaginationButton(true)]);\n    }\n\n    function genPaginationBlock() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-data-table__pagination'\n      }, [genRowsCountSelectBlock(), genPagesCountDisplay(), genPaginationButtonsBlock()]);\n    }\n\n    return function () {\n      var propsData = {\n        \"class\": VDataTableFooter_objectSpread({\n          'v-data-table__footer': true\n        }, props.options.color ? setBackgroundClassNameColor(props.options.color) : {}),\n        style: VDataTableFooter_objectSpread({}, props.options.color ? setBackgroundCssColor(props.options.color) : {})\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, genPaginationBlock());\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VDataTable/VDataTable.ts\nfunction VDataTable_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VDataTable_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VDataTable_ownKeys(Object(source), !0).forEach(function (key) { VDataTable_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VDataTable_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VDataTable_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\nvar VDataTable = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-data-table',\n  props: {\n    cols: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    rows: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    dark: Boolean,\n    showSequence: Boolean,\n    showCheckbox: Boolean,\n    align: {\n      type: String,\n      validator: function validator(val) {\n        return ['left', 'center', 'right'].includes(val);\n      }\n    },\n    color: {\n      type: String,\n      \"default\": 'white'\n    },\n    headerOptions: {\n      type: Object,\n      \"default\": function _default() {\n        return {};\n      }\n    },\n    footerOptions: {\n      type: Object,\n      \"default\": function _default() {\n        return {};\n      }\n    },\n    customFilter: Function\n  },\n  emits: ['last-page', 'select:row', 'click:row', 'dblclick:row', 'contextmenu:row'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n    var data = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({\n      cols: [],\n      rows: [],\n      checkedRows: [],\n      rowsOnPage: 20,\n      page: 1,\n      isAllRowsChecked: false\n    });\n\n    var _useColors = useColors(),\n        setBackgroundCssColor = _useColors.setBackgroundCssColor,\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor;\n\n    var filters = {};\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTable_objectSpread({\n        'v-data-table': true\n      }, props.color ? setBackgroundClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTable_objectSpread({}, props.color ? setBackgroundCssColor(props.color) : {});\n    });\n    var headerOptions = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTable_objectSpread({\n        color: props.color,\n        dark: props.dark\n      }, props.headerOptions);\n    });\n    var footerOptions = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDataTable_objectSpread({\n        color: props.color,\n        dark: props.dark\n      }, props.footerOptions);\n    });\n    var pages = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _a;\n\n      return Math.ceil(((_a = data.rows) === null || _a === void 0 ? void 0 : _a.length) / data.rowsOnPage);\n    });\n    var firstOnPage = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return data.page === 1 ? 1 : (data.page - 1) * data.rowsOnPage + 1;\n    });\n    var lastOnPage = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _a, _b;\n\n      return data.page * data.rowsOnPage > ((_a = data.rows) === null || _a === void 0 ? void 0 : _a.length) ? (_b = data.rows) === null || _b === void 0 ? void 0 : _b.length : data.page * data.rowsOnPage;\n    });\n    var pageCorrection = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _a, _b;\n\n      if ((data.page - 1) * data.rowsOnPage > ((_a = data.rows) === null || _a === void 0 ? void 0 : _a.length)) {\n        return Math.ceil((data.page * data.rowsOnPage - ((_b = data.rows) === null || _b === void 0 ? void 0 : _b.length)) / data.rowsOnPage);\n      }\n\n      return null;\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.cols;\n    }, function (to) {\n      return data.cols = to;\n    }, {\n      immediate: true\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.rows;\n    }, function (to) {\n      return data.rows = to;\n    }, {\n      immediate: true\n    });\n\n    function onSelectAll(value) {\n      data.isAllRowsChecked = value;\n      data.rows.forEach(function (row) {\n        return row.checked = value;\n      });\n    }\n\n    function onSelect(rows) {\n      data.checkedRows = rows;\n      emit('select:row', data.checkedRows);\n    }\n\n    function onPrevPage(num) {\n      data.page = data.page > 1 ? data.page + num : data.page;\n    }\n\n    function onNextPage(num) {\n      if (data.rows.length - data.page * data.rowsOnPage > 0) {\n        data.page += num;\n      }\n    }\n\n    function onSort(col) {\n      if (col.sorted) {\n        col.sorted = !col.sorted;\n        return sortColumn(col);\n      }\n\n      data.cols.forEach(function (c) {\n        return c.sorted = col.key === c.key;\n      });\n      sortColumn(col);\n    }\n\n    function sortColumn(col) {\n      var _a, _b;\n\n      if (!col.sorted) {\n        return (_a = data.rows) === null || _a === void 0 ? void 0 : _a.reverse();\n      }\n\n      var executor = col.sort || function (a, b) {\n        if (col.format) return col.format(a) > col.format(b) ? 1 : -1;\n        if (col.sorted) return a[col.key] > b[col.key] ? 1 : -1;\n      };\n\n      (_b = data.rows) === null || _b === void 0 ? void 0 : _b.sort(executor);\n    }\n\n    function onFilter(_ref2) {\n      var value = _ref2.value,\n          col = _ref2.col;\n      if (!value && filters[col.key]) delete filters[col.key];\n      if (value) filters[col.key] = value;\n\n      if (col.filter) {\n        return data.rows = col.filter({\n          value: value,\n          col: col\n        });\n      }\n\n      if (props.customFilter) {\n        return props.customFilter(filters);\n      }\n\n      if (!Object.keys(filters).length) {\n        return data.rows = props.rows;\n      }\n\n      data.rows = filterRows(props.rows, props.cols);\n      data.page = 1;\n    }\n\n    function onSelectRowsCount(count) {\n      data.rowsOnPage = count;\n    }\n\n    function filterRows(rows, cols) {\n      var filterKeys = Object.keys(filters);\n      return rows.reduce(function (acc, row) {\n        var rowResults = [];\n        filterKeys.forEach(function (key) {\n          var _cols$find = cols.find(function (col) {\n            return col.key === key;\n          }),\n              format = _cols$find.format;\n\n          var value = format ? format(row) : row[key];\n          var rowKeyValue = \"\".concat(value).toLowerCase();\n          var filterValue = \"\".concat(filters[key]).toLowerCase();\n\n          if (rowKeyValue.includes(filterValue)) {\n            rowResults.push(row[key]);\n          }\n        });\n\n        if (rowResults.length === filterKeys.length && rowResults.every(function (value) {\n          return !!value;\n        })) {\n          acc.push(row);\n        }\n\n        return acc;\n      }, []);\n    }\n\n    function genTableTools() {\n      var propsData = {\n        \"class\": 'v-data-table__toolbar'\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, {\n        \"default\": function _default() {\n          return slots.toolbar && slots.toolbar();\n        }\n      });\n    }\n\n    function genTableHeader() {\n      var propsData = {\n        cols: data.cols,\n        color: props.color,\n        showCheckbox: props.showCheckbox,\n        dark: props.dark,\n        align: props.align,\n        showSequence: props.showSequence,\n        options: headerOptions.value,\n        onFilter: onFilter,\n        onSort: onSort,\n        onSelectAll: onSelectAll\n      };\n      var content = data.cols.reduce(function (acc, col) {\n        var slotName = \"\".concat(col.key, \"-filter\");\n\n        if (col && slots[slotName]) {\n          acc[slotName] = addScopedSlot(slotName, slots);\n        }\n\n        return acc;\n      }, {});\n      content.header = addScopedSlot('header', slots);\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableHeader, propsData, content);\n    }\n\n    function genTableBody() {\n      var _propsData;\n\n      var propsData = (_propsData = {\n        cols: data.cols,\n        rows: data.rows,\n        page: data.page,\n        rowsOnPage: data.rowsOnPage,\n        showCheckbox: props.showCheckbox,\n        checkAllRows: data.isAllRowsChecked,\n        align: props.align,\n        dark: props.dark,\n        showSequence: props.showSequence,\n        color: props.color,\n        onSelect: onSelect\n      }, VDataTable_defineProperty(_propsData, 'onClick:row', function onClickRow(e) {\n        return emit('click:row', e);\n      }), VDataTable_defineProperty(_propsData, 'onDblclick:row', function onDblclickRow(e) {\n        return emit('dblclick:row', e);\n      }), VDataTable_defineProperty(_propsData, 'onContextmenu:row', function onContextmenuRow(e) {\n        return emit('contextmenu:row', e);\n      }), _propsData);\n      var content = props.cols.reduce(function (acc, col) {\n        if (col && slots[col.key]) {\n          acc[col.key] = addScopedSlot(col.key, slots);\n        }\n\n        return acc;\n      }, {});\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableBody, propsData, content);\n    }\n\n    function genTableFooter() {\n      var _a;\n\n      var propsData = {\n        pages: pages.value,\n        page: data.page,\n        firstOnPage: firstOnPage.value,\n        lastOnPage: lastOnPage.value,\n        pageCorrection: pageCorrection.value,\n        rowsOnPage: data.rowsOnPage,\n        rowsLength: (_a = data.rows) === null || _a === void 0 ? void 0 : _a.length,\n        options: footerOptions.value,\n        onPrevPage: onPrevPage,\n        onNextPage: onNextPage,\n        onSelectRowsCount: onSelectRowsCount,\n        onLastPage: function onLastPage() {\n          return emit('last-page', props.rows.length);\n        },\n        onCorrectPage: function onCorrectPage(val) {\n          return data.page += val;\n        }\n      };\n      var content = slots['pagination-text'] ? VDataTable_defineProperty({}, 'pagination-text', function paginationText() {\n        var _a;\n\n        return slots['pagination-text'] && slots['pagination-text']({\n          start: firstOnPage.value,\n          last: lastOnPage.value,\n          length: (_a = data.rows) === null || _a === void 0 ? void 0 : _a.length\n        });\n      }) : '';\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDataTableFooter, propsData, content);\n    }\n\n    function genTableInner() {\n      var propsData = {\n        \"class\": 'v-data-table__inner'\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [genTableHeader(), genTableBody()]);\n    }\n\n    return function () {\n      var propsData = {\n        \"class\": classes.value,\n        style: styles.value\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [slots.toolbar && genTableTools(), genTableInner(), genTableFooter()]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VDataTable/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VDatePicker/VDatepickerHeader.ts\nfunction VDatepickerHeader_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VDatepickerHeader_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VDatepickerHeader_ownKeys(Object(source), !0).forEach(function (key) { VDatepickerHeader_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VDatepickerHeader_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VDatepickerHeader_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar VDatepickerHeader = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-date-picker-header',\n  props: {\n    onNext: Function,\n    onPrev: Function,\n    color: String\n  },\n  emits: ['table'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit;\n\n    var _useColors = useColors(),\n        setTextClassNameColor = _useColors.setTextClassNameColor,\n        setTextCssColor = _useColors.setTextCssColor;\n\n    var _useIcons = useIcons(),\n        icons = _useIcons.icons;\n\n    var genHeaderButton = function genHeaderButton(isRight) {\n      var icon = isRight ? icons.$arrowRight : icons.$arrowLeft;\n      var propsData = {\n        \"class\": 'v-date-picker__header-button'\n      };\n      var iconPropsData = {\n        icon: icon,\n        clickable: true,\n        \"class\": VDatepickerHeader_objectSpread({}, props.color ? setTextClassNameColor(props.color) : {}),\n        style: VDatepickerHeader_objectSpread({}, props.color ? setTextCssColor(props.color) : {}),\n        onClick: function onClick() {\n          return isRight ? props.onNext() : props.onPrev();\n        }\n      };\n      var arrowBtn = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VIcon, iconPropsData);\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, arrowBtn);\n    };\n\n    var genHeaderDisplay = function genHeaderDisplay() {\n      var propsData = {\n        \"class\": VDatepickerHeader_objectSpread({\n          'v-date-picker__header-display': true\n        }, props.color ? setTextClassNameColor(props.color) : {}),\n        style: VDatepickerHeader_objectSpread({}, props.color ? setTextCssColor(props.color) : {}),\n        onClick: function onClick() {\n          return emit('table');\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, slots[\"default\"] && slots[\"default\"]());\n    };\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-date-picker__header'\n      }, [genHeaderButton(false), genHeaderDisplay(), genHeaderButton(true)]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VDatePicker/utils.ts\nfunction utils_typeof(obj) { \"@babel/helpers - typeof\"; return utils_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, utils_typeof(obj); }\n\nfunction getMonth(date) {\n  return date.getMonth();\n}\nfunction getFullYear(date) {\n  return date.getFullYear();\n}\nfunction getDate(date) {\n  return date.getDate();\n}\nfunction getDay(date) {\n  return date.getDay();\n}\nfunction getHours(date) {\n  return date.getHours();\n}\nfunction getMinutes(date) {\n  return date.getMinutes();\n}\nfunction setFullYear(date, value) {\n  return date.setFullYear(value);\n}\nfunction setMonth(date, value) {\n  return date.setMonth(value);\n}\nfunction setDate(date, value) {\n  return date.setDate(value);\n}\nfunction isValidDate(date) {\n  if (Object.prototype.toString.call(date) !== '[object Date]') {\n    return false;\n  }\n\n  return !isNaN(date.getTime());\n}\n\nfunction getDayNameAbbr(date, days) {\n  if (utils_typeof(date) !== 'object') {\n    throw TypeError('Invalid Type');\n  }\n\n  return days[getDay(date)];\n}\n\nfunction getMonthName(month, months) {\n  if (!months) {\n    throw Error('missing second parameter Months array');\n  }\n\n  return months[month];\n}\n\nfunction getMonthNameAbbr(month, monthsAbbr) {\n  if (!monthsAbbr) {\n    throw Error('missing 2nd paramter Months array');\n  }\n\n  if (utils_typeof(month) === 'object') {\n    return monthsAbbr[getMonth(month)];\n  }\n\n  if (typeof month === 'number') {\n    return monthsAbbr[month];\n  }\n\n  throw TypeError('Invalid type');\n}\n\nfunction formatDate(date, format, translation) {\n  var year = getFullYear(date);\n  var month = getMonth(date) + 1;\n  var day = getDate(date);\n  return format.replace(/dd/, ('0' + day).slice(-2)).replace(/d/, \"\".concat(day)).replace(/yyyy/, \"\".concat(year)).replace(/yy/, String(year).slice(2)).replace(/MMMM/, getMonthName(getMonth(date), translation.months)).replace(/MMM/, getMonthNameAbbr(getMonth(date), translation.monthsAbbr)).replace(/MM/, ('0' + month).slice(-2)).replace(/M(?!a|ä|e)/, \"\".concat(month)).replace(/D(?!e|é|i)/, getDayNameAbbr(date, translation.week));\n}\nfunction validateDateInput(val) {\n  return val === null || val instanceof Date || typeof val === 'string' || typeof val === 'number';\n}\n;// CONCATENATED MODULE: ./src/components/VDatePicker/helpers.ts\n\n\nfunction genTableRows(vNodesArray, rowClassName, cellsInRow) {\n  var tableRows = [];\n  var vNodesInRow = [];\n\n  var genTableRow = function genTableRow(cellVNodes) {\n    return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n      \"class\": rowClassName\n    }, cellVNodes);\n  };\n\n  for (var i = 0; i <= vNodesArray.length; i += 1) {\n    if (i && !(i % cellsInRow)) {\n      tableRows.push(genTableRow(vNodesInRow));\n      vNodesInRow = [];\n    }\n\n    vNodesInRow.push(vNodesArray[i]);\n  }\n\n  if (vNodesInRow.length) {\n    tableRows.push(genTableRow(vNodesInRow));\n  }\n\n  return tableRows;\n}\nfunction toDateString(date) {\n  return new Date(date.year, date.month, date.date);\n}\nfunction parseDate(selectedDate) {\n  var date = new Date(selectedDate);\n  var day = getDay(date);\n  return {\n    year: getFullYear(date),\n    month: getMonth(date),\n    date: getDate(date),\n    mls: date.getTime(),\n    day: day\n  };\n}\n;// CONCATENATED MODULE: ./src/components/VDatePicker/VDatePickerDates.ts\n\n\n\nvar VDatePickerDates = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-date-picker-dates',\n  props: {\n    locale: Array,\n    year: [String, Number],\n    month: [String, Number],\n    date: [String, Number],\n    value: Object,\n    mondayFirst: Boolean,\n    disabledDates: Object\n  },\n  emits: ['update:month', 'update:value'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n    var FIRST_MONTH = 0;\n    var LAST_MONTH = 11;\n    var DAYS = [0, 1, 2, 3, 4, 5, 6];\n    var ANIMATION_TIMEOUT = 0;\n    var dates = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)([]);\n    var isDatesChanged = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(false);\n    var today = parseDate(new Date());\n    var handlers = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.inject)('handlers');\n    handlers.value = {\n      onNext: function onNext() {\n        return updateMonth(true);\n      },\n      onPrev: function onPrev() {\n        return updateMonth(false);\n      }\n    };\n\n    if (props.mondayFirst) {\n      DAYS.push(DAYS.splice(0, 1)[0]);\n    }\n\n    var daysInMonth = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return new Date(props.year, props.month + 1, 0).getDate();\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return props.month;\n    }, function () {\n      return genTableDates();\n    }, {\n      immediate: true\n    });\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watch)(function () {\n      return isDatesChanged.value;\n    }, function () {\n      return setTimeout(function () {\n        return isDatesChanged.value = false;\n      }, ANIMATION_TIMEOUT);\n    });\n\n    function updateMonth(isNext) {\n      var params = {};\n      params.month = props.month + (isNext ? 1 : -1);\n      if (!isNext && params.month < FIRST_MONTH) params.month = LAST_MONTH;\n      if (isNext && params.month > LAST_MONTH) params.month = FIRST_MONTH;\n      if (isNext && !params.month) params.year = props.year + 1;\n      if (!isNext && params.month === LAST_MONTH) params.year = props.year - 1;\n      isDatesChanged.value = true;\n      emit('update:month', params);\n    }\n\n    function genWeekDays() {\n      var propsData = {\n        \"class\": 'v-date-picker-dates__day'\n      };\n      return DAYS.map(function (day) {\n        return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', propsData, props.locale[day]);\n      });\n    }\n\n    function genDateObject(date) {\n      var year = props.year,\n          month = props.month;\n      return parseDate(new Date(year, month, date));\n    }\n\n    function setEmptiesBeforeFirstDate(dateObject) {\n      var firstDay = DAYS[0];\n      var startDay = firstDay && !dateObject.day ? dateObject.day : firstDay;\n      var tillDay = firstDay && !dateObject.day ? DAYS.length - 1 : dateObject.day;\n\n      for (var i = startDay; i <= tillDay; i += 1) {\n        dates.value[i] = {\n          date: null\n        };\n      }\n\n      dates.value[tillDay] = dateObject;\n    }\n\n    function genTableDates() {\n      dates.value = [];\n\n      for (var i = 1; i <= daysInMonth.value; i += 1) {\n        var dateObject = genDateObject(i);\n\n        if (i === 1) {\n          setEmptiesBeforeFirstDate(dateObject);\n        } else {\n          dates.value[dates.value.length] = dateObject;\n        }\n      }\n    }\n\n    function compareDates(date1, date2) {\n      return date1.date === date2.date && date1.month === date2.month && date1.year === date2.year;\n    }\n\n    function setDisabled(date) {\n      if (!date.date) return false;\n      if (!props.disabledDates) return !!date.isHoliday;\n      var disabledDates = props.disabledDates;\n      return disabledDates.daysOfMonth && disableDaysOfMonth(date) || disabledDates.from && disableFromTo(date, disabledDates) || disabledDates.dates && disableDates(date) || disabledDates.days && disableDays(date) || disabledDates.ranges && disableRanges(date) || disabledDates.custom && disabledDates.custom(date);\n    }\n\n    function disableFromTo(date, _ref2) {\n      var from = _ref2.from,\n          to = _ref2.to;\n      var dateFrom = parseDate(from);\n      var dateTo = parseDate(to);\n      return date.mls >= dateFrom.mls && date.mls <= dateTo.mls;\n    }\n\n    function disableDaysOfMonth(date) {\n      return props.disabledDates.daysOfMonth.some(function (it) {\n        return it === date.date;\n      });\n    }\n\n    function disableDates(date) {\n      return props.disabledDates.dates.find(function (d) {\n        return String(d) === String(toDateString(date));\n      });\n    }\n\n    function disableDays(date) {\n      return props.disabledDates.days.find(function (d) {\n        return d === date.day;\n      }) >= 0;\n    }\n\n    function disableRanges(date) {\n      var ranges = props.disabledDates.ranges;\n\n      for (var i = 0; i < ranges.length; i += 1) {\n        if (disableFromTo(date, ranges[i])) return true;\n      }\n    }\n\n    function genDateCell(date) {\n      var isSelected = compareDates(date, props.value);\n      var isToday = compareDates(date, today);\n      date.isHoliday = setDisabled(date);\n      var propsData = {\n        \"class\": {\n          'v-date-picker-dates__cell': !!date.date,\n          'v-date-picker-dates__cell--empty': !date.date,\n          'v-date-picker-dates__cell--selected': isSelected && !props.value[\"default\"],\n          'v-date-picker-dates__cell--current-date': isToday,\n          'v-date-picker-dates__cell--holiday': date.date && date.isHoliday\n        },\n        onClick: function onClick() {\n          return date.date && emit('update:value', date);\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [date.date && slots.date && slots.date(date) || date.date]);\n    }\n\n    function genDateCells() {\n      return dates.value.reduce(function (acc, dateObject) {\n        acc.push(genDateCell(dateObject));\n        return acc;\n      }, []);\n    }\n\n    function genDateRows() {\n      var datesVNodes = genDateCells();\n      return genTableRows(datesVNodes, 'v-date-picker-dates__row', DAYS.length);\n    }\n\n    function genDates() {\n      return !isDatesChanged.value && (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-date-picker-dates__dates'\n      }, genDateRows()) || null;\n    }\n\n    function genWeek() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-date-picker-dates__week'\n      }, genWeekDays());\n    }\n\n    return function () {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-date-picker-dates'\n      }, [genWeek(), useTransition(genDates(), 'fade')]);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VDatePicker/VDatePickerYears.ts\n\n\n\nvar VDatePickerYears = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-date-picker-years',\n  props: {\n    year: [Number, String]\n  },\n  emits: ['update:year'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var LIMIT = 100;\n    var ON_TABLE = 20;\n    var CELLS_IN_ROW = 4;\n    var CURRENT_YEAR = new Date().getFullYear();\n    var ANIMATION_TIMEOUT = 100;\n    var years = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)([]);\n    var onTableIndex = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(0);\n    var isListChanged = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(false);\n    var transition = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)('');\n    var handlers = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.inject)('handlers');\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.watchEffect)(function () {\n      return isListChanged.value && setTimeout(function () {\n        isListChanged.value = false;\n      }, ANIMATION_TIMEOUT);\n    });\n    var computedYear = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)({\n      get: function get() {\n        return +props.year || CURRENT_YEAR;\n      },\n      set: function set(val) {\n        emit('update:year', val);\n      }\n    });\n\n    if (handlers === null || handlers === void 0 ? void 0 : handlers.value) {\n      handlers.value = {\n        onNext: function onNext() {\n          return changeYearsList(true);\n        },\n        onPrev: function onPrev() {\n          return changeYearsList(false);\n        }\n      };\n    }\n\n    function setCurrentTransition(isNext) {\n      transition.value = isNext ? 'fade-in-down' : 'fade-in-up';\n    }\n\n    function setTableIndex() {\n      onTableIndex.value = years.value.findIndex(function (row) {\n        return row.find(function (year) {\n          return year === computedYear.value;\n        });\n      });\n    }\n\n    function changeYearsList(isNext) {\n      var max = years.value.length - 1;\n      var val = isNext ? 1 : -1;\n      if (onTableIndex.value === max && val > 0 || onTableIndex.value === 0 && val < 0) return;\n      setCurrentTransition(isNext);\n      onTableIndex.value += val;\n      isListChanged.value = true;\n    }\n\n    function genTableYears() {\n      var fromYear = CURRENT_YEAR - LIMIT;\n      var maxYears = LIMIT * 2;\n      var yearsList = [];\n\n      for (var i = 0; i <= maxYears; i += 1) {\n        if (yearsList.length === ON_TABLE) {\n          years.value.push(yearsList);\n          yearsList = [];\n        }\n\n        yearsList.push(fromYear + i);\n      }\n    }\n\n    function genYearCell(year) {\n      var isSelected = year === computedYear.value;\n      var propsData = {\n        \"class\": {\n          'v-date-picker-years__cell': true,\n          'v-date-picker-years__cell--selected': isSelected,\n          'v-date-picker-years__cell--current-year': year === CURRENT_YEAR\n        },\n        onClick: function onClick() {\n          return computedYear.value = year;\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, year);\n    }\n\n    function genYearsRows() {\n      var currentYears = years.value[onTableIndex.value];\n      var yearsVNodes = currentYears.map(genYearCell);\n      return genTableRows(yearsVNodes, 'v-date-picker-years__row', CELLS_IN_ROW);\n    }\n\n    function genYears() {\n      var propsData = {\n        \"class\": 'v-date-picker-years__years'\n      };\n      return !isListChanged.value && (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, genYearsRows()) || null;\n    }\n\n    genTableYears();\n    setTableIndex();\n    return function () {\n      var content = useTransition(genYears(), transition.value);\n      var propsData = {\n        \"class\": {\n          'v-date-picker-years': true\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, content);\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VDatePicker/VDatePickerMonths.ts\n\n\nvar VDatePickerMonths = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-date-picker-months',\n  props: {\n    lang: {\n      type: String,\n      \"default\": 'en'\n    },\n    month: [String, Number],\n    year: [String, Number],\n    locale: Array\n  },\n  emits: ['update:month', 'update:year'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var CELLS_IN_ROW = 3;\n    var MONTHS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n    var CURRENT_MONTH = new Date().getMonth();\n    var handlers = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.inject)('handlers');\n    handlers.value = {\n      onNext: function onNext() {\n        return updateYear(true);\n      },\n      onPrev: function onPrev() {\n        return updateYear(false);\n      }\n    };\n    var computedMonth = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)({\n      get: function get() {\n        return props.month !== undefined ? +props.month : CURRENT_MONTH;\n      },\n      set: function set(val) {\n        emit('update:month', val);\n      }\n    });\n\n    function updateYear(isNext) {\n      var year = +props.year + (isNext ? 1 : -1);\n      emit('update:year', year);\n    }\n\n    function genMonthCell(month) {\n      var isSelected = month === computedMonth.value;\n      var propsData = {\n        \"class\": {\n          'v-date-picker-months__cell': true,\n          'v-date-picker-months__cell--selected': isSelected,\n          'v-date-picker-months__cell--current-month': month === CURRENT_MONTH\n        },\n        onClick: function onClick() {\n          return computedMonth.value = month;\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, props.locale[month]);\n    }\n\n    function genMonthRows() {\n      var monthsVNodes = MONTHS.map(genMonthCell);\n      return genTableRows(monthsVNodes, 'v-date-picker-months__row', CELLS_IN_ROW);\n    }\n\n    return function () {\n      var propsData = {\n        \"class\": 'v-date-picker-months'\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, genMonthRows());\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/services/locale.ts\nvar locale = {\n  ru: {\n    months: ['Январь', 'Феввраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],\n    monthsAbbr: ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'],\n    week: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб']\n  },\n  en: {\n    months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    monthsAbbr: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    week: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n  }\n};\n;// CONCATENATED MODULE: ./src/components/VDatePicker/VDatePicker.ts\nfunction VDatePicker_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VDatePicker_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VDatePicker_ownKeys(Object(source), !0).forEach(function (key) { VDatePicker_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VDatePicker_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VDatePicker_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar VDatePicker = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-date-picker',\n  props: VDatePicker_objectSpread({\n    dark: Boolean,\n    disabled: Boolean,\n    clearable: Boolean,\n    readonly: Boolean,\n    typeable: Boolean,\n    mondayFirst: Boolean,\n    today: Boolean,\n    useMls: Boolean,\n    useUtc: Boolean,\n    lang: {\n      type: String,\n      \"default\": 'en'\n    },\n    label: String,\n    prependIcon: String,\n    format: {\n      type: String,\n      \"default\": 'yyyy MM dd D'\n    },\n    rules: Array,\n    value: [String, Date, Number],\n    modelValue: [String, Date, Number],\n    disabledDates: Object,\n    highlighted: Object,\n    contentColor: {\n      type: String,\n      \"default\": 'primary'\n    },\n    color: {\n      type: String,\n      \"default\": 'white'\n    }\n  }, elevationProps()),\n  emits: ['update:value', 'update:modelValue', 'selected'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n    var data = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({\n      year: null,\n      month: null,\n      date: null,\n      day: null,\n      selected: null,\n      tableMonth: null,\n      tableYear: null,\n      convertedDateString: null,\n      isYears: false,\n      isMonths: false,\n      isDates: true,\n      isActive: false\n    });\n\n    var _useColors = useColors(),\n        setTextClassNameColor = _useColors.setTextClassNameColor,\n        setTextCssColor = _useColors.setTextCssColor,\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var _useElevation = useElevation(props),\n        elevationClasses = _useElevation.elevationClasses;\n\n    var localeMonths = locale[props.lang].monthsAbbr;\n    var localeWeek = locale[props.lang].week;\n    var contentColor = props.dark ? 'white' : props.contentColor;\n    var handlers = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)({});\n    var activator = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n    var closeConditional = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(false);\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.provide)('handlers', handlers);\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return {\n        'v-date-picker': true,\n        'v-date-picker--typeable': props.typeable,\n        'v-date-picker--readonly': !props.typeable || props.readonly\n      };\n    });\n    var tableClasses = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDatePicker_objectSpread(VDatePicker_objectSpread(VDatePicker_objectSpread({\n        'v-date-picker__table': true\n      }, elevationClasses.value), props.color ? setBackgroundClassNameColor(props.color) : {}), contentColor ? setTextClassNameColor(contentColor) : {});\n    });\n    var tableStyles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VDatePicker_objectSpread(VDatePicker_objectSpread({}, props.color ? setBackgroundCssColor(props.color) : {}), contentColor ? setTextCssColor(contentColor) : {});\n    });\n    var headerValue = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return data.isYears || data.isMonths ? \"\".concat(data.tableYear) : data.isDates ? \"\".concat(data.tableYear, \" \").concat(localeMonths[data.tableMonth]) : '';\n    });\n    var displayDate = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _data$selected = data.selected,\n          month = _data$selected.month,\n          date = _data$selected.date,\n          day = _data$selected.day;\n      return \"\".concat(localeMonths[month], \" \").concat(date, \" \").concat(localeWeek[day]);\n    });\n    var computedValue = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      var _data$selected2 = data.selected,\n          year = _data$selected2.year,\n          month = _data$selected2.month,\n          date = _data$selected2.date;\n      return new Date(year, month, date);\n    });\n\n    function setInitDate() {\n      if (props.value) setParsedDate(props.value);else if (props.modelValue) setParsedDate(props.modelValue);else setParsedDate();\n\n      if (props.today || props.value || props.modelValue) {\n        data.convertedDateString = convertToFormat();\n      }\n    }\n\n    function onTableChange() {\n      if (data.isYears) {\n        data.isYears = false;\n        return data.isMonths = true;\n      }\n\n      if (data.isMonths) {\n        data.isMonths = false;\n        return data.isYears = true;\n      }\n\n      if (data.isDates) {\n        data.isDates = false;\n        return data.isMonths = true;\n      }\n    }\n\n    function setDataDate(_ref2) {\n      var year = _ref2.year,\n          month = _ref2.month,\n          date = _ref2.date,\n          day = _ref2.day;\n      data.tableMonth = month;\n      data.tableYear = year;\n      data.year = year;\n      data.month = month;\n      data.date = date;\n      data.day = day;\n    }\n\n    function setParsedDate() {\n      var selectedDate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var dateForParsing = selectedDate || new Date();\n      data.selected = parseDate(dateForParsing);\n      !selectedDate && (data.selected[\"default\"] = !selectedDate);\n      setDataDate(data.selected);\n    }\n\n    function onYearUpdate(year) {\n      data.tableYear = year;\n      data.isMonths = true;\n      data.isYears = false;\n    }\n\n    function onMonthUpdate(month) {\n      data.tableMonth = month;\n      data.isMonths = false;\n      data.isYears = false;\n      data.isDates = true;\n    }\n\n    function onDateUpdate(date) {\n      if (!date) return;\n      closeConditional.value = true;\n      data.selected = date;\n      data.tableMonth = date.month;\n      data.tableYear = date.year;\n      data.convertedDateString = convertToFormat();\n      emit('update:value', computedValue.value);\n      emit('update:modelValue', computedValue.value);\n      emit('selected', computedValue.value);\n      requestAnimationFrame(function () {\n        return closeConditional.value = false;\n      });\n    }\n\n    function onDateMonthUpdate(dateObject) {\n      data.tableMonth = dateObject.month;\n      if (dateObject.year) data.tableYear = dateObject.year;\n    }\n\n    function onDateInput(date) {\n      onDateUpdate(stringToDate(date));\n    }\n\n    function stringToDate(date) {\n      if (date.length === 10) {\n        var dateArray = date.trim().split(/\\W/);\n\n        if (dateArray[0].length < 4) {\n          date = dateArray.reverse().join('.');\n        }\n\n        return parseDate(new Date(Date.parse(date)));\n      }\n\n      return null;\n    }\n\n    function convertToFormat() {\n      if (!data.selected) return '';\n      return formatDate(new Date(data.selected.year, data.selected.month, data.selected.date), props.format, locale[props.lang]);\n    }\n\n    function genDisplayValue(value) {\n      var propsData = {\n        \"class\": 'v-date-picker__display-value'\n      };\n      return useTransition((0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('span', propsData, value), 'scale-in-out', 'out-in');\n    }\n\n    function genDatepickerDisplayInner() {\n      var _a;\n\n      var propsData = {\n        \"class\": 'v-date-picker__display-inner'\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [genDisplayValue((_a = data.selected) === null || _a === void 0 ? void 0 : _a.year), genDisplayValue(displayDate.value)]);\n    }\n\n    function genDatepickerDisplay() {\n      var propsData = {\n        \"class\": VDatePicker_objectSpread(VDatePicker_objectSpread({\n          'v-date-picker__display': true\n        }, contentColor ? setBackgroundClassNameColor(contentColor) : {}), props.color ? setTextClassNameColor(props.color) : {}),\n        style: VDatePicker_objectSpread(VDatePicker_objectSpread({}, contentColor ? setBackgroundCssColor(contentColor) : {}), props.color ? setTextCssColor(props.color) : {})\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, genDatepickerDisplayInner());\n    }\n\n    function genDatepickerHeader() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDatepickerHeader, {\n        onNext: function onNext() {\n          return handlers.value.onNext();\n        },\n        onPrev: function onPrev() {\n          return handlers.value.onPrev();\n        },\n        onTable: onTableChange\n      }, {\n        \"default\": function _default() {\n          return headerValue.value;\n        }\n      });\n    }\n\n    function genDatepickerYearsTable() {\n      var propsData = VDatePicker_defineProperty({\n        year: data.tableYear\n      }, 'onUpdate:year', onYearUpdate);\n\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDatePickerYears, propsData);\n    }\n\n    function genDatepickerMonthsTable() {\n      var _h;\n\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDatePickerMonths, (_h = {\n        lang: props.lang,\n        month: data.tableMonth,\n        year: data.tableYear,\n        locale: localeMonths\n      }, VDatePicker_defineProperty(_h, 'onUpdate:month', onMonthUpdate), VDatePicker_defineProperty(_h, 'onUpdate:year', onYearUpdate), _h));\n    }\n\n    function genDatepickerDatesTable() {\n      var _h2;\n\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VDatePickerDates, (_h2 = {\n        locale: localeWeek,\n        mondayFirst: props.mondayFirst,\n        month: data.tableMonth,\n        year: data.tableYear,\n        value: data.selected,\n        disabledDates: props.disabledDates\n      }, VDatePicker_defineProperty(_h2, 'onUpdate:value', onDateUpdate), VDatePicker_defineProperty(_h2, 'onUpdate:month', onDateMonthUpdate), _h2), {\n        date: slots.date && addScopedSlot('date', slots)\n      });\n    }\n\n    function genDatepickerBody() {\n      var propsData = {\n        \"class\": {\n          'v-date-picker__body': true\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, useTransition(data.isYears && genDatepickerYearsTable() || data.isMonths && genDatepickerMonthsTable() || data.isDates && genDatepickerDatesTable(), 'slide-in-left', 'out-in'));\n    }\n\n    function genDatepickerInput() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VTextField, {\n        modelValue: data.convertedDateString,\n        dark: props.dark,\n        label: props.label,\n        readonly: !props.typeable,\n        disabled: props.disabled,\n        prependIcon: props.prependIcon,\n        rules: props.rules,\n        clearable: props.clearable,\n        ref: activator,\n        onInput: onDateInput,\n        onClear: function onClear() {\n          data.convertedDateString = '';\n          emit('update:value', null);\n          emit('update:modelValue', null);\n          emit('selected', null);\n        }\n      });\n    }\n\n    function genDatepickerTable() {\n      var propsData = {\n        \"class\": tableClasses.value,\n        style: tableStyles.value\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [genDatepickerDisplay(), genDatepickerHeader(), genDatepickerBody()]);\n    }\n\n    function genMenu() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VMenu, {\n        activator: activator.value,\n        internalActivator: true,\n        inputActivator: '.v-input__text-field',\n        width: 'auto',\n        maxHeight: 'auto',\n        bottom: props.typeable,\n        openOnClick: true,\n        closeOnClick: closeConditional.value\n      }, {\n        \"default\": function _default() {\n          return genDatepickerTable();\n        }\n      });\n    }\n\n    function genDatepicker() {\n      var propsData = {\n        \"class\": classes.value\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData, [genDatepickerInput(), activator.value && genMenu()]);\n    }\n\n    setInitDate();\n    return function () {\n      return genDatepicker();\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VDatePicker/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VProgressLinear/VProgressLinear.ts\nfunction VProgressLinear_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VProgressLinear_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VProgressLinear_ownKeys(Object(source), !0).forEach(function (key) { VProgressLinear_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VProgressLinear_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VProgressLinear_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar VProgressLinear = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-progress-linear',\n  props: {\n    value: {\n      type: [String, Number],\n      \"default\": null\n    },\n    modelValue: {\n      type: [String, Number],\n      \"default\": null\n    },\n    bufferValue: {\n      type: [String, Number],\n      \"default\": null\n    },\n    height: {\n      type: [Number, String],\n      \"default\": 4\n    },\n    color: {\n      type: String,\n      \"default\": 'primary'\n    },\n    backgroundColor: {\n      type: String,\n      \"default\": 'primary'\n    },\n    backgroundOpacity: {\n      type: String,\n      \"default\": '0.3'\n    },\n    indeterminate: Boolean,\n    reverse: Boolean,\n    rounded: Boolean,\n    stream: Boolean,\n    striped: Boolean\n  },\n  setup: function setup(props) {\n    var _useColors = useColors(),\n        setBackgroundClassNameColor = _useColors.setBackgroundClassNameColor,\n        setBackgroundCssColor = _useColors.setBackgroundCssColor;\n\n    var genProgressBar = function genProgressBar() {\n      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var barWidth = props.value || props.modelValue;\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": VProgressLinear_objectSpread(VProgressLinear_defineProperty({\n          'v-progress-linear__bar': true\n        }, type, !!type), props.color ? setBackgroundClassNameColor(props.color) : {}),\n        style: VProgressLinear_objectSpread({\n          width: !props.indeterminate ? barWidth + '%' : ''\n        }, props.color ? setBackgroundCssColor(props.color) : {})\n      });\n    };\n\n    var genProgressBuffer = function genProgressBuffer() {\n      var bufferWidth = props.value || props.modelValue;\n      var propsData = {\n        \"class\": {\n          'v-progress-linear__buffer': true\n        },\n        style: {\n          width: bufferWidth ? bufferWidth + '%' : ''\n        }\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData);\n    };\n\n    function genProgressBackground() {\n      var propsData = {\n        \"class\": VProgressLinear_objectSpread({\n          'v-progress-linear__background': true\n        }, props.backgroundColor ? setBackgroundClassNameColor(props.backgroundColor) : {}),\n        style: VProgressLinear_objectSpread({\n          opacity: props.backgroundOpacity\n        }, props.backgroundColor ? setBackgroundCssColor(props.backgroundColor) : {})\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', propsData);\n    }\n\n    function genProgressIndeterminate() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": {\n          'v-progress-linear__indeterminate': true\n        }\n      }, [genProgressBar('long'), genProgressBar('short')]);\n    }\n\n    function genProgressLinear() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": 'v-progress-linear',\n        style: {\n          height: \"\".concat(props.height, \"px\")\n        }\n      }, [genProgressBackground(), genProgressBuffer(), props.indeterminate ? genProgressIndeterminate() : genProgressBar()]);\n    }\n\n    return function () {\n      return genProgressLinear();\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VAutocomplete/VAutocomplete.ts\nfunction VAutocomplete_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction VAutocomplete_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? VAutocomplete_ownKeys(Object(source), !0).forEach(function (key) { VAutocomplete_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : VAutocomplete_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction VAutocomplete_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\nvar VAutocomplete = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.defineComponent)({\n  name: 'v-autocomplete',\n  props: VAutocomplete_objectSpread({\n    label: String,\n    items: Array,\n    dark: Boolean,\n    valueKey: String,\n    idKey: String,\n    listColor: String,\n    disabled: Boolean,\n    typeable: Boolean,\n    loading: Boolean,\n    modelValue: {\n      \"default\": null\n    },\n    color: {\n      type: String,\n      \"default\": 'primary'\n    }\n  }, validationProps()),\n  emits: ['input', 'blur', 'focus', 'select', 'update:modelValue', 'update:value'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var state = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.reactive)({\n      focused: false,\n      isMenuActive: false,\n      search: '',\n      select: null\n    });\n\n    var _useColors = useColors(),\n        setTextCssColor = _useColors.setTextCssColor,\n        setTextClassNameColor = _useColors.setTextClassNameColor;\n\n    var activator = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.ref)(null);\n    var classes = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VAutocomplete_objectSpread({\n        'v-autocomplete': true,\n        'v-autocomplete--disabled': props.disabled,\n        'v-autocomplete--focused': state.focused\n      }, props.color ? setTextClassNameColor(props.color) : {});\n    });\n    var styles = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return VAutocomplete_objectSpread({}, props.color ? setTextCssColor(props.color) : {});\n    });\n    var valueProperty = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.modelValue || props.value;\n    });\n    var inputValue = (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.computed)(function () {\n      return props.valueKey && valueProperty.value ? getKeyValueFromTarget(props.valueKey, valueProperty.value) : valueProperty.value;\n    });\n\n    var onFocus = function onFocus() {\n      state.focused = true;\n      state.isMenuActive = true;\n      emit('focus');\n    };\n\n    var onBlur = function onBlur() {\n      if (!valueProperty.value && !state.search) state.search = '';\n      if (!state.search && valueProperty.value) state.search = inputValue.value;\n      state.focused = false;\n      emit('blur');\n    };\n\n    var onInput = function onInput(e) {\n      state.search = e.target.value;\n      emit('input', e.target.value);\n    };\n\n    var onClear = function onClear() {\n      state.search = '';\n      state.select = null;\n      emit('select', null);\n      emit('update:modelValue', null);\n      emit('update:value', null);\n    };\n\n    var onSelect = function onSelect(it) {\n      state.search = props.valueKey ? getKeyValueFromTarget(props.valueKey, it) : it;\n      state.select = it;\n      emit('select', it);\n      emit('update:modelValue', it);\n      emit('update:value', it);\n    };\n\n    var genInput = function genInput() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('input', {\n        value: state.search,\n        disabled: props.disabled,\n        readonly: props.readonly && !props.typeable,\n        ref: activator,\n        \"class\": 'v-autocomplete__input',\n        onInput: onInput,\n        onFocus: onFocus,\n        onBlur: onBlur\n      });\n    };\n\n    var genAutocompleteList = function genAutocompleteList() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VSelectList, {\n        items: props.items,\n        valueKey: props.valueKey,\n        idKey: props.idKey,\n        active: state.isMenuActive,\n        color: props.dark ? 'white' : props.color,\n        listColor: props.listColor,\n        select: state.select,\n        onSelect: onSelect\n      });\n    };\n\n    var genMenu = function genMenu() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VMenu, {\n        activator: activator.value,\n        openOnClick: true,\n        maxHeight: 240,\n        bottom: true,\n        onHide: function onHide() {\n          return state.isMenuActive = state.focused;\n        }\n      }, {\n        \"default\": genAutocompleteList\n      });\n    };\n\n    var genLinearProgress = function genLinearProgress() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": {\n          'v-autocomplete__loading': true\n        }\n      }, (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VProgressLinear, {\n        height: 2,\n        indeterminate: true,\n        color: props.color,\n        backgroundColor: props.color\n      }));\n    };\n\n    var genAutocomplete = function genAutocomplete() {\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)('div', {\n        \"class\": classes.value,\n        style: styles.value\n      }, [genInput(), props.loading && genLinearProgress(), activator.value && genMenu()]);\n    };\n\n    (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.onBeforeMount)(function () {\n      state.select = valueProperty.value;\n      state.search = inputValue.value;\n    });\n    return function () {\n      var propsData = {\n        label: props.label,\n        focused: state.isMenuActive,\n        hasState: !!state.search,\n        dark: props.dark,\n        disabled: props.disabled,\n        clearable: props.clearable,\n        color: props.color,\n        rules: props.rules,\n        value: valueProperty.value || state.search,\n        onClear: onClear\n      };\n      return (0,external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_.h)(VInput, propsData, {\n        'text-field': function textField() {\n          return genAutocomplete();\n        }\n      });\n    };\n  }\n});\n;// CONCATENATED MODULE: ./src/components/VAutocomplete/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VProgressLinear/index.ts\n\n;// CONCATENATED MODULE: ./src/components/VProgressCircular/index.ts\n\n;// CONCATENATED MODULE: ./src/components/index.ts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./src/directives/index.ts\n\n\n;// CONCATENATED MODULE: ./src/library.ts\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n\n\nvar Vueland = /*#__PURE__*/function () {\n  function Vueland(options) {\n    _classCallCheck(this, Vueland);\n\n    Vueland.options = options;\n  }\n\n  _createClass(Vueland, null, [{\n    key: \"install\",\n    value: function install(app) {\n      if (Vueland.installed) return;\n      Vueland.installed = true;\n      Object.keys(components_namespaceObject).forEach(function (key) {\n        if (key && components_namespaceObject[key]) {\n          var component = components_namespaceObject[key];\n          app.component(key, component);\n        }\n      });\n      Object.keys(directives_namespaceObject).forEach(function (key) {\n        if (key && directives_namespaceObject[key]) {\n          app.directive(key, directives_namespaceObject[key]);\n        }\n      });\n      app.provide('$options', Vueland.options);\n    }\n  }]);\n\n  return Vueland;\n}();\nVueland.installed = false;\n;// CONCATENATED MODULE: ./src/index.ts\n\n\n\n/* harmony default export */ var src = (Vueland);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFxQztBQUNuQ29wQixhQUFHLENBQUN0bkIsU0FBSixDQUFjOUIsR0FBZCxFQUFvQi9TLDBCQUFrQixDQUFDK1MsR0FBRCxDQUF0QztBQUNEO0FBQ0YsT0FKRDtBQU1Bb3BCLFNBQUcsQ0FBQzE4QixPQUFKLENBQVksVUFBWixFQUF3Qnk4QixPQUFPLENBQUNuK0IsT0FBaEM7QUFDRDtBQTNCSDs7QUFBQTtBQUFBO0FBQ1NtK0Isb0JBQXFCLEtBQXJCLEM7O0FDTFQ7QUFFQTtBQUNBO0FBRUEsd0NBQWVBLE9BQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2RpcmVjdGl2ZXMvdi1yZXNpemUvaW5kZXgudHM/N2U1NSIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL3NlcnZpY2VzL2JyZWFrcG9pbnRzLnRzPzYzMzUiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy91dGlscy90aG90dGxlLnRzPzc0MTMiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZBcHAvVkFwcC50cz8xODMzIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WQXBwL2luZGV4LnRzP2RkZjUiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy91dGlscy9jb2xvci1wYXJzZXIudHM/ZThiMCIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvc2FibGUvdXNlLWNvbG9ycy50cz8yYmUxIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9zYWJsZS91c2UtZWxldmF0aW9uLnRzPzBlOTciLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb3NhYmxlL3VzZS1wb3NpdGlvbi50cz83ODA1Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvaGVscGVycy9pbmRleC50cz8xNzkzIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WUHJvZ3Jlc3NDaXJjdWxhci9WUHJvZ3Jlc3NDaXJjdWxhci50cz9mYjQ3Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WQnV0dG9uL1ZCdXR0b24udHM/YTY0MSIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkJ1dHRvbi9pbmRleC50cz8wMTg3Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WQ2FyZC9WQ2FyZC50cz85MGI2Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WQ2FyZC9pbmRleC50cz8wYzU1Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WR3JpZC9WUm93LnRzPzhkYzQiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZHcmlkL1ZDb2wudHM/ZjBiMSIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkdyaWQvVkxheW91dC50cz9mYWJlIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WR3JpZC9pbmRleC50cz9hMzRlIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WT3ZlcmxheS9WT3ZlcmxheS50cz8zODk5Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WT3ZlcmxheS9pbmRleC50cz85OTljIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9zYWJsZS91c2Utb3ZlcmxheS50cz9hYTM5Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9zYWJsZS91c2UtdHJhbnNpdGlvbi50cz83OTNkIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9zYWJsZS91c2UtdG9nZ2xlLnRzPzI2YzYiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZNb2RhbC9WTW9kYWwudHM/MDQ5OSIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVk1vZGFsL2luZGV4LnRzP2UzMjciLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb3NhYmxlL3VzZS1hdXRvLXBvc2l0aW9uLnRzP2E4MjkiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb3NhYmxlL3VzZS1hY3RpdmF0b3IudHM/MzhmMiIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvc2FibGUvdXNlLWRldGFjaC50cz82OWQyIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvZGlyZWN0aXZlcy92LWNsaWNrLW91dHNpZGUvaW5kZXgudHM/MDBiNiIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVk1lbnUvVk1lbnUudHM/NjVkMSIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVk1lbnUvaW5kZXgudHM/YWM2NCIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvc2FibGUvdXNlLXZhbGlkYXRpb24udHM/ZWY5YyIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvc2FibGUvdXNlLWlucHV0LXN0YXRlcy50cz8xMWIyIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WTGFiZWwvVkxhYmVsLnRzP2JiOGEiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb3NhYmxlL3VzZS1zaXplLnRzPzkyZTAiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9zZXJ2aWNlcy9zaXplcy50cz9lZWQ1Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WSWNvbi9WSWNvbi50cz82NDk1Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WSW5wdXQvVklucHV0LnRzP2U2NzUiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZUZXh0RmllbGQvVlRleHRGaWVsZC50cz8yNDc3Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WVGV4dEZpZWxkL2luZGV4LnRzPzEzMzgiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZJbnB1dC9pbmRleC50cz9mYzAwIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvc2VydmljZXMvaWNvbnMudHM/NTJmOCIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvc2FibGUvdXNlLWljb25zLnRzPzI4OTciLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZDaGlwL1ZDaGlwLnRzPzY3NGMiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZGaWxlSW5wdXQvVkZpbGVJbnB1dC50cz85MjE0Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WRmlsZUlucHV0L2luZGV4LnRzPzUyY2UiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZMaXN0L1ZMaXN0LnRzP2ZjMjgiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZMaXN0L1ZMaXN0SXRlbS50cz9kODU0Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WTGlzdC9pbmRleC50cz84NDYzIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WU2VsZWN0L1ZTZWxlY3RMaXN0LnRzP2QzNzYiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZTZWxlY3QvVlNlbGVjdC50cz8wMTYyIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WU2VsZWN0L2luZGV4LnRzP2YxZjgiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZGb3JtL1ZGb3JtLnRzPzk5ZTgiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZGb3JtL2luZGV4LnRzPzU0YTYiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZMYWJlbC9pbmRleC50cz9iZjJhIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WQmFkZ2UvVkJhZGdlLnRzPzMxYjYiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZCYWRnZS9pbmRleC50cz9kZWQ5Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy90cmFuc2l0aW9ucy9oZWxwZXJzLnRzPzg0YTQiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL3RyYW5zaXRpb25zL2V4cGFuZC10cmFuc2l0aW9uLnRzP2E4YWEiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL3RyYW5zaXRpb25zL2luZGV4LnRzP2UzMDMiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZHcm91cC9WR3JvdXAudHM/MGQ2NSIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkdyb3VwL2luZGV4LnRzPzVjMzMiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZSZXNpemUvVlJlc2l6ZS50cz81NDIxIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WUmVzaXplL2luZGV4LnRzPzE4MjUiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZJY29uL2luZGV4LnRzPzg3YzQiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZDaGlwL2luZGV4LnRzPzE1NDIiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZDaGVja2JveC9WQ2hlY2tib3gudHM/NzNmOCIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkNoZWNrYm94L2luZGV4LnRzPzAyZDQiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9zZXJ2aWNlcy90cmFuc2l0aW9ucy50cz9kZDU4Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WVG9vbHRpcC9WVG9vbHRpcC50cz8zYjEyIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WVG9vbHRpcC9pbmRleC50cz8wZDU3Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WVG9vbGJhci9WVG9vbGJhci50cz85NTRkIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WVG9vbGJhci9WVG9vbGJhck5hdkJ0bi50cz85NDY1Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WVG9vbGJhci9pbmRleC50cz9jMmJmIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WTmF2aWdhdGlvbi9WTmF2aWdhdGlvbi50cz8zMTlmIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WTmF2aWdhdGlvbi9pbmRleC50cz9mNDQ3Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WTWFpbi9WTWFpbi50cz9hNGQyIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WTWFpbi9pbmRleC50cz8wZTRhIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WVGV4dGFyZWEvVlRleHRhcmVhLnRzP2Q2MTEiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZUZXh0YXJlYS9pbmRleC50cz83NWYzIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WU2tlbGV0b24vVlNrZWxldG9uLnRzPzRmZDUiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZTa2VsZXRvbi9pbmRleC50cz9kNzdhIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WRGF0YVRhYmxlL1ZEYXRhVGFibGVDZWxsLnRzPzlmMmIiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZEYXRhVGFibGUvVkRhdGFUYWJsZUhlYWRlci50cz8wOGFjIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WRGF0YVRhYmxlL1ZEYXRhVGFibGVCb2R5LnRzPzY3NmQiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZEYXRhVGFibGUvVkRhdGFUYWJsZUZvb3Rlci50cz8yZGNlIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WRGF0YVRhYmxlL1ZEYXRhVGFibGUudHM/OGRiNyIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkRhdGFUYWJsZS9pbmRleC50cz8xYWMzIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WRGF0ZVBpY2tlci9WRGF0ZXBpY2tlckhlYWRlci50cz8zYTg3Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WRGF0ZVBpY2tlci91dGlscy50cz84YzBmIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WRGF0ZVBpY2tlci9oZWxwZXJzLnRzPzY4ODciLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZEYXRlUGlja2VyL1ZEYXRlUGlja2VyRGF0ZXMudHM/ZWQzZiIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkRhdGVQaWNrZXIvVkRhdGVQaWNrZXJZZWFycy50cz80NDkxIiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvY29tcG9uZW50cy9WRGF0ZVBpY2tlci9WRGF0ZVBpY2tlck1vbnRocy50cz9kYjA4Iiwid2VicGFjazovL3Z1ZWxhbmQvLi9zcmMvc2VydmljZXMvbG9jYWxlLnRzPzlmYTciLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZEYXRlUGlja2VyL1ZEYXRlUGlja2VyLnRzPzk3M2IiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZEYXRlUGlja2VyL2luZGV4LnRzP2U5ZDYiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZQcm9ncmVzc0xpbmVhci9WUHJvZ3Jlc3NMaW5lYXIudHM/NzMxNCIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVkF1dG9jb21wbGV0ZS9WQXV0b2NvbXBsZXRlLnRzPzVmNzciLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZBdXRvY29tcGxldGUvaW5kZXgudHM/OTJmYyIsIndlYnBhY2s6Ly92dWVsYW5kLy4vc3JjL2NvbXBvbmVudHMvVlByb2dyZXNzTGluZWFyL2luZGV4LnRzPzFjYTciLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL1ZQcm9ncmVzc0NpcmN1bGFyL2luZGV4LnRzPzJkNzEiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9jb21wb25lbnRzL2luZGV4LnRzPzU3MDkiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9kaXJlY3RpdmVzL2luZGV4LnRzPzY2N2YiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9saWJyYXJ5LnRzP2ZlMzIiLCJ3ZWJwYWNrOi8vdnVlbGFuZC8uL3NyYy9pbmRleC50cz8wYmExIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZUJpbmRpbmcgfSBmcm9tICd2dWUnXG5cbmludGVyZmFjZSBSZXNpemVWTm9kZURpcmVjdGl2ZSBleHRlbmRzIERpcmVjdGl2ZUJpbmRpbmcge1xuICB2YWx1ZTogKCkgPT4gdm9pZFxuICBvcHRpb25zOiBib29sZWFuIHwgQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnNcbn1cblxuZXhwb3J0IGNvbnN0IHJlc2l6ZSA9IHtcbiAgbW91bnRlZChlbDogSFRNTEVsZW1lbnQgJiBhbnksIGJpbmRpbmc6IFJlc2l6ZVZOb2RlRGlyZWN0aXZlKSB7XG4gICAgY29uc3QgY2FsbGJhY2sgPSBiaW5kaW5nLnZhbHVlIVxuICAgIGNvbnN0IG9wdGlvbnMgPSBiaW5kaW5nLm9wdGlvbnMgfHwgeyBwYXNzaXZlOiB0cnVlIH1cblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBjYWxsYmFjaywgb3B0aW9ucylcblxuICAgIGVsLl9vblJlc2l6ZSA9IHtcbiAgICAgIGNhbGxiYWNrLFxuICAgICAgb3B0aW9uc1xuICAgIH1cbiAgICBpZiAoIWJpbmRpbmcubW9kaWZpZXJzIHx8ICFiaW5kaW5nLm1vZGlmaWVycy5xdWlldCkge1xuICAgICAgY2FsbGJhY2soKVxuICAgIH1cbiAgfSxcblxuICBiZWZvcmVVbm1vdW50KGVsKSB7XG4gICAgaWYgKCFlbC5fb25SZXNpemUpIHJldHVyblxuXG4gICAgY29uc3QgeyBjYWxsYmFjaywgb3B0aW9ucyB9ID0gZWwuX29uUmVzaXplXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGNhbGxiYWNrLCBvcHRpb25zKVxuICAgIGRlbGV0ZSBlbC5fb25SZXNpemVcbiAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IGJyZWFrcG9pbnRzID0ge1xuICBzbTogNTc2LFxuICBtZDogNzY4LFxuICBsZzogOTkyLFxuICB4bDogMTIwMCxcbn1cbiIsImV4cG9ydCBjb25zdCB0aHJvdHRsZSA9IChmbiwgdGltZW91dCkgPT4ge1xuICBsZXQgbGFzdFRoaXM6IGFueSA9IG51bGxcbiAgbGV0IGxhc3RBcmdzOiBhbnkgPSBudWxsXG4gIGxldCBpc1Rocm90dGxlZCA9IGZhbHNlXG5cbiAgZnVuY3Rpb24gd3JhcHBlciguLi5hcmdzKSB7XG4gICAgaWYgKGlzVGhyb3R0bGVkKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBsYXN0VGhpcyA9IHRoaXNcbiAgICAgIGxhc3RBcmdzID0gYXJnc1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgbGFzdEFyZ3MgJiYgZm4uY2FsbChsYXN0VGhpcywgLi4ubGFzdEFyZ3MpXG5cbiAgICBpc1Rocm90dGxlZCA9IHRydWVcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaXNUaHJvdHRsZWQgPSBmYWxzZVxuXG4gICAgICBpZiAobGFzdEFyZ3MpIHtcbiAgICAgICAgd3JhcHBlci5hcHBseShsYXN0VGhpcywgbGFzdEFyZ3MpXG4gICAgICB9XG4gICAgICBsYXN0VGhpcyA9IG51bGxcbiAgICAgIGxhc3RBcmdzID0gbnVsbFxuICAgIH0sIHRpbWVvdXQpXG4gIH1cblxuICByZXR1cm4gd3JhcHBlclxufVxuIiwiaW1wb3J0IHtcbiAgZGVmaW5lQ29tcG9uZW50LFxuICBwcm92aWRlLFxuICByZWFjdGl2ZSxcbiAgaCxcbiAgd2l0aERpcmVjdGl2ZXMsXG4gIG9uTW91bnRlZCxcbn0gZnJvbSAndnVlJ1xuXG4vLyBEaXJlY3RpdmVzXG5pbXBvcnQgeyByZXNpemUgfSBmcm9tICcuLi8uLi9kaXJlY3RpdmVzJ1xuXG4vLyBTZXJ2aWNlc1xuaW1wb3J0IHsgYnJlYWtwb2ludHMgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9icmVha3BvaW50cydcblxuLy8gVXRpbHNcbmltcG9ydCB7IHRocm90dGxlIH0gZnJvbSAnLi4vLi4vdXRpbHMvdGhvdHRsZSdcblxuLy8gVHlwZXNcbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvYmFzZSdcblxuaW50ZXJmYWNlIEFwcFN0YXRlIHtcbiAgY3VycmVudDogTWF5YmU8J3hsJyB8ICdsZycgfCAnbWQnIHwgJ3NtJz5cbiAgeGxBbmRMZXNzOiBib29sZWFuXG4gIGxnQW5kTGVzczogYm9vbGVhblxuICBtZEFuZExlc3M6IGJvb2xlYW5cbiAgc21BbmRMZXNzOiBib29sZWFuXG59XG5cbmV4cG9ydCBjb25zdCBWQXBwID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtYXBwJyxcbiAgZGlyZWN0aXZlczoge1xuICAgIHJlc2l6ZSxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBnbG9iYWw6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgfSxcbiAgfSxcbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSkge1xuICAgIGNvbnN0IFRIUk9UVExJTkdfVElNRU9VVCA9IDYwXG5cbiAgICBjb25zdCBzdGF0ZSA9IHJlYWN0aXZlPEFwcFN0YXRlPih7XG4gICAgICBjdXJyZW50OiBudWxsLFxuICAgICAgeGxBbmRMZXNzOiBmYWxzZSxcbiAgICAgIGxnQW5kTGVzczogZmFsc2UsXG4gICAgICBtZEFuZExlc3M6IGZhbHNlLFxuICAgICAgc21BbmRMZXNzOiBmYWxzZSxcbiAgICB9KVxuXG4gICAgcHJvdmlkZSgnYnJlYWtwb2ludHMnLCBzdGF0ZSlcblxuICAgIGNvbnN0IHNldEN1cnJlbnRCcmVha3BvaW50TmFtZSA9IChzY3JlZW4pID0+IHtcbiAgICAgIGlmIChzY3JlZW4gPj0gYnJlYWtwb2ludHMueGwpIHtcbiAgICAgICAgcmV0dXJuIChzdGF0ZS5jdXJyZW50ID0gJ3hsJylcbiAgICAgIH1cbiAgICAgIGlmIChzY3JlZW4gPj0gYnJlYWtwb2ludHMubGcgJiYgc2NyZWVuIDwgYnJlYWtwb2ludHMueGwpIHtcbiAgICAgICAgcmV0dXJuIChzdGF0ZS5jdXJyZW50ID0gJ2xnJylcbiAgICAgIH1cbiAgICAgIGlmIChzY3JlZW4gPj0gYnJlYWtwb2ludHMubWQgJiYgc2NyZWVuIDwgYnJlYWtwb2ludHMubGcpIHtcbiAgICAgICAgcmV0dXJuIChzdGF0ZS5jdXJyZW50ID0gJ21kJylcbiAgICAgIH1cbiAgICAgIGlmIChzY3JlZW4gPj0gYnJlYWtwb2ludHMuc20gJiYgc2NyZWVuIDwgYnJlYWtwb2ludHMubWQpIHtcbiAgICAgICAgcmV0dXJuIChzdGF0ZS5jdXJyZW50ID0gJ3NtJylcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBjb25zdCBzZXRJbnRlcnZhbHMgPSAoc2NyZWVuKSA9PiB7XG4gICAgICBjb25zdCB7IHhsLCBsZywgbWQsIHNtIH0gPSBicmVha3BvaW50c1xuXG4gICAgICBzdGF0ZS54bEFuZExlc3MgPSBzY3JlZW4gPD0geGwgJiYgc2NyZWVuID4gbGdcbiAgICAgIHN0YXRlLmxnQW5kTGVzcyA9IHNjcmVlbiA8PSBsZyAmJiBzY3JlZW4gPiBtZFxuICAgICAgc3RhdGUubWRBbmRMZXNzID0gc2NyZWVuIDw9IG1kICYmIHNjcmVlbiA+IHNtXG4gICAgICBzdGF0ZS5zbUFuZExlc3MgPSBzY3JlZW4gPD0gc21cbiAgICB9XG5cbiAgICBjb25zdCBzZXRTaXplcyA9ICgpID0+IHtcbiAgICAgIC8vIHRoZSBcImdsb2JhbFwiIHByb3AgYWxsb3dzIHRvIHRlc3QgdGhlXG4gICAgICAvLyBjb21wb25lbnQgd2l0aG91dCB1c2luZyBtb2NrdXBzXG4gICAgICBjb25zdCBzY3JlZW4gPSBwcm9wcy5nbG9iYWw/LmlubmVyV2lkdGggfHwgd2luZG93LmlubmVyV2lkdGhcblxuICAgICAgc2V0Q3VycmVudEJyZWFrcG9pbnROYW1lKHNjcmVlbilcbiAgICAgIHNldEludGVydmFscyhzY3JlZW4pXG4gICAgfVxuXG4gICAgY29uc3QgdGhyb3R0bGVkUmVzaXplTGlzdGVuZXIgPSB0aHJvdHRsZShcbiAgICAgIHNldFNpemVzLFxuICAgICAgVEhST1RUTElOR19USU1FT1VULFxuICAgICkgYXMgKCkgPT4gdm9pZFxuXG4gICAgY29uc3QgZ2VuQXBwV3JhcHBlciA9ICgpID0+IHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7IGNsYXNzOiAndi1hcHAtLXdyYXBwZXInIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCksXG4gICAgICB9KVxuICAgIH1cblxuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICBzZXRTaXplcygpXG4gICAgfSlcblxuICAgIHJldHVybiAoKSA9PlxuICAgICAgd2l0aERpcmVjdGl2ZXMoXG4gICAgICAgIGgoJ2RpdicsIHsgY2xhc3M6ICd2LWFwcCcgfSwgZ2VuQXBwV3JhcHBlcigpKSxcbiAgICAgICAgW1tyZXNpemUsIHRocm90dGxlZFJlc2l6ZUxpc3RlbmVyXV0sXG4gICAgICApXG4gIH0sXG59KVxuIiwiZXhwb3J0ICogZnJvbSAnLi9WQXBwJyIsImV4cG9ydCBmdW5jdGlvbiBpc0Nzc0NvbG9yKGNvbG9yOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuICEhY29sb3IubWF0Y2goL14oI3x2YXJcXCgtLXwocmdifGhzbClhP1xcKCkvKTtcbn1cbiIsImltcG9ydCB7IGlzQ3NzQ29sb3IgfSBmcm9tICcuLi91dGlscy9jb2xvci1wYXJzZXInXG5cbmV4cG9ydCBjb25zdCBjb2xvclByb3BzID0gKGRlZmF1bHRDb2xvcjogc3RyaW5nID0gJycpID0+ICh7XG4gIGNvbG9yOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6IGRlZmF1bHRDb2xvcixcbiAgfSxcbn0pXG5cbmV4cG9ydCBjb25zdCB1c2VDb2xvcnMgPSAoKSA9PiB7XG4gIGNvbnN0IHNldFRleHRDbGFzc05hbWVDb2xvciA9IChjb2xvcjogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgY2xhc3NlcyA9IHt9XG5cbiAgICBpZiAoIWlzQ3NzQ29sb3IoY29sb3IpKSB7XG4gICAgICBjb25zdCBbY29sb3JOYW1lLCBjb2xvck1vZGlmaWVyXSA9IGNvbG9yLnRyaW0oKS5zcGxpdCgnICcsIDIpXG4gICAgICBjb2xvck5hbWUgJiYgKGNsYXNzZXNbYCR7Y29sb3JOYW1lfS0tdGV4dGBdID0gdHJ1ZSlcbiAgICAgIGNvbG9yTW9kaWZpZXIgJiYgKGNsYXNzZXNbYHRleHQtLSR7Y29sb3JNb2RpZmllcn1gXSA9IHRydWUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGNsYXNzZXNcbiAgfVxuXG4gIGNvbnN0IHNldFRleHRDc3NDb2xvciA9IChjb2xvcjogc3RyaW5nKTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9PiB7XG4gICAgY29uc3Qgc3R5bGVzOiBhbnkgPSB7fVxuXG4gICAgaWYgKGlzQ3NzQ29sb3IoY29sb3IpKSB7XG4gICAgICBzdHlsZXMuY29sb3IgPSBjb2xvclxuICAgIH1cblxuICAgIHJldHVybiBzdHlsZXNcbiAgfVxuXG4gIGNvbnN0IHNldEJhY2tncm91bmRDc3NDb2xvciA9IChjb2xvcjogc3RyaW5nKSA9PiB7XG4gICAgY29uc3Qgc3R5bGVzID0ge31cblxuICAgIGlmIChpc0Nzc0NvbG9yKGNvbG9yKSkge1xuICAgICAgc3R5bGVzWydiYWNrZ3JvdW5kLWNvbG9yJ10gPSBjb2xvclxuICAgICAgc3R5bGVzWydib3JkZXItY29sb3InXSA9IGNvbG9yXG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlc1xuICB9XG5cbiAgY29uc3Qgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yID0gKGNvbG9yOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBjbGFzc2VzID0ge31cblxuICAgIGlmICghaXNDc3NDb2xvcihjb2xvcikpIHtcbiAgICAgIGNvbnN0IFtjb2xvck5hbWUsIGNvbG9yTW9kaWZpZXJdID0gY29sb3IudHJpbSgpLnNwbGl0KCcgJywgMilcbiAgICAgIGNvbG9yTmFtZSAmJiAoY2xhc3Nlc1tjb2xvck5hbWVdID0gdHJ1ZSlcbiAgICAgIGNvbG9yTW9kaWZpZXIgJiYgKGNsYXNzZXNbY29sb3JNb2RpZmllcl0gPSB0cnVlKVxuICAgIH1cblxuICAgIHJldHVybiBjbGFzc2VzXG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldFRleHRDc3NDb2xvcixcbiAgICBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IsXG4gICAgc2V0QmFja2dyb3VuZENzc0NvbG9yLFxuICAgIHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcixcbiAgfVxufVxuIiwiLy8gVnVlIEFQSVxuaW1wb3J0IHsgY29tcHV0ZWQsIENvbXB1dGVkUmVmIH0gZnJvbSAndnVlJ1xuXG50eXBlIEVsZXZldGFibGUgPSB7XG4gIGVsZXZhdGlvbkNsYXNzZXM6IENvbXB1dGVkUmVmPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PlxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGVsZXZhdGlvblByb3BzKCkge1xuICByZXR1cm4ge1xuICAgIGVsZXZhdGlvbjogW1N0cmluZywgTnVtYmVyXSxcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlRWxldmF0aW9uKHByb3BzOiBhbnkpOiBFbGV2ZXRhYmxlIHtcbiAgY29uc3QgZWxldmF0aW9uQ2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgW2BlbGV2YXRpb24tJHtwcm9wcy5lbGV2YXRpb259YF06ICEhcHJvcHMuZWxldmF0aW9uLFxuICAgIH1cbiAgfSlcblxuICByZXR1cm4geyBlbGV2YXRpb25DbGFzc2VzIH1cbn1cbiIsIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgQ29tcHV0ZWRSZWYgfSBmcm9tICd2dWUnXG5cbnR5cGUgUG9zaXRpb25hYmxlID0ge1xuICBwb3NpdGlvbkNsYXNzZXM6IENvbXB1dGVkUmVmPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PlxufVxuXG5leHBvcnQgY29uc3QgcG9zaXRpb25Qcm9wcyA9ICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBhYnNvbHV0ZTogQm9vbGVhbixcbiAgICBsZWZ0OiBCb29sZWFuLFxuICAgIHJpZ2h0OiBCb29sZWFuLFxuICAgIHRvcDogQm9vbGVhbixcbiAgICBib3R0b206IEJvb2xlYW4sXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHVzZVBvc2l0aW9uID0gKHByb3BzOiBhbnkpOiBQb3NpdGlvbmFibGUgPT4ge1xuICBjb25zdCBwb3NpdGlvbkNsYXNzZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICdwb3NpdGlvbi0tYWJzb2x1dGUnOiBwcm9wcy5hYnNvbHV0ZSxcbiAgICAgICd0by0tbGVmdCc6IHByb3BzLmxlZnQsXG4gICAgICAndG8tLXJpZ2h0JzogcHJvcHMucmlnaHQsXG4gICAgICAndG8tLXRvcCc6IHByb3BzLnRvcCxcbiAgICAgICd0by0tYm90dG9tJzogcHJvcHMuYm90dG9tLFxuICAgIH1cbiAgfSlcblxuICByZXR1cm4geyBwb3NpdGlvbkNsYXNzZXMgfVxufVxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoLCBTbG90cyB9IGZyb20gJ3Z1ZSdcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwgPSAoXG4gIGM6IHN0cmluZyxcbiAgZWwgPSAnZGl2JyxcbiAgbmFtZTogc3RyaW5nID0gJycsXG4pID0+IHtcbiAgcmV0dXJuIGRlZmluZUNvbXBvbmVudCh7XG4gICAgbmFtZTogbmFtZSB8fCBjLnJlcGxhY2UoL19fL2csICctJyksXG5cbiAgICBzZXR1cChfLCB7IHNsb3RzIH0pIHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICBbYy50cmltKCldOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gKCkgPT4gaChlbCwgcHJvcHNEYXRhLCBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKSlcbiAgICB9LFxuICB9KVxufVxuXG5leHBvcnQgY29uc3QgYWRkT25jZUxpc3RlbmVyID0gKFxuICBlbDogRXZlbnRUYXJnZXQsXG4gIGV2ZW50TmFtZTogc3RyaW5nLFxuICBjYjogKGV2ZW50OiBFdmVudCkgPT4gdm9pZCxcbiAgb3B0aW9uczogYm9vbGVhbiB8IEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zID0gZmFsc2UsXG4pOiB2b2lkID0+IHtcbiAgY29uc3Qgb25jZSA9IChldmVudDogRXZlbnQpID0+IHtcbiAgICBjYihldmVudClcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgb25jZSwgb3B0aW9ucylcbiAgfVxuXG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBvbmNlLCBvcHRpb25zKVxufVxuXG5leHBvcnQgY29uc3QgY29udmVydFRvVW5pdCA9IChcbiAgc3RyOiBzdHJpbmcgfCBudW1iZXIsXG4gIHVuaXQgPSAncHgnLFxuKTogc3RyaW5nID0+IHtcbiAgaWYgKGlzTmFOKCtzdHIhKSkge1xuICAgIHJldHVybiBTdHJpbmcoc3RyKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBgJHsgTnVtYmVyKHN0cikgfSR7IHVuaXQgfWBcbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgd2FybmluZyA9ICh3YXJuaW5nVGV4dCkgPT4ge1xuICBjb25zb2xlLndhcm4od2FybmluZ1RleHQpXG59XG5cbmV4cG9ydCBjb25zdCBjb3B5V2l0aG91dExpbmsgPSAob2JqKSA9PiB7XG4gIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpXG59XG5cbmV4cG9ydCBjb25zdCBhZGRTY29wZWRTbG90ID0gKHNsb3ROYW1lOiBzdHJpbmcsIHNsb3RzOiBTbG90cykgPT4ge1xuICByZXR1cm4gKHNjb3BlZCkgPT4ge1xuICAgIGNvbnN0IGFyZzogYW55ID0geyAuLi5zY29wZWQgfVxuXG4gICAgcmV0dXJuIHNsb3RzW3Nsb3ROYW1lXSAmJiBzbG90c1tzbG90TmFtZV0hKGFyZylcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZ2V0S2V5VmFsdWVGcm9tVGFyZ2V0ID0gPFQ+KFxuICB2YWx1ZUtleTogc3RyaW5nLFxuICB0YXJnZXQ6IFQsXG4pOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gdmFsdWVLZXkuc3BsaXQoJy4nKS5yZWR1Y2UoKGFjYywgaXQpID0+IGFjY1tpdF0sIHRhcmdldClcbn1cblxuZXhwb3J0IGNvbnN0IG1hcFRvVmFsQXJyYXkgPSAobWFwKTogYW55W10gPT4gQXJyYXkuZnJvbShtYXAudmFsdWVzKCkpXG5cbmV4cG9ydCBjb25zdCB1bmlxdWVBcnJheSA9IDxUPihhcnIpOiBBcnJheTxUPiA9PiB7XG4gIHJldHVybiBPYmplY3QudmFsdWVzKGFyci5yZWR1Y2UoKG1hcCwgaXQpID0+IHtcbiAgICBpZiAoIW1hcFtpdC5uYW1lXSkgbWFwW2l0Lm5hbWVdID0gaXRcbiAgICByZXR1cm4gbWFwXG4gIH0sIHt9KSlcbn1cblxuZXhwb3J0IGNvbnN0IGdldFN0cmluZ0tleXNWYWx1ZSA9IChzdHI6IHN0cmluZywgdmFsdWU6IGFueSkgPT4ge1xuICByZXR1cm4gc3RyLnNwbGl0KCcuJykucmVkdWNlKChhY2MsIGl0KSA9PiBhY2NbaXRdLCB2YWx1ZSlcbn1cblxuZXhwb3J0IGNvbnN0IHRvQ2FtZWxDYXNlID0gKC4uLmFyZ3M6IHN0cmluZ1tdKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIGFyZ3MucmVkdWNlKChyZXMsIHMsIGkpID0+IHtcbiAgICBpZiAoaSA9PT0gMCkgcmVzICs9IHNcbiAgICBlbHNlIHJlcyArPSBzWzBdLnRvVXBwZXJDYXNlKCkgKyBzLnNsaWNlKDEpXG4gICAgcmV0dXJuIHJlc1xuICB9LCAnJylcbn1cbiIsImltcG9ydCB7IGgsIGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnXG5cbi8vIEVmZmVjdHNcbmltcG9ydCB7IGNvbG9yUHJvcHMsIHVzZUNvbG9ycyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5cbmV4cG9ydCBjb25zdCBWUHJvZ3Jlc3NDaXJjdWxhciA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LXByb2dyZXNzLWNpcmN1bGFyJyxcbiAgcHJvcHM6IHtcbiAgICBpbmRldGVybWluYXRlOiBCb29sZWFuLFxuICAgIHNpemU6IHtcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgICBkZWZhdWx0OiAzMixcbiAgICB9LFxuICAgIHdpZHRoOiB7XG4gICAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgICAgZGVmYXVsdDogNCxcbiAgICB9LFxuICAgIHZhbHVlOiB7XG4gICAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgICAgZGVmYXVsdDogMCxcbiAgICB9LFxuICAgIHJvdGF0ZToge1xuICAgICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICAgIGRlZmF1bHQ6IDAsXG4gICAgfSxcbiAgICAuLi5jb2xvclByb3BzKCksXG4gIH0sXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICBjb25zdCByYWRpdXMgPSAyMFxuXG4gICAgY29uc3QgeyBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IsIHNldFRleHRDc3NDb2xvciB9ID0gdXNlQ29sb3JzKClcblxuICAgIGNvbnN0IG5vcm1hbGl6ZWRWYWx1ZSA9IGNvbXB1dGVkPG51bWJlcj4oKCkgPT4ge1xuICAgICAgaWYgKHByb3BzLnZhbHVlIDwgMCkgcmV0dXJuIDBcblxuICAgICAgaWYgKHByb3BzLnZhbHVlID4gMTAwKSByZXR1cm4gMTAwXG5cbiAgICAgIHJldHVybiBwYXJzZUZsb2F0KHByb3BzLnZhbHVlIGFzIHN0cmluZylcbiAgICB9KVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtcHJvZ3Jlc3MtY2lyY3VsYXInOiB0cnVlLFxuICAgICAgJ3YtcHJvZ3Jlc3MtY2lyY3VsYXItLWluZGV0ZXJtaW5hdGUnOiBwcm9wcy5pbmRldGVybWluYXRlLFxuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0VGV4dENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSBjb21wdXRlZDxudW1iZXI+KCgpID0+IHtcbiAgICAgIHJldHVybiAyICogTWF0aC5QSSAqIHJhZGl1c1xuICAgIH0pXG5cbiAgICBjb25zdCBzdHJva2VEYXNoQXJyYXkgPSBjb21wdXRlZDxudW1iZXI+KCgpID0+IHtcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKGNpcmN1bWZlcmVuY2UudmFsdWUgKiAxMDAwKSAvIDEwMDBcbiAgICB9KVxuXG4gICAgY29uc3Qgc3Ryb2tlRGFzaE9mZnNldCA9IGNvbXB1dGVkPHN0cmluZz4oKCkgPT4ge1xuICAgICAgcmV0dXJuICgoMTAwIC0gbm9ybWFsaXplZFZhbHVlLnZhbHVlKSAvIDEwMCkgKiBjaXJjdW1mZXJlbmNlLnZhbHVlICsgJ3B4J1xuICAgIH0pXG5cbiAgICBjb25zdCB2aWV3Qm94U2l6ZSA9IGNvbXB1dGVkPG51bWJlcj4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHJhZGl1cyAvICgxIC0gTnVtYmVyKHByb3BzLndpZHRoKSAvICtwcm9wcy5zaXplKVxuICAgIH0pXG5cbiAgICBjb25zdCBzdHJva2VXaWR0aCA9IGNvbXB1dGVkPG51bWJlcj4oKCkgPT4ge1xuICAgICAgcmV0dXJuIChOdW1iZXIocHJvcHMud2lkdGgpIC8gK3Byb3BzLnNpemUpICogdmlld0JveFNpemUudmFsdWUgKiAyXG4gICAgfSlcblxuICAgIGNvbnN0IHN0eWxlcyA9IGNvbXB1dGVkPG9iamVjdD4oKCkgPT4gKHtcbiAgICAgIHdpZHRoOiBjb252ZXJ0VG9Vbml0KHByb3BzLnNpemUpLFxuICAgICAgaGVpZ2h0OiBjb252ZXJ0VG9Vbml0KHByb3BzLnNpemUpLFxuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0VGV4dENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IHN2Z1N0eWxlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHJhbnNmb3JtOiBgcm90YXRlKCR7K3Byb3BzLnJvdGF0ZX1kZWcpYCxcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgZnVuY3Rpb24gZ2VuQ2lyY2xlKG5hbWU6IHN0cmluZywgb2Zmc2V0OiBzdHJpbmcgfCBudW1iZXIpOiBWTm9kZSB7XG4gICAgICByZXR1cm4gaCgnY2lyY2xlJywge1xuICAgICAgICBjbGFzczogYHYtcHJvZ3Jlc3MtY2lyY3VsYXJfXyR7bmFtZX1gLFxuICAgICAgICBmaWxsOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICBjeDogMiAqIHZpZXdCb3hTaXplLnZhbHVlLFxuICAgICAgICBjeTogMiAqIHZpZXdCb3hTaXplLnZhbHVlLFxuICAgICAgICByOiByYWRpdXMsXG4gICAgICAgICdzdHJva2Utd2lkdGgnOiBzdHJva2VXaWR0aC52YWx1ZSxcbiAgICAgICAgJ3N0cm9rZS1kYXNoYXJyYXknOiBzdHJva2VEYXNoQXJyYXkudmFsdWUsXG4gICAgICAgICdzdHJva2UtZGFzaG9mZnNldCc6IG9mZnNldCxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuU3ZnID0gKCkgPT4ge1xuICAgICAgY29uc3QgY2hpbGRyZW4gPSBbXG4gICAgICAgIHByb3BzLmluZGV0ZXJtaW5hdGUgfHwgZ2VuQ2lyY2xlKCd1bmRlcmxheScsIDApLFxuICAgICAgICBnZW5DaXJjbGUoJ292ZXJsYXknLCBzdHJva2VEYXNoT2Zmc2V0LnZhbHVlKSxcbiAgICAgIF1cblxuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICB4bWxuczogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgICAgICAgdmlld0JveDogYCR7dmlld0JveFNpemUudmFsdWV9ICR7dmlld0JveFNpemUudmFsdWV9ICR7XG4gICAgICAgICAgMiAqIHZpZXdCb3hTaXplLnZhbHVlXG4gICAgICAgIH0gJHsyICogdmlld0JveFNpemUudmFsdWV9YCxcblxuICAgICAgICBzdHlsZTogc3ZnU3R5bGUudmFsdWUsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdzdmcnLCBwcm9wc0RhdGEsIGNoaWxkcmVuKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkluZm8gPSAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiAndi1wcm9ncmVzcy1jaXJjdWxhcl9faW5mbycsXG4gICAgICB9XG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKSlcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgc3R5bGU6IHN0eWxlcy52YWx1ZSxcbiAgICAgIH1cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIFtnZW5TdmcoKSwgZ2VuSW5mbygpXSlcbiAgICB9XG4gIH0sXG59KVxuIiwiLy8gVnVlIEFQSVxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcblxuLy8gQ29tcG9zYWJsZVxuaW1wb3J0IHsgdXNlQ29sb3JzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtY29sb3JzJ1xuaW1wb3J0IHsgZWxldmF0aW9uUHJvcHMsIHVzZUVsZXZhdGlvbiB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWVsZXZhdGlvbidcbmltcG9ydCB7IHVzZVBvc2l0aW9uIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtcG9zaXRpb24nXG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZQcm9ncmVzc0NpcmN1bGFyIH0gZnJvbSAnLi4vVlByb2dyZXNzQ2lyY3VsYXInXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gJ3Z1ZSdcblxuLy8gSGVscGVyc1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5cbmV4cG9ydCBjb25zdCBWQnV0dG9uID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtYnV0dG9uJyxcbiAgcHJvcHM6IHtcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICBvdXRsaW5lZDogQm9vbGVhbixcbiAgICByb3VuZGVkOiBCb29sZWFuLFxuICAgIHJvdW5kOiBCb29sZWFuLFxuICAgIGFic29sdXRlOiBCb29sZWFuLFxuICAgIGxvYWRpbmc6IEJvb2xlYW4sXG4gICAgbGVmdDogQm9vbGVhbixcbiAgICByaWdodDogQm9vbGVhbixcbiAgICB0ZXh0OiBCb29sZWFuLFxuICAgIGRhcms6IEJvb2xlYW4sXG4gICAgbGFiZWw6IFN0cmluZyxcbiAgICB3aWR0aDogW1N0cmluZywgTnVtYmVyXSxcbiAgICBjb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2dyZXkgbGlnaHRlbi0xJyxcbiAgICB9LFxuICAgIC4uLmVsZXZhdGlvblByb3BzKCksXG4gIH0gYXMgYW55LFxuICBlbWl0czogWydjbGljayddLFxuXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzLCBlbWl0IH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3Qge1xuICAgICAgc2V0VGV4dENsYXNzTmFtZUNvbG9yLFxuICAgICAgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yLFxuICAgICAgc2V0QmFja2dyb3VuZENzc0NvbG9yLFxuICAgICAgc2V0VGV4dENzc0NvbG9yLFxuICAgIH0gPSB1c2VDb2xvcnMoKVxuXG4gICAgY29uc3QgeyBlbGV2YXRpb25DbGFzc2VzIH0gPSB1c2VFbGV2YXRpb24ocHJvcHMpXG5cbiAgICBjb25zdCB7IHBvc2l0aW9uQ2xhc3NlcyB9ID0gdXNlUG9zaXRpb24ocHJvcHMpXG5cbiAgICBjb25zdCBpc0ZsYXQgPSBjb21wdXRlZDxib29sZWFuPigoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMudGV4dCB8fCBwcm9wcy5vdXRsaW5lZFxuICAgIH0pXG5cbiAgICBjb25zdCBpc0xvYWRhYmxlID0gY29tcHV0ZWQ8Ym9vbGVhbj4oKCkgPT4ge1xuICAgICAgcmV0dXJuICFwcm9wcy50ZXh0ICYmICFwcm9wcy5vdXRsaW5lZCAmJiBwcm9wcy5sb2FkaW5nXG4gICAgfSlcblxuICAgIGNvbnN0IGlzRWxldmV0YWJsZSA9IGNvbXB1dGVkPGJvb2xlYW4+KCgpID0+IHtcbiAgICAgIHJldHVybiAhaXNMb2FkYWJsZS52YWx1ZSAmJiAhcHJvcHMuZGlzYWJsZWRcbiAgICB9KVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiB7XG4gICAgICBjb25zdCBlbGV2YXRpb25zID0gaXNFbGV2ZXRhYmxlLnZhbHVlID8gZWxldmF0aW9uQ2xhc3Nlcy52YWx1ZSA6IHt9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgICd2LWJ1dHRvbic6IHRydWUsXG4gICAgICAgICd2LWJ1dHRvbi0tdGV4dCc6IHByb3BzLnRleHQgfHwgcHJvcHMub3V0bGluZWQsXG4gICAgICAgICd2LWJ1dHRvbi0tb3V0bGluZWQnOiBwcm9wcy5vdXRsaW5lZCxcbiAgICAgICAgJ3YtYnV0dG9uLS1yb3VuZGVkJzogIXByb3BzLnJvdW5kICYmIHByb3BzLnJvdW5kZWQsXG4gICAgICAgICd2LWJ1dHRvbi0tcm91bmQnOiBwcm9wcy5yb3VuZCxcbiAgICAgICAgJ3YtYnV0dG9uLS1kaXNhYmxlZCc6IHByb3BzLmRpc2FibGVkIHx8IGlzTG9hZGFibGUudmFsdWUsXG4gICAgICAgICd2LWJ1dHRvbi0tbG9hZGluZyc6IHByb3BzLmxvYWRpbmcsXG4gICAgICAgIC4uLmVsZXZhdGlvbnMsXG4gICAgICAgIC4uLnBvc2l0aW9uQ2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgLi4uKHByb3BzLmNvbG9yICYmIGlzRmxhdC52YWx1ZVxuICAgICAgICAgID8gc2V0VGV4dENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKVxuICAgICAgICAgIDoge30pLFxuICAgICAgICAuLi4ocHJvcHMuY29sb3IgJiYgIWlzRmxhdC52YWx1ZVxuICAgICAgICAgID8gc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKVxuICAgICAgICAgIDoge30pLFxuICAgICAgfVxuICAgIH0pXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCB3aWR0aCA9IHByb3BzLndpZHRoIHx8IDQwXG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoOiAocHJvcHMud2lkdGggfHwgcHJvcHMucm91bmQpICYmIGNvbnZlcnRUb1VuaXQod2lkdGgpLFxuICAgICAgICBoZWlnaHQ6IHByb3BzLnJvdW5kICYmIGNvbnZlcnRUb1VuaXQod2lkdGgpLFxuICAgICAgICAuLi4ocHJvcHMuY29sb3IgJiYgaXNGbGF0LnZhbHVlID8gc2V0VGV4dENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICAgICAgLi4uKHByb3BzLmNvbG9yICYmICFpc0ZsYXQudmFsdWVcbiAgICAgICAgICA/IHNldEJhY2tncm91bmRDc3NDb2xvcihwcm9wcy5jb2xvcilcbiAgICAgICAgICA6IHt9KSxcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgY29uc3QgZ2VuTG9hZGVyID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKFxuICAgICAgICAnc3BhbicsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzczogJ3YtYnV0dG9uX19sb2FkZXInLFxuICAgICAgICB9LFxuICAgICAgICAoc2xvdHMubG9hZGluZyAmJiBzbG90cy5sb2FkaW5nKCkpIHx8XG4gICAgICAgIGgoVlByb2dyZXNzQ2lyY3VsYXIsIHtcbiAgICAgICAgICBpbmRldGVybWluYXRlOiB0cnVlLFxuICAgICAgICAgIHNpemU6IDIzLFxuICAgICAgICAgIHdpZHRoOiAyLFxuICAgICAgICB9KSxcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5MYWJlbCA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaCgnc3BhbicsIHtcbiAgICAgICAgY2xhc3M6ICd2LWJ1dHRvbl9fbGFiZWwnLFxuICAgICAgfSwgcHJvcHMubGFiZWwpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQ29udGVudCA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaCgnZGl2JywgeyBjbGFzczogJ3YtYnV0dG9uX19jb250ZW50JyB9LFxuICAgICAgICBbKHNsb3RzLmRlZmF1bHQgJiYgc2xvdHMuZGVmYXVsdCgpKSB8fCAocHJvcHMubGFiZWwgJiYgZ2VuTGFiZWwoKSldLFxuICAgICAgKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PlxuICAgICAgaCgnYnV0dG9uJywge1xuICAgICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgICAgIHN0eWxlOiBzdHlsZXMudmFsdWUsXG4gICAgICAgICAgb25DbGljazogKCkgPT4gIXByb3BzLmRpc2FibGVkICYmIGVtaXQoJ2NsaWNrJyksXG4gICAgICAgIH0sXG4gICAgICAgIFtnZW5Db250ZW50KCksIHByb3BzLmxvYWRpbmcgJiYgZ2VuTG9hZGVyKCldLFxuICAgICAgKVxuICB9LFxufSlcbiIsImV4cG9ydCAqIGZyb20gJy4vVkJ1dHRvbidcblxuaW1wb3J0IHsgVkJ1dHRvbiB9IGZyb20gJy4vVkJ1dHRvbidcblxuZXhwb3J0IGRlZmF1bHQgVkJ1dHRvblxuIiwiLy8gVnVlIEFQSVxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcblxuLy8gQ29tcG9zaXRpb25zXG5pbXBvcnQgeyBjb2xvclByb3BzLCB1c2VDb2xvcnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG5pbXBvcnQgeyBlbGV2YXRpb25Qcm9wcywgdXNlRWxldmF0aW9uIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtZWxldmF0aW9uJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tICd2dWUnXG5cbmV4cG9ydCBjb25zdCBWQ2FyZCA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWNhcmQnLFxuXG4gIHByb3BzOiB7XG4gICAgd2lkdGg6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiAzNTAsXG4gICAgfSxcbiAgICAuLi5jb2xvclByb3BzKCksXG4gICAgLi4uZWxldmF0aW9uUHJvcHMoKSxcbiAgfSBhcyBhbnksXG5cbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSk6ICgpID0+IFZOb2RlIHtcbiAgICBjb25zdCB7IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvciwgc2V0QmFja2dyb3VuZENzc0NvbG9yIH0gPSB1c2VDb2xvcnMoKVxuICAgIGNvbnN0IHsgZWxldmF0aW9uQ2xhc3NlcyB9ID0gdXNlRWxldmF0aW9uKHByb3BzKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkKFxuICAgICAgKCk6IFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+ID0+ICh7XG4gICAgICAgICd2LWNhcmQnOiB0cnVlLFxuICAgICAgICAuLi5lbGV2YXRpb25DbGFzc2VzLnZhbHVlLFxuICAgICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgICAgfSlcbiAgICApXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgd2lkdGg6IGAke3Byb3BzLndpZHRofXB4YCxcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBmdW5jdGlvbiBnZW5DYXJkKCkge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgc3R5bGU6IHN0eWxlcy52YWx1ZSxcbiAgICAgIH1cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIHNsb3RzLmRlZmF1bHQgJiYgc2xvdHMuZGVmYXVsdCgpKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiBnZW5DYXJkKClcbiAgfSxcbn0pXG4iLCJpbXBvcnQgeyBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsIH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuZXhwb3J0IHsgVkNhcmQgfSBmcm9tICcuL1ZDYXJkJ1xuXG5leHBvcnQgY29uc3QgVkNhcmRUaXRsZSA9IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwoJ3YtY2FyZF9fdGl0bGUnKVxuZXhwb3J0IGNvbnN0IFZDYXJkU3VidGl0bGUgPSBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsKCd2LWNhcmRfX3N1YnRpdGxlJylcbmV4cG9ydCBjb25zdCBWQ2FyZENvbnRlbnQgPSBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsKCd2LWNhcmRfX2NvbnRlbnQnKVxuZXhwb3J0IGNvbnN0IFZDYXJkQWN0aW9ucyA9IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwoJ3YtY2FyZF9fYWN0aW9ucycpXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGgsIGNvbXB1dGVkLCBWTm9kZSB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IHRvQ2FtZWxDYXNlIH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuY29uc3QgYnJlYWtwb2ludHMgPSBbJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ11cbmNvbnN0IHBvc2l0aW9ucyA9IFsnc3RhcnQnLCAnY2VudGVyJywgJ2VuZCddXG5cbmV4cG9ydCBjb25zdCBWUm93ID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3Ytcm93JyxcbiAgcHJvcHM6IHtcbiAgICBhbGlnbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgIHZhbGlkYXRvcjogKHN0cjogc3RyaW5nKSA9PlxuICAgICAgICBbLi4ucG9zaXRpb25zLCAnYmFzZWxpbmUnLCAnc3RyZXRjaCddLmluY2x1ZGVzKHN0ciksXG4gICAgfSxcbiAgICBhbGlnbkNvbnRlbnQ6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICB2YWxpZGF0b3I6IChzdHI6IHN0cmluZykgPT5cbiAgICAgICAgWy4uLnBvc2l0aW9ucywgJ3NwYWNlLWJldHdlZW4nLCAnc3BhY2UtYXJvdW5kJywgJ3N0cmV0Y2gnXS5pbmNsdWRlcyhcbiAgICAgICAgICBzdHJcbiAgICAgICAgKSxcbiAgICB9LFxuICAgIGp1c3RpZnk6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICB2YWxpZGF0b3I6IChzdHI6IHN0cmluZykgPT5cbiAgICAgICAgWy4uLnBvc2l0aW9ucywgJ3NwYWNlLWJldHdlZW4nLCAnc3BhY2UtYXJvdW5kJ10uaW5jbHVkZXMoc3RyKSxcbiAgICB9LFxuICAgIG5vR3V0dGVyOiBCb29sZWFuLFxuICAgIC4uLmJyZWFrcG9pbnRzLnJlZHVjZSgocHJvcHMsIGJwKSA9PiB7XG4gICAgICBwcm9wc1tganVzdGlmeS0ke2JwfWBdID0ge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgIHZhbGlkYXRvcjogKHN0cjogc3RyaW5nKSA9PlxuICAgICAgICAgIFsuLi5wb3NpdGlvbnMsICdzcGFjZS1iZXR3ZWVuJywgJ3NwYWNlLWFyb3VuZCddLmluY2x1ZGVzKHN0ciksXG4gICAgICB9XG4gICAgICBwcm9wc1tgYWxpZ24tJHticH1gXSA9IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICB2YWxpZGF0b3I6IChzdHI6IHN0cmluZykgPT5cbiAgICAgICAgICBbLi4ucG9zaXRpb25zLCAnYmFzZWxpbmUnLCAnc3RyZXRjaCddLmluY2x1ZGVzKHN0ciksXG4gICAgICB9XG4gICAgICBwcm9wc1tgYWxpZ24tY29udGVudC0ke2JwfWBdID0ge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgIHZhbGlkYXRvcjogKHN0cjogc3RyaW5nKSA9PlxuICAgICAgICAgIFsuLi5wb3NpdGlvbnMsICdzcGFjZS1iZXR3ZWVuJywgJ3NwYWNlLWFyb3VuZCcsICdzdHJldGNoJ10uaW5jbHVkZXMoXG4gICAgICAgICAgICBzdHJcbiAgICAgICAgICApLFxuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BzXG4gICAgfSwge30pLFxuICB9LFxuXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3Ytcm93JzogdHJ1ZSxcbiAgICAgICduby1ndXR0ZXInOiBwcm9wcy5ub0d1dHRlcixcbiAgICAgIFtganVzdGlmeS0ke3Byb3BzLmp1c3RpZnl9YF06ICEhcHJvcHMuanVzdGlmeSxcbiAgICAgIFtgYWxpZ24tJHtwcm9wcy5hbGlnbn1gXTogISFwcm9wcy5hbGlnbixcbiAgICAgIFtgYWxpZ24tY29udGVudC0ke3Byb3BzLmFsaWduQ29udGVudH1gXTogISFwcm9wcy5hbGlnbkNvbnRlbnQsXG5cbiAgICAgIC4uLmJyZWFrcG9pbnRzLnJlZHVjZSgoY2xzLCBicCkgPT4ge1xuICAgICAgICA7Wy4uLnBvc2l0aW9ucywgJ3NwYWNlLWJldHdlZW4nLCAnc3BhY2UtYXJvdW5kJ10uZm9yRWFjaCgocG9zKSA9PiB7XG4gICAgICAgICAgY2xzW2BqdXN0aWZ5LSR7YnB9LSR7cG9zfWBdID1cbiAgICAgICAgICAgIHBvcyA9PT0gKHByb3BzW3RvQ2FtZWxDYXNlKCdqdXN0aWZ5JywgYnApXSBhcyBzdHJpbmcpXG4gICAgICAgIH0pXG4gICAgICAgIDtbLi4ucG9zaXRpb25zLCAnYmFzZWxpbmUnLCAnc3RyZXRjaCddLmZvckVhY2goKHBvcykgPT4ge1xuICAgICAgICAgIGNsc1tgYWxpZ24tJHticH0tJHtwb3N9YF0gPVxuICAgICAgICAgICAgcG9zID09PSAocHJvcHNbdG9DYW1lbENhc2UoJ2FsaWduJywgYnApXSBhcyBzdHJpbmcpXG4gICAgICAgIH0pXG4gICAgICAgIDtbLi4ucG9zaXRpb25zLCAnc3BhY2UtYmV0d2VlbicsICdzcGFjZS1hcm91bmQnLCAnc3RyZXRjaCddLmZvckVhY2goXG4gICAgICAgICAgKHBvcykgPT4ge1xuICAgICAgICAgICAgY2xzW2BhbGlnbi1jb250ZW50LSR7YnB9LSR7cG9zfWBdID1cbiAgICAgICAgICAgICAgcG9zID09PSAocHJvcHNbdG9DYW1lbENhc2UoJ2FsaWduJywgJ2NvbnRlbnQnLCBicCldIGFzIHN0cmluZylcbiAgICAgICAgICB9XG4gICAgICAgIClcblxuICAgICAgICByZXR1cm4gY2xzXG4gICAgICB9LCB7fSksXG4gICAgfSkpXG5cbiAgICByZXR1cm4gKCkgPT5cbiAgICAgIGgoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKSxcbiAgICAgICAgfVxuICAgICAgKVxuICB9LFxufSlcbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgY29tcHV0ZWQsIGgsIFZOb2RlIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgdG9DYW1lbENhc2UgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG5jb25zdCBicmVha3BvaW50cyA9IFsnc20nLCAnbWQnLCAnbGcnLCAneGwnXVxuXG5jb25zdCBjb2xQcm9wcyA9IGJyZWFrcG9pbnRzLnJlZHVjZSgocHJvcHMsIHApID0+IHtcbiAgcHJvcHNbcF0gPSB7XG4gICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICBkZWZhdWx0OiBudWxsLFxuICB9XG5cbiAgcmV0dXJuIHByb3BzXG59LCB7fSlcblxuY29uc3Qgb3JkZXJQcm9wcyA9IGJyZWFrcG9pbnRzLnJlZHVjZSgocHJvcHMsIHApID0+IHtcbiAgcHJvcHNbYG9yZGVyLSR7cH1gXSA9IHtcbiAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgIGRlZmF1bHQ6IG51bGwsXG4gIH1cblxuICByZXR1cm4gcHJvcHNcbn0sIHt9KVxuXG5jb25zdCBvZmZzZXRQcm9wcyA9IGJyZWFrcG9pbnRzLnJlZHVjZSgocHJvcHMsIHApID0+IHtcbiAgcHJvcHNbYG9mZnNldC0ke3B9YF0gPSB7XG4gICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICBkZWZhdWx0OiBudWxsLFxuICB9XG5cbiAgcmV0dXJuIHByb3BzXG59LCB7fSlcblxuZXhwb3J0IGNvbnN0IFZDb2wgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1jb2wnLFxuICBwcm9wczoge1xuICAgIG9yZGVyOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICB9LFxuICAgIGNvbHM6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gICAgb2Zmc2V0OiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICB9LFxuICAgIC4uLmNvbFByb3BzLFxuICAgIC4uLm9yZGVyUHJvcHMsXG4gICAgLi4ub2Zmc2V0UHJvcHMsXG4gIH0sXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtY29sJzogdHJ1ZSxcbiAgICAgIFtgdi1jb2wtJHtwcm9wcy5jb2xzfWBdOiAhIXByb3BzLmNvbHMsXG4gICAgICAuLi5icmVha3BvaW50cy5yZWR1Y2UoKGNvbHMsIHApID0+IHtcbiAgICAgICAgY29sc1tgJHtwfS0ke3Byb3BzW3BdfWBdID0gISFwcm9wc1twXVxuICAgICAgICByZXR1cm4gY29sc1xuICAgICAgfSwge30pLFxuXG4gICAgICBbYG9yZGVyLSR7cHJvcHMub3JkZXJ9YF06IHByb3BzLm9yZGVyICE9PSBudWxsLFxuXG4gICAgICAuLi5icmVha3BvaW50cy5yZWR1Y2UoKG9yZGVycywgcCkgPT4ge1xuICAgICAgICBjb25zdCBwcm9wVmFsdWUgPSBwcm9wc1t0b0NhbWVsQ2FzZSgnb3JkZXInLCBwKV1cbiAgICAgICAgb3JkZXJzW2BvcmRlci0ke3B9LSR7cHJvcFZhbHVlfWBdID0gISFwcm9wVmFsdWVcbiAgICAgICAgcmV0dXJuIG9yZGVyc1xuICAgICAgfSwge30pLFxuICAgICAgW2BvZmZzZXQtJHtwcm9wcy5vZmZzZXR9YF06IHByb3BzLm9mZnNldCAhPT0gbnVsbCxcbiAgICAgIC4uLmJyZWFrcG9pbnRzLnJlZHVjZSgob2Zmc2V0cywgcCkgPT4ge1xuICAgICAgICBjb25zdCBwcm9wVmFsdWUgPSBwcm9wc1t0b0NhbWVsQ2FzZSgnb2Zmc2V0JywgcCldXG4gICAgICAgIG9mZnNldHNbYG9mZnNldC0ke3B9LSR7cHJvcFZhbHVlfWBdID0gISFwcm9wVmFsdWVcbiAgICAgICAgcmV0dXJuIG9mZnNldHNcbiAgICAgIH0sIHt9KSxcbiAgICB9KSlcblxuICAgIHJldHVybiAoKSA9PlxuICAgICAgaChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IHNsb3RzLmRlZmF1bHQgJiYgc2xvdHMuZGVmYXVsdCgpLFxuICAgICAgICB9XG4gICAgICApXG4gIH0sXG59KVxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoLCBjb21wdXRlZCwgVk5vZGUgfSBmcm9tICd2dWUnXG5cbmV4cG9ydCBjb25zdCBWTGF5b3V0ID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtbGF5b3V0JyxcbiAgcHJvcHM6IHtcbiAgICBjb2x1bW46IEJvb2xlYW4sXG4gICAgd3JhcDogQm9vbGVhbixcbiAgfSxcbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSk6ICgpID0+IFZOb2RlIHtcbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1sYXlvdXQnOiB0cnVlLFxuICAgICAgJ2ZsZXgtY29sdW1uJzogcHJvcHMuY29sdW1uLFxuICAgICAgJ2ZsZXgtd3JhcCc6IHByb3BzLndyYXAsXG4gICAgfSkpXG5cbiAgICByZXR1cm4gKCkgPT5cbiAgICAgIGgoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKSxcbiAgICAgICAgfVxuICAgICAgKVxuICB9LFxufSlcbiIsImltcG9ydCB7IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG5leHBvcnQgeyBWUm93IH0gZnJvbSAnLi9WUm93J1xuZXhwb3J0IHsgVkNvbCB9IGZyb20gJy4vVkNvbCdcbmV4cG9ydCB7IFZMYXlvdXQgfSBmcm9tICcuL1ZMYXlvdXQnXG5cbmV4cG9ydCBjb25zdCBWU3BhY2VyID0gY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCgndi1zcGFjZXInKVxuIiwiLy8gVnVlIEFQSVxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBjb21wdXRlZCwgaCB9IGZyb20gJ3Z1ZSdcblxuLy8gQ29tcG9zaXRpb25zXG5pbXBvcnQgeyB1c2VDb2xvcnMgfSBmcm9tICdAL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuXG5leHBvcnQgY29uc3QgVk92ZXJsYXkgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1vdmVybGF5JyxcblxuICBwcm9wczoge1xuICAgIGhpZGU6IEJvb2xlYW4sXG4gICAgYWN0aXZlOiBCb29sZWFuLFxuICAgIGNvbG9yOiBTdHJpbmcsXG4gICAgZml4ZWQ6IEJvb2xlYW4sXG4gIH0gYXMgYW55LFxuXG4gIHNldHVwKHByb3BzKTogVk5vZGUge1xuICAgIGNvbnN0IHsgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yLCBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IgfSA9IHVzZUNvbG9ycygpXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgJ3Ytb3ZlcmxheSc6IHRydWUsXG4gICAgICAgICd2LW92ZXJsYXktLWhpZGRlbic6IHByb3BzLmhpZGUsXG4gICAgICAgICd2LW92ZXJsYXktLWFjdGl2ZSc6IHByb3BzLmFjdGl2ZSxcbiAgICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICBzdHlsZTogc3R5bGVzLnZhbHVlLFxuICAgICAgcmVmOiAnb3ZlcmxheScsXG4gICAgfSlcbiAgfSxcbn0pXG4iLCJleHBvcnQgKiBmcm9tICcuL1ZPdmVybGF5J1xuIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAndnVlJ1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWT3ZlcmxheSB9IGZyb20gJy4uL2NvbXBvbmVudHMnXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBTZXR1cENvbnRleHQsIFZOb2RlIH0gZnJvbSAndnVlJ1xuXG4vLyBIZWxwZXJzXG5pbXBvcnQgeyBhZGRPbmNlTGlzdGVuZXIgfSBmcm9tICdAL2hlbHBlcnMnXG5pbXBvcnQgeyBNYXliZSB9IGZyb20gJy4uLy4uL3R5cGVzL2Jhc2UnXG5cbmludGVyZmFjZSBPdmVybGF5Q29udHJvbGxlciB7XG4gIGNyZWF0ZU92ZXJsYXk6ICgpID0+IHZvaWRcbiAgcmVtb3ZlT3ZlcmxheTogKCkgPT4gdm9pZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gb3ZlcmxheVByb3BzKCkge1xuICByZXR1cm4ge1xuICAgIG92ZXJsYXk6IEJvb2xlYW4sXG4gICAgb3ZlcmxheUNvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnIzAwMDAwMCcsXG4gICAgfSxcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlT3ZlcmxheShwcm9wczogYW55LCBvdmVybGF5T24/OiBFbGVtZW50KTogT3ZlcmxheUNvbnRyb2xsZXIge1xuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuXG4gIGNvbnN0IG92ZXJsYXlQcm9wcyA9IHtcbiAgICBhY3RpdmU6IGZhbHNlLFxuICAgIGNvbG9yOiBwcm9wcy5vdmVybGF5Q29sb3IsXG4gIH1cblxuICBsZXQgb3ZlcmxheUVsZW1lbnQ6IE1heWJlPEhUTUxFbGVtZW50PiA9IG51bGxcblxuICBjb25zdCBvdmVybGF5Vk5vZGUgPSAoKSA9PiB7XG4gICAgcmV0dXJuIFZPdmVybGF5LnNldHVwIShcbiAgICAgIG92ZXJsYXlQcm9wcyBhcyB0eXBlb2YgVk92ZXJsYXkucHJvcHMsXG4gICAgICB7fSBhcyBTZXR1cENvbnRleHQsXG4gICAgKVxuICB9XG5cbiAgY29uc3QgcmVuZGVyT3ZlcmxheSA9ICgpID0+IHJlbmRlcihvdmVybGF5Vk5vZGUoKSBhcyBWTm9kZSwgY29udGFpbmVyISlcblxuICBjb25zdCBjcmVhdGVPdmVybGF5ID0gKCkgPT4ge1xuICAgIG92ZXJsYXlPbj8ucGFyZW50Tm9kZT8uaW5zZXJ0QmVmb3JlKG92ZXJsYXlFbGVtZW50ISwgb3ZlcmxheU9uKVxuICAgIG92ZXJsYXlFbGVtZW50Py5jbGFzc0xpc3QucmVtb3ZlKCd2LW92ZXJsYXktLWhpZGRlbicpXG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgb3ZlcmxheUVsZW1lbnQ/LmNsYXNzTGlzdC5hZGQoJ3Ytb3ZlcmxheS0tYWN0aXZlJylcbiAgICB9KVxuICB9XG5cbiAgY29uc3QgcmVtb3ZlT3ZlcmxheSA9ICgpID0+IHtcbiAgICBvdmVybGF5RWxlbWVudCEuY2xhc3NMaXN0LnJlbW92ZSgndi1vdmVybGF5LS1hY3RpdmUnKVxuXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIG92ZXJsYXlFbGVtZW50Py5jbGFzc0xpc3QuYWRkKCd2LW92ZXJsYXktLWhpZGRlbicpXG4gICAgfSlcblxuICAgIGNvbnN0IHJlbW92ZSA9ICgpID0+IHtcbiAgICAgIG92ZXJsYXlFbGVtZW50Py5wYXJlbnROb2RlPy5yZW1vdmVDaGlsZChvdmVybGF5RWxlbWVudCEpXG4gICAgfVxuXG4gICAgYWRkT25jZUxpc3RlbmVyKG92ZXJsYXlFbGVtZW50ISwgJ3RyYW5zaXRpb25lbmQnLCByZW1vdmUpXG4gIH1cblxuICByZW5kZXJPdmVybGF5KClcblxuICBvdmVybGF5RWxlbWVudCA9IGNvbnRhaW5lci5maXJzdENoaWxkIGFzIEhUTUxFbGVtZW50XG5cbiAgcmV0dXJuIHtcbiAgICBjcmVhdGVPdmVybGF5LFxuICAgIHJlbW92ZU92ZXJsYXksXG4gIH1cbn1cbiIsImltcG9ydCB7IFRyYW5zaXRpb24sIFZOb2RlLCBoIH0gZnJvbSAndnVlJ1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNpdGlvblByb3BzKCkge1xuICByZXR1cm4ge1xuICAgIHRyYW5zaXRpb246IFN0cmluZ1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VUcmFuc2l0aW9uKFxuICB2Tm9kZTogVk5vZGUsXG4gIHRyYW5zaXRpb246IHN0cmluZyxcbiAgbW9kZTogc3RyaW5nID0gJydcbik6IFZOb2RlIHtcbiAgY29uc3QgcHJvcHMgPSB7IG5hbWU6IHRyYW5zaXRpb24sIG1vZGUgfVxuICByZXR1cm4gaChUcmFuc2l0aW9uLCBwcm9wcywge1xuICAgIGRlZmF1bHQ6ICgpID0+IHZOb2RlXG4gIH0pXG59XG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyByZWYsIHdhdGNoIH0gZnJvbSAndnVlJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgUmVmIH0gZnJvbSAndnVlJ1xuXG50eXBlIFRvZ2dsZWFibGUgPSB7XG4gIGlzQWN0aXZlOiBSZWY8Ym9vbGVhbj5cbn1cblxuLyoqKlxuICpcbiAqIEBwYXJhbSBwcm9wcyB7b2JqZWN0fSAtIHByb3BzIG9iamVjdCBvZiB0aGUgY29tcG9uZW50XG4gKiBAcGFyYW0gcHJvcE5hbWUge3N0cmluZ30gLSB0aGUgcHJvcCBuYW1lIHdoaWNoIGlzIHRyYWNrZWQgZm9yIGNoYW5nZXNcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlVG9nZ2xlKHByb3BzOiBhbnksIHByb3BOYW1lPzogc3RyaW5nKTogVG9nZ2xlYWJsZSB7XG4gIGNvbnN0IGlzQWN0aXZlID0gcmVmPGJvb2xlYW4+KGZhbHNlKVxuICBjb25zdCBwcm9wID0gcHJvcE5hbWUgPyBwcm9wTmFtZSA6ICdtb2RlbFZhbHVlJ1xuXG4gIHdhdGNoKFxuICAgICgpID0+IHByb3BzW3Byb3BdLFxuICAgICh0bykgPT4gKGlzQWN0aXZlLnZhbHVlID0gISF0byksXG4gICAgeyBpbW1lZGlhdGU6IHRydWUgfVxuICApXG5cbiAgcmV0dXJuIHtcbiAgICBpc0FjdGl2ZSxcbiAgfVxufVxuIiwiLy8gVnVlIEFQSVxuaW1wb3J0IHtcbiAgaCxcbiAgcmVmLFxuICB3YXRjaCxcbiAgd2l0aERpcmVjdGl2ZXMsXG4gIGRlZmluZUNvbXBvbmVudCxcbiAgdlNob3csXG4gIG9uTW91bnRlZCxcbn0gZnJvbSAndnVlJ1xuXG4vLyBFZmZlY3RzXG5pbXBvcnQgeyBvdmVybGF5UHJvcHMsIHVzZU92ZXJsYXkgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1vdmVybGF5J1xuaW1wb3J0IHsgdHJhbnNpdGlvblByb3BzLCB1c2VUcmFuc2l0aW9uIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtdHJhbnNpdGlvbidcbmltcG9ydCB7IHVzZVRvZ2dsZSB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXRvZ2dsZSdcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCB9IGZyb20gJ0AvaGVscGVycydcblxuZXhwb3J0IGNvbnN0IFZNb2RhbCA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LW1vZGFsJyxcblxuICBwcm9wczoge1xuICAgIG1vZGVsVmFsdWU6IEJvb2xlYW4sXG4gICAgd2lkdGg6IHtcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gICAgLi4ub3ZlcmxheVByb3BzKCksXG4gICAgLi4udHJhbnNpdGlvblByb3BzKCksXG4gIH0gYXMgYW55LFxuXG4gIGVtaXRzOiBbJ3VwZGF0ZTptb2RlbFZhbHVlJ10sXG5cbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMsIGVtaXQgfSkge1xuICAgIGNvbnN0IHsgaXNBY3RpdmUgfSA9IHVzZVRvZ2dsZShwcm9wcylcblxuICAgIGNvbnN0IG1vZGFsUmVmID0gcmVmKG51bGwpXG5cbiAgICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgICAgaWYgKHByb3BzLm92ZXJsYXkpIHtcbiAgICAgICAgY29uc3QgeyBjcmVhdGVPdmVybGF5LCByZW1vdmVPdmVybGF5IH0gPSB1c2VPdmVybGF5KFxuICAgICAgICAgIHByb3BzLFxuICAgICAgICAgIG1vZGFsUmVmLnZhbHVlISxcbiAgICAgICAgKVxuXG4gICAgICAgIGlzQWN0aXZlLnZhbHVlICYmIGNyZWF0ZU92ZXJsYXkoKVxuXG4gICAgICAgIHdhdGNoKFxuICAgICAgICAgICgpID0+IGlzQWN0aXZlLnZhbHVlLFxuICAgICAgICAgICh0bykgPT4ge1xuICAgICAgICAgICAgdG8gJiYgY3JlYXRlT3ZlcmxheSgpXG4gICAgICAgICAgICAhdG8gJiYgcmVtb3ZlT3ZlcmxheSgpXG4gICAgICAgICAgfSxcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBmdW5jdGlvbiBnZW5Db250ZW50KCk6IFZOb2RlIHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6ICd2LW1vZGFsX19jb250ZW50JyxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICB3aWR0aDogcHJvcHMud2lkdGggPyBjb252ZXJ0VG9Vbml0KHByb3BzLndpZHRoKSA6ICcnLFxuICAgICAgICB9LFxuICAgICAgfVxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCkpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuTW9kYWwoKSB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiAndi1tb2RhbCcsXG4gICAgICAgIHJlZjogbW9kYWxSZWYsXG4gICAgICAgIFsnb25VcGRhdGU6bW9kZWxWYWx1ZSddOiAodmFsKSA9PiBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIHZhbCksXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB3aXRoRGlyZWN0aXZlcyhoKCdkaXYnLCBwcm9wc0RhdGEsIGdlbkNvbnRlbnQoKSksIFtcbiAgICAgICAgW3ZTaG93LCBpc0FjdGl2ZS52YWx1ZV0sXG4gICAgICBdKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB1c2VUcmFuc2l0aW9uKGdlbk1vZGFsKCksIHByb3BzLnRyYW5zaXRpb24pXG4gIH0sXG59KVxuIiwiZXhwb3J0ICogZnJvbSAnLi9WTW9kYWwnXG4iLCJpbXBvcnQgeyByZWYsIHJlYWN0aXZlLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IERpbWVuc2lvbnMgfSBmcm9tICcuLi8uLi90eXBlcydcblxudHlwZSBNYWluRGltZW5zaW9ucyA9IHtcbiAgYWN0aXZhdG9yOiBEaW1lbnNpb25zXG4gIGNvbnRlbnQ6IERpbWVuc2lvbnNcbiAgcGFnZVlPZmZzZXQ6IG51bWJlclxuICBwYWdlV2lkdGg6IG51bWJlclxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXV0b1Bvc2l0aW9uUHJvcHMoKXtcbiAgcmV0dXJuIHtcbiAgICBwb3NpdGlvblg6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIGRlZmF1bHQ6IDBcbiAgICB9LFxuICAgIHBvc2l0aW9uWToge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgZGVmYXVsdDogMFxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlQXV0b1Bvc2l0aW9uKHByb3BzKXtcbiAgY29uc3QgZGltZW5zaW9ucyA9IHJlYWN0aXZlPE1haW5EaW1lbnNpb25zPih7XG4gICAgYWN0aXZhdG9yOiB7XG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMFxuICAgIH0sXG4gICAgY29udGVudDoge1xuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDBcbiAgICB9LFxuICAgIHBhZ2VZT2Zmc2V0OiAwLFxuICAgIHBhZ2VXaWR0aDogMFxuICB9KVxuXG4gIGNvbnN0IGNvbnRlbnRSZWYgPSByZWY8SFRNTEVsZW1lbnQgfCBudWxsPihudWxsKVxuICBjb25zdCBvZmZzZXRZOiBudW1iZXIgPSArcHJvcHMub2Zmc2V0WVxuICAvLyBjb25zdCBvZmZzZXRYOiBudW1iZXIgPSArcHJvcHMub2Zmc2V0WFxuXG4gIGxldCBhY3RpdmF0b3I6IEhUTUxFbGVtZW50XG4gIGxldCBjb250ZW50OiBIVE1MRWxlbWVudFxuICBsZXQgY29udGVudEJvdHRvbUJvcmRlcjogbnVtYmVyID0gMFxuXG4gIGNvbnN0IGdldFJlY3QgPSAoZWw6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgY29uc3QgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG5cbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiByZWN0LnRvcCxcbiAgICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICAgIGJvdHRvbTogcmVjdC5ib3R0b20sXG4gICAgICByaWdodDogcmVjdC5yaWdodCxcbiAgICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgICAgaGVpZ2h0OiByZWN0LmhlaWdodFxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGlzQWJzb2x1dGVQb3NpdGlvbmVkID0gY29tcHV0ZWQ8Ym9vbGVhbj4oKCkgPT4ge1xuICAgIHJldHVybiAhIXByb3BzLnBvc2l0aW9uWSB8fCAhIXByb3BzLnBvc2l0aW9uWFxuICB9KVxuXG4gIGNvbnN0IGdldElubmVySGVpZ2h0ID0gKCk6IG51bWJlciA9PiB7XG4gICAgaWYgKCF3aW5kb3cpIHJldHVybiAwXG5cbiAgICByZXR1cm4gaW5uZXJIZWlnaHQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodFxuICB9XG5cbiAgY29uc3QgZ2V0U2Nyb2xsVG9wID0gKCk6IG51bWJlciA9PiB7XG4gICAgaWYgKCF3aW5kb3cpIHJldHVybiAwXG5cbiAgICByZXR1cm4gcGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcFxuICB9XG5cbiAgY29uc3QgZ2V0U2Nyb2xsTGVmdCA9ICgpOiBudW1iZXIgPT4ge1xuICAgIGlmICghd2luZG93KSByZXR1cm4gMFxuXG4gICAgcmV0dXJuIHBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0XG4gIH1cblxuICBjb25zdCBnZXRDb250ZW50QWJzb2x1dGVCb3R0b21Qb2ludCA9ICgpID0+IHtcbiAgICByZXR1cm4gZGltZW5zaW9ucy5jb250ZW50LmhlaWdodCArIHByb3BzLnBvc2l0aW9uWSArIGdldFNjcm9sbFRvcCgpXG4gIH1cblxuICBjb25zdCBnZXRDb250ZW50Qm90dG9tQm9yZGVyID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgYWN0aXZhdG9yLCBjb250ZW50IH0gPSBkaW1lbnNpb25zXG5cbiAgICBpZiAocHJvcHMuYm90dG9tKSB7XG4gICAgICByZXR1cm4gY29udGVudC5oZWlnaHQgKyBhY3RpdmF0b3IudG9wICsgYWN0aXZhdG9yLmhlaWdodFxuICAgIH1cblxuICAgIGlmIChwcm9wcy50b3ApIHtcbiAgICAgIHJldHVybiBhY3RpdmF0b3IudG9wXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRlbnQuaGVpZ2h0ICsgYWN0aXZhdG9yLnRvcFxuICB9XG5cbiAgY29uc3QgY2FsY0NvbnRlbnRCb3R0b21Qb3NpdGlvbiA9ICgpID0+IHtcbiAgICBjb25zdCBmdWxsSGVpZ2h0ID0gZ2V0U2Nyb2xsVG9wKCkgKyBnZXRJbm5lckhlaWdodCgpXG5cbiAgICBjb25zdCBjb250ZW50Qm90dG9tUG9zaXRpb24gPSBpc0Fic29sdXRlUG9zaXRpb25lZC52YWx1ZVxuICAgICAgPyBnZXRDb250ZW50QWJzb2x1dGVCb3R0b21Qb2ludCgpXG4gICAgICA6IGdldENvbnRlbnRCb3R0b21Cb3JkZXIoKVxuXG4gICAgcmV0dXJuIGZ1bGxIZWlnaHQgLSBjb250ZW50Qm90dG9tUG9zaXRpb25cbiAgfVxuXG4gIGNvbnN0IGNhbGNBYnNvbHV0ZVRvcCA9ICgpID0+IHtcbiAgICBjb25zdCB0b3BQb3NpdGlvbiA9IHByb3BzLnBvc2l0aW9uWSArIGdldFNjcm9sbFRvcCgpXG5cbiAgICBpZiAob2Zmc2V0WSA+PSBjb250ZW50Qm90dG9tQm9yZGVyKSB7XG4gICAgICByZXR1cm4gdG9wUG9zaXRpb24gKyBjb250ZW50Qm90dG9tQm9yZGVyIC0gb2Zmc2V0WVxuICAgIH1cblxuICAgIHJldHVybiB0b3BQb3NpdGlvblxuICB9XG5cbiAgY29uc3QgY2FsY0JvdHRvbVBvc2l0aW9uID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgYWN0aXZhdG9yLCBjb250ZW50IH0gPSBkaW1lbnNpb25zXG5cbiAgICBpZiAob2Zmc2V0WSA+PSBjb250ZW50Qm90dG9tQm9yZGVyKSB7XG4gICAgICByZXR1cm4gYWN0aXZhdG9yLnRvcCAtIGNvbnRlbnQuaGVpZ2h0IC0gb2Zmc2V0WVxuICAgIH1cblxuICAgIHJldHVybiBhY3RpdmF0b3IudG9wICsgYWN0aXZhdG9yLmhlaWdodCArIG9mZnNldFlcbiAgfVxuXG4gIGNvbnN0IGNhbGNUb3BQb3NpdGlvbiA9ICgpID0+IHtcbiAgICBjb25zdCB7IGFjdGl2YXRvciwgY29udGVudCB9ID0gZGltZW5zaW9uc1xuXG4gICAgaWYgKGNvbnRlbnQuaGVpZ2h0ICsgZ2V0U2Nyb2xsVG9wKCkgKyBvZmZzZXRZID4gYWN0aXZhdG9yLnRvcCkge1xuICAgICAgcmV0dXJuIGFjdGl2YXRvci50b3AgKyBhY3RpdmF0b3IuaGVpZ2h0XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGl2YXRvci50b3AgLSBjb250ZW50LmhlaWdodFxuICB9XG5cbiAgY29uc3QgY2FsY0NvbnRlbnRBdXRvUG9zaXRpb24gPSAoKSA9PiB7XG4gICAgaWYgKG9mZnNldFkgPj0gY29udGVudEJvdHRvbUJvcmRlcikge1xuICAgICAgcmV0dXJuIGRpbWVuc2lvbnMuYWN0aXZhdG9yLnRvcCArIGNvbnRlbnRCb3R0b21Cb3JkZXIgLSBvZmZzZXRZXG4gICAgfVxuXG4gICAgcmV0dXJuIGRpbWVuc2lvbnMuYWN0aXZhdG9yLnRvcFxuICB9XG5cbiAgY29uc3QgY2FsY1Bvc2l0aW9uWSA9ICgpOiBudW1iZXIgPT4ge1xuICAgIGNvbnRlbnRCb3R0b21Cb3JkZXIgPSBjYWxjQ29udGVudEJvdHRvbVBvc2l0aW9uKClcblxuICAgIGlmIChwcm9wcy5wb3NpdGlvblkpIHJldHVybiBjYWxjQWJzb2x1dGVUb3AoKVxuICAgIGlmIChwcm9wcy5ib3R0b20pIHJldHVybiBjYWxjQm90dG9tUG9zaXRpb24oKVxuICAgIGlmIChwcm9wcy50b3ApIHJldHVybiBjYWxjVG9wUG9zaXRpb24oKVxuXG4gICAgcmV0dXJuIGNhbGNDb250ZW50QXV0b1Bvc2l0aW9uKClcbiAgfVxuXG4gIGNvbnN0IGNhbGNQb3NpdGlvblggPSAoKTogbnVtYmVyID0+IHtcbiAgICBpZiAocHJvcHMucG9zaXRpb25YKSByZXR1cm4gcHJvcHMucG9zaXRpb25YICsgZ2V0U2Nyb2xsTGVmdCgpXG5cbiAgICByZXR1cm4gZGltZW5zaW9ucy5hY3RpdmF0b3IubGVmdFxuICB9XG5cbiAgY29uc3Qgc25hcFNob3QgPSAoY2I6ICgpID0+IGFueSkgPT4ge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBpZiAoIWNvbnRlbnQgfHwgY29udGVudC5zdHlsZS5kaXNwbGF5ICE9PSAnbm9uZScpIHJldHVybiBjYigpXG4gICAgICBjb250ZW50LnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJ1xuICAgICAgY2IoKVxuICAgICAgY29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0IHVwZGF0ZURpbWVuc2lvbnMgPSAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICBzbmFwU2hvdCgoKSA9PiB7XG4gICAgICAgIGFjdGl2YXRvciAmJiBzZXRBY3RpdmF0b3JEaW1lbnNpb25zKClcbiAgICAgICAgY29udGVudCAmJiBzZXRDb250ZW50RGltZW5zaW9ucygpXG4gICAgICAgIHJlc29sdmUoKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgY29uc3Qgc2V0QWN0aXZhdG9yRGltZW5zaW9ucyA9ICgpID0+IHtcbiAgICBkaW1lbnNpb25zLmFjdGl2YXRvciA9IGdldFJlY3QoYWN0aXZhdG9yKVxuXG4gICAgZGltZW5zaW9ucy5hY3RpdmF0b3IuaGVpZ2h0ID0gYWN0aXZhdG9yLm9mZnNldEhlaWdodFxuICAgIGRpbWVuc2lvbnMuYWN0aXZhdG9yLnRvcCA9IGRpbWVuc2lvbnMuYWN0aXZhdG9yLnRvcCArIGdldFNjcm9sbFRvcCgpXG4gICAgZGltZW5zaW9ucy5hY3RpdmF0b3IubGVmdCA9IGRpbWVuc2lvbnMuYWN0aXZhdG9yLmxlZnQgKyBnZXRTY3JvbGxMZWZ0KClcbiAgfVxuXG4gIGNvbnN0IHNldENvbnRlbnREaW1lbnNpb25zID0gKCkgPT4ge1xuICAgIGNvbnN0IHJlY3QgPSBhY3RpdmF0b3JcbiAgICAgID8gZGltZW5zaW9ucy5hY3RpdmF0b3JcbiAgICAgIDogZ2V0UmVjdChjb250ZW50KVxuXG4gICAgZGltZW5zaW9ucy5jb250ZW50LmhlaWdodCA9IGNvbnRlbnQub2Zmc2V0SGVpZ2h0XG4gICAgZGltZW5zaW9ucy5jb250ZW50LnRvcCA9IGNhbGNQb3NpdGlvblkoKVxuICAgIGRpbWVuc2lvbnMuY29udGVudC5sZWZ0ID0gY2FsY1Bvc2l0aW9uWCgpXG4gICAgZGltZW5zaW9ucy5jb250ZW50LndpZHRoID0gcmVjdC53aWR0aFxuICB9XG5cbiAgY29uc3Qgc2V0RGltZW5zaW9ucyA9IChhY3RpdmF0b3JFbDogSFRNTEVsZW1lbnQpID0+IHtcbiAgICBpZiAoIWFjdGl2YXRvciAmJiAhY29udGVudCkge1xuICAgICAgYWN0aXZhdG9yID0gYWN0aXZhdG9yRWxcbiAgICAgIGNvbnRlbnQgPSBjb250ZW50UmVmLnZhbHVlIVxuICAgIH1cblxuICAgIHJldHVybiB1cGRhdGVEaW1lbnNpb25zKClcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZGltZW5zaW9ucyxcbiAgICBjb250ZW50UmVmLFxuICAgIHNldERpbWVuc2lvbnMsXG4gICAgdXBkYXRlRGltZW5zaW9uc1xuICB9XG59XG4iLCJpbXBvcnQgeyByZWYsIENvbXBvbmVudFB1YmxpY0luc3RhbmNlIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgQWN0aXZhdG9yTGlzdGVuZXJzLCBEaW1lbnNpb25zIH0gZnJvbSAnLi4vLi4vdHlwZXMvY29tcG9zYWJsZXMnXG5pbXBvcnQgeyBNYXliZSB9IGZyb20gJy4uLy4uL3R5cGVzL2Jhc2UnXG5cbmV4cG9ydCBmdW5jdGlvbiBhY3RpdmF0b3JQcm9wcygpe1xuICByZXR1cm4ge1xuICAgIGFjdGl2YXRvcjoge1xuICAgICAgdHlwZTogWyBPYmplY3QsIFN0cmluZyBdXG4gICAgfSxcbiAgICBpbnRlcm5hbEFjdGl2YXRvcjogQm9vbGVhblxuICB9XG59XG5cbmV4cG9ydCBjb25zdCB1c2VBY3RpdmF0b3IgPSAocHJvcHMpID0+IHtcbiAgY29uc3QgYWN0aXZhdG9yUmVmID0gcmVmPE1heWJlPEhUTUxFbGVtZW50IHwgQ29tcG9uZW50UHVibGljSW5zdGFuY2U8YW55Pj4+KG51bGwpXG4gIGNvbnN0IGFjdGl2YXRvclNpemVzOiBQYXJ0aWFsPERpbWVuc2lvbnM+ID0ge31cbiAgY29uc3QgbGlzdGVuZXJzOiBQYXJ0aWFsPEFjdGl2YXRvckxpc3RlbmVycz4gPSB7fVxuXG4gIGNvbnN0IGdldEFjdGl2YXRvciA9IChldmVudD86IEV2ZW50KTogTWF5YmU8SFRNTEVsZW1lbnQ+ID0+IHtcbiAgICBpZiAoYWN0aXZhdG9yUmVmLnZhbHVlKSByZXR1cm4gYWN0aXZhdG9yUmVmLnZhbHVlXG5cbiAgICBjb25zdCB0YXJnZXQgPSBwcm9wcy5pbnRlcm5hbEFjdGl2YXRvciA/IHByb3BzLmFjdGl2YXRvci4kZWwgOiBkb2N1bWVudFxuXG4gICAgaWYgKHByb3BzLmlucHV0QWN0aXZhdG9yKSB7XG4gICAgICByZXR1cm4gKGFjdGl2YXRvclJlZi52YWx1ZSA9IHRhcmdldC5xdWVyeVNlbGVjdG9yKHByb3BzLmlucHV0QWN0aXZhdG9yKSlcbiAgICB9XG5cbiAgICBpZiAocHJvcHMuYWN0aXZhdG9yKSB7XG4gICAgICBpZiAodHlwZW9mIHByb3BzLmFjdGl2YXRvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIChhY3RpdmF0b3JSZWYudmFsdWUgPSB0YXJnZXQucXVlcnlTZWxlY3Rvcihwcm9wcy5hY3RpdmF0b3IpKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gKGFjdGl2YXRvclJlZi52YWx1ZSA9IHByb3BzLmFjdGl2YXRvcilcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQpIHtcbiAgICAgIHJldHVybiAoYWN0aXZhdG9yUmVmLnZhbHVlID0gKGV2ZW50LnRhcmdldCB8fCBldmVudC5jdXJyZW50VGFyZ2V0KSBhcyBIVE1MRWxlbWVudClcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgY29uc3QgZ2V0QWN0aXZhdG9yU2l6ZXMgPSAoKSA9PiB7XG4gICAgY29uc3QgZWwgPSBhY3RpdmF0b3JSZWYudmFsdWUhLiRlbCB8fCBhY3RpdmF0b3JSZWYudmFsdWUhXG5cbiAgICBhY3RpdmF0b3JTaXplcy5sZWZ0ID0gZWwub2Zmc2V0TGVmdFxuICAgIGFjdGl2YXRvclNpemVzLnRvcCA9IGVsLm9mZnNldFRvcFxuICAgIGFjdGl2YXRvclNpemVzLmhlaWdodCA9IGVsLm9mZnNldEhlaWdodFxuICAgIGFjdGl2YXRvclNpemVzLndpZHRoID0gZWwub2Zmc2V0V2lkdGhcblxuICAgIHJldHVybiBhY3RpdmF0b3JTaXplc1xuICB9XG5cbiAgY29uc3QgZ2VuQWN0aXZhdG9yTGlzdGVuZXJzID0gKHByb3BzLCBoYW5kbGVycykgPT4ge1xuICAgIGlmIChwcm9wcy5vcGVuT25Ib3Zlcikge1xuICAgICAgbGlzdGVuZXJzLm1vdXNlZW50ZXIgPSAoZSkgPT4gaGFuZGxlcnMubW91c2VlbnRlcihlKVxuICAgICAgbGlzdGVuZXJzLm1vdXNlbGVhdmUgPSAoZSkgPT4gaGFuZGxlcnMubW91c2VsZWF2ZShlKVxuICAgIH1cblxuICAgIGlmIChwcm9wcy5vcGVuT25DbGljaykge1xuICAgICAgbGlzdGVuZXJzLmNsaWNrID0gKGUpID0+IGhhbmRsZXJzLmNsaWNrKGUpXG4gICAgfVxuXG4gICAgaWYgKHByb3BzLm9wZW5PbkNvbnRleHRtZW51KSB7XG4gICAgICBsaXN0ZW5lcnMuY29udGV4dG1lbnUgPSAoZSkgPT4gaGFuZGxlcnMuY29udGV4dG1lbnUoZSlcbiAgICB9XG5cbiAgICByZXR1cm4gbGlzdGVuZXJzXG4gIH1cblxuICBjb25zdCBhZGRBY3RpdmF0b3JFdmVudHMgPSAoKSA9PiB7XG4gICAgY29uc3QgZXZlbnRzID0gT2JqZWN0LmtleXMobGlzdGVuZXJzKVxuXG4gICAgaWYgKGFjdGl2YXRvclJlZi52YWx1ZSkge1xuICAgICAgZXZlbnRzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBjb25zdCBlbCA9IGFjdGl2YXRvclJlZi52YWx1ZS4kZWwgfHwgYWN0aXZhdG9yUmVmLnZhbHVlXG4gICAgICAgIGVsIS5hZGRFdmVudExpc3RlbmVyKGtleSwgbGlzdGVuZXJzW2tleV0pXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHJlbW92ZUFjdGl2YXRvckV2ZW50cyA9ICgpID0+IHtcbiAgICBjb25zdCBldmVudHMgPSBPYmplY3Qua2V5cyhsaXN0ZW5lcnMpXG5cbiAgICBpZiAoYWN0aXZhdG9yUmVmLnZhbHVlKSB7XG4gICAgICBldmVudHMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IGVsID0gYWN0aXZhdG9yUmVmLnZhbHVlLiRlbCB8fCBhY3RpdmF0b3JSZWYudmFsdWVcbiAgICAgICAgZWwhLnJlbW92ZUV2ZW50TGlzdGVuZXIoa2V5LCBsaXN0ZW5lcnNba2V5XSlcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBhY3RpdmF0b3JSZWYsXG4gICAgZ2V0QWN0aXZhdG9yLFxuICAgIGdldEFjdGl2YXRvclNpemVzLFxuICAgIGFkZEFjdGl2YXRvckV2ZW50cyxcbiAgICByZW1vdmVBY3RpdmF0b3JFdmVudHMsXG4gICAgZ2VuQWN0aXZhdG9yTGlzdGVuZXJzXG4gIH1cbn1cbiIsImV4cG9ydCBmdW5jdGlvbiB1c2VEZXRhY2goKSB7XG4gIGxldCB0YXJnZXRcblxuICBjb25zdCBzZXREZXRhY2hlZCA9IChlbDogSFRNTEVsZW1lbnQsIHNlbGVjdG9yOiBzdHJpbmcgPSAnJykgPT4ge1xuICAgIGlmIChzZWxlY3RvcikgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcilcbiAgICBpZiAoIXNlbGVjdG9yKSB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudi1hcHAnKVxuICAgIGlmICghdGFyZ2V0KSB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYXBwJylcbiAgICBpZiAoIXRhcmdldCkgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpXG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoZWwpXG4gIH1cblxuICBjb25zdCByZW1vdmVEZXRhY2hlZCA9IChlbDogSFRNTEVsZW1lbnQpID0+IHtcbiAgICB0YXJnZXQucmVtb3ZlQ2hpbGQoZWwpXG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldERldGFjaGVkLFxuICAgIHJlbW92ZURldGFjaGVkLFxuICB9XG59XG4iLCJmdW5jdGlvbiBjbGlja0hhbmRsZXIoZSwgZWwpIHtcbiAgaWYgKFxuICAgIGVsLmNvbnRhaW5zKGUudGFyZ2V0KSAmJlxuICAgIGVsLl9iaW5kcz8udmFsdWUgJiZcbiAgICAhZWwuX2JpbmRzPy52YWx1ZS5jbG9zZUNvbmRpdGlvbmFsXG4gIClcbiAgICByZXR1cm5cblxuICBpZiAodHlwZW9mIGVsLl9iaW5kcz8udmFsdWUgPT09ICdmdW5jdGlvbicpIGVsLl9iaW5kcy52YWx1ZShlKVxuXG4gIGlmICh0eXBlb2YgZWwuX2JpbmRzPy52YWx1ZSA9PT0gJ29iamVjdCcpIGVsLl9iaW5kcy52YWx1ZS5oYW5kbGVyKGUpXG59XG5cbmZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKGVsKSB7XG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlbC5fb25DbGljaywgdHJ1ZSlcbiAgZGVsZXRlIGVsLl9vbkNsaWNrXG4gIGRlbGV0ZSBlbC5fYmluZHNcbn1cblxuZXhwb3J0IGNvbnN0IGNsaWNrT3V0c2lkZSA9IHtcbiAgYmVmb3JlTW91bnQoZWwsIGJpbmRpbmcpIHtcbiAgICBlbC5fYmluZHMgPSBiaW5kaW5nXG4gIH0sXG5cbiAgbW91bnRlZChlbCkge1xuICAgIGVsLl9vbkNsaWNrID0gKGUpID0+IGNsaWNrSGFuZGxlcihlLCBlbClcbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZWwuX29uQ2xpY2ssIHRydWUpXG4gIH0sXG5cbiAgYmVmb3JlVXBkYXRlKGVsLCBiaW5kaW5nKSB7XG4gICAgZWwuX2JpbmRzID0gYmluZGluZ1xuICB9LFxuXG4gIGJlZm9yZVVubW91bnQoZWwpIHtcbiAgICByZW1vdmVMaXN0ZW5lcihlbClcbiAgfSxcbn1cbiIsIi8vIFZ1ZSBBUElcbmltcG9ydCB7XG4gIGRlZmluZUNvbXBvbmVudCxcbiAgd2F0Y2gsXG4gIGgsXG4gIHdpdGhEaXJlY3RpdmVzLFxuICBjb21wdXRlZCxcbiAgb25Nb3VudGVkLFxuICBvbkJlZm9yZVVubW91bnQsXG4gIHZTaG93LFxuICBWTm9kZSxcbiAgRGlyZWN0aXZlQXJndW1lbnRzLFxufSBmcm9tICd2dWUnXG5cbi8vIENvbXBvc2FibGVcbmltcG9ydCB7XG4gIGF1dG9Qb3NpdGlvblByb3BzLFxuICB1c2VBdXRvUG9zaXRpb24sXG59IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWF1dG8tcG9zaXRpb24nXG5pbXBvcnQgeyBhY3RpdmF0b3JQcm9wcywgdXNlQWN0aXZhdG9yIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtYWN0aXZhdG9yJ1xuaW1wb3J0IHsgdXNlRGV0YWNoIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtZGV0YWNoJ1xuaW1wb3J0IHsgdXNlRWxldmF0aW9uIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtZWxldmF0aW9uJ1xuaW1wb3J0IHsgdXNlVG9nZ2xlIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtdG9nZ2xlJ1xuaW1wb3J0IHsgdXNlVHJhbnNpdGlvbiB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXRyYW5zaXRpb24nXG5pbXBvcnQgeyBwb3NpdGlvblByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtcG9zaXRpb24nXG5cbi8vIEhlbHBlcnNcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG4vLyBEaXJlY3RpdmVzXG5pbXBvcnQgeyBjbGlja091dHNpZGUsIHJlc2l6ZSB9IGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMnXG5cbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvYmFzZSdcblxuZXhwb3J0IGNvbnN0IFZNZW51ID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtbWVudScsXG4gIGRpcmVjdGl2ZXM6IHtcbiAgICBjbGlja091dHNpZGUsXG4gICAgcmVzaXplLFxuICB9LFxuICBwcm9wczoge1xuICAgIG1heEhlaWdodDoge1xuICAgICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICAgIGRlZmF1bHQ6IDIwMCxcbiAgICB9LFxuICAgIHdpZHRoOiB7XG4gICAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgICAgZGVmYXVsdDogMCxcbiAgICB9LFxuICAgIHpJbmRleDoge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IDEwLFxuICAgIH0sXG4gICAgb3Blbk9uSG92ZXI6IEJvb2xlYW4sXG4gICAgb3Blbk9uQ2xpY2s6IEJvb2xlYW4sXG4gICAgb3Blbk9uQ29udGV4dG1lbnU6IEJvb2xlYW4sXG4gICAgY2xvc2VPbkNsaWNrOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB9LFxuICAgIGVsZXZhdGlvbjoge1xuICAgICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICAgIGRlZmF1bHQ6IDEwLFxuICAgIH0sXG4gICAgb2Zmc2V0WDoge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IDIwLFxuICAgIH0sXG4gICAgb2Zmc2V0WToge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IDIwLFxuICAgIH0sXG4gICAgbW9kZWxWYWx1ZTogQm9vbGVhbixcbiAgICBpbnB1dEFjdGl2YXRvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJycsXG4gICAgfSxcbiAgICAuLi5wb3NpdGlvblByb3BzKCksXG4gICAgLi4uYXV0b1Bvc2l0aW9uUHJvcHMoKSxcbiAgICAuLi5hY3RpdmF0b3JQcm9wcygpLFxuICB9LFxuXG4gIGVtaXRzOiBbJ3Nob3cnLCAnaGlkZSddLFxuXG4gIHNldHVwKHByb3BzLCB7IGVtaXQsIHNsb3RzIH0pIHtcbiAgICBjb25zdCB7IGVsZXZhdGlvbkNsYXNzZXMgfSA9IHVzZUVsZXZhdGlvbihwcm9wcylcbiAgICBjb25zdCB7IGlzQWN0aXZlIH0gPSB1c2VUb2dnbGUocHJvcHMpXG4gICAgY29uc3QgeyBjb250ZW50UmVmLCBzZXREaW1lbnNpb25zLCBkaW1lbnNpb25zIH0gPSB1c2VBdXRvUG9zaXRpb24ocHJvcHMpXG4gICAgY29uc3QgeyBzZXREZXRhY2hlZCwgcmVtb3ZlRGV0YWNoZWQgfSA9IHVzZURldGFjaCgpXG4gICAgY29uc3Qge1xuICAgICAgYWN0aXZhdG9yUmVmLFxuICAgICAgZ2V0QWN0aXZhdG9yLFxuICAgICAgZ2VuQWN0aXZhdG9yTGlzdGVuZXJzLFxuICAgICAgYWRkQWN0aXZhdG9yRXZlbnRzLFxuICAgICAgcmVtb3ZlQWN0aXZhdG9yRXZlbnRzLFxuICAgIH0gPSB1c2VBY3RpdmF0b3IocHJvcHMpXG5cbiAgICBjb25zdCBzZXREaW1lbnNpb25zT24gPSAoZSwgZmxhZykgPT4ge1xuICAgICAgc2V0RGltZW5zaW9ucyhnZXRBY3RpdmF0b3IoZSkhKS50aGVuKCgpID0+IHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IChpc0FjdGl2ZS52YWx1ZSA9IGZsYWcpKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBoYW5kbGVycyA9IHtcbiAgICAgIGNsaWNrOiAoZSkgPT4gc2V0RGltZW5zaW9uc09uKGUsIHByb3BzLm9wZW5PbkNsaWNrKSxcbiAgICAgIG1vdXNlZW50ZXI6IChlKSA9PiBzZXREaW1lbnNpb25zT24oZSwgcHJvcHMub3Blbk9uSG92ZXIpLFxuICAgICAgbW91c2VsZWF2ZTogKGUpID0+IHNldERpbWVuc2lvbnNPbihlLCAhcHJvcHMub3Blbk9uSG92ZXIpLFxuICAgICAgY29udGV4dG1lbnU6IChlKSA9PiBzZXREaW1lbnNpb25zT24oZSwgcHJvcHMub3Blbk9uQ29udGV4dG1lbnUpLFxuICAgIH1cblxuICAgIGNvbnN0IGxpc3RlbmVycyA9IGdlbkFjdGl2YXRvckxpc3RlbmVycyhwcm9wcywgaGFuZGxlcnMpXG5cbiAgICBjb25zdCBkaXJlY3RpdmUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gaXNBY3RpdmUudmFsdWVcbiAgICAgICAgPyB7XG4gICAgICAgICAgaGFuZGxlcjogKGUpID0+IHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgcHJvcHMuaW50ZXJuYWxBY3RpdmF0b3IgJiZcbiAgICAgICAgICAgICAgYWN0aXZhdG9yUmVmLnZhbHVlLmNvbnRhaW5zKGUudGFyZ2V0KVxuICAgICAgICAgICAgKSByZXR1cm5cbiAgICAgICAgICAgIGlzQWN0aXZlLnZhbHVlID0gZmFsc2VcbiAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xvc2VDb25kaXRpb25hbDogcHJvcHMuY2xvc2VPbkNsaWNrLFxuICAgICAgICAgIH1cbiAgICAgICAgOiB1bmRlZmluZWRcbiAgICB9KVxuXG4gICAgY29uc3QgY2FsY1dpZHRoID0gY29tcHV0ZWQ8bnVtYmVyIHwgc3RyaW5nPigoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMud2lkdGggfHwgK2RpbWVuc2lvbnMuY29udGVudC53aWR0aFxuICAgIH0pXG5cbiAgICB3YXRjaChpc0FjdGl2ZSwgKHRvKSA9PiB7XG4gICAgICB0byAmJiBlbWl0KCdzaG93JylcbiAgICAgICF0byAmJiBlbWl0KCdoaWRlJylcbiAgICB9KVxuXG4gICAgd2F0Y2goXG4gICAgICAoKSA9PiBbcHJvcHMucG9zaXRpb25ZLCBwcm9wcy5wb3NpdGlvblhdLFxuICAgICAgKCkgPT4gc2V0RGltZW5zaW9ucyhhY3RpdmF0b3JSZWYudmFsdWUhKVxuICAgIClcblxuICAgIHdhdGNoKFxuICAgICAgKCkgPT4gcHJvcHMubW9kZWxWYWx1ZSxcbiAgICAgICh0bykgPT4ge1xuICAgICAgICBpc0FjdGl2ZS52YWx1ZSA9IGZhbHNlXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gKGlzQWN0aXZlLnZhbHVlID0gdG8pKVxuICAgICAgfVxuICAgIClcblxuICAgIGNvbnN0IGNvbnRlbnRDbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1tZW51X19jb250ZW50JzogdHJ1ZSxcbiAgICAgIC4uLmVsZXZhdGlvbkNsYXNzZXMudmFsdWUsXG4gICAgfSkpXG5cbiAgICBjb25zdCBjb250ZW50U3R5bGVzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgc3RyaW5nIHwgbnVtYmVyPj4oKCkgPT4gKHtcbiAgICAgIHRvcDogY29udmVydFRvVW5pdChkaW1lbnNpb25zLmNvbnRlbnQudG9wKSEsXG4gICAgICBsZWZ0OiBjb252ZXJ0VG9Vbml0KGRpbWVuc2lvbnMuY29udGVudC5sZWZ0KSEsXG4gICAgICB6SW5kZXg6IHByb3BzLnpJbmRleCxcbiAgICB9KSkgYXMgYW55XG5cbiAgICBjb25zdCBvbkNvbnRlbnRDbGljayA9ICgpID0+IHtcbiAgICAgIGlzQWN0aXZlLnZhbHVlID0gIXByb3BzLmNsb3NlT25DbGlja1xuICAgIH1cblxuICAgIGNvbnN0IG9uUmVzaXplID0gKCkgPT4ge1xuICAgICAgaWYgKCFpc0FjdGl2ZS52YWx1ZSkgcmV0dXJuXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gc2V0RGltZW5zaW9ucyhhY3RpdmF0b3JSZWYudmFsdWUhKSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5BY3RpdmF0b3JTbG90ID0gKCk6IE1heWJlPFZOb2RlPiA9PiB7XG4gICAgICBpZiAoc2xvdHMuYWN0aXZhdG9yKSB7XG4gICAgICAgIGNvbnN0IHNsb3RDb250ZW50ID0gc2xvdHMuYWN0aXZhdG9yKHsgb246IGxpc3RlbmVycyB9KVxuXG4gICAgICAgIGlmICh0eXBlb2Ygc2xvdENvbnRlbnQhWzBdLnR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgcmV0dXJuIGgoJ2RpdicsIHsgcmVmOiBhY3RpdmF0b3JSZWYgfSwgaChzbG90Q29udGVudCFbMF0pKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGgoc2xvdENvbnRlbnQhWzBdLCB7IHJlZjogYWN0aXZhdG9yUmVmIH0pXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQ29udGVudFNsb3QgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICByZWY6IGNvbnRlbnRSZWYsXG4gICAgICAgIGNsYXNzOiBjb250ZW50Q2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgc3R5bGU6IGNvbnRlbnRTdHlsZXMudmFsdWUsXG4gICAgICAgIG9uQ2xpY2s6IG9uQ29udGVudENsaWNrLFxuICAgICAgfVxuXG4gICAgICBjb25zdCBzbG90Q29udGVudCA9IGgoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3M6ICd2LW1lbnVfX3Nsb3QnLFxuICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBtYXhIZWlnaHQ6IGNvbnZlcnRUb1VuaXQocHJvcHMubWF4SGVpZ2h0KSxcbiAgICAgICAgICAgIHdpZHRoOiBjb252ZXJ0VG9Vbml0KGNhbGNXaWR0aC52YWx1ZSksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgW3Nsb3RzLmRlZmF1bHQgJiYgc2xvdHMuZGVmYXVsdCgpXVxuICAgICAgKVxuXG4gICAgICBjb25zdCBjb250ZW50ID0gaCgnZGl2JywgcHJvcHNEYXRhLCBzbG90Q29udGVudClcblxuICAgICAgY29uc3QgZGlyZWN0aXZlczogRGlyZWN0aXZlQXJndW1lbnRzID0gW1xuICAgICAgICBbdlNob3csIGlzQWN0aXZlLnZhbHVlXSxcbiAgICAgICAgW3Jlc2l6ZSwgb25SZXNpemVdLFxuICAgICAgICBbY2xpY2tPdXRzaWRlLCBkaXJlY3RpdmUudmFsdWVdLFxuICAgICAgXVxuXG4gICAgICByZXR1cm4gd2l0aERpcmVjdGl2ZXMoY29udGVudCwgZGlyZWN0aXZlcylcbiAgICB9XG5cbiAgICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgICAgYWN0aXZhdG9yUmVmLnZhbHVlID0gZ2V0QWN0aXZhdG9yKClcblxuICAgICAgYWRkQWN0aXZhdG9yRXZlbnRzKClcbiAgICAgIHNldERldGFjaGVkKGNvbnRlbnRSZWYudmFsdWUhKVxuICAgIH0pXG5cbiAgICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgICAgcmVtb3ZlQWN0aXZhdG9yRXZlbnRzKClcbiAgICAgIHJlbW92ZURldGFjaGVkKGNvbnRlbnRSZWYudmFsdWUhKVxuICAgIH0pXG5cbiAgICByZXR1cm4gKCkgPT4gW1xuICAgICAgaCgnZGl2JywgeyBjbGFzczogeyAndi1tZW51JzogdHJ1ZSB9IH0pLFxuICAgICAgc2xvdHMuYWN0aXZhdG9yICYmIGdlbkFjdGl2YXRvclNsb3QoKSxcbiAgICAgIHVzZVRyYW5zaXRpb24oZ2VuQ29udGVudFNsb3QoKSwgJ2ZhZGUnKSxcbiAgICBdXG4gIH0sXG59KVxuIiwiZXhwb3J0ICogZnJvbSAnLi9WTWVudSdcbiIsImltcG9ydCB7IHJlYWN0aXZlLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcbi8vIFR5cGVzXG5pbXBvcnQgeyBQcm9wVHlwZSB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vLi4vdHlwZXMvYmFzZSdcblxudHlwZSBFcnJvcnNTdGF0ZSA9IHtcbiAgaW5uZXJFcnJvcjogTWF5YmU8b2JqZWN0PlxuICBpbm5lckVycm9yTWVzc2FnZTogTWF5YmU8c3RyaW5nPlxuICBpc0RpcnR5OiBib29sZWFuXG59XG5cbmV4cG9ydCBjb25zdCB2YWxpZGF0aW9uUHJvcHMgPSAoKSA9PiAoe1xuICBydWxlczoge1xuICAgIHR5cGU6IEFycmF5IGFzIFByb3BUeXBlPEFycmF5PCh2YWw6IGFueSkgPT4gYm9vbGVhbj4+LFxuICAgIGRlZmF1bHQ6IG51bGwsXG4gIH0sXG4gIHZhbHVlOiBbU3RyaW5nLCBOdW1iZXIsIERhdGUsIE9iamVjdF0sXG59KVxuXG5leHBvcnQgY29uc3QgdXNlVmFsaWRhdGlvbiA9IChwcm9wcykgPT4ge1xuICBjb25zdCBlcnJvclN0YXRlID0gcmVhY3RpdmU8RXJyb3JzU3RhdGU+KHtcbiAgICBpbm5lckVycm9yOiBudWxsLFxuICAgIGlubmVyRXJyb3JNZXNzYWdlOiBudWxsLFxuICAgIGlzRGlydHk6IGZhbHNlLFxuICB9KVxuXG4gIGNvbnN0IHZhbGlkYXRpb25DbGFzc2VzID0gKCkgPT4gKHtcbiAgICAnZS12YWxpZGF0YWJsZSc6IHRydWUsXG4gIH0pXG5cbiAgY29uc3QgY29tcHV0ZWRDb2xvciA9IGNvbXB1dGVkPE1heWJlPHN0cmluZz4+KCgpID0+IHtcbiAgICByZXR1cm4gcHJvcHMuZGlzYWJsZWQgPyAnZGlzYWJsZWQnIDogJ3ByaW1hcnknXG4gIH0pXG5cbiAgY29uc3QgaGFzUnVsZXMgPSBjb21wdXRlZDxib29sZWFuPigoKSA9PiB7XG4gICAgcmV0dXJuICEhcHJvcHMucnVsZXMgJiYgcHJvcHMucnVsZXMubGVuZ3RoID4gMFxuICB9KVxuXG4gIGNvbnN0IGRpcnR5ID0gKCkgPT4gKGVycm9yU3RhdGUuaXNEaXJ0eSA9IHRydWUpXG5cbiAgY29uc3QgdXBkYXRlID0gKGVyciwgbXNnID0gbnVsbCkgPT4ge1xuICAgIGlmIChlcnJvclN0YXRlLmlubmVyRXJyb3IgIT09IGVycikge1xuICAgICAgZXJyb3JTdGF0ZS5pbm5lckVycm9yID0gZXJyXG4gICAgfVxuXG4gICAgaWYgKG1zZyAmJiBlcnJvclN0YXRlLmlubmVyRXJyb3JNZXNzYWdlICE9PSBtc2cpIHtcbiAgICAgIGVycm9yU3RhdGUuaW5uZXJFcnJvck1lc3NhZ2UgPSBtc2dcbiAgICB9XG5cbiAgICBpZiAoIW1zZykgZXJyb3JTdGF0ZS5pbm5lckVycm9yTWVzc2FnZSA9IG1zZ1xuXG4gICAgcmV0dXJuIGVycm9yU3RhdGUuaW5uZXJFcnJvclxuICB9XG5cbiAgY29uc3QgdmFsaWRhdGUgPSAodmFsID0gcHJvcHMudmFsdWUpOiBib29sZWFuIHwgdm9pZCA9PiB7XG4gICAgaWYgKCFoYXNSdWxlcy52YWx1ZSkgcmV0dXJuIHRydWVcblxuICAgIGRpcnR5KClcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwcm9wcy5ydWxlcy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgY29uc3QgcnVsZSA9IHByb3BzLnJ1bGVzW2ldXG5cbiAgICAgIGxldCByZXN1bHRcblxuICAgICAgaWYgKHR5cGVvZiBydWxlID09PSAnZnVuY3Rpb24nKSByZXN1bHQgPSBydWxlKHZhbClcblxuICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UgfHwgdHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdXBkYXRlKHRydWUsIHJlc3VsdClcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ID09PSB0cnVlICYmIGkgPT09IGxlbiAtIDEpIHtcbiAgICAgICAgdXBkYXRlKGZhbHNlKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXJyb3JTdGF0ZSxcbiAgICBjb21wdXRlZENvbG9yLFxuICAgIHZhbGlkYXRpb25DbGFzc2VzLFxuICAgIHZhbGlkYXRlLFxuICAgIGRpcnR5LFxuICB9XG59XG4iLCJpbXBvcnQgeyBjb21wdXRlZCwgcmVhY3RpdmUgfSBmcm9tICd2dWUnXG5cbnR5cGUgU3RhdGUgPSB7XG4gIGZvY3VzZWQ6IGJvb2xlYW5cbn1cblxuZXhwb3J0IGNvbnN0IHVzZUlucHV0U3RhdGVzID0gKHByb3BzLCB7IGF0dHJzLCBlbWl0IH0pID0+IHtcbiAgY29uc3Qgc3RhdGUgPSByZWFjdGl2ZTxTdGF0ZT4oe1xuICAgIGZvY3VzZWQ6IGZhbHNlLFxuICB9KVxuXG4gIGNvbnN0IGlzRGlzYWJsZWQgPSBjb21wdXRlZDxib29sZWFuPigoKSA9PiB7XG4gICAgaWYgKHByb3BzLmRpc2FibGVkKSByZXR1cm4gdHJ1ZVxuXG4gICAgaWYgKHR5cGVvZiBhdHRycy5kaXNhYmxlZCA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gYXR0cnMuZGlzYWJsZWRcblxuICAgIHJldHVybiBhdHRycy5kaXNhYmxlZCAhPT0gdW5kZWZpbmVkXG4gIH0pXG5cbiAgY29uc3QgaXNSZWFkb25seSA9IGNvbXB1dGVkPGJvb2xlYW4+KCgpID0+IHtcbiAgICBpZiAocHJvcHMucmVhZG9ubHkpIHJldHVybiB0cnVlXG5cbiAgICBpZiAodHlwZW9mIGF0dHJzLnJlYWRvbmx5ID09PSAnYm9vbGVhbicpIHJldHVybiBhdHRycy5yZWFkb25seVxuXG4gICAgcmV0dXJuIGF0dHJzLnJlYWRvbmx5ICE9PSB1bmRlZmluZWRcbiAgfSlcblxuICBjb25zdCBvbkZvY3VzID0gKGUpID0+IHtcbiAgICBpZiAoaXNSZWFkb25seS52YWx1ZSkgcmV0dXJuXG5cbiAgICBzdGF0ZS5mb2N1c2VkID0gdHJ1ZVxuICAgIGVtaXQoJ2ZvY3VzJywgZSlcbiAgfVxuXG4gIGNvbnN0IG9uQ2hhbmdlID0gKCkgPT4ge1xuICAgIGlmIChpc1JlYWRvbmx5LnZhbHVlKSByZXR1cm5cblxuICAgIGVtaXQoJ2NoYW5nZScpXG4gIH1cblxuICBjb25zdCBvbkJsdXIgPSAoZSkgPT4ge1xuICAgIGlmIChpc1JlYWRvbmx5LnZhbHVlKSByZXR1cm5cblxuICAgIHN0YXRlLmZvY3VzZWQgPSBmYWxzZVxuICAgIGVtaXQoJ2JsdXInLCBlKVxuICB9XG5cbiAgY29uc3Qgb25TZWxlY3QgPSAodmFsKSA9PiB7XG4gICAgc3RhdGUuZm9jdXNlZCA9IGZhbHNlXG4gICAgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCB2YWwpXG4gICAgZW1pdCgnc2VsZWN0JywgdmFsKVxuICAgIG9uQ2hhbmdlKClcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc3RhdGUsXG4gICAgaXNSZWFkb25seSxcbiAgICBpc0Rpc2FibGVkLFxuICAgIG9uRm9jdXMsXG4gICAgb25CbHVyLFxuICAgIG9uQ2hhbmdlLFxuICAgIG9uU2VsZWN0LFxuICB9XG59XG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGgsIGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgdXNlQ29sb3JzLCBjb2xvclByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtY29sb3JzJ1xuXG5leHBvcnQgY29uc3QgVkxhYmVsID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtbGFiZWwnLFxuICBwcm9wczoge1xuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIGZvY3VzZWQ6IEJvb2xlYW4sXG4gICAgLi4uY29sb3JQcm9wcygpLFxuICB9LFxuICBzZXR1cChwcm9wcywgeyBzbG90cyB9KSB7XG4gICAgY29uc3QgeyBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IsIHNldFRleHRDc3NDb2xvciB9ID0gdXNlQ29sb3JzKClcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LWxhYmVsJzogdHJ1ZSxcbiAgICAgICd2LWxhYmVsLS1kaXNhYmxlZCc6IHByb3BzLmRpc2FibGVkLFxuICAgICAgJ3YtbGFiZWwtLWZvY3VzZWQnOiBwcm9wcy5mb2N1c2VkLFxuICAgICAgLi4uKCFwcm9wcy5kaXNhYmxlZCA/IHNldFRleHRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PigoKSA9PiAoe1xuICAgICAgLi4uKCFwcm9wcy5kaXNhYmxlZCA/IHNldFRleHRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICByZXR1cm4gKCkgPT5cbiAgICAgIGgoXG4gICAgICAgICdsYWJlbCcsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgICBzdHlsZTogc3R5bGVzLnZhbHVlLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCksXG4gICAgICAgIH1cbiAgICAgIClcbiAgfSxcbn0pXG4iLCJpbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcbi8vIGltcG9ydCB7IHNpemVzIH0gZnJvbSAnLi4vc2VydmljZXMvc2l6ZS5zZXJ2aWNlJ1xuXG5leHBvcnQgY29uc3Qgc2l6ZVByb3BzID0gKGRlZmF1bHRTaXplOiBzdHJpbmcgPSAnJykgPT4ge1xuICByZXR1cm4ge1xuICAgIHNtOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZGVmYXVsdFNpemUgPT09ICdzbScsXG4gICAgfSxcbiAgICBtZDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGRlZmF1bHRTaXplID09PSAnbWQnLFxuICAgIH0sXG4gICAgbGc6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBkZWZhdWx0U2l6ZSA9PT0gJ2xnJyxcbiAgICB9LFxuICAgIHhsOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZGVmYXVsdFNpemUgPT09ICd4bCcsXG4gICAgfSxcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgdXNlU2l6ZSA9IChwcm9wcykgPT4ge1xuICBjb25zdCBzaXplcyA9IE9iamVjdC5rZXlzKHNpemVQcm9wcygpKVxuXG4gIGNvbnN0IHNpemUgPSBjb21wdXRlZDxzdHJpbmc+KCgpID0+IHNpemVzLmZpbmQoKHMpID0+IHByb3BzW3NdKSEpXG5cbiAgcmV0dXJuIHtcbiAgICBzaXplLFxuICB9XG59XG4iLCJleHBvcnQgZW51bSBzaXplcyB7XG4gIHNtID0gMTYsXG4gIG1kID0gMjQsXG4gIGxnID0gMzIsXG4gIHhsID0gNDAsXG59XG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGgsIGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuXG4vLyBDb21wb3NhYmxlXG5pbXBvcnQgeyB1c2VDb2xvcnMsIGNvbG9yUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG5pbXBvcnQgeyBzaXplUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1zaXplJ1xuXG4vLyBIZWxwZXJzXG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0IH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuXG4vLyBTZXJ2aWNlc1xuaW1wb3J0IHsgc2l6ZXMgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9zaXplcydcblxuZXhwb3J0IGNvbnN0IFZJY29uID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtaWNvbicsXG5cbiAgcHJvcHM6IHtcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICBjbGlja2FibGU6IEJvb2xlYW4sXG4gICAgc2l6ZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICBpY29uOiBTdHJpbmcsXG4gICAgdGFnOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnaScsXG4gICAgfSxcbiAgICAuLi5jb2xvclByb3BzKCksXG4gICAgLi4uc2l6ZVByb3BzKCdzbScpLFxuICB9IGFzIGFueSxcblxuICBlbWl0czogWydjbGljayddLFxuXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzLCBlbWl0IH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3QgeyBzZXRUZXh0Q3NzQ29sb3IsIHNldFRleHRDbGFzc05hbWVDb2xvciB9ID0gdXNlQ29sb3JzKClcbiAgICBjb25zdCBpY29uVGFnID0gcHJvcHMuY2xpY2thYmxlID8gJ2J1dHRvbicgOiBwcm9wcy50YWdcblxuICAgIGNvbnN0IGNvbXB1dGVkSWNvbiA9IGNvbXB1dGVkPHN0cmluZz4oKCkgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgcHJvcHMuaWNvbiB8fFxuICAgICAgICAoc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KClbMF0uY2hpbGRyZW4pXG4gICAgICApPy50cmltKClcbiAgICB9KVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtaWNvbic6IHRydWUsXG4gICAgICAndi1pY29uLS1kaXNhYmxlZCc6IHByb3BzLmRpc2FibGVkLFxuICAgICAgJ3YtaWNvbi0tY2xpY2thYmxlJzogcHJvcHMuY2xpY2thYmxlLFxuICAgICAgW2NvbXB1dGVkSWNvbi52YWx1ZV06ICEhY29tcHV0ZWRJY29uLnZhbHVlLFxuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0VGV4dENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IHN0eWxlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIHN0cmluZz4+KCgpID0+ICh7XG4gICAgICBmb250U2l6ZTogZ2V0U2l6ZXMoKSxcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldFRleHRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBnZXRTaXplcyA9ICgpOiBzdHJpbmcgPT4ge1xuICAgICAgY29uc3Qgc2l6ZVByb3BzID0ge1xuICAgICAgICBzbTogcHJvcHMuc20sXG4gICAgICAgIG1kOiBwcm9wcy5tZCxcbiAgICAgICAgbGc6IHByb3BzLmxnLFxuICAgICAgICB4bDogcHJvcHMueGwsXG4gICAgICB9XG4gICAgICBjb25zdCBleHBsaWNpdFNpemUgPSBPYmplY3Qua2V5cyhzaXplUHJvcHMpLmZpbmQoKGtleSkgPT4gc2l6ZVByb3BzW2tleV0pIVxuXG4gICAgICByZXR1cm4gY29udmVydFRvVW5pdChwcm9wcy5zaXplIHx8IChleHBsaWNpdFNpemUgJiYgc2l6ZXNbZXhwbGljaXRTaXplXSkpIVxuICAgIH1cblxuICAgIGNvbnN0IG9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICBpZiAoIXByb3BzLmRpc2FibGVkICYmIHByb3BzLmNsaWNrYWJsZSkgZW1pdCgnY2xpY2snKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PlxuICAgICAgaChpY29uVGFnLCB7XG4gICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgICBzdHlsZTogc3R5bGVzLnZhbHVlLFxuICAgICAgICBvbkNsaWNrLFxuICAgICAgfSlcbiAgfSxcbn0pXG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQge1xuICBkZWZpbmVDb21wb25lbnQsXG4gIGgsXG4gIHdhdGNoLFxuICBpbmplY3QsXG4gIGNvbXB1dGVkLFxuICBvbkJlZm9yZU1vdW50LFxuICBvbkJlZm9yZVVubW91bnQsXG4gIFZOb2RlXG59IGZyb20gJ3Z1ZSdcblxuLy8gQ29tcG9zYWJsZVxuaW1wb3J0IHsgdXNlVmFsaWRhdGlvbiwgdmFsaWRhdGlvblByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtdmFsaWRhdGlvbidcbmltcG9ydCB7IHVzZUNvbG9ycywgY29sb3JQcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcbmltcG9ydCB7IHVzZUlucHV0U3RhdGVzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtaW5wdXQtc3RhdGVzJ1xuaW1wb3J0IHsgdXNlVHJhbnNpdGlvbiB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXRyYW5zaXRpb24nXG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZMYWJlbCB9IGZyb20gJy4uL1ZMYWJlbCdcbmltcG9ydCB7IFZJY29uIH0gZnJvbSAnLi4vVkljb24nXG5cbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvYmFzZSdcblxudHlwZSBGb3JtID0ge1xuICBhZGQ6IChpdGVtOiAodmFsPzogYW55KSA9PiBib29sZWFuIHwgdm9pZCkgPT4gdm9pZFxuICByZW1vdmU6IChpdGVtOiAodmFsPzogYW55KSA9PiBib29sZWFuIHwgdm9pZCkgPT4gdm9pZFxufVxuXG5leHBvcnQgY29uc3QgVklucHV0ID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtaW5wdXQnLFxuICBjb21wb25lbnRzOiB7XG4gICAgVkxhYmVsLFxuICAgIFZJY29uXG4gIH0sXG4gIGluaGVyaXRBdHRyczogZmFsc2UsXG4gIHByb3BzOiB7XG4gICAgbGFiZWw6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfSxcbiAgICBwcmVwZW5kSWNvbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJydcbiAgICB9LFxuICAgIGFwcGVuZEljb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfSxcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICBmb2N1c2VkOiBCb29sZWFuLFxuICAgIHJlYWRvbmx5OiBCb29sZWFuLFxuICAgIGZpbGU6IEJvb2xlYW4sXG4gICAgaGludHM6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBoaW50TWVzc2FnZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJydcbiAgICB9LFxuICAgIHRleHRDb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJydcbiAgICB9LFxuICAgIC4uLnZhbGlkYXRpb25Qcm9wcygpLFxuICAgIC4uLmNvbG9yUHJvcHMoKVxuICB9LFxuICBlbWl0czogWyAnY2xpY2snIF0sXG4gIHNldHVwKHByb3BzLCB7IGF0dHJzLCBlbWl0LCBzbG90cyB9KSB7XG4gICAgY29uc3QgeyB2YWxpZGF0ZSwgZXJyb3JTdGF0ZSB9ID0gdXNlVmFsaWRhdGlvbihwcm9wcylcbiAgICBjb25zdCB7IHNldFRleHRDc3NDb2xvciwgc2V0VGV4dENsYXNzTmFtZUNvbG9yIH0gPSB1c2VDb2xvcnMoKVxuICAgIGNvbnN0IHsgaXNEaXNhYmxlZCwgaXNSZWFkb25seSB9ID0gdXNlSW5wdXRTdGF0ZXMocHJvcHMsIHsgYXR0cnMsIGVtaXQgfSlcblxuICAgIGNvbnN0IGZvcm06IE1heWJlPEZvcm0+ID0gaW5qZWN0KCdmb3JtJywgbnVsbCBhcyBhbnkpXG5cbiAgICBjb25zdCB0ZXh0Q2xhc3NDb2xvciA9IHNldFRleHRDbGFzc05hbWVDb2xvcihwcm9wcy50ZXh0Q29sb3IpXG4gICAgY29uc3QgdGV4dENzc0NvbG9yID0gc2V0VGV4dENzc0NvbG9yKHByb3BzLnRleHRDb2xvcilcblxuICAgIGNvbnN0IGhhc1ByZXBlbmRJY29uID0gY29tcHV0ZWQ8Ym9vbGVhbj4oKCkgPT4ge1xuICAgICAgcmV0dXJuICEhcHJvcHMucHJlcGVuZEljb24gfHwgISFzbG90c1sncHJlcGVuZC1pY29uJ11cbiAgICB9KVxuXG4gICAgY29uc3QgaGFzQXBwZW5kSWNvbiA9IGNvbXB1dGVkPGJvb2xlYW4+KCgpID0+IHtcbiAgICAgIHJldHVybiAhIXByb3BzLmFwcGVuZEljb24gfHwgISFzbG90c1snYXBwZW5kLWljb24nXVxuICAgIH0pXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1pbnB1dCc6IHRydWUsXG4gICAgICAndi1pbnB1dC0tcHJpbWFyeSc6ICFwcm9wcy5jb2xvcixcbiAgICAgICd2LWlucHV0LS1mb2N1c2VkJzogcHJvcHMuZm9jdXNlZCAmJiAhaXNSZWFkb25seS52YWx1ZSxcbiAgICAgICd2LWlucHV0LS1kaXNhYmxlZCc6IGlzRGlzYWJsZWQudmFsdWUsXG4gICAgICAndi1pbnB1dC0tcmVhZG9ubHknOiBpc1JlYWRvbmx5LnZhbHVlLFxuICAgICAgJ3YtaW5wdXQtLWZpbGUnOiBwcm9wcy5maWxlLFxuICAgICAgJ3YtaW5wdXQtLWhhcy1wcmVwZW5kLWljb24nOiBoYXNQcmVwZW5kSWNvbi52YWx1ZSxcbiAgICAgICd2LWlucHV0LS1oYXMtYXBwZW5kLWljb24nOiBoYXNBcHBlbmRJY29uLnZhbHVlLFxuICAgICAgJ3YtaW5wdXQtLW5vdC12YWxpZCc6ICEhZXJyb3JTdGF0ZS5pbm5lckVycm9yLFxuICAgICAgLi4uKCFwcm9wcy5kaXNhYmxlZCAmJiAhZXJyb3JTdGF0ZS5pbm5lckVycm9yXG4gICAgICAgID8gc2V0VGV4dENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKVxuICAgICAgICA6IHt9KSxcbiAgICAgIC4uLihhdHRycy5jbGFzcyBhcyBvYmplY3QpXG4gICAgfSkpXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PigoKSA9PiAoe1xuICAgICAgLi4uKCFwcm9wcy5kaXNhYmxlZCAmJiAhZXJyb3JTdGF0ZS5pbm5lckVycm9yXG4gICAgICAgID8gc2V0VGV4dENzc0NvbG9yKHByb3BzLmNvbG9yKVxuICAgICAgICA6IHt9KSxcbiAgICAgIC4uLihhdHRycy5zdHlsZSBhcyBvYmplY3QpXG4gICAgfSkpXG5cbiAgICB3YXRjaChcbiAgICAgICgpID0+IHByb3BzLmZvY3VzZWQsXG4gICAgICAodG8pID0+ICF0byAmJiB2YWxpZGF0ZSgpXG4gICAgKVxuXG4gICAgd2F0Y2goXG4gICAgICAoKSA9PiBwcm9wcy52YWx1ZSxcbiAgICAgICgpID0+IHZhbGlkYXRlKClcbiAgICApXG5cbiAgICBjb25zdCBnZW5MYWJlbCA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICBjb25zdCBsYWJlbCA9IGgoXG4gICAgICAgIFZMYWJlbCxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzOiAndi1sYWJlbC0tb24taW5wdXQnLFxuICAgICAgICAgIGRpc2FibGVkOiBpc0Rpc2FibGVkLnZhbHVlLFxuICAgICAgICAgIGZvY3VzZWQ6IHByb3BzLmZvY3VzZWQsXG4gICAgICAgICAgY29sb3I6ICFlcnJvclN0YXRlLmlubmVyRXJyb3IgPyBwcm9wcy5jb2xvciA6ICcnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBwcm9wcy5sYWJlbFxuICAgICAgICB9XG4gICAgICApXG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCB7IGNsYXNzOiAndi1pbnB1dF9fbGFiZWwnIH0sIFsgbGFiZWwgXSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5JY29uID0gKGljb25OYW1lLCBjbGlja2FibGUgPSBmYWxzZSk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKFZJY29uLCB7XG4gICAgICAgIGljb246IGljb25OYW1lLFxuICAgICAgICBzaXplOiAxNixcbiAgICAgICAgZGlzYWJsZWQ6IHByb3BzLmRpc2FibGVkLFxuICAgICAgICBjbGlja2FibGVcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuUHJlcGVuZEljb24gPSAoKTogTWF5YmU8Vk5vZGU+ID0+IHtcbiAgICAgIGxldCBjb250ZW50XG5cbiAgICAgIGlmIChwcm9wcy5wcmVwZW5kSWNvbikge1xuICAgICAgICBjb250ZW50ID0gZ2VuSWNvbihwcm9wcy5wcmVwZW5kSWNvbilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRlbnQgPSBzbG90c1sncHJlcGVuZC1pY29uJ10/LigpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50ID9cbiAgICAgICAgaCgnZGl2JywgeyBjbGFzczogJ3YtaW5wdXRfX3ByZXBlbmQtaWNvbicgfSwgY29udGVudClcbiAgICAgICAgOiBudWxsXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQXBwZW5kSWNvbiA9ICgpOiBNYXliZTxWTm9kZT4gPT4ge1xuICAgICAgbGV0IGNvbnRlbnRcblxuICAgICAgaWYgKHByb3BzLmFwcGVuZEljb24pIHtcbiAgICAgICAgY29udGVudCA9IGdlbkljb24ocHJvcHMuYXBwZW5kSWNvbilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRlbnQgPSBzbG90c1snYXBwZW5kLWljb24nXT8uKClcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQgP1xuICAgICAgICBoKCdkaXYnLCB7IGNsYXNzOiAndi1pbnB1dF9fYXBwZW5kLWljb24nIH0sIGNvbnRlbnQpXG4gICAgICAgIDogbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IGdlblRleHRGaWVsZFNsb3QgPSAoKSA9PiB7XG4gICAgICBjb25zdCBwcmVwZW5kSWNvbkNvbnRlbnQgPSBnZW5QcmVwZW5kSWNvbigpXG4gICAgICBjb25zdCBhcHBlbmRJY29uQ29udGVudCA9IGdlbkFwcGVuZEljb24oKVxuICAgICAgY29uc3QgeyBkaXNhYmxlZCB9ID0gcHJvcHNcblxuICAgICAgY29uc3QgdGV4dEZpZWxkQ29udGVudCA9IHNsb3RzWyd0ZXh0LWZpZWxkJ10/Lih7XG4gICAgICAgIHRleHRDc3NDb2xvcixcbiAgICAgICAgdGV4dENsYXNzQ29sb3IsXG4gICAgICAgIGRpc2FibGVkXG4gICAgICB9KVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgeyBjbGFzczogJ3YtaW5wdXRfX3RleHQtZmllbGQnIH0sXG4gICAgICAgIFsgcHJlcGVuZEljb25Db250ZW50LCB0ZXh0RmllbGRDb250ZW50LCBhcHBlbmRJY29uQ29udGVudCBdXG4gICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuSGludE1lc3NhZ2UgPSAoKTogTWF5YmU8Vk5vZGU+ID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5oaW50TWVzc2FnZSB8fCBlcnJvclN0YXRlLmlubmVyRXJyb3JNZXNzYWdlID9cbiAgICAgICAgaChcbiAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgeyBjbGFzczogJ3YtaW5wdXRfX2hpbnRzLW1lc3NhZ2UnIH0sXG4gICAgICAgICAgWyBlcnJvclN0YXRlLmlubmVyRXJyb3JNZXNzYWdlIF1cbiAgICAgICAgKVxuICAgICAgICA6IG51bGxcbiAgICB9XG5cbiAgICBjb25zdCBnZW5IaW50cyA9ICgpOiBNYXliZTxWTm9kZT4gPT4ge1xuICAgICAgcmV0dXJuIChwcm9wcy5oaW50cyB8fCBwcm9wcy5ydWxlcykgPyBoKFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBjbGFzczogJ3YtaW5wdXRfX2hpbnRzJyB9LFxuICAgICAgICB1c2VUcmFuc2l0aW9uKGdlbkhpbnRNZXNzYWdlKCkhLCAnZmFkZScpXG4gICAgICApIDogbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IGdlblNlbGVjdFNsb3QgPSAoKTogTWF5YmU8Vk5vZGU+ID0+IHtcbiAgICAgIHJldHVybiBzbG90cy5zZWxlY3QgP1xuICAgICAgICBoKCdkaXYnLCB7IGNsYXNzOiAndi1pbnB1dF9fc2VsZWN0cycgfSwgc2xvdHMuc2VsZWN0Py4oKSlcbiAgICAgICAgOiBudWxsXG4gICAgfVxuXG4gICAgb25CZWZvcmVNb3VudCgoKSA9PiB7XG4gICAgICBpZiAocHJvcHMucnVsZXMpIGZvcm0/LmFkZCh2YWxpZGF0ZSlcbiAgICB9KVxuXG4gICAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICAgIGZvcm0/LnJlbW92ZSh2YWxpZGF0ZSlcbiAgICB9KVxuXG4gICAgcmV0dXJuICgpID0+IGgoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgY2xhc3M6IGNsYXNzZXMudmFsdWUsIHN0eWxlOiBzdHlsZXMudmFsdWUgfSxcbiAgICAgIFtcbiAgICAgICAgcHJvcHMubGFiZWwgJiYgZ2VuTGFiZWwoKSxcbiAgICAgICAgZ2VuVGV4dEZpZWxkU2xvdCgpLFxuICAgICAgICBnZW5IaW50cygpLFxuICAgICAgICBnZW5TZWxlY3RTbG90KClcbiAgICAgIF1cbiAgICApXG4gIH1cbn0pXG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGgsIGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVklucHV0IH0gZnJvbSAnLi4vVklucHV0J1xuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZUlucHV0U3RhdGVzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtaW5wdXQtc3RhdGVzJ1xuXG5leHBvcnQgY29uc3QgVlRleHRGaWVsZCA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LXRleHQtZmllbGQnLFxuICBjb21wb25lbnRzOiB7XG4gICAgVklucHV0LFxuICB9LFxuICBpbmhlcml0QXR0cnM6IHRydWUsXG4gIHByb3BzOiB7XG4gICAgbW9kZWxWYWx1ZToge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6ICcnLFxuICAgIH0sXG4gIH0sXG4gIGVtaXRzOiBbJ3VwZGF0ZTptb2RlbFZhbHVlJywgJ2lucHV0JywgJ2JsdXInLCAnZm9jdXMnLCAnY2hhbmdlJ10sXG4gIHNldHVwKHByb3BzLCB7IGVtaXQsIGF0dHJzIH0pIHtcbiAgICBjb25zdCB7IGlzUmVhZG9ubHksIGlzRGlzYWJsZWQsIHN0YXRlLCBvbkZvY3VzLCBvbkJsdXIsIG9uQ2hhbmdlIH0gPVxuICAgICAgdXNlSW5wdXRTdGF0ZXMocHJvcHMsIHsgZW1pdCwgYXR0cnMgfSlcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LXRleHQtZmllbGQnOiB0cnVlLFxuICAgICAgJ3YtdGV4dC1maWVsZC0tZGlzYWJsZWQnOiBpc0Rpc2FibGVkLnZhbHVlLFxuICAgICAgJ3YtdGV4dC1maWVsZC0tcmVhZG9ubHknOiBpc1JlYWRvbmx5LnZhbHVlLFxuICAgIH0pKVxuXG4gICAgY29uc3QgY29tcHV0ZWRWYWx1ZSA9IGNvbXB1dGVkKHtcbiAgICAgIGdldDogKCkgPT4gcHJvcHMubW9kZWxWYWx1ZSxcblxuICAgICAgc2V0OiAodmFsOiBzdHJpbmcpID0+IHtcbiAgICAgICAgZW1pdCgnaW5wdXQnLCB2YWwpXG4gICAgICAgIGVtaXQoJ3VwZGF0ZTptb2RlbFZhbHVlJywgdmFsKVxuICAgICAgfSxcbiAgICB9KVxuXG4gICAgY29uc3Qgb25JbnB1dCA9IChlKSA9PiB7XG4gICAgICBjb21wdXRlZFZhbHVlLnZhbHVlID0gZS50YXJnZXQudmFsdWVcbiAgICB9XG5cbiAgICBjb25zdCBnZW5JbnB1dEZpZWxkID0gKHRleHRDbGFzc0NvbG9yLCB0ZXh0Q3NzQ29sb3IpID0+IHtcbiAgICAgIHJldHVybiBoKCdpbnB1dCcsIHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi10ZXh0LWZpZWxkX19pbnB1dCc6IHRydWUsXG4gICAgICAgICAgLi4uKCFhdHRycy5kaXNhYmxlZCAmJiB0ZXh0Q2xhc3NDb2xvciksXG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgLi4uKCFhdHRycy5kaXNhYmxlZCA/IHRleHRDc3NDb2xvciA6IHt9KSxcbiAgICAgICAgfSxcbiAgICAgICAgZGlzYWJsZWQ6IGF0dHJzLmRpc2FibGVkLFxuICAgICAgICB0eXBlOiBhdHRycy50eXBlID8gYXR0cnMudHlwZSA6ICd0ZXh0JyxcbiAgICAgICAgcGxhY2Vob2xkZXI6IGF0dHJzLnBsYWNlaG9sZGVyLFxuICAgICAgICByZWFkb25seTogYXR0cnMucmVhZG9ubHksXG4gICAgICAgIHZhbHVlOiBjb21wdXRlZFZhbHVlLnZhbHVlLFxuICAgICAgICBvbklucHV0LFxuICAgICAgICBvbkZvY3VzLFxuICAgICAgICBvbkJsdXIsXG4gICAgICAgIG9uQ2hhbmdlLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5UZXh0RmllbGRXcmFwcGVyID0gKGNsc0NvbG9yLCBjc3NDb2xvcikgPT4ge1xuICAgICAgcmV0dXJuIGgoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgIH0sXG4gICAgICAgIGdlbklucHV0RmllbGQoY2xzQ29sb3IsIGNzc0NvbG9yKVxuICAgICAgKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PlxuICAgICAgaChcbiAgICAgICAgVklucHV0LFxuICAgICAgICB7XG4gICAgICAgICAgZm9jdXNlZDogc3RhdGUuZm9jdXNlZCxcbiAgICAgICAgICB2YWx1ZTogY29tcHV0ZWRWYWx1ZS52YWx1ZSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFsndGV4dC1maWVsZCddOiAoeyB0ZXh0Q2xhc3NDb2xvciwgdGV4dENzc0NvbG9yIH0pID0+IHtcbiAgICAgICAgICAgIHJldHVybiBnZW5UZXh0RmllbGRXcmFwcGVyKHRleHRDbGFzc0NvbG9yLCB0ZXh0Q3NzQ29sb3IpXG4gICAgICAgICAgfSxcbiAgICAgICAgfVxuICAgICAgKVxuICB9LFxufSlcbiIsImV4cG9ydCB7IFZUZXh0RmllbGQgfSBmcm9tICcuL1ZUZXh0RmllbGQnXG4iLCJleHBvcnQgKiBmcm9tIFwiLi9WSW5wdXRcIlxuIiwiZXhwb3J0IGVudW0gRmFJY29ucyB7XG4gICRhZGQgPSAnZmFzIGZhLXBsdXMnLFxuICAkZGVsZXRlID0gJ2ZhcyBmYS10cmFzaC1hbHQnLFxuICAkc2xpZGVycyA9ICdmYXMgZmEtc2xpZGVycy1oJyxcbiAgJGVkaXQgPSAnZmFzIGZhLXBlbicsXG4gICRtZW51ID0gJ2ZhcyBmYS1iYXJzJyxcbiAgJGNoZXZyb25Eb3duID0gJ2ZhcyBmYS1jaGV2cm9uLWRvd24nLFxuICAkY2FyZXREb3duID0gJ2ZhcyBmYS1jYXJldC1kb3duJyxcbiAgJHJhZGlvT24gPSAnZmFyIGZhLWRvdC1jaXJjbGUnLFxuICAkcmFkaW9PZmYgPSAnZmFyIGZhLWNpcmNsZScsXG4gICRjaGVja09uID0gJ2ZhcyBmYS1jaGVjay1zcXVhcmUnLFxuICAkY2hlY2tPZmYgPSAnZmFyIGZhLXNxdWFyZScsXG4gICRhcnJvd1JpZ2h0ID0gJ2ZhcyBmYS1jaGV2cm9uLXJpZ2h0JyxcbiAgJGFycm93TGVmdCA9ICdmYXMgZmEtY2hldnJvbi1sZWZ0JyxcbiAgJGFycm93VXAgPSAnZmFzIGZhLWFycm93LXVwJyxcbiAgJGZpbHRlciA9ICdmYXMgZmEtYWxpZ24tanVzdGlmeScsXG4gICRtYXJrZXIgPSAnZmFzIGZhLW1hcC1tYXJrZXItYWx0JyxcbiAgJHNlYXJjaCA9ICdmYXMgZmEtc2VhcmNoJyxcbiAgJGNsb3NlID0gJ2ZhcyBmYS10aW1lcycsXG4gICRwYXBlcmNsaXAgPSAnZmFzIGZhLXBhcGVyY2xpcCdcbn1cblxuZXhwb3J0IGVudW0gTWF0ZXJpYWxJY29ucyB7XG4gICRhZGQgPSAnYWRkJyxcbiAgJGRlbGV0ZSA9ICdkZWxldGVfZm9yZXZlcicsXG4gICRzbGlkZXJzID0gJ2ZhcyBmYS1zbGlkZXJzLWgnLFxuICAkZWRpdCA9ICdmYXMgZmEtcGVuJyxcbiAgJG1lbnUgPSAnZmFzIGZhLWJhcnMnLFxuICAkZXhwYW5kID0gJ2V4cGFuZF9tb3JlJyxcbiAgJGdyb3VwID0gJ2V4cGFuZF9tb3JlJyxcbiAgJHN1Ymdyb3VwID0gJ2Fycm93X2Ryb3BfZG93bicsXG4gICRkcm9wZG93biA9ICdmYXMgZmEtY2FyZXQtZG93bicsXG4gICRyYWRpb09uID0gJ2ZhciBmYS1kb3QtY2lyY2xlJyxcbiAgJHJhZGlvT2ZmID0gJ2ZhciBmYS1jaXJjbGUnLFxuICAkY2hlY2tPbiA9ICdjaGVja19ib3gnLFxuICAkY2hlY2tPZmYgPSAnY2hlY2tfYm94X291dGxpbmVfYmxhbmsnLFxuICAkYXJyb3dSaWdodCA9ICdjaGV2cm9uX3JpZ2h0JyxcbiAgJGFycm93TGVmdCA9ICdjaGV2cm9uX2xlZnQnLFxuICAkYXJyb3dVcCA9ICdhcnJvd191cHdhcmQnLFxuICAkZmlsdGVyID0gJ2ZpbHRlcl9saXN0JyxcbiAgJG1hcmtlciA9ICdmYXMgZmEtbWFwLW1hcmtlci1hbHQnLFxuICAkc2VhcmNoID0gJ3NlYXJjaCcsXG4gICRjbG9zZSA9ICdjbGVhcicsXG59XG5cbmV4cG9ydCBlbnVtIE1hdGVyaWFsU2l6ZXMge1xuICAneHMnID0gMTQsXG4gICdzJyA9IDE4LFxuICAnbWQnID0gMjAsXG4gICdsJyA9IDI4LFxuICAneGwnID0gMzZcbn1cblxuZXhwb3J0IGVudW0gRmFTaXplcyB7XG4gICd4cycgPSAxMixcbiAgJ3MnID0gMTQsXG4gICdtZCcgPSAxOCxcbiAgJ2wnID0gMjQsXG4gICd4bCcgPSAzMlxufVxuIiwiaW1wb3J0IHsgaW5qZWN0IH0gZnJvbSAndnVlJ1xuaW1wb3J0IHtcbiAgRmFJY29ucyxcbiAgTWF0ZXJpYWxJY29ucyxcbn0gZnJvbSAnLi4vc2VydmljZXMvaWNvbnMnXG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VJY29ucygpIHtcbiAgY29uc3Qgb3B0aW9uczogYW55ID0gaW5qZWN0KCckb3B0aW9ucycpXG5cbiAgbGV0IGljb25zOiBhbnkgPSBGYUljb25zXG5cbiAgaWYgKG9wdGlvbnM/Lmljb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuaWNvbnMuaW5jbHVkZXMoJ21hdGVyaWFsLWljb25zJykpIHtcbiAgICAgIGljb25zID0gTWF0ZXJpYWxJY29uc1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7IGljb25zIH1cbn1cbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaCwgY29tcHV0ZWQgfSBmcm9tICd2dWUnXG5cbmltcG9ydCB7IFZJY29uIH0gZnJvbSAnLi4vVkljb24nXG5cbmltcG9ydCB7IHVzZUNvbG9ycywgY29sb3JQcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcbmltcG9ydCB7IHVzZUljb25zIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtaWNvbnMnXG5cbmV4cG9ydCBjb25zdCBWQ2hpcCA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWNoaXAnLFxuICBwcm9wczoge1xuICAgIHRpdGxlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJyxcbiAgICB9LFxuICAgIHRleHRDb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJyNmZmZmZmYnLFxuICAgIH0sXG4gICAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gICAgY2xvc2FibGU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICAuLi5jb2xvclByb3BzKCdwcmltYXJ5JyksXG4gIH0sXG4gIGVtaXRzOiBbJ2Nsb3NlJ10sXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzLCBlbWl0IH0pIHtcbiAgICBjb25zdCB7XG4gICAgICBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IsXG4gICAgICBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IsXG4gICAgICBzZXRUZXh0Q3NzQ29sb3IsXG4gICAgICBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IsXG4gICAgfSA9IHVzZUNvbG9ycygpXG4gICAgY29uc3QgeyBpY29ucyB9ID0gdXNlSWNvbnMoKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtY2hpcCc6IHRydWUsXG4gICAgICAndi1jaGlwLS1kaXNhYmxlZCc6IHByb3BzLmRpc2FibGVkLFxuICAgICAgLi4uKCFwcm9wcy5kaXNhYmxlZCA/IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgICAuLi5zZXRUZXh0Q2xhc3NOYW1lQ29sb3IocHJvcHMudGV4dENvbG9yKSxcbiAgICB9KSlcblxuICAgIGNvbnN0IHN0eWxlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIHN0cmluZz4+KCgpID0+ICh7XG4gICAgICAuLi4oIXByb3BzLmRpc2FibGVkID8gc2V0QmFja2dyb3VuZENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICAgIC4uLnNldFRleHRDc3NDb2xvcihwcm9wcy50ZXh0Q29sb3IpLFxuICAgIH0pKVxuXG4gICAgY29uc3QgZ2VuQ2xvc2VJY29uID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGgoVkljb24sIHtcbiAgICAgICAgaWNvbjogaWNvbnMuJGNsb3NlLFxuICAgICAgICBjbGlja2FibGU6ICFwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgb25DbGljazogKCkgPT4gZW1pdCgnY2xvc2UnKSxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQ2hpcENvbnRlbnQgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogJ3YtY2hpcF9fY29udGVudCcsXG4gICAgICB9LCBzbG90cy5kZWZhdWx0Py4oKSB8fCBwcm9wcy50aXRsZSlcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4gaCgnc3BhbicsIHtcbiAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgc3R5bGU6IHN0eWxlcy52YWx1ZSxcbiAgICB9LCBbXG4gICAgICBnZW5DaGlwQ29udGVudCgpLFxuICAgICAgcHJvcHMuY2xvc2FibGUgPyBnZW5DbG9zZUljb24oKSA6IG51bGwsXG4gICAgXSlcbiAgfSxcbn0pXG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyBoLCBkZWZpbmVDb21wb25lbnQsIHJlZiwgY29tcHV0ZWQsIFByb3BUeXBlIH0gZnJvbSAndnVlJ1xuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVklucHV0IH0gZnJvbSAnLi4vVklucHV0J1xuaW1wb3J0IHsgVkNoaXAgfSBmcm9tICcuLi9WQ2hpcCdcbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VJY29ucyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWljb25zJ1xuaW1wb3J0IHsgdXNlSW5wdXRTdGF0ZXMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1pbnB1dC1zdGF0ZXMnXG4vLyBIZWxwZXJzXG5pbXBvcnQgeyB1bmlxdWVBcnJheSB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG4vLyBUeXBlc1xuaW1wb3J0IHsgTWF5YmUgfSBmcm9tICcuLi8uLi8uLi90eXBlcy9iYXNlJ1xuXG5leHBvcnQgY29uc3QgVkZpbGVJbnB1dCA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWZpbGUtaW5wdXQnLFxuICBwcm9wczoge1xuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIG11bHRpcGxlOiBCb29sZWFuLFxuICAgIGNoaXBDb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3ByaW1hcnknLFxuICAgIH0sXG4gICAgdmFsdWU6IHtcbiAgICAgIHR5cGU6IEFycmF5IGFzIFByb3BUeXBlPEFycmF5PEZpbGU+PixcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFtdLFxuICAgIH0sXG4gIH0sXG4gIGVtaXRzOiBbJ3VwZGF0ZTp2YWx1ZScsICdkZWxldGUnXSxcbiAgc2V0dXAocHJvcHMsIHsgZW1pdCwgYXR0cnMgfSkge1xuICAgIGNvbnN0IHsgaWNvbnMgfSA9IHVzZUljb25zKClcbiAgICBjb25zdCB7IGlzRGlzYWJsZWQsIGlzUmVhZG9ubHkgfSA9IHVzZUlucHV0U3RhdGVzKHByb3BzLCB7IGVtaXQsIGF0dHJzIH0pXG5cbiAgICBjb25zdCBpbnB1dFJlZiA9IHJlZjxNYXliZTxIVE1MSW5wdXRFbGVtZW50Pj4obnVsbClcbiAgICBjb25zdCBzcmNSZWYgPSByZWY8TWF5YmU8SFRNTEVsZW1lbnQ+PihudWxsKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICAndi1maWxlLWlucHV0JzogdHJ1ZSxcbiAgICAgICd2LWZpbGUtaW5wdXQtLWRpc2FibGVkJzogaXNEaXNhYmxlZC52YWx1ZSxcbiAgICAgICd2LWZpbGUtaW5wdXQtLXJlYWRvbmx5JzogaXNSZWFkb25seS52YWx1ZSxcbiAgICAgICd2LWZpbGUtaW5wdXQtLW11bHRpcGxlJzogcHJvcHMubXVsdGlwbGUsXG4gICAgfSkpXG5cbiAgICBjb25zdCBvbkNoYW5nZSA9IChldmVudCkgPT4ge1xuICAgICAgbGV0IGZpbGVzID0gQXJyYXkuZnJvbShldmVudC50YXJnZXQuZmlsZXMpIGFzIEZpbGVbXVxuXG4gICAgICBpZiAocHJvcHMubXVsdGlwbGUpIHtcbiAgICAgICAgZmlsZXMgPSB1bmlxdWVBcnJheTxGaWxlPihwcm9wcy52YWx1ZS5jb25jYXQoZmlsZXMpKVxuICAgICAgfVxuXG4gICAgICBldmVudC50YXJnZXQudmFsdWUgPSAnJ1xuICAgICAgZW1pdCgndXBkYXRlOnZhbHVlJywgZmlsZXMpXG4gICAgfVxuXG4gICAgY29uc3Qgb25DbG9zZSA9IChmaWxlKSA9PiB7XG4gICAgICBjb25zdCBmaWxlcyA9IHByb3BzLnZhbHVlLmZpbHRlcihpdCA9PiB7XG4gICAgICAgIHJldHVybiBmaWxlLm5hbWUgIT09IGl0Lm5hbWVcbiAgICAgIH0pXG5cbiAgICAgIGVtaXQoJ3VwZGF0ZTp2YWx1ZScsIGZpbGVzKVxuICAgICAgZW1pdCgnZGVsZXRlJywgZmlsZSlcbiAgICB9XG5cbiAgICBjb25zdCBvbkNsaWNrID0gKHsgc3JjRWxlbWVudCB9KSA9PiB7XG4gICAgICBpZiAoc3JjRWxlbWVudCAhPT0gc3JjUmVmLnZhbHVlKSByZXR1cm5cbiAgICAgIGlucHV0UmVmLnZhbHVlIS5jbGljaygpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuRmlsZUlucHV0ID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2lucHV0Jywge1xuICAgICAgICBjbGFzczogJ3YtZmlsZS1pbnB1dF9fZmllbGQnLFxuICAgICAgICB0eXBlOiAnZmlsZScsXG4gICAgICAgIG11bHRpcGxlOiBwcm9wcy5tdWx0aXBsZSxcbiAgICAgICAgcmVmOiBpbnB1dFJlZixcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgICAgICAgfSxcbiAgICAgICAgb25DaGFuZ2UsXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkNoaXBzID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIHVuaXF1ZUFycmF5PEZpbGU+KHByb3BzLnZhbHVlKVxuICAgICAgICAubWFwKGZpbGUgPT4gaChWQ2hpcCwge1xuICAgICAgICAgICAgdGl0bGU6IGZpbGUubmFtZSxcbiAgICAgICAgICAgIGNsYXNzOiAnbWEtMScsXG4gICAgICAgICAgICBjb2xvcjogcHJvcHMuY2hpcENvbG9yLFxuICAgICAgICAgICAgb25DbG9zZTogKCkgPT4gb25DbG9zZShmaWxlKSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkNoaXBzQ29udGFpbmVyID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcbiAgICAgICAgY2xhc3M6ICd2LWZpbGUtaW5wdXRfX2NvbnRhaW5lcicsXG4gICAgICAgIHJlZjogc3JjUmVmLFxuICAgICAgfSwgZ2VuQ2hpcHMoKSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5Db21wb25lbnQgPSAoKSA9PiBoKCdkaXYnLCB7XG4gICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgIG9uQ2xpY2ssXG4gICAgfSwgW1xuICAgICAgZ2VuRmlsZUlucHV0KCksXG4gICAgICBnZW5DaGlwc0NvbnRhaW5lcigpLFxuICAgIF0pXG5cbiAgICByZXR1cm4gKCkgPT4gaChWSW5wdXQsIHtcbiAgICAgIHByZXBlbmRJY29uOiBpY29ucy4kcGFwZXJjbGlwLFxuICAgICAgZmlsZTogdHJ1ZSxcbiAgICAgIGRpc2FibGVkOiBpc0Rpc2FibGVkLnZhbHVlLFxuICAgIH0sIHtcbiAgICAgICd0ZXh0LWZpZWxkJzogKCkgPT4gZ2VuQ29tcG9uZW50KCksXG4gICAgfSlcbiAgfSxcbn0pXG4iLCJleHBvcnQgeyBWRmlsZUlucHV0IH0gZnJvbSAnLi9WRmlsZUlucHV0J1xuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoLCBwcm92aWRlLCB3YXRjaCwgY29tcHV0ZWQsIG9uTW91bnRlZCB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IHVzZUNvbG9ycywgY29sb3JQcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcbmltcG9ydCB7IG1hcFRvVmFsQXJyYXkgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG5leHBvcnQgY29uc3QgVkxpc3QgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1saXN0JyxcbiAgcHJvcHM6IHtcbiAgICB2YWx1ZToge1xuICAgICAgdHlwZTogWyBOdW1iZXIsIEFycmF5IF0sXG4gICAgICBkZWZhdWx0OiBudWxsXG4gICAgfSxcbiAgICBtdWx0aXBsZTogQm9vbGVhbixcbiAgICBhY3RpdmU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH0sXG4gICAgYWN0aXZlQ2xhc3M6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfSxcbiAgICB0ZXh0Q29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfSxcbiAgICAuLi5jb2xvclByb3BzKClcbiAgfSxcbiAgZW1pdHM6IFsgJ3VwZGF0ZTp2YWx1ZScgXSxcbiAgc2V0dXAocHJvcHMsIHsgZW1pdCwgc2xvdHMgfSkge1xuICAgIGNvbnN0IHtcbiAgICAgIHNldFRleHRDbGFzc05hbWVDb2xvcixcbiAgICAgIHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcixcbiAgICAgIHNldFRleHRDc3NDb2xvcixcbiAgICAgIHNldEJhY2tncm91bmRDc3NDb2xvclxuICAgIH0gPSB1c2VDb2xvcnMoKVxuXG4gICAgY29uc3QgaXRlbXMgPSBuZXcgTWFwKClcbiAgICBsZXQgaXNUcnVzdGVkU2VsZWN0ID0gZmFsc2VcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LWxpc3QnOiB0cnVlLFxuICAgICAgJ3YtbGlzdC0tYWN0aXZlJzogcHJvcHMuYWN0aXZlLFxuICAgICAgLi4uc2V0VGV4dENsYXNzTmFtZUNvbG9yKHByb3BzLnRleHRDb2xvciksXG4gICAgICAuLi5zZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpXG4gICAgfSkpXG5cbiAgICAvLyBjb25zdCBpc05hbiA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAvLyAgIHJldHVybiBpc05hTihwYXJzZUZsb2F0KGAkeyBwcm9wcy52YWx1ZSB9YCkpXG4gICAgLy8gfSlcblxuICAgIGNvbnN0IHN0eWxlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIHN0cmluZz4+KCgpID0+ICh7XG4gICAgICAuLi5zZXRUZXh0Q3NzQ29sb3IocHJvcHMudGV4dENvbG9yKSxcbiAgICAgIC4uLnNldEJhY2tncm91bmRDc3NDb2xvcihwcm9wcy5jb2xvcilcbiAgICB9KSlcblxuICAgIGNvbnN0IHJlZ2lzdGVyID0gKGl0ZW0pID0+IHtcbiAgICAgICFpdGVtcy5oYXMoaXRlbSkgJiYgaXRlbXMuc2V0KGl0ZW0sIGl0ZW0pXG4gICAgfVxuXG4gICAgY29uc3QgdW5yZWdpc3RlciA9IChpdGVtKSA9PiB7XG4gICAgICBpdGVtcy5oYXMoaXRlbSkgJiYgaXRlbXMuZGVsZXRlKGl0ZW0pXG4gICAgfVxuXG4gICAgY29uc3QgZGlzcGF0Y2hFdmVudCA9ICh2YWwpID0+IHtcbiAgICAgIGlzVHJ1c3RlZFNlbGVjdCA9IHRydWVcbiAgICAgIGVtaXQoJ3VwZGF0ZTp2YWx1ZScsIHZhbClcbiAgICB9XG5cbiAgICBjb25zdCBzZXRBY3RpdmVJdGVtID0gKGl0ZW0pID0+IHtcbiAgICAgIG1hcFRvVmFsQXJyYXkoaXRlbXMpLmZvckVhY2goKGl0KSA9PiB7XG4gICAgICAgIGl0LmlzQWN0aXZlLnZhbHVlID0gaXQgPT09IGl0ZW1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgdG9nZ2xlSXRlbSA9IChpdGVtKSA9PiB7XG4gICAgICBpdGVtLmlzQWN0aXZlLnZhbHVlID0gIWl0ZW0uaXNBY3RpdmUudmFsdWVcbiAgICB9XG5cbiAgICBjb25zdCBwcmVwYXJlSW5kZXhlcyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlcyA9IG1hcFRvVmFsQXJyYXkoaXRlbXMpXG4gICAgICBjb25zdCB7IG11bHRpcGxlIH0gPSBwcm9wc1xuXG4gICAgICBsZXQgdmFsID0gbXVsdGlwbGUgPyBbXSA6IDBcblxuICAgICAgdmFsdWVzLmZvckVhY2goKGl0LCBpKSA9PiB7XG4gICAgICAgIGlmIChpdC5pc0FjdGl2ZS52YWx1ZSkge1xuICAgICAgICAgIG11bHRpcGxlICYmICh2YWwgYXMgbnVtYmVyW10pLnB1c2goaSlcbiAgICAgICAgICAhbXVsdGlwbGUgJiYgKHZhbCA9IGkpXG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiB2YWxcbiAgICB9XG5cbiAgICBjb25zdCBvbkNsaWNrID0gKGl0ZW0pID0+IHtcbiAgICAgIGlmICghcHJvcHMuYWN0aXZlKSByZXR1cm5cblxuICAgICAgcHJvcHMubXVsdGlwbGUgJiYgdG9nZ2xlSXRlbShpdGVtKVxuICAgICAgIXByb3BzLm11bHRpcGxlICYmIHNldEFjdGl2ZUl0ZW0oaXRlbSlcblxuICAgICAgZGlzcGF0Y2hFdmVudChwcmVwYXJlSW5kZXhlcygpKVxuICAgIH1cblxuICAgIGNvbnN0IHNldEl0ZW1TdGF0ZSA9ICh2YWx1ZSkgPT4ge1xuICAgICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gc2V0QWN0aXZlSXRlbSh2YWx1ZSlcblxuICAgICAgY29uc3QgdmFsdWVzID0gbWFwVG9WYWxBcnJheShpdGVtcylcblxuICAgICAgaWYgKHByb3BzLm11bHRpcGxlKSB7XG4gICAgICAgIDsodmFsdWUgYXMgbnVtYmVyW10pLmZvckVhY2goKGluZCkgPT4gdG9nZ2xlSXRlbSh2YWx1ZXNbaW5kXSkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRBY3RpdmVJdGVtKHZhbHVlc1t2YWx1ZSBhcyBudW1iZXJdKVxuICAgICAgfVxuICAgIH1cblxuICAgIHdhdGNoKCgpID0+IHByb3BzLnZhbHVlLCAodG8pID0+IHtcbiAgICAgICAgaWYgKCFpc1RydXN0ZWRTZWxlY3QpIHNldEl0ZW1TdGF0ZSh0bylcbiAgICAgICAgaXNUcnVzdGVkU2VsZWN0ICYmIChpc1RydXN0ZWRTZWxlY3QgPSBmYWxzZSlcbiAgICAgIH1cbiAgICApXG5cbiAgICBvbk1vdW50ZWQoKCkgPT4gc2V0SXRlbVN0YXRlKHByb3BzLnZhbHVlKSlcblxuICAgIHByb3ZpZGUoJ2xpc3QnLCB7XG4gICAgICBhZGQ6IHJlZ2lzdGVyLFxuICAgICAgcmVtb3ZlOiB1bnJlZ2lzdGVyLFxuICAgICAgY2xpY2s6IG9uQ2xpY2ssXG4gICAgICBhY3RpdmVDbGFzczogcHJvcHMuYWN0aXZlQ2xhc3NcbiAgICB9KVxuXG4gICAgcmV0dXJuICgpID0+IGgoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgY2xhc3M6IGNsYXNzZXMudmFsdWUsIHN0eWxlOiBzdHlsZXMudmFsdWUgfSxcbiAgICAgIHsgZGVmYXVsdDogKCkgPT4gc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCkgfVxuICAgIClcbiAgfVxufSlcbiIsImltcG9ydCB7XG4gIGRlZmluZUNvbXBvbmVudCxcbiAgaCxcbiAgaW5qZWN0LFxuICByZWYsXG4gIGNvbXB1dGVkLFxuICBvbkJlZm9yZVVubW91bnQsXG4gIG9uQmVmb3JlTW91bnQsXG59IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IExpc3QgfSBmcm9tICcuLi8uLi8uLi90eXBlcy9jb21wb25lbnRzJ1xuaW1wb3J0IHsgTWF5YmUgfSBmcm9tICcuLi8uLi8uLi90eXBlcy9iYXNlJ1xuXG5leHBvcnQgY29uc3QgVkxpc3RJdGVtID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtbGlzdC1pdGVtJyxcbiAgZW1pdHM6IFsnY2xpY2snXSxcblxuICBzZXR1cChfLCB7IGVtaXQsIHNsb3RzIH0pIHtcbiAgICBjb25zdCBpdGVtUmVmID0gcmVmPE1heWJlPEhUTUxFbGVtZW50Pj4obnVsbClcbiAgICBjb25zdCBpc0FjdGl2ZSA9IHJlZjxib29sZWFuPihmYWxzZSlcbiAgICBjb25zdCBsaXN0OiBMaXN0ID0gaW5qZWN0KCdsaXN0JywgbnVsbCBhcyBhbnkpXG5cbiAgICBjb25zdCBpdGVtID0geyBpdGVtUmVmLCBpc0FjdGl2ZSB9XG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1saXN0LWl0ZW0nOiB0cnVlLFxuICAgICAgJ3YtbGlzdC1pdGVtLS1zZWxlY3RlZCc6ICFsaXN0LmFjdGl2ZUNsYXNzICYmIGlzQWN0aXZlLnZhbHVlLFxuICAgICAgW2xpc3Q/LmFjdGl2ZUNsYXNzXTogaXNBY3RpdmUudmFsdWUsXG4gICAgfSkpXG5cbiAgICBjb25zdCBvbkNsaWNrID0gKCkgPT4ge1xuICAgICAgbGlzdD8uY2xpY2soaXRlbSlcbiAgICAgIGVtaXQoJ2NsaWNrJylcbiAgICB9XG5cbiAgICBvbkJlZm9yZU1vdW50KCgpID0+IHtcbiAgICAgIGxpc3Q/LmFkZChpdGVtKVxuICAgIH0pXG5cbiAgICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgICAgbGlzdD8ucmVtb3ZlKGl0ZW0pXG4gICAgfSlcblxuICAgIHJldHVybiAoKSA9PlxuICAgICAgaChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgICByZWY6IGl0ZW1SZWYsXG4gICAgICAgICAgb25DbGljayxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IHNsb3RzLmRlZmF1bHQgJiYgc2xvdHMuZGVmYXVsdCh7IGFjdGl2ZTogaXNBY3RpdmUgfSksXG4gICAgICAgIH1cbiAgICAgIClcbiAgfSxcbn0pXG4iLCJpbXBvcnQgeyBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsIH0gZnJvbSAnLi4vLi4vaGVscGVycydcbmltcG9ydCB7IFZMaXN0IH0gZnJvbSAnLi9WTGlzdCdcbmltcG9ydCB7IFZMaXN0SXRlbSB9IGZyb20gJy4vVkxpc3RJdGVtJ1xuXG5jb25zdCBWTGlzdEl0ZW1UaXRsZSA9IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwoJ3YtbGlzdC1pdGVtX190aXRsZScpXG5jb25zdCBWTGlzdEl0ZW1TdWJ0aXRsZSA9IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwoJ3YtbGlzdC1pdGVtX19zdWJ0aXRsZScpXG5jb25zdCBWTGlzdEl0ZW1Db250ZW50ID0gY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCgndi1saXN0LWl0ZW1fX2NvbnRlbnQnKVxuY29uc3QgVkxpc3RJdGVtSWNvbiA9IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwoJ3YtbGlzdC1pdGVtX19pY29uJylcblxuZXhwb3J0IHtcbiAgVkxpc3QsXG4gIFZMaXN0SXRlbSxcbiAgVkxpc3RJdGVtVGl0bGUsXG4gIFZMaXN0SXRlbUNvbnRlbnQsXG4gIFZMaXN0SXRlbVN1YnRpdGxlLFxuICBWTGlzdEl0ZW1JY29uLFxufVxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoLCB3YXRjaCwgY29tcHV0ZWQgfSBmcm9tICd2dWUnXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWTGlzdCwgVkxpc3RJdGVtLCBWTGlzdEl0ZW1UaXRsZSB9IGZyb20gJy4uL1ZMaXN0J1xuLy8gSGVscGVyc1xuaW1wb3J0IHsgZ2V0U3RyaW5nS2V5c1ZhbHVlIH0gZnJvbSAnLi4vLi4vaGVscGVycydcbi8vIFR5cGVzXG5pbXBvcnQgeyBNYXliZSB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL2Jhc2UnXG5cbmV4cG9ydCBjb25zdCBWU2VsZWN0TGlzdCA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LXNlbGVjdC1saXN0JyxcbiAgcHJvcHM6IHtcbiAgICBpdGVtczoge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gICAgY29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcjZmZmZmZmJyxcbiAgICB9LFxuICAgIHRleHRDb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJycsXG4gICAgfSxcbiAgICB2YWx1ZUtleToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJycsXG4gICAgfSxcbiAgICBzZWxlY3RlZDoge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyLCBPYmplY3RdLFxuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICB9LFxuICAgIGFjdGl2ZUNsYXNzOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJyxcbiAgICB9LFxuICB9LFxuICBlbWl0czogWydzZWxlY3QnXSxcbiAgc2V0dXAocHJvcHMsIHsgZW1pdCB9KSB7XG4gICAgY29uc3QgY29tcHV0ZWRTZWxlY3QgPSBjb21wdXRlZDxNYXliZTxudW1iZXI+Pih7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHByb3BzLnZhbHVlS2V5XG5cbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRWYWx1ZSA9IGtleSA/IHByb3BzLnNlbGVjdGVkID8gZ2V0U3RyaW5nS2V5c1ZhbHVlKFxuICAgICAgICAgIGtleSxcbiAgICAgICAgICBwcm9wcy5zZWxlY3RlZCxcbiAgICAgICAgKSA6IG51bGwgOiBwcm9wcy5zZWxlY3RlZFxuXG4gICAgICAgIHJldHVybiBwcm9wcy5zZWxlY3RlZCA/IHByb3BzLml0ZW1zLmZpbmRJbmRleCgoaXQpID0+IHtcbiAgICAgICAgICBjb25zdCBpdGVtVmFsdWUgPSBrZXkgPyBnZXRTdHJpbmdLZXlzVmFsdWUoa2V5LCBpdCkgOiBpdFxuXG4gICAgICAgICAgcmV0dXJuIGl0ZW1WYWx1ZSA9PT0gc2VsZWN0ZWRWYWx1ZVxuICAgICAgICB9KSA6IG51bGxcbiAgICAgIH0sXG5cbiAgICAgIHNldCh2YWw6IG51bWJlcikge1xuICAgICAgICBlbWl0KCdzZWxlY3QnLCBwcm9wcy5pdGVtc1t2YWxdKVxuICAgICAgfSxcbiAgICB9KVxuXG4gICAgd2F0Y2goY29tcHV0ZWRTZWxlY3QsIHRvID0+IGNvbnNvbGUubG9nKHRvKSlcblxuICAgIGNvbnN0IGdlbkl0ZW1zID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLml0ZW1zLnJlZHVjZSgoYWNjLCBpdCwgaSkgPT4ge1xuICAgICAgICBjb25zdCBjb250ZW50ID0gcHJvcHMudmFsdWVLZXkgP1xuICAgICAgICAgIGdldFN0cmluZ0tleXNWYWx1ZShwcm9wcy52YWx1ZUtleSwgaXQpIDogaXQgYXMgYW55XG5cbiAgICAgICAgKGFjYyBhcyBhbnlbXSkucHVzaChcbiAgICAgICAgICBoKFZMaXN0SXRlbSwgeyBrZXk6IGkgfSwge1xuICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gaChWTGlzdEl0ZW1UaXRsZSwge30sIHtcbiAgICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gY29udGVudCxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pKVxuXG4gICAgICAgIHJldHVybiBhY2NcbiAgICAgIH0sIFtdKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkl0ZW1zTGlzdCA9ICgpID0+IHtcbiAgICAgIHJldHVybiBoKFZMaXN0LCB7XG4gICAgICAgIHZhbHVlOiBjb21wdXRlZFNlbGVjdC52YWx1ZSBhcyBudW1iZXIsXG4gICAgICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICAgICAgY29sb3I6ICcjZmZmZmZmJyxcbiAgICAgICAgYWN0aXZlQ2xhc3M6IHByb3BzLmFjdGl2ZUNsYXNzLFxuICAgICAgICBbJ29uVXBkYXRlOnZhbHVlJ106IHZhbCA9PiBjb21wdXRlZFNlbGVjdC52YWx1ZSA9IHZhbCxcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gZ2VuSXRlbXMoKSxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IGgoJ2RpdicsIHtcbiAgICAgIGNsYXNzOiAndi1zZWxlY3QtbGlzdCcsXG4gICAgfSwgW3Byb3BzLml0ZW1zID8gZ2VuSXRlbXNMaXN0KCkgOiBudWxsXSlcbiAgfSxcbn0pXG5cbiIsImltcG9ydCB7IGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQsIGgsIHJlZiwgVk5vZGUgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyB1c2VJbnB1dFN0YXRlcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWlucHV0LXN0YXRlcydcbmltcG9ydCB7IGdldFN0cmluZ0tleXNWYWx1ZSB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZJbnB1dCB9IGZyb20gJy4uL1ZJbnB1dCdcbmltcG9ydCB7IFZNZW51IH0gZnJvbSAnLi4vVk1lbnUnXG5pbXBvcnQgeyBWSWNvbiB9IGZyb20gJy4uL1ZJY29uJ1xuXG5pbXBvcnQgeyBWU2VsZWN0TGlzdCB9IGZyb20gJy4vVlNlbGVjdExpc3QnXG5cbi8vIFNlcnZpY2VzXG5pbXBvcnQgeyBGYUljb25zIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvaWNvbnMnXG5cbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvYmFzZSdcblxuZXhwb3J0IGNvbnN0IFZTZWxlY3QgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1zZWxlY3QnLFxuICBwcm9wczoge1xuICAgIG1vZGVsVmFsdWU6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlciwgT2JqZWN0XSxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgfSxcbiAgICBpdGVtczoge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gICAgdmFsdWVLZXk6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnLFxuICAgIH0sXG4gICAgYWN0aXZlQ2xhc3M6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdwcmltYXJ5IHdoaXRlLS10ZXh0IHRleHQtLWJhc2UnLFxuICAgIH0sXG4gIH0sXG4gIGVtaXRzOiBbJ2NsaWNrJywgJ2ZvY3VzJywgJ3NlbGVjdCcsICdibHVyJywgJ2NoYW5nZScsICd1cGRhdGU6bW9kZWxWYWx1ZSddLFxuICBzZXR1cChwcm9wcywgeyBhdHRycywgZW1pdCB9KSB7XG4gICAgY29uc3QgeyBpc0Rpc2FibGVkLCBpc1JlYWRvbmx5LCBzdGF0ZSwgb25CbHVyLCBvblNlbGVjdCwgb25Gb2N1cyB9ID1cbiAgICAgIHVzZUlucHV0U3RhdGVzKHByb3BzLCB7IGF0dHJzLCBlbWl0IH0pXG5cbiAgICBjb25zdCBhY3RpdmF0b3IgPSByZWY8TWF5YmU8SFRNTEVsZW1lbnQ+PihudWxsKVxuXG4gICAgY29uc3QgY29tcHV0ZWRWYWx1ZSA9IGNvbXB1dGVkPHN0cmluZyB8IG51bWJlcj4oKCkgPT4ge1xuICAgICAgaWYgKCEhcHJvcHMubW9kZWxWYWx1ZSAmJiB0eXBlb2YgcHJvcHMubW9kZWxWYWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGdldFN0cmluZ0tleXNWYWx1ZShwcm9wcy52YWx1ZUtleSwgcHJvcHMubW9kZWxWYWx1ZSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb3BzLm1vZGVsVmFsdWVcbiAgICB9KVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3Ytc2VsZWN0JzogdHJ1ZSxcbiAgICAgICd2LXNlbGVjdC0tZXhwYW5kZWQnOiBzdGF0ZS5mb2N1c2VkLFxuICAgICAgJ3Ytc2VsZWN0LS1yZWFkb25seSc6IGlzUmVhZG9ubHkudmFsdWUsXG4gICAgICAndi1zZWxlY3QtLWRpc2FibGVkJzogaXNEaXNhYmxlZC52YWx1ZSxcbiAgICB9KSlcblxuICAgIGNvbnN0IGdlbklucHV0ID0gKHsgdGV4dENzc0NvbG9yLCB0ZXh0Q2xhc3NDb2xvciwgZGlzYWJsZWQgfSkgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2lucHV0Jywge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LXNlbGVjdF9faW5wdXQnOiB0cnVlLFxuICAgICAgICAgIC4uLihkaXNhYmxlZCA/IHRleHRDbGFzc0NvbG9yIDoge30pLFxuICAgICAgICB9LFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIC4uLighZGlzYWJsZWQgPyB0ZXh0Q3NzQ29sb3IgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICAgIGRpc2FibGVkOiBpc0Rpc2FibGVkLnZhbHVlLFxuICAgICAgICB0eXBlOiBhdHRycy50eXBlIHx8ICd0ZXh0JyxcbiAgICAgICAgcGxhY2Vob2xkZXI6IGF0dHJzLnBsYWNlaG9sZGVyLFxuICAgICAgICB2YWx1ZTogY29tcHV0ZWRWYWx1ZS52YWx1ZSxcbiAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlblNlbGVjdExpc3QgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoVk1lbnUsIHtcbiAgICAgICAgaW50ZXJuYWxBY3RpdmF0b3I6IHRydWUsXG4gICAgICAgIGFjdGl2YXRvcjogYWN0aXZhdG9yLnZhbHVlISxcbiAgICAgICAgaW5wdXRBY3RpdmF0b3I6ICcudi1pbnB1dF9fdGV4dC1maWVsZCcsXG4gICAgICAgIG9wZW5PbkNsaWNrOiAhaXNEaXNhYmxlZC52YWx1ZSAmJiAhaXNSZWFkb25seS52YWx1ZSxcbiAgICAgICAgbWF4SGVpZ2h0OiAyNDAsXG4gICAgICAgIHpJbmRleDogMTIsXG4gICAgICAgIG9uU2hvdzogb25Gb2N1cyxcbiAgICAgICAgb25IaWRlOiBvbkJsdXIsXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IGgoVlNlbGVjdExpc3QsIHtcbiAgICAgICAgICBpdGVtczogcHJvcHMuaXRlbXMsXG4gICAgICAgICAgc2VsZWN0ZWQ6IHByb3BzLm1vZGVsVmFsdWUsXG4gICAgICAgICAgdmFsdWVLZXk6IHByb3BzLnZhbHVlS2V5LFxuICAgICAgICAgIGFjdGl2ZUNsYXNzOiBwcm9wcy5hY3RpdmVDbGFzcyxcbiAgICAgICAgICBvblNlbGVjdCxcbiAgICAgICAgfSksXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkV4cGFuZEljb24gPSAoKTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoVkljb24sIHtcbiAgICAgICAgaWNvbjogRmFJY29ucy4kY2hldnJvbkRvd24sXG4gICAgICAgIGNvbG9yOiAhaXNEaXNhYmxlZC52YWx1ZSA/IGF0dHJzLmNvbG9yIDogJycsXG4gICAgICAgIHNpemU6IDE2LFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5TZWxlY3QgPSAoeyB0ZXh0Q3NzQ29sb3IsIHRleHRDbGFzc0NvbG9yLCBkaXNhYmxlZCB9KSA9PiB7XG4gICAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgIH0sIGdlbklucHV0KHsgdGV4dENzc0NvbG9yLCB0ZXh0Q2xhc3NDb2xvciwgZGlzYWJsZWQgfSkpXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IGgoVklucHV0LCB7XG4gICAgICByZWY6IGFjdGl2YXRvcixcbiAgICAgIHZhbHVlOiBjb21wdXRlZFZhbHVlLnZhbHVlLFxuICAgICAgZm9jdXNlZDogc3RhdGUuZm9jdXNlZCxcbiAgICB9LCB7XG4gICAgICBbJ3RleHQtZmllbGQnXTogKHsgdGV4dENzc0NvbG9yLCB0ZXh0Q2xhc3NDb2xvciwgZGlzYWJsZWQgfSkgPT4ge1xuICAgICAgICByZXR1cm4gZ2VuU2VsZWN0KHsgdGV4dENzc0NvbG9yLCB0ZXh0Q2xhc3NDb2xvciwgZGlzYWJsZWQgfSlcbiAgICAgIH0sXG4gICAgICBbJ2FwcGVuZC1pY29uJ106ICgpID0+IGdlbkV4cGFuZEljb24oKSxcbiAgICAgIHNlbGVjdDogKCkgPT4gYWN0aXZhdG9yLnZhbHVlID8gZ2VuU2VsZWN0TGlzdCgpIDogbnVsbCxcbiAgICB9KVxuICB9LFxufSlcbiIsImV4cG9ydCB7IFZTZWxlY3QgfSBmcm9tICcuL1ZTZWxlY3QnXG5leHBvcnQgeyBWU2VsZWN0TGlzdCB9IGZyb20gJy4vVlNlbGVjdExpc3QnXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIHByb3ZpZGUsIGggfSBmcm9tICd2dWUnXG5cbmV4cG9ydCBjb25zdCBWRm9ybSA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWZvcm0nLFxuICBzZXR1cChfLCB7IHNsb3RzIH0pIHtcbiAgICBsZXQgZmllbGRzOiBBcnJheTwoLi4uYXJnczogYW55KSA9PiBQcm9taXNlPGJvb2xlYW4+PiA9IFtdXG5cbiAgICBjb25zdCBhZGRGaWVsZFZhbGlkYXRvciA9IChpdGVtKSA9PiB7XG4gICAgICBmaWVsZHMucHVzaChpdGVtKVxuICAgIH1cblxuICAgIGNvbnN0IHJlbW92ZUZpZWxkVmFsaWRhdG9yID0gKGl0ZW0pID0+IHtcbiAgICAgIGZpZWxkcyA9IGZpZWxkcy5maWx0ZXIoKHYpID0+IHYgIT09IGl0ZW0pXG4gICAgfVxuXG4gICAgcHJvdmlkZSgnZm9ybScsIHtcbiAgICAgIGFkZDogYWRkRmllbGRWYWxpZGF0b3IsXG4gICAgICByZW1vdmU6IHJlbW92ZUZpZWxkVmFsaWRhdG9yLFxuICAgIH0pXG5cbiAgICBjb25zdCB2YWxpZGF0ZSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHByb21pc2VzOiBBcnJheTxQcm9taXNlPGJvb2xlYW4+PiA9IFtdXG5cbiAgICAgIGZpZWxkcy5mb3JFYWNoKCh2OiAoLi4uYXJnczogYW55KSA9PiBQcm9taXNlPGJvb2xlYW4+KSA9PiB7XG4gICAgICAgIHByb21pc2VzLnB1c2godigpKVxuICAgICAgfSlcblxuICAgICAgcmV0dXJuICFwcm9taXNlcy5zb21lKChmKSA9PiAhZikgPyBQcm9taXNlLnJlc29sdmUoKSA6IFByb21pc2UucmVqZWN0KClcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT5cbiAgICAgIGgoJ2Zvcm0nLCB7XG4gICAgICAgICAgY2xhc3M6ICd2LWZvcm0nLFxuICAgICAgICAgIG9uU3VibWl0OiAoZSkgPT4gZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoeyB2YWxpZGF0ZSB9KSxcbiAgICAgICAgfVxuICAgICAgKVxuICB9LFxufSlcbiIsImV4cG9ydCAqIGZyb20gJy4vVkZvcm0nXG4iLCJleHBvcnQgKiBmcm9tIFwiLi9WTGFiZWxcIlxuIiwiLy8gVnVlIEFQSVxuaW1wb3J0IHsgdlNob3csIGgsIGNvbXB1dGVkLCB3aXRoRGlyZWN0aXZlcywgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJ1xuXG4vLyBFZmZlY3RzXG5pbXBvcnQgeyBwb3NpdGlvblByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtcG9zaXRpb24nXG5pbXBvcnQgeyB1c2VDb2xvcnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG5pbXBvcnQgeyB1c2VUb2dnbGUgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS10b2dnbGUnXG5pbXBvcnQgeyB1c2VFbGV2YXRpb24sIGVsZXZhdGlvblByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtZWxldmF0aW9uJ1xuaW1wb3J0IHsgdXNlVHJhbnNpdGlvbiB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXRyYW5zaXRpb24nXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gJ3Z1ZSdcblxuZXhwb3J0IGNvbnN0IFZCYWRnZSA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWJhZGdlJyxcblxuICBwcm9wczoge1xuICAgIGRvdDogQm9vbGVhbixcbiAgICBhdmF0YXI6IEJvb2xlYW4sXG4gICAgYm9yZGVyOiBCb29sZWFuLFxuICAgIHRvZ2dsZTogQm9vbGVhbixcbiAgICBjb250ZW50OiB7XG4gICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgfSxcbiAgICBjb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3ByaW1hcnknLFxuICAgIH0sXG4gICAgdHJhbnNpdGlvbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3NjYWxlSW4nLFxuICAgIH0sXG4gICAgb2Zmc2V0WToge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IDBcbiAgICB9LFxuICAgIG9mZnNldFg6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiAwXG4gICAgfSxcbiAgICAuLi5wb3NpdGlvblByb3BzKCksXG4gICAgLi4uZWxldmF0aW9uUHJvcHMoKSxcbiAgfSBhcyBhbnksXG5cbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSk6ICgpID0+IFZOb2RlIHtcbiAgICBjb25zdCB7IGVsZXZhdGlvbkNsYXNzZXMgfSA9IHVzZUVsZXZhdGlvbihwcm9wcylcbiAgICBjb25zdCB7IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvciwgc2V0QmFja2dyb3VuZENzc0NvbG9yIH0gPSB1c2VDb2xvcnMoKVxuXG4gICAgY29uc3Qgb2Zmc2V0ID0gY29tcHV0ZWQ8bnVtYmVyPigoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMuZG90ID8gNCA6IDEyXG4gICAgfSlcblxuICAgIGNvbnN0IGNhbGNQb3NpdGlvbiA9IChvZmZzZXRWYWw6IHN0cmluZyB8IG51bWJlciA9IDApOiBzdHJpbmcgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBvZmZzZXQudmFsdWUgLSBOdW1iZXIob2Zmc2V0VmFsKVxuICAgICAgcmV0dXJuIGAke3ZhbHVlfXB4YFxuICAgIH1cblxuICAgIGNvbnN0IGNvbXB1dGVkTGVmdCA9IGNvbXB1dGVkPHN0cmluZyB8IGJvb2xlYW4+KCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5sZWZ0ICYmIGNhbGNQb3NpdGlvbihwcm9wcy5vZmZzZXRYKVxuICAgIH0pXG5cbiAgICBjb25zdCBjb21wdXRlZFJpZ2h0ID0gY29tcHV0ZWQ8c3RyaW5nIHwgYm9vbGVhbj4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLnJpZ2h0ICYmIGNhbGNQb3NpdGlvbihwcm9wcy5vZmZzZXRYKVxuICAgIH0pXG5cbiAgICBjb25zdCBjb21wdXRlZFRvcCA9IGNvbXB1dGVkPHN0cmluZyB8IGJvb2xlYW4+KCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy50b3AgJiYgY2FsY1Bvc2l0aW9uKHByb3BzLm9mZnNldFkpXG4gICAgfSlcblxuICAgIGNvbnN0IGNvbXB1dGVkQm90dG9tID0gY29tcHV0ZWQ8c3RyaW5nIHwgYm9vbGVhbj4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLmJvdHRvbSAmJiBjYWxjUG9zaXRpb24ocHJvcHMub2Zmc2V0WSlcbiAgICB9KVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtYmFkZ2UnOiB0cnVlLFxuICAgICAgJ3YtYmFkZ2UtLWJvcmRlcic6IHByb3BzLmJvcmRlcixcbiAgICAgICd2LWJhZGdlLS1kb3QnOiBwcm9wcy5kb3QsXG4gICAgICAndi1iYWRnZS0tYXZhdGFyJzogcHJvcHMuYXZhdGFyLFxuICAgIH0pKVxuXG4gICAgY29uc3QgYmFkZ2VDbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1iYWRnZV9fYmFkZ2UnOiB0cnVlLFxuICAgICAgLi4uZWxldmF0aW9uQ2xhc3Nlcy52YWx1ZSxcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgIHRvcDogY29tcHV0ZWRUb3AudmFsdWUsXG4gICAgICByaWdodDogY29tcHV0ZWRSaWdodC52YWx1ZSxcbiAgICAgIGJvdHRvbTogY29tcHV0ZWRCb3R0b20udmFsdWUsXG4gICAgICBsZWZ0OiBjb21wdXRlZExlZnQudmFsdWUsXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgZnVuY3Rpb24gYWRkQ29udGVudCgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgICAgaWYgKHByb3BzLmRvdCkgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgaWYgKHByb3BzLmNvbnRlbnQpIHJldHVybiBTdHJpbmcocHJvcHMuY29udGVudClcblxuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbkJhZGdlU2xvdCgpOiBWTm9kZSB8IG51bGwge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LWJhZGdlX19iYWRnZS1zbG90JzogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNsb3RzLmJhZGdlID8gaCgnZGl2JywgcHJvcHNEYXRhLCBzbG90cy5iYWRnZSgpKSA6IG51bGxcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5Db250ZW50KCk6IFZOb2RlIHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1iYWRnZV9fY29udGVudCc6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIFthZGRDb250ZW50KCksIGdlbkJhZGdlU2xvdCgpXSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5CYWRnZSgpOiBWTm9kZSB7XG4gICAgICByZXR1cm4gaChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzczogYmFkZ2VDbGFzc2VzLnZhbHVlLFxuICAgICAgICAgIHN0eWxlOiBzdHlsZXMudmFsdWUsXG4gICAgICAgIH0sXG4gICAgICAgIGdlbkNvbnRlbnQoKVxuICAgICAgKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBsZXQgYmFkZ2UgPSBnZW5CYWRnZSgpXG5cbiAgICAgIGlmIChwcm9wcy50b2dnbGUgJiYgIXNsb3RzLmJhZGdlKSB7XG4gICAgICAgIGNvbnN0IHsgaXNBY3RpdmUgfSA9IHVzZVRvZ2dsZShwcm9wcywgJ2NvbnRlbnQnKVxuICAgICAgICBiYWRnZSA9IHdpdGhEaXJlY3RpdmVzKGJhZGdlLCBbW3ZTaG93LCBpc0FjdGl2ZS52YWx1ZV1dKVxuICAgICAgfVxuXG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgfVxuXG4gICAgICBjb25zdCBjaGlsZHJlbiA9IFtcbiAgICAgICAgdXNlVHJhbnNpdGlvbihiYWRnZSwgcHJvcHMudHJhbnNpdGlvbiksXG4gICAgICAgIHNsb3RzLmRlZmF1bHQgJiYgc2xvdHMuZGVmYXVsdCgpLFxuICAgICAgXVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBjaGlsZHJlbilcbiAgICB9XG4gIH0sXG59KVxuIiwiZXhwb3J0ICogZnJvbSAnLi9WQmFkZ2UnXG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyBoLCB3aXRoQ3R4LCBjcmVhdGVCbG9jaywgVHJhbnNpdGlvbiB9IGZyb20gJ3Z1ZSdcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbihcbiAgaG9va3M6IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gIG1vZGU6IHN0cmluZyA9ICdpbi1vdXQnXG4pIHtcbiAgcmV0dXJuICh2Tm9kZTogVk5vZGUpID0+IHtcbiAgICByZXR1cm4gY3JlYXRlQmxvY2soXG4gICAgICBUcmFuc2l0aW9uLFxuICAgICAge1xuICAgICAgICBtb2RlLFxuICAgICAgICAuLi5ob29rcyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGRlZmF1bHQ6IHdpdGhDdHgoKCkgPT4gWyB2Tm9kZSAmJiBoKHZOb2RlKSBdKSxcbiAgICAgIH1cbiAgICApXG4gIH1cbn1cbiIsImludGVyZmFjZSBJbml0aWFsU3R5bGVzIHtcbiAgdHJhbnNpdGlvbjogc3RyaW5nIHwgbnVsbDtcbiAgcHJvcFNpemU6IHN0cmluZztcbiAgaGVpZ2h0PzogbnVtYmVyO1xuICB3aWR0aD86IG51bWJlcjtcbn1cblxuY29uc3QgaW5pdDogSW5pdGlhbFN0eWxlcyA9IHtcbiAgdHJhbnNpdGlvbjogbnVsbCxcbiAgcHJvcFNpemU6ICcnLFxuICBoZWlnaHQ6IDAsXG4gIHdpZHRoOiAwXG59XG5cbmNvbnN0IFBSSU1BUllfVFJBTlNJVElPTiA9ICdjdWJpYy1iZXppZXIoLjI1LCAuOCwgLjUsIDEpJ1xuXG5jb25zdCByZXNldFN0eWxlcyA9IChlbCkgPT4ge1xuICBlbC5zdHlsZVtpbml0LnByb3BTaXplXSA9ICcnXG4gIGVsLnN0eWxlLnRyYW5zaXRpb24gPSAnJ1xufVxuXG5jb25zdCBnZXRDaGlsZHJlblNpemVzID0gKGVsKSA9PiB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUucmVkdWNlLmNhbGwoXG4gICAgZWwuY2hpbGRyZW4sXG4gICAgKGFjYzogbnVtYmVyLCBpdDogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgIGNvbnN0IHNpemUgPSBnZXRDb21wdXRlZFN0eWxlKGl0KVtpbml0LnByb3BTaXplXVxuXG4gICAgICByZXR1cm4gKGFjYyArPSBwYXJzZUZsb2F0KHNpemUpKVxuICAgIH0sIDApIGFzIG51bWJlclxufVxuXG5jb25zdCBzZXRJbml0U3R5bGVzID0gKGVsLHgpID0+IHtcbiAgaW5pdC5wcm9wU2l6ZSA9IHggPyAnd2lkdGgnIDogJ2hlaWdodCdcbiAgaW5pdC50cmFuc2l0aW9uID0gZ2V0Q29tcHV0ZWRTdHlsZShlbCkudHJhbnNpdGlvblxuICBpbml0W2luaXQucHJvcFNpemVdID0gZ2V0Q2hpbGRyZW5TaXplcyhlbClcbn1cblxuZXhwb3J0IGNvbnN0IGV4cGFuZEhvb2tzID0gKFxuICBleHBhbmRlZFBhcmVudENsYXNzOiBzdHJpbmcsXG4gIHg6IGJvb2xlYW4gPSBmYWxzZVxuKSA9PiB7XG4gIHJldHVybiB7XG4gICAgb25CZWZvcmVFbnRlcihlbCkge1xuICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbiA9ICcnXG4gICAgfSxcblxuICAgIG9uRW50ZXIoZWwpIHtcbiAgICAgIHNldEluaXRTdHlsZXMoZWwsIHgpXG4gICAgICBlbC5zdHlsZVtpbml0LnByb3BTaXplXSA9ICcwJ1xuICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbiA9IGAuMnMgJHsgaW5pdC5wcm9wU2l6ZSB9ICR7IFBSSU1BUllfVFJBTlNJVElPTiB9YFxuXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBlbC5zdHlsZVtpbml0LnByb3BTaXplXSA9IGAkeyBpbml0W2luaXQucHJvcFNpemVdIH1weGBcbiAgICAgIH0pXG5cbiAgICAgIGlmIChleHBhbmRlZFBhcmVudENsYXNzKSB7XG4gICAgICAgIGVsLnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZChleHBhbmRlZFBhcmVudENsYXNzKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBvbkFmdGVyRW50ZXIoZWwpIHtcbiAgICAgIGVsLnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZShleHBhbmRlZFBhcmVudENsYXNzKVxuICAgICAgcmVzZXRTdHlsZXMoZWwpXG4gICAgfSxcblxuICAgIG9uQmVmb3JlTGVhdmUoZWwpIHtcbiAgICAgIHNldEluaXRTdHlsZXMoZWwsIHgpXG4gICAgfSxcblxuICAgIG9uTGVhdmUoZWwpIHtcbiAgICAgIHNldEluaXRTdHlsZXMoZWwsIHgpXG5cbiAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb24gPSBgLjJzICR7IGluaXQucHJvcFNpemUgfSAkeyBQUklNQVJZX1RSQU5TSVRJT04gfWBcbiAgICAgIGVsLnN0eWxlW2luaXQucHJvcFNpemVdID0gYCR7IGluaXRbaW5pdC5wcm9wU2l6ZV0gfXB4YFxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IChlbC5zdHlsZVtpbml0LnByb3BTaXplXSA9ICcwJykpXG4gICAgfSxcblxuICAgIG9uQWZ0ZXJMZWF2ZShlbCkge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHJlc2V0U3R5bGVzKGVsKSlcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IGNyZWF0ZVRyYW5zaXRpb24gfSBmcm9tICcuL2hlbHBlcnMnXG5cbmltcG9ydCB7IGV4cGFuZEhvb2tzIH0gZnJvbSAnLi9leHBhbmQtdHJhbnNpdGlvbidcblxuZXhwb3J0IGNvbnN0IEV4cGFuZFRyYW5zaXRpb24gPSBjcmVhdGVUcmFuc2l0aW9uKGV4cGFuZEhvb2tzKCdleHBhbmQtdHJhbnNpdGlvbicpKVxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoLCB3aXRoRGlyZWN0aXZlcywgcmVmLCB3YXRjaCwgY29tcHV0ZWQsIHZTaG93LCBWTm9kZSB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IEV4cGFuZFRyYW5zaXRpb24gfSBmcm9tICcuLi90cmFuc2l0aW9ucydcblxuaW1wb3J0IHsgVkljb24gfSBmcm9tICcuLi9WSWNvbidcblxuaW1wb3J0IHsgdXNlQ29sb3JzLCBjb2xvclByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtY29sb3JzJ1xuaW1wb3J0IHsgdXNlSWNvbnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1pY29ucydcblxuZXhwb3J0IGNvbnN0IFZHcm91cCA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWdyb3VwJyxcbiAgcHJvcHM6IHtcbiAgICBleHBhbmQ6IEJvb2xlYW4sXG4gICAgc3ViZ3JvdXA6IEJvb2xlYW4sXG4gICAgdGl0bGU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnLFxuICAgIH0sXG4gICAgYWN0aXZlQ2xhc3M6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdtYWluLS10ZXh0IHRleHQtLWV2bycsXG4gICAgfSxcbiAgICBwcmVwZW5kSWNvbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJycsXG4gICAgfSxcbiAgICBhcHBlbmRJY29uOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJyxcbiAgICB9LFxuICAgIC4uLmNvbG9yUHJvcHMoKSxcbiAgfSxcbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSk6ICgpID0+IFZOb2RlIHtcbiAgICBjb25zdCB7IGljb25zIH0gPSB1c2VJY29ucygpXG4gICAgY29uc3QgeyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IsIHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvciB9ID0gdXNlQ29sb3JzKClcblxuICAgIGNvbnN0IGlzQWN0aXZlID0gcmVmPGJvb2xlYW4+KGZhbHNlKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtZ3JvdXAnOiB0cnVlLFxuICAgICAgJ3YtZ3JvdXAtLXN1Ymdyb3VwJzogcHJvcHMuc3ViZ3JvdXAsXG4gICAgICAndi1ncm91cC0tYWN0aXZlJzogaXNBY3RpdmUudmFsdWUsXG4gICAgICAndi1ncm91cC0tZGVmYXVsdCc6ICFpc0FjdGl2ZS52YWx1ZSxcbiAgICAgIFtwcm9wcy5hY3RpdmVDbGFzc106ICEhcHJvcHMuYWN0aXZlQ2xhc3MgJiYgaXNBY3RpdmUudmFsdWUsXG4gICAgICAuLi5zZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpLFxuICAgIH0pKVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgIC4uLnNldEJhY2tncm91bmRDc3NDb2xvcihwcm9wcy5jb2xvciksXG4gICAgfSkpXG5cbiAgICBjb25zdCBnZW5IZWFkZXJDb250ZW50ID0gKCkgPT4ge1xuICAgICAgY29uc3QgY29udGVudDogYW55ID0gcHJvcHMudGl0bGUgfHwgc2xvdHMuaGVhZGVyPy4oKVxuXG4gICAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogJ3YtZ3JvdXBfX2hlYWRlci1jb250ZW50JyxcbiAgICAgIH0sIGNvbnRlbnQpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuRXhwYW5kSWNvbiA9IChpY29uOiBWTm9kZSk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzOiAndi1ncm91cF9fZXhwYW5kLWljb24nLFxuICAgICAgfSwgaWNvbilcbiAgICB9XG5cbiAgICBjb25zdCBnZW5TdWJFeHBhbmRJY29uID0gKGljb246IFZOb2RlKTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcbiAgICAgICAgY2xhc3M6ICd2LWdyb3VwX19zdWItZXhwYW5kLWljb24nLFxuICAgICAgfSwgaWNvbilcbiAgICB9XG5cbiAgICBjb25zdCBnZW5QcmVwZW5kSWNvbiA9IChpY29uOiBWTm9kZSk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzOiAndi1ncm91cF9fcHJlcGVuZC1pY29uJyxcbiAgICAgIH0sIGljb24pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQXBwZW5kSWNvbiA9IChpY29uOiBWTm9kZSk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzOiAndi1ncm91cF9fYXBwZW5kLWljb24nLFxuICAgICAgfSwgaWNvbilcbiAgICB9XG5cbiAgICBjb25zdCBnZW5JY29uID0gKGljb25OYW1lOiBzdHJpbmcpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaChWSWNvbiwge1xuICAgICAgICBpY29uOiBpY29uTmFtZSxcbiAgICAgICAgc2l6ZTogMTYsXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkdyb3VwSGVhZGVyID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICAgICAgY2xhc3M6ICd2LWdyb3VwX19oZWFkZXInLFxuICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IGlzQWN0aXZlLnZhbHVlID0gIWlzQWN0aXZlLnZhbHVlLFxuICAgICAgICB9LFxuICAgICAgICBbXG4gICAgICAgICAgcHJvcHMuc3ViZ3JvdXAgJiYgZ2VuU3ViRXhwYW5kSWNvbihnZW5JY29uKGljb25zLiRjYXJldERvd24pKSxcbiAgICAgICAgICBwcm9wcy5wcmVwZW5kSWNvbiAmJiBnZW5QcmVwZW5kSWNvbihnZW5JY29uKHByb3BzLnByZXBlbmRJY29uKSksXG4gICAgICAgICAgZ2VuSGVhZGVyQ29udGVudCgpLFxuICAgICAgICAgIHByb3BzLmFwcGVuZEljb24gJiYgZ2VuQXBwZW5kSWNvbihnZW5JY29uKHByb3BzLmFwcGVuZEljb24pKSxcbiAgICAgICAgICAhcHJvcHMuc3ViZ3JvdXAgJiYgZ2VuRXhwYW5kSWNvbihnZW5JY29uKGljb25zLiRjaGV2cm9uRG93bikpLFxuICAgICAgICBdLFxuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkdyb3VwQ2hpbGRDb250ZW50ID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiB3aXRoRGlyZWN0aXZlcyhoKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzOiAndi1ncm91cF9fY29udGVudCcsXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IHNsb3RzLmRlZmF1bHQ/LigpLFxuICAgICAgfSksIFtbdlNob3csIGlzQWN0aXZlLnZhbHVlXV0pXG4gICAgfVxuXG4gICAgd2F0Y2goKCkgPT4gcHJvcHMuZXhwYW5kLCB0byA9PiBpc0FjdGl2ZS52YWx1ZSA9IHRvLCB7IGltbWVkaWF0ZTogdHJ1ZSB9KVxuXG4gICAgcmV0dXJuICgpID0+IGgoJ2RpdicsIHtcbiAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgc3R5bGU6IHN0eWxlcy52YWx1ZSxcbiAgICB9LCBbXG4gICAgICBnZW5Hcm91cEhlYWRlcigpLFxuICAgICAgRXhwYW5kVHJhbnNpdGlvbihnZW5Hcm91cENoaWxkQ29udGVudCgpKSxcbiAgICBdKVxuICB9LFxufSlcbiIsImV4cG9ydCB7IFZHcm91cCB9IGZyb20gJy4vVkdyb3VwJ1xuIiwiLy8gVnVlIEFQSVxuaW1wb3J0IHtcbiAgaCxcbiAgcmVmLFxuICBjb21wdXRlZCxcbiAgcmVhY3RpdmUsXG4gIGRlZmluZUNvbXBvbmVudCxcbiAgb25Nb3VudGVkLFxuICBvbkJlZm9yZVVubW91bnQsXG59IGZyb20gJ3Z1ZSdcblxuLy8gRWZmZWN0c1xuaW1wb3J0IHsgcG9zaXRpb25Qcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXBvc2l0aW9uJ1xuaW1wb3J0IHsgdXNlQ29sb3JzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtY29sb3JzJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tICd2dWUnXG5cbnR5cGUgUmVzaXplRGF0YSA9IHtcbiAgcGFyZW50Tm9kZTogSFRNTEVsZW1lbnQgfCBudWxsXG4gIHN0YXJ0T2Zmc2V0OiBudW1iZXIgfCBudWxsXG4gIG9mZnNldFRvcDogbnVtYmVyXG4gIG9mZnNldExlZnQ6IG51bWJlclxuICBwYXJlbnRIZWlnaHQ6IG51bWJlclxuICBwYXJlbnRXaWR0aDogbnVtYmVyXG4gIG1hcmdpbkxlZnQ6IG51bWJlclxuICBtYXJnaW5Ub3A6IG51bWJlclxuICBsZWZ0OiBudW1iZXJcbiAgdG9wOiBudW1iZXJcbiAgaXNBY3RpdmU6IGJvb2xlYW5cbn1cblxuZXhwb3J0IGNvbnN0IFZSZXNpemUgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1yZXNpemUnLFxuXG4gIHByb3BzOiB7XG4gICAgZW1pdDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIH0sXG5cbiAgICBjdXN0b21DbGFzczoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgIH0sXG5cbiAgICBtaW5TaXplOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogNTAsXG4gICAgfSxcbiAgICBjb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3ByaW1hcnknLFxuICAgIH0sXG4gICAgLi4ucG9zaXRpb25Qcm9wcygpLFxuICB9IGFzIGFueSxcblxuICBlbWl0czogWydyZXNpemUnXSxcblxuICBzZXR1cChwcm9wcywgeyBlbWl0IH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3QgZGF0YTogUmVzaXplRGF0YSA9IHJlYWN0aXZlKHtcbiAgICAgIHBhcmVudE5vZGU6IG51bGwsXG4gICAgICBzdGFydE9mZnNldDogbnVsbCxcbiAgICAgIG9mZnNldFRvcDogMCxcbiAgICAgIG9mZnNldExlZnQ6IDAsXG4gICAgICBwYXJlbnRIZWlnaHQ6IDAsXG4gICAgICBwYXJlbnRXaWR0aDogMCxcbiAgICAgIG1hcmdpbkxlZnQ6IDAsXG4gICAgICBtYXJnaW5Ub3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdG9wOiAwLFxuICAgICAgaXNBY3RpdmU6IGZhbHNlLFxuICAgIH0pXG5cbiAgICBjb25zdCByZXNpemVSZWYgPSByZWY8SFRNTEVsZW1lbnQgfCBudWxsPihudWxsKVxuXG4gICAgY29uc3QgeyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IsIHNldEJhY2tncm91bmRDc3NDb2xvciB9ID0gdXNlQ29sb3JzKClcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgJ3YtcmVzaXplJzogdHJ1ZSxcbiAgICAgICAgJ3YtcmVzaXplLS1hY3RpdmUnOiBkYXRhLmlzQWN0aXZlLFxuICAgICAgICAndi1yZXNpemUtLXRvcCc6IHByb3BzLnRvcCxcbiAgICAgICAgJ3YtcmVzaXplLS1ib3R0b20nOiBwcm9wcy5ib3R0b20sXG4gICAgICAgICd2LXJlc2l6ZS0tcmlnaHQnOiBwcm9wcy5yaWdodCxcbiAgICAgICAgJ3YtcmVzaXplLS1sZWZ0JzogcHJvcHMubGVmdCxcbiAgICAgICAgW3Byb3BzLmN1c3RvbUNsYXNzXTogISFwcm9wcy5jdXN0b21DbGFzcyxcbiAgICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBpc0RpcmVjdFkgPSBjb21wdXRlZDxib29sZWFuPigoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMudG9wIHx8IHByb3BzLmJvdHRvbVxuICAgIH0pXG5cbiAgICBjb25zdCBpc05lZWRSZXZlcnNlID0gY29tcHV0ZWQ8Ym9vbGVhbj4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLnRvcCB8fCBwcm9wcy5sZWZ0XG4gICAgfSlcblxuICAgIGNvbnN0IGN1cnJlbnRTaXplID0gY29tcHV0ZWQ8bnVtYmVyPigoKSA9PiB7XG4gICAgICByZXR1cm4gaXNEaXJlY3RZLnZhbHVlID8gZGF0YS5wYXJlbnRIZWlnaHQhIDogZGF0YS5wYXJlbnRXaWR0aCFcbiAgICB9KVxuXG4gICAgY29uc3Qgc2l6ZVByb3AgPSBjb21wdXRlZDxzdHJpbmc+KCgpID0+IHtcbiAgICAgIHJldHVybiBpc0RpcmVjdFkudmFsdWUgPyAnaGVpZ2h0JyA6ICd3aWR0aCdcbiAgICB9KVxuXG4gICAgY29uc3QgcmV2ZXJzZURpcmVjdGlvbiA9IGNvbXB1dGVkPHN0cmluZz4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLnRvcCA/ICd0b3AnIDogJ2xlZnQnXG4gICAgfSlcblxuICAgIGNvbnN0IHJldmVyc2VPZmZzZXRLZXkgPSBjb21wdXRlZDxzdHJpbmc+KCgpID0+IHtcbiAgICAgIGNvbnN0IHNpZGUgPSByZXZlcnNlRGlyZWN0aW9uLnZhbHVlXG4gICAgICByZXR1cm4gJ29mZnNldCcgKyBzaWRlWzBdLnRvVXBwZXJDYXNlKCkgKyBzaWRlLnNsaWNlKDEpXG4gICAgfSlcblxuICAgIGNvbnN0IG9mZnNldCA9IGNvbXB1dGVkPG51bWJlcj4oKCkgPT4ge1xuICAgICAgcmV0dXJuIGlzRGlyZWN0WS52YWx1ZSA/IGRhdGEub2Zmc2V0VG9wISA6IGRhdGEub2Zmc2V0TGVmdCFcbiAgICB9KVxuXG4gICAgY29uc3QgZGlyZWN0aW9uID0gY29tcHV0ZWQ8c3RyaW5nPigoKSA9PiB7XG4gICAgICByZXR1cm4gaXNEaXJlY3RZLnZhbHVlID8gJ2NsaWVudFknIDogJ2NsaWVudFgnXG4gICAgfSlcblxuICAgIGZ1bmN0aW9uIG1vdmVSZXZlcnNlKHNpemUpIHtcbiAgICAgIGNvbnN0IHsgcGFyZW50Tm9kZSwgbGVmdCwgdG9wIH0gPSBkYXRhXG4gICAgICBjb25zdCByZXZlcnNlVG8gPSByZXZlcnNlRGlyZWN0aW9uLnZhbHVlXG5cbiAgICAgIGNvbnN0IHZhbHVlID0gIWlzRGlyZWN0WS52YWx1ZVxuICAgICAgICA/IGN1cnJlbnRTaXplLnZhbHVlIC0gc2l6ZSArIGxlZnRcbiAgICAgICAgOiBjdXJyZW50U2l6ZS52YWx1ZSAtIHNpemUgKyB0b3BcblxuICAgICAgcGFyZW50Tm9kZSEuc3R5bGVbcmV2ZXJzZVRvXSA9IGAke3ZhbHVlfXB4YFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9yRW1pdFNpemUoc2l6ZSkge1xuICAgICAgaWYgKHByb3BzLmVtaXQpIHJldHVybiBlbWl0KCdyZXNpemUnLCBzaXplKVxuXG4gICAgICBkYXRhLnBhcmVudE5vZGUhLnN0eWxlW3NpemVQcm9wLnZhbHVlXSA9IGAke3NpemV9cHhgXG5cbiAgICAgIGlzTmVlZFJldmVyc2UudmFsdWUgJiYgbW92ZVJldmVyc2Uoc2l6ZSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNpemUoZSkge1xuICAgICAgbGV0IHNpemVcblxuICAgICAgaWYgKGlzTmVlZFJldmVyc2UudmFsdWUpIHtcbiAgICAgICAgc2l6ZSA9XG4gICAgICAgICAgY3VycmVudFNpemUudmFsdWUgLVxuICAgICAgICAgIChlW2RpcmVjdGlvbi52YWx1ZV0gLSBvZmZzZXQudmFsdWUpICtcbiAgICAgICAgICBkYXRhLnN0YXJ0T2Zmc2V0IVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2l6ZSA9XG4gICAgICAgICAgY3VycmVudFNpemUudmFsdWUgK1xuICAgICAgICAgIChlW2RpcmVjdGlvbi52YWx1ZV0gLVxuICAgICAgICAgICAgY3VycmVudFNpemUudmFsdWUgLVxuICAgICAgICAgICAgb2Zmc2V0LnZhbHVlIC1cbiAgICAgICAgICAgIGRhdGEuc3RhcnRPZmZzZXQhKVxuICAgICAgfVxuXG4gICAgICBzaXplID4gcHJvcHMubWluU2l6ZSAmJiBzZXRPckVtaXRTaXplKHNpemUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzZXRNaW5NYXhTdHlsZXMoKSB7XG4gICAgICBpZiAoaXNEaXJlY3RZLnZhbHVlKSB7XG4gICAgICAgIGRhdGEucGFyZW50Tm9kZSEuc3R5bGUubWF4SGVpZ2h0ID0gJydcbiAgICAgICAgZGF0YS5wYXJlbnROb2RlIS5zdHlsZS5taW5IZWlnaHQgPSAnJ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YS5wYXJlbnROb2RlIS5zdHlsZS5tYXhXaWR0aCA9ICcnXG4gICAgICAgIGRhdGEucGFyZW50Tm9kZSEuc3R5bGUubWluV2lkdGggPSAnJ1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFBhcmVudCgpIHtcbiAgICAgIGNvbnN0IHBhcmVudCA9IHJlc2l6ZVJlZi52YWx1ZSEucGFyZW50Tm9kZVxuICAgICAgZGF0YS5wYXJlbnROb2RlID0gcGFyZW50IGFzIEhUTUxFbGVtZW50XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcHV0ZVNpemVzKCkge1xuICAgICAgY29uc3QgeyB0b3AsIGxlZnQsIGhlaWdodCwgd2lkdGgsIG1hcmdpbkxlZnQsIG1hcmdpblRvcCB9ID1cbiAgICAgICAgZ2V0Q29tcHV0ZWRTdHlsZShkYXRhLnBhcmVudE5vZGUhKVxuXG4gICAgICBkYXRhLm9mZnNldFRvcCA9IGRhdGEucGFyZW50Tm9kZSEub2Zmc2V0VG9wXG4gICAgICBkYXRhLm9mZnNldExlZnQgPSBkYXRhLnBhcmVudE5vZGUhLm9mZnNldExlZnRcbiAgICAgIGRhdGEubWFyZ2luTGVmdCA9IHBhcnNlRmxvYXQobWFyZ2luTGVmdClcbiAgICAgIGRhdGEubWFyZ2luVG9wID0gcGFyc2VGbG9hdChtYXJnaW5Ub3ApXG4gICAgICBkYXRhLnBhcmVudEhlaWdodCA9IHBhcnNlRmxvYXQoaGVpZ2h0KVxuICAgICAgZGF0YS5wYXJlbnRXaWR0aCA9IHBhcnNlRmxvYXQod2lkdGgpXG4gICAgICBkYXRhLnRvcCA9IHBhcnNlRmxvYXQodG9wKVxuICAgICAgZGF0YS5sZWZ0ID0gcGFyc2VGbG9hdChsZWZ0KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFN0YXJ0UG9zaXRpb25zKCkge1xuICAgICAgY29uc3Qgc2lkZSA9IHJldmVyc2VEaXJlY3Rpb24udmFsdWVcbiAgICAgIGNvbnN0IG9mZnNldCA9IHJldmVyc2VPZmZzZXRLZXkudmFsdWVcblxuICAgICAgaWYgKGRhdGFbc2lkZV0gPT09IGRhdGFbb2Zmc2V0XSkge1xuICAgICAgICBkYXRhLnBhcmVudE5vZGUhLnN0eWxlW3NpZGVdID0gYCR7ZGF0YVtvZmZzZXRdfXB4YFxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpc2FibGVTZWxlY3Rpb24oZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5pdFJlc2l6ZShlKSB7XG4gICAgICBpZiAoIWRhdGEuaXNBY3RpdmUpIHtcbiAgICAgICAgZGF0YS5pc0FjdGl2ZSA9IHRydWVcbiAgICAgICAgY29tcHV0ZVNpemVzKClcbiAgICAgICAgcmVzZXRNaW5NYXhTdHlsZXMoKVxuICAgICAgICBzZXRTdGFydFBvc2l0aW9ucygpXG4gICAgICAgIHNldFN0YXJ0T2Zmc2V0KGUpXG4gICAgICB9XG5cbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiByZXNpemUoZSkpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0U3RhcnRPZmZzZXQoZSkge1xuICAgICAgaWYgKGlzTmVlZFJldmVyc2UudmFsdWUpIGRhdGEuc3RhcnRPZmZzZXQgPSBlW2RpcmVjdGlvbi52YWx1ZV1cbiAgICAgIGVsc2UgZGF0YS5zdGFydE9mZnNldCA9IGVbZGlyZWN0aW9uLnZhbHVlXSAtIGN1cnJlbnRTaXplLnZhbHVlXG5cbiAgICAgIGRhdGEuc3RhcnRPZmZzZXQhIC09IG9mZnNldC52YWx1ZVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgZGF0YS5pc0FjdGl2ZSA9IGZhbHNlXG4gICAgICByZXNldE1pbk1heFN0eWxlcygpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25Nb3VzZXVwKCkge1xuICAgICAgcmVzZXQoKVxuICAgICAgcmVtb3ZlSGFuZGxlcnMoKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uTW91c2Vkb3duKCkge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgaW5pdFJlc2l6ZSlcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBvbk1vdXNldXApXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3RzdGFydCcsIGRpc2FibGVTZWxlY3Rpb24pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlSGFuZGxlcnMoKSB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBpbml0UmVzaXplKVxuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG9uTW91c2V1cClcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3NlbGVjdHN0YXJ0JywgZGlzYWJsZVNlbGVjdGlvbilcbiAgICB9XG5cbiAgICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgICAgc2V0UGFyZW50KClcbiAgICB9KVxuXG4gICAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9uTW91c2Vkb3duKVxuICAgIH0pXG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgc3R5bGU6IHN0eWxlcy52YWx1ZSxcbiAgICAgICAga2V5OiAncmVzaXplJyxcbiAgICAgICAgcmVmOiByZXNpemVSZWYsXG4gICAgICAgIG9uTW91c2Vkb3duLFxuICAgICAgfVxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSlcbiAgICB9XG4gIH0sXG59KVxuIiwiZXhwb3J0ICogZnJvbSAnLi9WUmVzaXplJ1xuIiwiZXhwb3J0ICogZnJvbSAnLi9WSWNvbidcbiIsImV4cG9ydCB7IFZDaGlwIH0gZnJvbSAnLi9WQ2hpcCdcbiIsIi8vIFZ1ZSBBUElcbmltcG9ydCB7XG4gIGgsXG4gIHJlZixcbiAgd2F0Y2gsXG4gIGRlZmluZUNvbXBvbmVudCxcbiAgaW5qZWN0LFxuICBjb21wdXRlZCxcbiAgb25CZWZvcmVNb3VudCxcbiAgb25CZWZvcmVVbm1vdW50LFxufSBmcm9tICd2dWUnXG5cbi8vIEVmZmVjdHNcbmltcG9ydCB7IHVzZVZhbGlkYXRpb24gfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS12YWxpZGF0aW9uJ1xuaW1wb3J0IHsgdXNlSWNvbnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1pY29ucydcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkljb24gfSBmcm9tICcuLi9WSWNvbidcbmltcG9ydCB7IFZMYWJlbCB9IGZyb20gJy4uL1ZMYWJlbCdcblxuLy8gSGVscGVyc1xuaW1wb3J0IHsgd2FybmluZyB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gJ3Z1ZSdcblxuZXhwb3J0IGNvbnN0IFZDaGVja2JveCA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWNoZWNrYm94JyxcbiAgcHJvcHM6IHtcbiAgICBvbkljb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICB9LFxuICAgIG9mZkljb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICB9LFxuICAgIGRhcms6IEJvb2xlYW4sXG4gICAgbGFiZWw6IFN0cmluZyxcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICB2YWxpZGF0ZTogQm9vbGVhbixcbiAgICBtb2RlbFZhbHVlOiBbQXJyYXksIEJvb2xlYW5dLFxuICAgIHZhbHVlOiB7XG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gICAgY29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdwcmltYXJ5JyxcbiAgICB9LFxuICB9IGFzIGFueSxcbiAgZW1pdHM6IFsnY2hlY2tlZCcsICd1cGRhdGU6bW9kZWxWYWx1ZSddLFxuICBzZXR1cChwcm9wcywgeyBlbWl0IH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3QgaXNDaGVja2VkID0gcmVmKGZhbHNlKVxuICAgIGNvbnN0IGZvcm06IGFueSA9IGluamVjdCgnZm9ybScsIG51bGwpXG5cbiAgICBjb25zdCB7IHZhbGlkYXRlIH0gPSB1c2VWYWxpZGF0aW9uKHByb3BzKVxuICAgIGNvbnN0IHsgaWNvbnMgfSA9IHVzZUljb25zKClcblxuICAgIGNvbnN0IGlzQXJyYXkgPSBjb21wdXRlZDxib29sZWFuPigoKSA9PiBBcnJheS5pc0FycmF5KHByb3BzLm1vZGVsVmFsdWUpKVxuICAgIGNvbnN0IGlzVmFsdWVTZXQgPSBjb21wdXRlZDxib29sZWFuPigoKSA9PiBwcm9wcy52YWx1ZSAhPT0gbnVsbClcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LWNoZWNrYm94JzogdHJ1ZSxcbiAgICAgICd2LWNoZWNrYm94LS1kaXNhYmxlZCc6IHByb3BzLmRpc2FibGVkLFxuICAgICAgJ3YtY2hlY2tib3gtLWNoZWNrZWQnOiBpc0NoZWNrZWQudmFsdWUsXG4gICAgICAndi12YWxpZGF0YWJsZSc6IHByb3BzLnZhbGlkYXRlLFxuICAgIH0pKVxuXG4gICAgd2F0Y2goXG4gICAgICAoKSA9PiBwcm9wcy5tb2RlbFZhbHVlLFxuICAgICAgKCkgPT4ge1xuICAgICAgICBpZiAoaXNBcnJheS52YWx1ZSkge1xuICAgICAgICAgIGlmIChpc1ZhbHVlU2V0LnZhbHVlKSB7XG4gICAgICAgICAgICBpc0NoZWNrZWQudmFsdWUgPSBwcm9wcy5tb2RlbFZhbHVlLmluY2x1ZGVzKHByb3BzLnZhbHVlKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3YXJuaW5nKCd2LWNoZWNrYm94OiBzZXQgdGhlIFwidmFsdWVcIiBwcm9wJylcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXNDaGVja2VkLnZhbHVlID0gISFwcm9wcy5tb2RlbFZhbHVlXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7IGltbWVkaWF0ZTogdHJ1ZSB9LFxuICAgIClcblxuICAgIGNvbnN0IHZhbGlkYXRlVmFsdWUgPSAoKTogYm9vbGVhbiB8IHZvaWQgPT4ge1xuICAgICAgcmV0dXJuIHZhbGlkYXRlKGlzQ2hlY2tlZC52YWx1ZSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5MYWJlbCA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGFic29sdXRlOiBmYWxzZSxcbiAgICAgICAgY29sb3I6IHByb3BzLmRhcmsgPyAnd2hpdGUnIDogJycsXG4gICAgICAgIGRpc2FibGVkOiBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoVkxhYmVsLCBwcm9wc0RhdGEsIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gcHJvcHMubGFiZWwsXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkxhYmVsV3JhcHBlciA9ICgpID0+IHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzOiAndi1jaGVja2JveF9fbGFiZWwnLFxuICAgICAgfSwgZ2VuTGFiZWwoKSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5JY29uID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIGNvbnN0IG9uSWNvbiA9IHByb3BzLm9uSWNvbiB8fCBpY29ucy4kY2hlY2tPblxuICAgICAgY29uc3Qgb2ZmSWNvbiA9IHByb3BzLm9mZkljb24gfHwgaWNvbnMuJGNoZWNrT2ZmXG4gICAgICBjb25zdCBpY29uID0gaXNDaGVja2VkLnZhbHVlID8gb25JY29uIDogb2ZmSWNvblxuXG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGljb24sXG4gICAgICAgIGNvbG9yOiBwcm9wcy5jb2xvcixcbiAgICAgICAgZGlzYWJsZWQ6IHByb3BzLmRpc2FibGVkLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaChWSWNvbiwgcHJvcHNEYXRhKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkNoZWNrYm94ID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzOiAndi1jaGVja2JveF9fc3F1YXJlJyxcbiAgICAgIH0sIGdlbkljb24oKSlcbiAgICB9XG5cbiAgICBjb25zdCBjb21wdXRlVmFsdWUgPSAoKTogYm9vbGVhbiB8IGFueVtdID0+IHtcbiAgICAgIGlmIChpc0FycmF5LnZhbHVlKSB7XG4gICAgICAgIGxldCBtb2RlbFZhbHVlID0gWy4uLnByb3BzLm1vZGVsVmFsdWVdXG4gICAgICAgIGlzQ2hlY2tlZC52YWx1ZSA9ICFtb2RlbFZhbHVlLmluY2x1ZGVzKHByb3BzLnZhbHVlKVxuXG4gICAgICAgIGlmICghaXNDaGVja2VkLnZhbHVlKSB7XG4gICAgICAgICAgbW9kZWxWYWx1ZSA9IG1vZGVsVmFsdWUuZmlsdGVyKChpdCkgPT4gaXQgIT09IHByb3BzLnZhbHVlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1vZGVsVmFsdWUucHVzaChwcm9wcy52YWx1ZSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtb2RlbFZhbHVlXG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoaXNDaGVja2VkLnZhbHVlID0gIWlzQ2hlY2tlZC52YWx1ZSlcbiAgICB9XG5cbiAgICBjb25zdCBvbkNsaWNrID0gKCkgPT4ge1xuICAgICAgaWYgKHByb3BzLmRpc2FibGVkKSByZXR1cm5cbiAgICAgIGNvbnN0IHZhbHVlID0gY29tcHV0ZVZhbHVlKClcblxuICAgICAgcHJvcHMudmFsaWRhdGUgJiYgdmFsaWRhdGVWYWx1ZSgpXG4gICAgICBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIHZhbHVlKVxuICAgICAgZW1pdCgnY2hlY2tlZCcsIHZhbHVlKVxuICAgIH1cblxuICAgIG9uQmVmb3JlTW91bnQoKCkgPT4ge1xuICAgICAgaWYgKGZvcm0pIGZvcm0hLmFkZCh2YWxpZGF0ZVZhbHVlKVxuICAgIH0pXG5cbiAgICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgICAgZm9ybT8ucmVtb3ZlKHZhbGlkYXRlVmFsdWUpXG4gICAgfSlcblxuICAgIHJldHVybiAoKTogVk5vZGUgPT4gaCgnZGl2JyxcbiAgICAgIHsgY2xhc3M6IGNsYXNzZXMudmFsdWUsIG9uQ2xpY2sgfSxcbiAgICAgIFtnZW5DaGVja2JveCgpLCBwcm9wcy5sYWJlbCAmJiBnZW5MYWJlbFdyYXBwZXIoKV0sXG4gICAgKVxuICB9LFxufSlcbiIsImV4cG9ydCB7IFZDaGVja2JveCB9IGZyb20gJy4vVkNoZWNrYm94J1xuIiwiZXhwb3J0IGVudW0gdHJhbnNpdGlvbnMge1xuICBGQURFID0gXCJmYWRlXCIsXG4gIEZBREVfSU5fRE9XTiA9IFwiZmFkZS1pbi1kb3duXCIsXG4gIEZBREVfSU5fVVAgPSBcImZhZGUtaW4tdXBcIixcbiAgU0NBTEVfSU4gPSBcInNjYWxlLWluXCIsXG4gIFNDQUxFX0lOX09VVCA9IFwic2NhbGUtaW4tb3V0XCIsXG4gIFNMSURFX0lOX0xFRlQgPSBcInNsaWRlLWluLWxlZnRcIixcbn1cbiIsIi8vIFZ1ZSBBUElcbmltcG9ydCB7XG4gIGgsXG4gIHJlZixcbiAgcmVhY3RpdmUsXG4gIHdhdGNoLFxuICBjb21wdXRlZCxcbiAgd2l0aERpcmVjdGl2ZXMsXG4gIGRlZmluZUNvbXBvbmVudCxcbiAgb25Nb3VudGVkLFxuICB2U2hvdyxcbn0gZnJvbSAndnVlJ1xuXG4vLyBFZmZlY3RzXG5pbXBvcnQgeyB1c2VUb2dnbGUgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS10b2dnbGUnXG5pbXBvcnQgeyB1c2VDb2xvcnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG5pbXBvcnQgeyB1c2VBY3RpdmF0b3IgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1hY3RpdmF0b3InXG5pbXBvcnQgeyB1c2VUcmFuc2l0aW9uIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtdHJhbnNpdGlvbidcbmltcG9ydCB7IGVsZXZhdGlvblByb3BzLCB1c2VFbGV2YXRpb24gfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1lbGV2YXRpb24nXG5pbXBvcnQgeyBwb3NpdGlvblByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtcG9zaXRpb24nXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBPZmZzZXRTaXplcyB9IGZyb20gJy4uLy4uLy4uL3R5cGVzJ1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tICd2dWUnXG5cbi8vIEhlbHBlcnNcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG4vLyBTZXJ2aWNlc1xuaW1wb3J0IHsgdHJhbnNpdGlvbnMgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy90cmFuc2l0aW9ucydcblxuLy8gVE9ETyBmaXggYmVoYXZpb3Igb24gd2luZG93IHJlc2l6ZSBpZiB2LW1vZGVsIHVzZWQgb24gY29tcG9uZW50XG5cbmV4cG9ydCBjb25zdCBWVG9vbHRpcCA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LXRvb2x0aXAnLFxuXG4gIHByb3BzOiB7XG4gICAgb3Blbk9uSG92ZXI6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlLFxuICAgIH0sXG4gICAgY29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdncmV5IGxpZ2h0ZW4tMScsXG4gICAgfSxcbiAgICB6SW5kZXg6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgbWF4V2lkdGg6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgbWluV2lkdGg6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgbW9kZWxWYWx1ZTogQm9vbGVhbixcbiAgICBvZmZzZXRYOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogMjAsXG4gICAgfSxcbiAgICBvZmZzZXRZOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogMjAsXG4gICAgfSxcbiAgICAuLi5lbGV2YXRpb25Qcm9wcygpLFxuICAgIC4uLnBvc2l0aW9uUHJvcHMoKSxcbiAgfSBhcyBhbnksXG5cbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSkge1xuICAgIGNvbnN0IHRvb2x0aXAgPSByZWFjdGl2ZTxQYXJ0aWFsPE9mZnNldFNpemVzPj4oe30pXG4gICAgY29uc3QgYWN0aXZhdG9yID0gcmVhY3RpdmU8UGFydGlhbDxPZmZzZXRTaXplcz4+KHt9KVxuXG4gICAgY29uc3QgdG9vbHRpcFJlZiA9IHJlZjxIVE1MRWxlbWVudCB8IG51bGw+KG51bGwpXG5cbiAgICBjb25zdCB7IGlzQWN0aXZlIH0gPSB1c2VUb2dnbGUocHJvcHMpXG4gICAgY29uc3QgeyBlbGV2YXRpb25DbGFzc2VzIH0gPSB1c2VFbGV2YXRpb24ocHJvcHMpXG4gICAgY29uc3QgeyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IsIHNldEJhY2tncm91bmRDc3NDb2xvciB9ID0gdXNlQ29sb3JzKClcbiAgICBjb25zdCB7IGFjdGl2YXRvclJlZiwgZ2V0QWN0aXZhdG9yU2l6ZXMsIGdlbkFjdGl2YXRvckxpc3RlbmVycyB9ID1cbiAgICAgIHVzZUFjdGl2YXRvcihwcm9wcylcblxuICAgIGNvbnN0IGhhbmRsZXJzID0ge1xuICAgICAgbW91c2VlbnRlcjogKCkgPT4gKGlzQWN0aXZlLnZhbHVlID0gdHJ1ZSksXG4gICAgICBtb3VzZWxlYXZlOiAoKSA9PiAoaXNBY3RpdmUudmFsdWUgPSBmYWxzZSksXG4gICAgfVxuXG4gICAgY29uc3QgbGlzdGVuZXJzID0gZ2VuQWN0aXZhdG9yTGlzdGVuZXJzKHByb3BzLCBoYW5kbGVycylcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LXRvb2x0aXAnOiB0cnVlLFxuICAgICAgJ3YtdG9vbHRpcC0tdG9wJzogcHJvcHMudG9wLFxuICAgICAgJ3YtdG9vbHRpcC0tcmlnaHQnOiBwcm9wcy5yaWdodCxcbiAgICAgICd2LXRvb2x0aXAtLWxlZnQnOiBwcm9wcy5sZWZ0LFxuICAgICAgJ3YtdG9vbHRpcC0tYm90dG9tJzogcHJvcHMuYm90dG9tLFxuICAgICAgLi4uZWxldmF0aW9uQ2xhc3Nlcy52YWx1ZSxcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBjb21wdXRlVG9wUG9zaXRpb24gPSBjb21wdXRlZDxudW1iZXI+KCgpID0+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChwcm9wcy50b3BcbiAgICAgICAgICA/IGFjdGl2YXRvciEudG9wISAtIHRvb2x0aXAuaGVpZ2h0IVxuICAgICAgICAgIDogcHJvcHMuYm90dG9tXG4gICAgICAgICAgPyBhY3RpdmF0b3IudG9wISArIGFjdGl2YXRvci5oZWlnaHQhXG4gICAgICAgICAgOiBhY3RpdmF0b3IudG9wISArIChhY3RpdmF0b3IuaGVpZ2h0ISAtIHRvb2x0aXAuaGVpZ2h0ISkgLyAyKSArXG4gICAgICAgICtwcm9wcy5vZmZzZXRZXG4gICAgICApXG4gICAgfSlcblxuICAgIGNvbnN0IGNvbXB1dGVMZWZ0UG9zaXRpb24gPSBjb21wdXRlZDxudW1iZXI+KCgpID0+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChwcm9wcy5sZWZ0XG4gICAgICAgICAgPyBhY3RpdmF0b3IubGVmdCEgLSB0b29sdGlwLndpZHRoIVxuICAgICAgICAgIDogcHJvcHMucmlnaHRcbiAgICAgICAgICA/IGFjdGl2YXRvci5sZWZ0ISArIGFjdGl2YXRvci53aWR0aCFcbiAgICAgICAgICA6IGFjdGl2YXRvci5sZWZ0ISArIChhY3RpdmF0b3Iud2lkdGghIC0gdG9vbHRpcC53aWR0aCEpIC8gMikgK1xuICAgICAgICArcHJvcHMub2Zmc2V0WFxuICAgICAgKVxuICAgIH0pXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PigoKSA9PiAoe1xuICAgICAgdG9wOiB0b29sdGlwLnRvcCA/IChjb252ZXJ0VG9Vbml0KHRvb2x0aXAudG9wKSBhcyBzdHJpbmcpIDogJycsXG4gICAgICBsZWZ0OiB0b29sdGlwLnRvcCA/IChjb252ZXJ0VG9Vbml0KHRvb2x0aXAubGVmdCEpIGFzIHN0cmluZykgOiAnJyxcbiAgICAgIG1heFdpZHRoOiAhIXByb3BzLm1heFdpZHRoID8gYCR7cHJvcHMubWF4V2lkdGh9cHhgIDogJycsXG4gICAgICBtaW5XaWR0aDogISFwcm9wcy5taW5XaWR0aCA/IGAke3Byb3BzLm1pbldpZHRofXB4YCA6ICcnLFxuICAgICAgekluZGV4OiBwcm9wcy56SW5kZXgsXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgZnVuY3Rpb24gZ2VuQWN0aXZhdG9yKCk6IFZOb2RlIHwgbnVsbCB7XG4gICAgICBjb25zdCBzbG90Q29udGVudCA9XG4gICAgICAgIHNsb3RzLmFjdGl2YXRvciAmJlxuICAgICAgICBzbG90cy5hY3RpdmF0b3Ioe1xuICAgICAgICAgIG9uOiBsaXN0ZW5lcnMsXG4gICAgICAgIH0pXG5cbiAgICAgIHJldHVybiBoKHNsb3RDb250ZW50IVswXSwgeyByZWY6IGFjdGl2YXRvclJlZiB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbkNvbnRlbnQoKTogVk5vZGUge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgc3R5bGU6IHN0eWxlcy52YWx1ZSxcbiAgICAgICAgcmVmOiB0b29sdGlwUmVmLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gd2l0aERpcmVjdGl2ZXMoXG4gICAgICAgIGgoJ3NwYW4nLCBwcm9wc0RhdGEsIHNsb3RzLmRlZmF1bHQgJiYgc2xvdHMuZGVmYXVsdCgpKSxcbiAgICAgICAgW1t2U2hvdywgaXNBY3RpdmUudmFsdWVdXVxuICAgICAgKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFRvb2x0aXBQb3NpdGlvbigpIHtcbiAgICAgIGlmICh0b29sdGlwUmVmLnZhbHVlKSB7XG4gICAgICAgIHRvb2x0aXAud2lkdGggPSB0b29sdGlwUmVmLnZhbHVlIS5vZmZzZXRXaWR0aFxuICAgICAgICB0b29sdGlwLmhlaWdodCA9IHRvb2x0aXBSZWYudmFsdWUhLm9mZnNldEhlaWdodFxuICAgICAgICB0b29sdGlwLnRvcCA9IGNvbXB1dGVUb3BQb3NpdGlvbi52YWx1ZVxuICAgICAgICB0b29sdGlwLmxlZnQgPSBjb21wdXRlTGVmdFBvc2l0aW9uLnZhbHVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgIHdhdGNoKFxuICAgICAgICAoKSA9PiBpc0FjdGl2ZS52YWx1ZSxcbiAgICAgICAgKHRvKSA9PiB7XG4gICAgICAgICAgaWYgKHRvKSB7XG4gICAgICAgICAgICBjb25zdCB7IGxlZnQsIHRvcCwgaGVpZ2h0LCB3aWR0aCB9ID0gZ2V0QWN0aXZhdG9yU2l6ZXMoKVxuXG4gICAgICAgICAgICBhY3RpdmF0b3IubGVmdCA9IGxlZnQgYXMgbnVtYmVyXG4gICAgICAgICAgICBhY3RpdmF0b3IudG9wID0gdG9wIGFzIG51bWJlclxuICAgICAgICAgICAgYWN0aXZhdG9yLmhlaWdodCA9IGhlaWdodCBhcyBudW1iZXJcbiAgICAgICAgICAgIGFjdGl2YXRvci53aWR0aCA9IHdpZHRoIGFzIG51bWJlclxuXG4gICAgICAgICAgICB0b29sdGlwLnRvcCA9IDBcbiAgICAgICAgICAgIHRvb2x0aXAubGVmdCA9IDBcblxuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHNldFRvb2x0aXBQb3NpdGlvbilcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHsgaW1tZWRpYXRlOiB0cnVlIH1cbiAgICAgIClcbiAgICB9KVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSB1c2VUcmFuc2l0aW9uKFxuICAgICAgICBnZW5Db250ZW50KCkgYXMgVk5vZGUsXG4gICAgICAgIGlzQWN0aXZlLnZhbHVlID8gdHJhbnNpdGlvbnMuU0NBTEVfSU4gOiB0cmFuc2l0aW9ucy5GQURFXG4gICAgICApXG5cbiAgICAgIHJldHVybiBbY29udGVudCwgZ2VuQWN0aXZhdG9yKCldXG4gICAgfVxuICB9LFxufSlcbiIsImV4cG9ydCB7IFZUb29sdGlwIH0gZnJvbSAnLi9WVG9vbHRpcCdcbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaCwgY29tcHV0ZWQsIFZOb2RlIH0gZnJvbSAndnVlJ1xuLy8gSGVscGVyc1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5cbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VDb2xvcnMsIGNvbG9yUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG5cbmV4cG9ydCBjb25zdCBWVG9vbGJhciA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LXRvb2xiYXInLFxuICBwcm9wczoge1xuICAgIGZpeGVkOiBCb29sZWFuLFxuICAgIGhlaWdodDoge1xuICAgICAgdHlwZTogWyBTdHJpbmcsIE51bWJlciBdLFxuICAgICAgZGVmYXVsdDogNTZcbiAgICB9LFxuICAgIC4uLmNvbG9yUHJvcHMoJyNmZmZmZmYnKVxuICB9LFxuICBzZXR1cChwcm9wcywgeyBzbG90cyB9KTogKCkgPT4gVk5vZGUge1xuICAgIGNvbnN0IHsgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yLCBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IgfSA9IHVzZUNvbG9ycygpXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi10b29sYmFyJzogdHJ1ZSxcbiAgICAgICd2LXRvb2xiYXItLWZpeGVkJzogcHJvcHMuZml4ZWQsXG4gICAgICAuLi5zZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpXG4gICAgfSkpXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PigoKSA9PiAoe1xuICAgICAgaGVpZ2h0OiBjb252ZXJ0VG9Vbml0KHByb3BzLmhlaWdodCksXG4gICAgICBsZWZ0OiBwcm9wcy5maXhlZCA/IGNvbnZlcnRUb1VuaXQoMCkgOiAnJyxcbiAgICAgIHRvcDogcHJvcHMuZml4ZWQgPyBjb252ZXJ0VG9Vbml0KDApIDogJycsXG4gICAgICAuLi5zZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMuY29sb3IpXG4gICAgfSkpXG5cbiAgICByZXR1cm4gKCkgPT4gaCgnZGl2Jywge1xuICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICBzdHlsZTogc3R5bGVzLnZhbHVlXG4gICAgfSwge1xuICAgICAgZGVmYXVsdDogKCkgPT4gc2xvdHMuZGVmYXVsdD8uKClcbiAgICB9KVxuICB9XG59KVxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgVkljb24gfSBmcm9tICcuLi8uLi9jb21wb25lbnRzJ1xuXG5pbXBvcnQgeyB1c2VJY29ucyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWljb25zJ1xuXG5leHBvcnQgY29uc3QgVlRvb2xiYXJOYXZCdG4gPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi10b29sYmFyLW5hdi1idG4nLFxuICBlbWl0czogWydjbGljayddLFxuICBzZXR1cChfLCB7IHNsb3RzLCBlbWl0IH0pIHtcbiAgICBjb25zdCB7IGljb25zIH0gPSB1c2VJY29ucygpXG5cbiAgICBjb25zdCBvbkNsaWNrID0gKCkgPT4gZW1pdCgnY2xpY2snKVxuXG4gICAgY29uc3QgZ2VuTmF2QnRuID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGgoVkljb24sIHtcbiAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICBpY29uOiBpY29ucy4kbWVudSxcbiAgICAgICAgb25DbGljayxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBzbG90cy5kZWZhdWx0Py4oKSB8fCBnZW5OYXZCdG4oKVxuXG4gICAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogJ3YtdG9vbGJhcl9fbmF2LWJ0bicsXG4gICAgICB9LCBjb250ZW50KVxuICAgIH1cbiAgfSxcbn0pXG4iLCJpbXBvcnQgeyBWVG9vbGJhciB9IGZyb20gJy4vVlRvb2xiYXInXG5pbXBvcnQgeyBWVG9vbGJhck5hdkJ0biB9IGZyb20gJy4vVlRvb2xiYXJOYXZCdG4nXG5pbXBvcnQgeyBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsIH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuY29uc3QgVlRvb2xiYXJJdGVtcyA9IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwoJ3YtdG9vbGJhcl9faXRlbXMnKVxuY29uc3QgVlRvb2xiYXJMb2dvID0gY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCgndi10b29sYmFyX19sb2dvJylcbmNvbnN0IFZUb29sYmFyQ29udGVudCA9IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwoJ3YtdG9vbGJhcl9fY29udGVudCcpXG5cbmV4cG9ydCB7XG4gIFZUb29sYmFyLFxuICBWVG9vbGJhckxvZ28sXG4gIFZUb29sYmFySXRlbXMsXG4gIFZUb29sYmFyTmF2QnRuLFxuICBWVG9vbGJhckNvbnRlbnRcbn1cbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaCwgcmVmLCBjb21wdXRlZCwgVk5vZGUgfSBmcm9tICd2dWUnXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlQ29sb3JzLCBjb2xvclByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtY29sb3JzJ1xuLy8gSGVscGVyc1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5leHBvcnQgY29uc3QgVk5hdmlnYXRpb24gPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1uYXZpZ2F0aW9uJyxcbiAgcHJvcHM6IHtcbiAgICBmaXhlZDogQm9vbGVhbixcbiAgICByaWdodDogQm9vbGVhbixcbiAgICBsZWZ0OiBCb29sZWFuLFxuICAgIG9uSG92ZXI6IEJvb2xlYW4sXG4gICAgbWluaVZhcmlhbnQ6IEJvb2xlYW4sXG4gICAgZXhwYW5kOiBCb29sZWFuLFxuICAgIG9mZnNldFRvcDoge1xuICAgICAgdHlwZTogWyBTdHJpbmcsIE51bWJlciBdLFxuICAgICAgZGVmYXVsdDogMFxuICAgIH0sXG4gICAgbWluaVZhcmlhbnRXaWR0aDoge1xuICAgICAgdHlwZTogWyBTdHJpbmcsIE51bWJlciBdLFxuICAgICAgZGVmYXVsdDogNTZcbiAgICB9LFxuICAgIG1heFZhcmlhbnRXaWR0aDoge1xuICAgICAgdHlwZTogWyBTdHJpbmcsIE51bWJlciBdLFxuICAgICAgZGVmYXVsdDogMjM3XG4gICAgfSxcbiAgICAuLi5jb2xvclByb3BzKCcjZmZmZmZmJylcbiAgfSxcbiAgZW1pdHM6IFsgJ3VwZGF0ZTpleHBhbmQnIF0sXG5cbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMsIGVtaXQgfSk6ICgpID0+IFZOb2RlIHtcbiAgICBjb25zdCB7IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvciwgc2V0QmFja2dyb3VuZENzc0NvbG9yIH0gPSB1c2VDb2xvcnMoKVxuICAgIGNvbnN0IGlzSG92ZXJlZCA9IHJlZjxib29sZWFuPihmYWxzZSlcblxuICAgIGNvbnN0IGlzRXhwYW5kZWQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAocHJvcHMub25Ib3ZlciAmJiBpc0hvdmVyZWQudmFsdWUpIHJldHVybiB0cnVlXG4gICAgICBpZiAocHJvcHMuZXhwYW5kKSByZXR1cm4gdHJ1ZVxuICAgICAgaWYgKCFwcm9wcy5leHBhbmQgJiYgcHJvcHMubWluaVZhcmlhbnQpIHJldHVybiBmYWxzZVxuICAgICAgaWYgKCFwcm9wcy5leHBhbmQgJiYgIXByb3BzLm1pbmlWYXJpYW50KSByZXR1cm4gZmFsc2VcbiAgICAgIHJldHVybiAhcHJvcHMubWluaVZhcmlhbnRcbiAgICB9KVxuXG4gICAgY29uc3QgY29tcHV0ZWRXaWR0aCA9IGNvbXB1dGVkPG51bWJlciB8IHN0cmluZz4oKCkgPT4ge1xuICAgICAgaWYgKCFpc0V4cGFuZGVkLnZhbHVlKSByZXR1cm4gcHJvcHMubWluaVZhcmlhbnRXaWR0aFxuICAgICAgcmV0dXJuIHByb3BzLm1heFZhcmlhbnRXaWR0aFxuICAgIH0pXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1uYXZpZ2F0aW9uJzogdHJ1ZSxcbiAgICAgICd2LW5hdmlnYXRpb24tLWV4cGFuZGVkJzogaXNFeHBhbmRlZC52YWx1ZSxcbiAgICAgICd2LW5hdmlnYXRpb24tLWZpeGVkJzogcHJvcHMuZml4ZWQsXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pXG4gICAgfSkpXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PigoKSA9PiAoe1xuICAgICAgd2lkdGg6IGNvbnZlcnRUb1VuaXQoY29tcHV0ZWRXaWR0aC52YWx1ZSksXG4gICAgICBtYXhIZWlnaHQ6IGBjYWxjKDEwMHZoIC0gJHsgY29udmVydFRvVW5pdChwcm9wcy5vZmZzZXRUb3ApIH0pYCxcbiAgICAgIHRvcDogcHJvcHMuZml4ZWQgPyBjb252ZXJ0VG9Vbml0KHByb3BzLm9mZnNldFRvcCkgOiAnJyxcbiAgICAgIGxlZnQ6ICFwcm9wcy5yaWdodCAmJiBwcm9wcy5maXhlZCA/IGNvbnZlcnRUb1VuaXQoMCkgOiAnJyxcbiAgICAgIHJpZ2h0OiBwcm9wcy5yaWdodCAmJiBwcm9wcy5maXhlZCA/IGNvbnZlcnRUb1VuaXQoMCkgOiAnJyxcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSlcbiAgICB9KSlcblxuICAgIGNvbnN0IGdlbk5hdmlnYXRpb25Db250ZW50ID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzOiAndi1uYXZpZ2F0aW9uX19jb250ZW50J1xuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBzbG90cy5kZWZhdWx0Py4oKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBvbk1vdXNlZW50ZXIgPSAoKSA9PiB7XG4gICAgICBpZiAoIXByb3BzLm9uSG92ZXIgfHwgcHJvcHMubWluaVZhcmlhbnQpIHJldHVyblxuICAgICAgaXNIb3ZlcmVkLnZhbHVlID0gdHJ1ZVxuICAgICAgZW1pdCgndXBkYXRlOmV4cGFuZCcsIHRydWUpXG4gICAgfVxuXG4gICAgY29uc3Qgb25Nb3VzZWxlYXZlID0gKCkgPT4ge1xuICAgICAgaWYgKCFwcm9wcy5vbkhvdmVyIHx8IHByb3BzLm1pbmlWYXJpYW50KSByZXR1cm5cbiAgICAgIGlzSG92ZXJlZC52YWx1ZSA9IGZhbHNlXG4gICAgICBlbWl0KCd1cGRhdGU6ZXhwYW5kJywgZmFsc2UpXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IGgoJ2FzaWRlJywge1xuICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICBzdHlsZTogc3R5bGVzLnZhbHVlLFxuICAgICAgb25Nb3VzZWVudGVyLFxuICAgICAgb25Nb3VzZWxlYXZlXG4gICAgfSwgZ2VuTmF2aWdhdGlvbkNvbnRlbnQoKSlcbiAgfVxufSlcbiIsImV4cG9ydCB7IFZOYXZpZ2F0aW9uIH0gZnJvbSAnLi9WTmF2aWdhdGlvbidcbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaCB9IGZyb20gJ3Z1ZSdcblxuZXhwb3J0IGNvbnN0IFZNYWluID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtbWFpbicsXG4gIHNldHVwKF8sIHsgc2xvdHMgfSkge1xuICAgIHJldHVybiAoKSA9PiBoKCdkaXYnLCB7XG4gICAgICBjbGFzczogJ3YtbWFpbicsXG4gICAgfSwge1xuICAgICAgZGVmYXVsdDogKCkgPT4gc2xvdHMuZGVmYXVsdD8uKCksXG4gICAgfSlcbiAgfSxcbn0pXG4iLCJleHBvcnQgeyBWTWFpbiB9IGZyb20gJy4vVk1haW4nXG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyBoLCBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnXG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZUZXh0RmllbGQgfSBmcm9tICcuLi9WVGV4dEZpZWxkJ1xuXG5leHBvcnQgY29uc3QgVlRleHRhcmVhID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtdGV4dGFyZWEnLFxuXG4gIHNldHVwKCkge1xuICAgIHJldHVybiAoKSA9PlxuICAgICAgaChWVGV4dEZpZWxkLCB7XG4gICAgICAgIHRhZzogJ3RleHRhcmVhJyxcbiAgICAgICAgY2xhc3M6ICd2LXRleHRhcmVhJyxcbiAgICAgIH0pXG4gIH0sXG59KVxuIiwiZXhwb3J0ICogZnJvbSAnLi9WVGV4dGFyZWEnXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGggfSBmcm9tICd2dWUnXG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0IH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuZXhwb3J0IGNvbnN0IFZTa2VsZXRvbiA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LXNrZWxldG9uJyxcbiAgcHJvcHM6IHtcbiAgICB0YWc6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdkaXYnLFxuICAgIH0sXG4gICAgd2lkdGg6IHtcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gICAgaGVpZ2h0OiB7XG4gICAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgICAgZGVmYXVsdDogMjAsXG4gICAgfSxcbiAgICByYWRpdXM6IHtcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgICBkZWZhdWx0OiA1LFxuICAgIH0sXG4gICAgbGlnaHQ6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlLFxuICAgIH0sXG4gICAgZHluYW1pYzogQm9vbGVhbixcbiAgfSxcbiAgc2V0dXAocHJvcHMpIHtcbiAgICByZXR1cm4gKCkgPT4gaChwcm9wcy50YWcsIHtcbiAgICAgIGNsYXNzOiB7XG4gICAgICAgICd2LXNrZWxldG9uJzogdHJ1ZSxcbiAgICAgICAgJ3Ytc2tlbGV0b24tLWxpZ2h0JzogcHJvcHMubGlnaHQsXG4gICAgICAgICd2LXNrZWxldG9uLS1keW5hbWljJzogcHJvcHMuZHluYW1pYyxcbiAgICAgIH0sXG4gICAgICBzdHlsZToge1xuICAgICAgICB3aWR0aDogcHJvcHMud2lkdGggJiYgY29udmVydFRvVW5pdChwcm9wcy53aWR0aCksXG4gICAgICAgIGZsZXhCYXNpczogcHJvcHMud2lkdGggJiYgY29udmVydFRvVW5pdChwcm9wcy53aWR0aCkgfHwgJzEwMCUnLFxuICAgICAgICBoZWlnaHQ6IGNvbnZlcnRUb1VuaXQocHJvcHMuaGVpZ2h0KSxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiBjb252ZXJ0VG9Vbml0KHByb3BzLnJhZGl1cylcbiAgICAgIH0sXG4gICAgfSlcbiAgfSxcbn0pXG4iLCJleHBvcnQgeyBWU2tlbGV0b24gfSBmcm9tICcuL1ZTa2VsZXRvbidcbiIsIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGgsIGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnXG5cbi8vIEVmZmVjdHNcbmltcG9ydCB7IGNvbG9yUHJvcHMsIHVzZUNvbG9ycyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcblxuLy8gSGVscGVyc1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZSZXNpemUgfSBmcm9tICcuLi9WUmVzaXplJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tICd2dWUnXG5cbmV4cG9ydCBjb25zdCBWRGF0YVRhYmxlQ2VsbCA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWRhdGEtdGFibGUtY2VsbCcsXG4gIHByb3BzOiB7XG4gICAgZGFyazogQm9vbGVhbixcbiAgICByZXNpemVhYmxlOiBCb29sZWFuLFxuICAgIGFsaWduOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnc3RhcnQnLFxuICAgIH0sXG4gICAgd2lkdGg6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiA3NSxcbiAgICB9LFxuICAgIHJlc2l6ZXJDb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3ByaW1hcnknLFxuICAgIH0sXG4gICAgY29udGVudENvbG9yOiBTdHJpbmcsXG4gICAgLi4uY29sb3JQcm9wcygpLFxuICB9IGFzIGFueSxcblxuICBlbWl0czogWydyZXNpemUnXSxcblxuICBzZXR1cChwcm9wcywgeyBzbG90cywgZW1pdCB9KTogKCkgPT4gVk5vZGUge1xuICAgIGNvbnN0IHtcbiAgICAgIHNldFRleHRDbGFzc05hbWVDb2xvcixcbiAgICAgIHNldFRleHRDc3NDb2xvcixcbiAgICAgIHNldEJhY2tncm91bmRDc3NDb2xvcixcbiAgICAgIHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcixcbiAgICB9ID0gdXNlQ29sb3JzKClcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LWRhdGEtdGFibGVfX2NlbGwnOiB0cnVlLFxuICAgICAgLi4uKHByb3BzLmNvbnRlbnRDb2xvciA/IHNldFRleHRDbGFzc05hbWVDb2xvcihwcm9wcy5jb250ZW50Q29sb3IpIDoge30pLFxuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IHN0eWxlcyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICB3aWR0aDogY29udmVydFRvVW5pdCgrcHJvcHMud2lkdGgpLFxuICAgICAgLi4uKHByb3BzLmNvbnRlbnRDb2xvciA/IHNldFRleHRDc3NDb2xvcihwcm9wcy5jb250ZW50Q29sb3IpIDoge30pLFxuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0QmFja2dyb3VuZENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGZ1bmN0aW9uIGdlblJlc2l6ZSgpOiBWTm9kZSB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIHJpZ2h0OiB0cnVlLFxuICAgICAgICBlbWl0OiB0cnVlLFxuICAgICAgICBjb2xvcjogcHJvcHMucmVzaXplckNvbG9yLFxuICAgICAgICBvblJlc2l6ZTogKCRzaXplKSA9PiBlbWl0KCdyZXNpemUnLCAkc2l6ZSksXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKFZSZXNpemUsIHByb3BzRGF0YSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5DZWxsQ29udGVudCgpOiBWTm9kZSB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgJ3YtZGF0YS10YWJsZV9fY2VsbC1jb250ZW50JzogdHJ1ZSxcbiAgICAgICAgICBbYHRleHQtYWxpZ24tLSR7IHByb3BzLmFsaWduIH1gXTogISFwcm9wcy5hbGlnbixcbiAgICAgICAgfSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCkpXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgIHN0eWxlOiBzdHlsZXMudmFsdWUsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIFtcbiAgICAgICAgZ2VuQ2VsbENvbnRlbnQoKSxcbiAgICAgICAgcHJvcHMucmVzaXplYWJsZSAmJiBnZW5SZXNpemUoKSxcbiAgICAgIF0pXG4gICAgfVxuICB9LFxufSlcbiIsIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGgsIGNvbXB1dGVkLCB3aXRoRGlyZWN0aXZlcywgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJ1xuXG4vLyBFZmZlY3RzXG5pbXBvcnQgeyB1c2VDb2xvcnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG5pbXBvcnQgeyB1c2VJY29ucyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWljb25zJ1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWSWNvbiB9IGZyb20gJy4uL1ZJY29uJ1xuaW1wb3J0IHsgVkNoZWNrYm94IH0gZnJvbSAnLi4vVkNoZWNrYm94J1xuaW1wb3J0IHsgVkRhdGFUYWJsZUNlbGwgfSBmcm9tICcuL1ZEYXRhVGFibGVDZWxsJ1xuaW1wb3J0IHsgVlRleHRGaWVsZCB9IGZyb20gJy4uL1ZUZXh0RmllbGQnXG5cbi8vIERpcmVjdGl2ZXNcbmltcG9ydCB7IHZTaG93IH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgY2xpY2tPdXRzaWRlIH0gZnJvbSAnLi4vLi4vZGlyZWN0aXZlcy92LWNsaWNrLW91dHNpZGUnXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IERhdGFDb2x1bW4gfSBmcm9tICcuLi8uLi8uLi90eXBlcydcblxuZXhwb3J0IGNvbnN0IFZEYXRhVGFibGVIZWFkZXIgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1kYXRhLXRhYmxlLWhlYWRlcicsXG5cbiAgcHJvcHM6IHtcbiAgICBzaG93U2VxdWVuY2U6IEJvb2xlYW4sXG4gICAgc2hvd0NoZWNrYm94OiBCb29sZWFuLFxuICAgIGNvbHM6IEFycmF5LFxuICAgIGNvbFdpZHRoOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogMTI1LFxuICAgIH0sXG4gICAgYWxpZ246IFN0cmluZyxcbiAgICBvcHRpb25zOiBPYmplY3QsXG4gIH0gYXMgYW55LFxuXG4gIGVtaXRzOiBbJ3NvcnQnLCAnZmlsdGVyJywgJ3NlbGVjdC1hbGwnLCAndXBkYXRlOmNvbHMnXSxcblxuICBzZXR1cChwcm9wcywgeyBlbWl0LCBzbG90cyB9KSB7XG4gICAgY29uc3QgeyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IsIHNldEJhY2tncm91bmRDc3NDb2xvciB9ID0gdXNlQ29sb3JzKClcbiAgICBjb25zdCB7IGljb25zLCAgfSA9IHVzZUljb25zKClcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LWRhdGEtdGFibGVfX2hlYWRlcic6IHRydWUsXG4gICAgICAuLi4ocHJvcHMub3B0aW9ucy5jb2xvclxuICAgICAgICA/IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihwcm9wcy5vcHRpb25zLmNvbG9yKVxuICAgICAgICA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IHN0eWxlcyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICAuLi4ocHJvcHMub3B0aW9ucy5jb2xvclxuICAgICAgICA/IHNldEJhY2tncm91bmRDc3NDb2xvcihwcm9wcy5vcHRpb25zLmNvbG9yKVxuICAgICAgICA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IGNvbXB1dGVkQ29udGVudENvbG9yID0gY29tcHV0ZWQ8c3RyaW5nPigoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMub3B0aW9ucy5kYXJrXG4gICAgICAgID8gcHJvcHMub3B0aW9ucz8uY29udGVudENvbG9yIHx8ICd3aGl0ZSdcbiAgICAgICAgOiBwcm9wcy5vcHRpb25zPy5jb250ZW50Q29sb3JcbiAgICB9KVxuXG4gICAgY29uc3QgY29scyA9IGNvbXB1dGVkPERhdGFDb2x1bW5bXT4oKCkgPT4gWy4uLnByb3BzLmNvbHNdKVxuXG4gICAgY29uc3Qgb25Tb3J0ID0gKGl0ZW0pID0+IHtcbiAgICAgIGVtaXQoJ3NvcnQnLCBpdGVtKVxuICAgIH1cblxuICAgIGNvbnN0IG9uSW5wdXQgPSAoJHZhbHVlLCBpdGVtKSA9PiB7XG4gICAgICBpdGVtLmZpbHRlcmVkID0gISEkdmFsdWVcbiAgICAgIGVtaXQoJ2ZpbHRlcicsIHsgdmFsdWU6ICR2YWx1ZSwgY29sOiBpdGVtIH0pXG4gICAgfVxuXG4gICAgY29uc3Qgc2hvd0ZpbHRlciA9IChpdGVtKSA9PiB7XG4gICAgICBpZiAoaXRlbS5zaG93RmlsdGVyKSByZXR1cm5cbiAgICAgIGl0ZW0uc2hvd0ZpbHRlciA9IHRydWVcbiAgICB9XG5cbiAgICBjb25zdCBnZW5Tb3J0QnV0dG9uID0gKGl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IGNsYXNzZXMgPSB7XG4gICAgICAgICd2LWRhdGEtdGFibGUtY29sX19hY3Rpb25zLXNvcnQnOiB0cnVlLFxuICAgICAgICAndi1kYXRhLXRhYmxlLWNvbF9fYWN0aW9ucy1zb3J0LS1hY3RpdmUnOiBpdGVtLnNvcnRlZCxcbiAgICAgIH1cblxuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgIGNsYXNzOiBjbGFzc2VzLFxuICAgICAgICBpY29uOiBpY29ucy4kYXJyb3dVcCxcbiAgICAgICAgb25DbGljazogKCkgPT4gb25Tb3J0KGl0ZW0pLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaChWSWNvbiwgcHJvcHNEYXRhKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkZpbHRlckJ1dHRvbiA9IChpdGVtKSA9PiB7XG4gICAgICBjb25zdCBjbGFzc2VzID0ge1xuICAgICAgICAndi1kYXRhLXRhYmxlLWNvbF9fYWN0aW9ucy1maWx0ZXInOiB0cnVlLFxuICAgICAgICAndi1kYXRhLXRhYmxlLWNvbF9fYWN0aW9ucy1maWx0ZXItLWFjdGl2ZSc6IGl0ZW0uZmlsdGVyZWQsXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICBjbGFzczogY2xhc3NlcyxcbiAgICAgICAgaWNvbjogaWNvbnMuJGZpbHRlcixcbiAgICAgICAgY29sb3I6ICFpdGVtLmNlbGxDbGFzcyA/IGNvbXB1dGVkQ29udGVudENvbG9yLnZhbHVlIDogJycsXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IHNob3dGaWx0ZXIoaXRlbSksXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKFZJY29uLCBwcm9wc0RhdGEpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuSGVhZGVyQWN0aW9ucyA9IChpdGVtKSA9PiB7XG4gICAgICByZXR1cm4gaCgnc3BhbicsIHsgY2xhc3M6ICd2LWRhdGEtdGFibGUtY29sX19hY3Rpb25zJyB9LCBbXG4gICAgICAgIGl0ZW0uc29ydGFibGUgJiYgZ2VuU29ydEJ1dHRvbihpdGVtKSxcbiAgICAgICAgaXRlbS5maWx0ZXJhYmxlICYmIGdlbkZpbHRlckJ1dHRvbihpdGVtKSxcbiAgICAgIF0pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuRmlsdGVySW5wdXQgPSAoaXRlbSkgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBsYWJlbDogJ3NlYXJjaCcsXG4gICAgICAgIGRhcms6IHByb3BzLm9wdGlvbnMuZGFyayxcbiAgICAgICAgY29sb3I6ICFpdGVtLmNlbGxDbGFzcyA/IGNvbXB1dGVkQ29udGVudENvbG9yLnZhbHVlIDogJycsXG4gICAgICAgIHByZXBlbmRJY29uOiBpY29ucy4kc2VhcmNoLFxuICAgICAgICBjbGVhcmFibGU6IHRydWUsXG4gICAgICAgIG9uSW5wdXQ6ICgkdmFsdWUpID0+IG9uSW5wdXQoJHZhbHVlLCBpdGVtKSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoVlRleHRGaWVsZCwgcHJvcHNEYXRhKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkZpbHRlcldyYXBwZXIgPSAoY29sKSA9PiB7XG4gICAgICBjb25zdCBjb2xvciA9IHByb3BzLm9wdGlvbnMuZGFya1xuICAgICAgICA/IHByb3BzLm9wdGlvbnM/LmNvbG9yIHx8ICdncmV5IGRhcmtlbi0zJ1xuICAgICAgICA6IHByb3BzLm9wdGlvbnM/LmNvbG9yIHx8ICd3aGl0ZSdcblxuICAgICAgY29uc3Qgc2xvdE5hbWUgPSBgJHsgY29sLmtleSB9LWZpbHRlcmBcblxuICAgICAgY29uc3QgZmlsdGVyU2xvdCA9IHNsb3RzW3Nsb3ROYW1lXSAmJiBzbG90c1tzbG90TmFtZV0hKHtcbiAgICAgICAgZmlsdGVyOiAoZXZlbnQpID0+IG9uSW5wdXQoZXZlbnQsIGNvbCksXG4gICAgICB9KVxuXG4gICAgICBjb25zdCBkaXJlY3RpdmUgPSBjb2wuc2hvd0ZpbHRlclxuICAgICAgICA/IHtcbiAgICAgICAgICBoYW5kbGVyOiAoKSA9PiBzZXRUaW1lb3V0KCgpID0+IChjb2wuc2hvd0ZpbHRlciA9IGZhbHNlKSksXG4gICAgICAgICAgY2xvc2VDb25kaXRpb25hbDogZmFsc2UsXG4gICAgICAgIH1cbiAgICAgICAgOiB1bmRlZmluZWRcblxuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LWRhdGEtdGFibGUtY29sX19maWx0ZXInOiAhZmlsdGVyU2xvdCxcbiAgICAgICAgICAndi1kYXRhLXRhYmxlLWNvbF9fY3VzdG9tLWZpbHRlcic6ICEhZmlsdGVyU2xvdCxcbiAgICAgICAgICAnZWxldmF0aW9uLTUnOiB0cnVlLFxuICAgICAgICAgIFtjb2wuY2VsbENsYXNzXTogISFjb2wuY2VsbENsYXNzLFxuICAgICAgICAgIC4uLihjb2xvciA/IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihjb2xvcikgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgLi4uKGNvbG9yID8gc2V0QmFja2dyb3VuZENzc0NvbG9yKGNvbG9yKSA6IHt9KSxcbiAgICAgICAgfSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgY29sLmZpbHRlcmFibGUgJiZcbiAgICAgICAgd2l0aERpcmVjdGl2ZXMoaCgnZGl2JywgcHJvcHNEYXRhLCBmaWx0ZXJTbG90IHx8IGdlbkZpbHRlcklucHV0KGNvbCkpLCBbXG4gICAgICAgICAgW2NsaWNrT3V0c2lkZSwgZGlyZWN0aXZlXSxcbiAgICAgICAgICBbdlNob3csIGNvbC5zaG93RmlsdGVyXSxcbiAgICAgICAgXSlcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5IZWFkZXJUaXRsZSA9IChjb2wpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaCgnZGl2JywgeyBjbGFzczogJ3YtZGF0YS10YWJsZS1jb2xfX3RpdGxlJyB9LCBjb2wudGl0bGUpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuTnVtYmVyQ2VsbCA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1kYXRhLXRhYmxlLWNvbF9fbnVtYmVyJzogdHJ1ZSxcbiAgICAgICAgICBbcHJvcHMuY2VsbENsYXNzXTogISFwcm9wcy5jZWxsQ2xhc3MsXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRlbnRDb2xvcjogY29tcHV0ZWRDb250ZW50Q29sb3IudmFsdWUsXG4gICAgICAgIGNvbG9yOiBwcm9wcy5vcHRpb25zLmNvbG9yLFxuICAgICAgICB3aWR0aDogNTAsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKFZEYXRhVGFibGVDZWxsLCBwcm9wc0RhdGEsIHsgZGVmYXVsdDogKCkgPT4gJ+KElicgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5DaGVja2JveENlbGwgPSAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1kYXRhLXRhYmxlLWNvbF9fY2hlY2tib3gnOiB0cnVlLFxuICAgICAgICAgIFtwcm9wcy5jZWxsQ2xhc3NdOiAhIXByb3BzLmNlbGxDbGFzcyxcbiAgICAgICAgfSxcbiAgICAgICAgZGFyazogcHJvcHMub3B0aW9ucy5kYXJrLFxuICAgICAgICBjb250ZW50Q29sb3I6IGNvbXB1dGVkQ29udGVudENvbG9yLnZhbHVlLFxuICAgICAgICBjb2xvcjogcHJvcHMub3B0aW9ucy5jb2xvcixcbiAgICAgICAgd2lkdGg6IDUwLFxuICAgICAgfVxuXG4gICAgICBjb25zdCBjb250ZW50ID0ge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PlxuICAgICAgICAgIGgoVkNoZWNrYm94LCB7XG4gICAgICAgICAgICBjb2xvcjogY29tcHV0ZWRDb250ZW50Q29sb3IudmFsdWUsXG4gICAgICAgICAgICBvbkNoZWNrZWQ6IChlKSA9PiBlbWl0KCdzZWxlY3QtYWxsJywgZSksXG4gICAgICAgICAgfSksXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKFZEYXRhVGFibGVDZWxsLCBwcm9wc0RhdGEsIGNvbnRlbnQpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuSGVhZGVyQ2VsbCA9IChjb2wpID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgZGFyazogcHJvcHMub3B0aW9ucy5kYXJrLFxuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LWRhdGEtdGFibGUtY29sJzogdHJ1ZSxcbiAgICAgICAgICAndi1kYXRhLXRhYmxlLWNvbC0tc29ydGVkJzogY29sLnNvcnRlZCxcbiAgICAgICAgICBbY29sLmNlbGxDbGFzc106ICEhY29sLmNlbGxDbGFzcyxcbiAgICAgICAgfSxcbiAgICAgICAgY29udGVudENvbG9yOiAhY29sLmNlbGxDbGFzcyA/IGNvbXB1dGVkQ29udGVudENvbG9yLnZhbHVlIDogJycsXG4gICAgICAgIGNvbG9yOiAhY29sLmNlbGxDbGFzcyA/IHByb3BzLm9wdGlvbnMuY29sb3IgOiAnJyxcbiAgICAgICAgd2lkdGg6IGNvbC53aWR0aCxcbiAgICAgICAgcmVzaXplYWJsZTogY29sLnJlc2l6ZWFibGUsXG4gICAgICAgIHJlc2l6ZXJDb2xvcjogcHJvcHMub3B0aW9ucz8ucmVzaXplckNvbG9yLFxuICAgICAgICBhbGlnbjogY29sLmFsaWduIHx8IHByb3BzLmFsaWduLFxuICAgICAgICBvblJlc2l6ZTogKCRzaXplKSA9PiAoY29sLndpZHRoID0gJHNpemUpLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaChWRGF0YVRhYmxlQ2VsbCwgcHJvcHNEYXRhLCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtcbiAgICAgICAgICBnZW5IZWFkZXJUaXRsZShjb2wpLFxuICAgICAgICAgIGdlbkhlYWRlckFjdGlvbnMoY29sKSxcbiAgICAgICAgICBnZW5GaWx0ZXJXcmFwcGVyKGNvbCksXG4gICAgICAgIF0sXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkhlYWRlckNoaWxkcmVuID0gKCkgPT4ge1xuICAgICAgY29uc3QgY2hpbGRyZW46IFZOb2RlW10gPSBbXVxuICAgICAgY29uc3QgaGVhZGVyU2xvdCA9IHNsb3RzLmhlYWRlciAmJiBzbG90cy5oZWFkZXIocHJvcHMpXG5cbiAgICAgIHByb3BzLnNob3dTZXF1ZW5jZSAmJiBjaGlsZHJlbi5wdXNoKGdlbk51bWJlckNlbGwoKSlcbiAgICAgIHByb3BzLnNob3dDaGVja2JveCAmJiBjaGlsZHJlbi5wdXNoKGdlbkNoZWNrYm94Q2VsbCgpKVxuXG4gICAgICBjb2xzLnZhbHVlIS5mb3JFYWNoKChjb2w6IERhdGFDb2x1bW4pID0+IHtcbiAgICAgICAgY29sLndpZHRoID0gY29sLndpZHRoIHx8IHByb3BzLmNvbFdpZHRoXG5cbiAgICAgICAgaWYgKCFjb2wuaGFzT3duUHJvcGVydHkoJ3Nob3cnKSkge1xuICAgICAgICAgIGNvbC5zaG93ID0gIWNvbC5zaG93XG4gICAgICAgIH1cblxuICAgICAgICAhaGVhZGVyU2xvdCFbMF0uY2hpbGRyZW4gJiZcbiAgICAgICAgY29sLnNob3cgJiZcbiAgICAgICAgY2hpbGRyZW4ucHVzaChnZW5IZWFkZXJDZWxsKGNvbCkpXG4gICAgICB9KVxuXG4gICAgICBoZWFkZXJTbG90IVswXS5jaGlsZHJlbiAmJiBjaGlsZHJlbi5wdXNoKGhlYWRlclNsb3QgYXMgYW55KVxuXG4gICAgICByZXR1cm4gY2hpbGRyZW5cbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgc3R5bGU6IHN0eWxlcy52YWx1ZSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgZ2VuSGVhZGVyQ2hpbGRyZW4oKSlcbiAgICB9XG4gIH0sXG59KVxuIiwiLy8gVnVlIEFQSVxuaW1wb3J0IHsgaCwgcmVmLCB3YXRjaCwgY29tcHV0ZWQsIGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSdcblxuLy8gRWZmZWN0c1xuaW1wb3J0IHsgY29sb3JQcm9wcywgdXNlQ29sb3JzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtY29sb3JzJ1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWRGF0YVRhYmxlQ2VsbCB9IGZyb20gJy4vVkRhdGFUYWJsZUNlbGwnXG5pbXBvcnQgeyBWQ2hlY2tib3ggfSBmcm9tICcuLi9WQ2hlY2tib3gnXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gJ3Z1ZSdcblxuZXhwb3J0IGNvbnN0IFZEYXRhVGFibGVCb2R5ID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtZGF0YS10YWJsZS1ib2R5JyxcblxuICBwcm9wczoge1xuICAgIGNvbHM6IEFycmF5LFxuICAgIHJvd3M6IEFycmF5LFxuICAgIGRhcms6IEJvb2xlYW4sXG4gICAgc2hvd1NlcXVlbmNlOiBCb29sZWFuLFxuICAgIHNob3dDaGVja2JveDogQm9vbGVhbixcbiAgICBjaGVja0FsbFJvd3M6IEJvb2xlYW4sXG4gICAgYWxpZ246IFN0cmluZyxcbiAgICBjb2xXaWR0aDoge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IDEyNSxcbiAgICB9LFxuICAgIHBhZ2U6IE51bWJlcixcbiAgICByb3dzT25QYWdlOiBOdW1iZXIsXG4gICAgLi4uY29sb3JQcm9wcygpLFxuICB9IGFzIGFueSxcblxuICBlbWl0czogWydzZWxlY3QnLCAnY2xpY2s6cm93JywgJ2RibGNsaWNrOnJvdycsICdjb250ZXh0bWVudTpyb3cnXSxcblxuICBzZXR1cChwcm9wcywgeyBzbG90cywgZW1pdCB9KTogKCkgPT4gVk5vZGUge1xuICAgIGNvbnN0IGNoZWNrZWRSb3dzID0gcmVmKFtdKVxuXG4gICAgY29uc3QgeyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IsIHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvciB9ID0gdXNlQ29sb3JzKClcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LWRhdGEtdGFibGVfX2JvZHknOiB0cnVlLFxuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IHN0eWxlcyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3Qgcm93c09uVGFibGUgPSBjb21wdXRlZDxhbnlbXT4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLnJvd3M/LnNsaWNlKFxuICAgICAgICAocHJvcHMucGFnZSAtIDEpICogcHJvcHMucm93c09uUGFnZSxcbiAgICAgICAgcHJvcHMucGFnZSAqIHByb3BzLnJvd3NPblBhZ2UsXG4gICAgICApXG4gICAgfSlcblxuICAgIHdhdGNoKFxuICAgICAgKCkgPT4gcHJvcHMuY2hlY2tBbGxSb3dzLFxuICAgICAgKHRvKSA9PiB7XG4gICAgICAgIGlmICh0bykgb25TZWxlY3RSb3dzKHByb3BzLnJvd3MpXG4gICAgICAgIGVsc2Ugb25TZWxlY3RSb3dzKFtdKVxuICAgICAgfSxcbiAgICApXG5cbiAgICBmdW5jdGlvbiBvblNlbGVjdFJvd3Mocm93cykge1xuICAgICAgY2hlY2tlZFJvd3MudmFsdWUgPSByb3dzXG4gICAgICBlbWl0KCdzZWxlY3QnLCBjaGVja2VkUm93cy52YWx1ZSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5OdW1iZXJDZWxsKGNvdW50KTogVk5vZGUge1xuICAgICAgcmV0dXJuIGgoXG4gICAgICAgIFZEYXRhVGFibGVDZWxsLFxuICAgICAgICB7XG4gICAgICAgICAgd2lkdGg6IDUwLFxuICAgICAgICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICBkYXJrOiBwcm9wcy5kYXJrLFxuICAgICAgICAgIGNvbG9yOiBwcm9wcy5jb2xvcixcbiAgICAgICAgICBjbGFzczogJ3YtZGF0YS10YWJsZV9fcm93LW51bWJlcicsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBjb3VudCArIDEsXG4gICAgICAgIH0sXG4gICAgICApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuQ2hlY2tib3hDZWxsKHJvdyk6IFZOb2RlIHtcbiAgICAgIHJldHVybiBoKFxuICAgICAgICBWRGF0YVRhYmxlQ2VsbCxcbiAgICAgICAge1xuICAgICAgICAgIHdpZHRoOiA1MCxcbiAgICAgICAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgZGFyazogcHJvcHMuZGFyayxcbiAgICAgICAgICBjb2xvcjogcHJvcHMuY29sb3IsXG4gICAgICAgICAgY2xhc3M6ICd2LWRhdGEtdGFibGVfX3Jvdy1jaGVja2JveCcsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PlxuICAgICAgICAgICAgaChWQ2hlY2tib3gsIHtcbiAgICAgICAgICAgICAgbW9kZWxWYWx1ZTogY2hlY2tlZFJvd3MudmFsdWUsXG4gICAgICAgICAgICAgIGNvbG9yOiBwcm9wcy5kYXJrID8gJ3doaXRlJyA6ICcnLFxuICAgICAgICAgICAgICB2YWx1ZTogcm93LFxuICAgICAgICAgICAgICBvbkNoZWNrZWQ6IG9uU2VsZWN0Um93cyxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9LFxuICAgICAgKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlblJvd0NlbGwoY29sLCByb3cpOiBWTm9kZSB7XG4gICAgICBjb25zdCB7IGZvcm1hdCB9ID0gY29sXG4gICAgICBjb25zdCBzbG90Q29udGVudCA9XG4gICAgICAgIHNsb3RzW2NvbC5rZXldICYmXG4gICAgICAgIHNsb3RzW2NvbC5rZXldISh7XG4gICAgICAgICAgcm93LFxuICAgICAgICAgIGZvcm1hdCxcbiAgICAgICAgfSlcblxuICAgICAgcmV0dXJuIGgoXG4gICAgICAgIFZEYXRhVGFibGVDZWxsLFxuICAgICAgICB7XG4gICAgICAgICAgd2lkdGg6IGNvbC53aWR0aCxcbiAgICAgICAgICBhbGlnbjogY29sLmFsaWduIHx8IHByb3BzLmFsaWduLFxuICAgICAgICAgIGRhcms6IHByb3BzLmRhcmssXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PlxuICAgICAgICAgICAgc2xvdENvbnRlbnRcbiAgICAgICAgICAgICAgPyBzbG90Q29udGVudFxuICAgICAgICAgICAgICA6IGZvcm1hdFxuICAgICAgICAgICAgICA/IGZvcm1hdChyb3cpXG4gICAgICAgICAgICAgIDogU3RyaW5nKHJvd1tjb2wua2V5XSksXG4gICAgICAgIH0sXG4gICAgICApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuVGFibGVSb3cocm93LCByb3dDb3VudDogbnVtYmVyKTogVk5vZGUge1xuICAgICAgY29uc3Qgcm93Q2VsbHM6IFZOb2RlW10gPSBbXVxuXG4gICAgICBwcm9wcy5zaG93U2VxdWVuY2UgJiYgcm93Q2VsbHMucHVzaChnZW5OdW1iZXJDZWxsKHJvd0NvdW50KSlcbiAgICAgIHByb3BzLnNob3dDaGVja2JveCAmJiByb3dDZWxscy5wdXNoKGdlbkNoZWNrYm94Q2VsbChyb3cpKVxuXG4gICAgICBwcm9wcy5jb2xzLmZvckVhY2goKGNvbCkgPT4ge1xuICAgICAgICBjb2wuc2hvdyAmJiByb3dDZWxscy5wdXNoKGdlblJvd0NlbGwoY29sLCByb3cpKVxuICAgICAgfSlcblxuICAgICAgcmV0dXJuIGgoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3M6IHsgJ3YtZGF0YS10YWJsZV9fcm93JzogdHJ1ZSB9LFxuICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IGVtaXQoJ2NsaWNrOnJvdycsIHJvdyksXG4gICAgICAgICAgb25EYmxjbGljazogKCkgPT4gZW1pdCgnZGJsY2xpY2s6cm93Jywgcm93KSxcbiAgICAgICAgICBvbkNvbnRleHRtZW51OiAoZSkgPT4ge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgICBlbWl0KCdjb250ZXh0bWVudTpyb3cnLCByb3cpXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgcm93Q2VsbHMsXG4gICAgICApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuVGFibGVSb3dzKCk6IFZOb2RlW10ge1xuICAgICAgY29uc3QgdGFibGVSb3dzOiBWTm9kZVtdID0gW11cbiAgICAgIGNvbnN0IHJvd3NMZW5ndGggPSByb3dzT25UYWJsZS52YWx1ZT8ubGVuZ3RoXG4gICAgICBjb25zdCBjb3VudCA9IChwcm9wcy5wYWdlIC0gMSkgKiBwcm9wcy5yb3dzT25QYWdlXG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm93c0xlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHRhYmxlUm93cy5wdXNoKGdlblRhYmxlUm93KHJvd3NPblRhYmxlLnZhbHVlW2ldLCBjb3VudCArIGkpKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGFibGVSb3dzXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IGgoJ2RpdicsIHtcbiAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgc3R5bGU6IHN0eWxlcy52YWx1ZSxcbiAgICB9LCBnZW5UYWJsZVJvd3MoKSlcbiAgfSxcbn0pXG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyB3YXRjaCwgY29tcHV0ZWQsIGRlZmluZUNvbXBvbmVudCwgaCwgcmVmLCBQcm9wVHlwZSB9IGZyb20gJ3Z1ZSdcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkljb24gfSBmcm9tICcuLi9WSWNvbidcbmltcG9ydCB7IFZCdXR0b24gfSBmcm9tICcuLi9WQnV0dG9uJ1xuaW1wb3J0IHsgVk1lbnUgfSBmcm9tICcuLi9WTWVudSdcblxuLy8gRWZmZWN0c1xuaW1wb3J0IHsgdXNlQ29sb3JzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtY29sb3JzJ1xuXG5pbXBvcnQgeyB1c2VJY29ucyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWljb25zJ1xuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgTWF5YmUgfSBmcm9tICcuLi8uLi8uLi90eXBlcy9iYXNlJ1xuaW1wb3J0IHsgSURhdGFUYWJsZUZvb3Rlck9wdGlvbnMgfSBmcm9tICcuL3R5cGVzJ1xuXG5leHBvcnQgY29uc3QgVkRhdGFUYWJsZUZvb3RlciA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWRhdGEtdGFibGUtZm9vdGVyJyxcbiAgcHJvcHM6IHtcbiAgICBwYWdlczogTnVtYmVyLFxuICAgIHBhZ2U6IE51bWJlcixcbiAgICBmaXJzdE9uUGFnZTogTnVtYmVyLFxuICAgIGxhc3RPblBhZ2U6IE51bWJlcixcbiAgICBwYWdlQ29ycmVjdGlvbjogTnVtYmVyLFxuICAgIHJvd3NMZW5ndGg6IE51bWJlcixcbiAgICByb3dzT25QYWdlOiBOdW1iZXIsXG4gICAgb3B0aW9uczogT2JqZWN0IGFzIFByb3BUeXBlPElEYXRhVGFibGVGb290ZXJPcHRpb25zPixcbiAgfSBhcyBhbnksXG5cbiAgZW1pdHM6IFtcbiAgICAnbGFzdC1wYWdlJyxcbiAgICAnY29ycmVjdC1wYWdlJyxcbiAgICAnc2VsZWN0LXJvd3MtY291bnQnLFxuICAgICduZXh0LXBhZ2UnLFxuICAgICdwcmV2LXBhZ2UnLFxuICBdLFxuXG4gIHNldHVwKHByb3BzLCB7IGVtaXQsIHNsb3RzIH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3Qge1xuICAgICAgc2V0QmFja2dyb3VuZENzc0NvbG9yLFxuICAgICAgc2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yLFxuICAgICAgc2V0VGV4dENsYXNzTmFtZUNvbG9yLFxuICAgICAgc2V0VGV4dENzc0NvbG9yLFxuICAgIH0gPSB1c2VDb2xvcnMoKVxuICAgIGNvbnN0IHsgaWNvbnMgfSA9IHVzZUljb25zKClcblxuICAgIGNvbnN0IGFjdGl2YXRvciA9IHJlZjxNYXliZTxIVE1MRWxlbWVudD4+KG51bGwpXG5cbiAgICBjb25zdCBwYWdpbmF0aW9uRGlzcGxheVRleHQgPSBjb21wdXRlZDxzdHJpbmc+KCgpID0+IHtcbiAgICAgIHJldHVybiBgJHsgcHJvcHMuZmlyc3RPblBhZ2UgfSAtICR7IHByb3BzLmxhc3RPblBhZ2UgfVxuICAgICAgICBvZiAkeyBwcm9wcy5yb3dzTGVuZ3RoIH1gXG4gICAgfSlcblxuICAgIGNvbnN0IGlzTGFzdFBhZ2UgPSBjb21wdXRlZDxib29sZWFuPigoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMucGFnZSA+PSBwcm9wcy5wYWdlc1xuICAgIH0pXG5cbiAgICB3YXRjaChcbiAgICAgICgpID0+IGlzTGFzdFBhZ2UudmFsdWUsXG4gICAgICAodG8pID0+IHRvICYmIGVtaXQoJ2xhc3QtcGFnZScpLFxuICAgIClcblxuICAgIGZ1bmN0aW9uIGNoYW5nZVRhYmxlUm93c1BhZ2UoaXNOZXh0KSB7XG4gICAgICBpZiAocHJvcHMucGFnZSA9PT0gcHJvcHMucGFnZXMgJiYgaXNOZXh0KSByZXR1cm5cblxuICAgICAgY29uc3QgZXZlbnQgPSBpc05leHQgPyAnbmV4dC1wYWdlJyA6ICdwcmV2LXBhZ2UnXG4gICAgICBlbWl0KGV2ZW50LCBpc05leHQgPyAxIDogLTEpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuUGFnaW5hdGlvbkJ1dHRvbihpc05leHQgPSBmYWxzZSk6IFZOb2RlIHtcbiAgICAgIGNvbnN0IGJ0bkNvbG9yID0gcHJvcHMub3B0aW9ucz8ucGFnaW5hdGlvbj8uYnV0dG9uc0NvbG9yIHx8ICdwcmltYXJ5J1xuICAgICAgY29uc3QgY29udGVudENvbG9yID0gcHJvcHMub3B0aW9ucy5jb250ZW50Q29sb3IgfHwgJ3doaXRlJ1xuXG4gICAgICBjb25zdCBkaXNhYmxlSWYgPVxuICAgICAgICAoaXNOZXh0ICYmIHByb3BzLmxhc3RPblBhZ2UgPj0gcHJvcHMucm93c0xlbmd0aCkgfHxcbiAgICAgICAgKCFpc05leHQgJiYgcHJvcHMuZmlyc3RPblBhZ2UgPT09IDEpXG5cbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgd2lkdGg6IDQyLFxuICAgICAgICBjb2xvcjogYnRuQ29sb3IsXG4gICAgICAgIGVsZXZhdGlvbjogMyxcbiAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVJZixcbiAgICAgICAgdGV4dDogZGlzYWJsZUlmLFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiBjaGFuZ2VUYWJsZVJvd3NQYWdlKGlzTmV4dCksXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKFZCdXR0b24sIHByb3BzRGF0YSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PlxuICAgICAgICAgIGgoVkljb24sIHtcbiAgICAgICAgICAgIGljb246IGlzTmV4dCA/IGljb25zLiRhcnJvd1JpZ2h0IDogaWNvbnMuJGFycm93TGVmdCxcbiAgICAgICAgICAgIGNvbG9yOiBkaXNhYmxlSWYgPyAnZ3JleSBsaWdodGVuLTEnIDogY29udGVudENvbG9yLFxuICAgICAgICAgIH0pLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5QYWdpbmF0aW9uUGFnZURpc3BsYXkoKTogVk5vZGUge1xuICAgICAgY29uc3QgZGlzcGxheUNvbG9yID0gcHJvcHMub3B0aW9ucz8ucGFnaW5hdGlvbj8uZGlzcGxheUNvbG9yIHx8ICdwcmltYXJ5J1xuXG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIHdpZHRoOiA0MixcbiAgICAgICAgc3R5bGU6IHsgbWFyZ2luOiAnMCAxMHB4JyB9LFxuICAgICAgICBjb2xvcjogZGlzcGxheUNvbG9yLFxuICAgICAgICBlbGV2YXRpb246IDMsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKFZCdXR0b24sIHByb3BzRGF0YSwgeyBkZWZhdWx0OiAoKSA9PiBwcm9wcy5wYWdlIH0pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuUm93c0NvdW50U2VsZWN0TGlzdCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSBwcm9wcy5vcHRpb25zLmNvdW50cz8ucm93c1BlclBhZ2VPcHRpb25zIHx8IFs1LCAxMCwgMTUsIDIwXVxuICAgICAgY29uc3QgY29sb3IgPSBwcm9wcy5vcHRpb25zPy5jb3VudHM/LmRpc3BsYXlDb2xvciB8fCAncHJpbWFyeSdcbiAgICAgIGNvbnN0IGNvbnRlbnRDb2xvciA9IHByb3BzLm9wdGlvbnMuY29udGVudENvbG9yIHx8ICd3aGl0ZSdcblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcbiAgICAgICAgICBjbGFzczoge1xuICAgICAgICAgICAgJ3YtZGF0YS10YWJsZV9fcm93cy1jb3VudC1saXN0JzogdHJ1ZSxcbiAgICAgICAgICAgIC4uLihjb2xvciA/IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihjb2xvcikgOiB7fSksXG4gICAgICAgICAgICAuLi4oY29udGVudENvbG9yID8gc2V0VGV4dENsYXNzTmFtZUNvbG9yKGNvbnRlbnRDb2xvcikgOiB7fSksXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgLi4uKGNvbG9yID8gc2V0QmFja2dyb3VuZENzc0NvbG9yKGNvbG9yKSA6IHt9KSxcbiAgICAgICAgICAgIC4uLihjb250ZW50Q29sb3IgPyBzZXRUZXh0Q3NzQ29sb3IoY29udGVudENvbG9yKSA6IHt9KSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LCBvcHRpb25zLm1hcCgoaXQpID0+IGgoJ2RpdicsIHtcbiAgICAgICAgICBjbGFzczogJ3YtZGF0YS10YWJsZV9fcm93cy1jb3VudC1pdGVtJyxcbiAgICAgICAgICBvbkNsaWNrOiAoKSA9PiBlbWl0KCdzZWxlY3Qtcm93cy1jb3VudCcsIGl0KSxcbiAgICAgICAgfSwgW2l0XSkpLFxuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbk1lbnUgPSAoKSA9PiB7XG5cbiAgICAgIHJldHVybiBoKFZNZW51LCB7XG4gICAgICAgIGFjdGl2YXRvcjogYWN0aXZhdG9yLnZhbHVlISxcbiAgICAgICAgbWF4SGVpZ2h0OiAyNDAsXG4gICAgICAgIHpJbmRleDogMTIsXG4gICAgICAgIG9wZW5PbkNsaWNrOiB0cnVlLFxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBnZW5Sb3dzQ291bnRTZWxlY3RMaXN0KCksXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlblJvd3NDb3VudEZpZWxkID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcbiAgICAgICAgY2xhc3M6ICd2LWRhdGEtdGFibGVfX3Jvd3MtY291bnQtdmFsdWUnLFxuICAgICAgICB0ZXh0Q29sb3I6IHByb3BzLm9wdGlvbnMuY29udGVudENvbG9yLFxuICAgICAgfSwgcHJvcHMucm93c09uUGFnZSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5Sb3dzQ291bnRTZWxlY3QgPSAoKSA9PiB7XG4gICAgICBjb25zdCBkaXNwbGF5Q29sb3IgPSBwcm9wcy5vcHRpb25zPy5jb3VudHM/LmRpc3BsYXlDb2xvciB8fCAncHJpbWFyeSdcblxuICAgICAgcmV0dXJuIGgoVkJ1dHRvbiwge1xuICAgICAgICBjb2xvcjogZGlzcGxheUNvbG9yLFxuICAgICAgICByZWY6IGFjdGl2YXRvcixcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW1xuICAgICAgICAgIGdlblJvd3NDb3VudEZpZWxkKCksXG4gICAgICAgICAgYWN0aXZhdG9yLnZhbHVlICYmIGdlbk1lbnUoKSxcbiAgICAgICAgXSxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuUm93c0NvdW50U2VsZWN0Q2FwdGlvbigpOiBWTm9kZSB7XG4gICAgICBjb25zdCBjb2xvciA9IHByb3BzLm9wdGlvbnMuY29udGVudENvbG9yXG5cbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1kYXRhLXRhYmxlX19wYWdpbmF0aW9uLWxhYmVsJzogdHJ1ZSxcbiAgICAgICAgICAuLi4oY29sb3IgPyBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IoY29sb3IpIDoge30pLFxuICAgICAgICB9LFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIC4uLihjb2xvciA/IHNldFRleHRDc3NDb2xvcihjb2xvcikgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKFxuICAgICAgICAnc3BhbicsXG4gICAgICAgIHByb3BzRGF0YSxcbiAgICAgICAgcHJvcHMub3B0aW9ucz8uY291bnRzPy5yb3dzUGVyUGFnZVRleHQgfHwgJ1Jvd3MgcGVyIHBhZ2UnLFxuICAgICAgKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlblJvd3NDb3VudFNlbGVjdEJsb2NrKCk6IFZOb2RlIHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7IGNsYXNzOiAndi1kYXRhLXRhYmxlX19wYWdpbmF0aW9uLXNlbGVjdCcgfSwgW1xuICAgICAgICBnZW5Sb3dzQ291bnRTZWxlY3RDYXB0aW9uKCksXG4gICAgICAgIGdlblJvd3NDb3VudFNlbGVjdCgpLFxuICAgICAgXSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5QYWdlc0NvdW50RGlzcGxheSgpOiBWTm9kZSB7XG4gICAgICBjb25zdCBjb2xvciA9IHByb3BzLm9wdGlvbnMuY29udGVudENvbG9yXG5cbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1kYXRhLXRhYmxlX19wYWdpbmF0aW9uLXBhZ2VzJzogdHJ1ZSxcbiAgICAgICAgICAuLi4oY29sb3IgPyBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IoY29sb3IpIDoge30pLFxuICAgICAgICB9LFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIC4uLihjb2xvciA/IHNldFRleHRDc3NDb2xvcihjb2xvcikgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICB9XG5cbiAgICAgIHByb3BzLnBhZ2VDb3JyZWN0aW9uICYmIGVtaXQoJ2NvcnJlY3QtcGFnZScsIC1wcm9wcy5wYWdlQ29ycmVjdGlvbilcblxuICAgICAgcmV0dXJuIGgoXG4gICAgICAgICdkaXYnLFxuICAgICAgICBwcm9wc0RhdGEsXG4gICAgICAgIChwcm9wcy5yb3dzTGVuZ3RoICYmIHNsb3RzWydwYWdpbmF0aW9uLXRleHQnXT8uKCkpIHx8XG4gICAgICAgIChwcm9wcy5yb3dzTGVuZ3RoICYmIHBhZ2luYXRpb25EaXNwbGF5VGV4dC52YWx1ZSkgfHxcbiAgICAgICAgJy0nLFxuICAgICAgKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlblBhZ2luYXRpb25CdXR0b25zQmxvY2soKTogVk5vZGUge1xuICAgICAgcmV0dXJuIGgoJ2RpdicsIHsgY2xhc3M6IHsgJ3YtZGF0YS10YWJsZV9fcGFnaW5hdGlvbi1yb3V0ZSc6IHRydWUgfSB9LCBbXG4gICAgICAgIGdlblBhZ2luYXRpb25CdXR0b24oKSxcbiAgICAgICAgZ2VuUGFnaW5hdGlvblBhZ2VEaXNwbGF5KCksXG4gICAgICAgIGdlblBhZ2luYXRpb25CdXR0b24odHJ1ZSksXG4gICAgICBdKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlblBhZ2luYXRpb25CbG9jaygpOiBWTm9kZSB7XG4gICAgICByZXR1cm4gaCgnZGl2JywgeyBjbGFzczogJ3YtZGF0YS10YWJsZV9fcGFnaW5hdGlvbicgfSwgW1xuICAgICAgICBnZW5Sb3dzQ291bnRTZWxlY3RCbG9jaygpLFxuICAgICAgICBnZW5QYWdlc0NvdW50RGlzcGxheSgpLFxuICAgICAgICBnZW5QYWdpbmF0aW9uQnV0dG9uc0Jsb2NrKCksXG4gICAgICBdKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgJ3YtZGF0YS10YWJsZV9fZm9vdGVyJzogdHJ1ZSxcbiAgICAgICAgICAuLi4ocHJvcHMub3B0aW9ucy5jb2xvclxuICAgICAgICAgICAgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMub3B0aW9ucy5jb2xvcilcbiAgICAgICAgICAgIDoge30pLFxuICAgICAgICB9LFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIC4uLihwcm9wcy5vcHRpb25zLmNvbG9yXG4gICAgICAgICAgICA/IHNldEJhY2tncm91bmRDc3NDb2xvcihwcm9wcy5vcHRpb25zLmNvbG9yKVxuICAgICAgICAgICAgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIGdlblBhZ2luYXRpb25CbG9jaygpKVxuICAgIH1cbiAgfSxcbn0pXG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyBoLCB3YXRjaCwgY29tcHV0ZWQsIGRlZmluZUNvbXBvbmVudCwgcmVhY3RpdmUgfSBmcm9tICd2dWUnXG5cbi8vIEVmZmVjdHNcbmltcG9ydCB7IHVzZUNvbG9ycyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcbi8vIGltcG9ydCB7IHVzZVRoZW1lIH0gZnJvbSAnLi4vLi4vZWZmZWN0cy91c2UtdGhlbWUnXG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZEYXRhVGFibGVIZWFkZXIgfSBmcm9tICcuL1ZEYXRhVGFibGVIZWFkZXInXG5pbXBvcnQgeyBWRGF0YVRhYmxlQm9keSB9IGZyb20gJy4vVkRhdGFUYWJsZUJvZHknXG5pbXBvcnQgeyBWRGF0YVRhYmxlRm9vdGVyIH0gZnJvbSAnLi9WRGF0YVRhYmxlRm9vdGVyJ1xuXG4vLyBIZWxwZXJzXG5pbXBvcnQgeyBhZGRTY29wZWRTbG90IH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlLCBQcm9wVHlwZSB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7XG4gIERhdGFDb2x1bW4sXG4gIERhdGFDb2x1bW5Qcm9wcyxcbiAgRm9vdGVyT3B0aW9ucyxcbiAgSGVhZGVyT3B0aW9ucyxcbiAgVGFibGVGaWx0ZXIsXG59IGZyb20gJy4uLy4uLy4uL3R5cGVzJ1xuXG50eXBlIFRhYmxlU3RhdGUgPSB7XG4gIGNvbHM6IERhdGFDb2x1bW5bXVxuICByb3dzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9W11cbiAgY2hlY2tlZFJvd3M6IHsgW2tleTogc3RyaW5nXTogYW55IH1bXVxuICByb3dzT25QYWdlOiBudW1iZXJcbiAgcGFnZTogbnVtYmVyXG4gIGlzQWxsUm93c0NoZWNrZWQ6IGJvb2xlYW5cbn1cblxuZXhwb3J0IGNvbnN0IFZEYXRhVGFibGUgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1kYXRhLXRhYmxlJyxcbiAgcHJvcHM6IHtcbiAgICBjb2xzOiB7XG4gICAgICB0eXBlOiBBcnJheSxcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFtdLFxuICAgIH0sXG4gICAgcm93czoge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICBkZWZhdWx0OiAoKSA9PiBbXSxcbiAgICB9LFxuICAgIGRhcms6IEJvb2xlYW4sXG4gICAgc2hvd1NlcXVlbmNlOiBCb29sZWFuLFxuICAgIHNob3dDaGVja2JveDogQm9vbGVhbixcbiAgICBhbGlnbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgdmFsaWRhdG9yOiAodmFsKSA9PiBbJ2xlZnQnLCAnY2VudGVyJywgJ3JpZ2h0J10uaW5jbHVkZXModmFsKSxcbiAgICB9LFxuICAgIGNvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnd2hpdGUnLFxuICAgIH0sXG4gICAgaGVhZGVyT3B0aW9uczoge1xuICAgICAgdHlwZTogT2JqZWN0IGFzIFByb3BUeXBlPEhlYWRlck9wdGlvbnM+LFxuICAgICAgZGVmYXVsdDogKCkgPT4gKHt9KSxcbiAgICB9LFxuICAgIGZvb3Rlck9wdGlvbnM6IHtcbiAgICAgIHR5cGU6IE9iamVjdCBhcyBQcm9wVHlwZTxGb290ZXJPcHRpb25zPixcbiAgICAgIGRlZmF1bHQ6ICgpID0+ICh7fSksXG4gICAgfSxcbiAgICBjdXN0b21GaWx0ZXI6IEZ1bmN0aW9uLFxuICB9IGFzIGFueSxcblxuICBlbWl0czogW1xuICAgICdsYXN0LXBhZ2UnLFxuICAgICdzZWxlY3Q6cm93JyxcbiAgICAnY2xpY2s6cm93JyxcbiAgICAnZGJsY2xpY2s6cm93JyxcbiAgICAnY29udGV4dG1lbnU6cm93JyxcbiAgXSxcblxuICBzZXR1cChwcm9wcywgeyBzbG90cywgZW1pdCB9KSB7XG4gICAgY29uc3QgZGF0YSA9IHJlYWN0aXZlPFRhYmxlU3RhdGU+KHtcbiAgICAgIGNvbHM6IFtdLFxuICAgICAgcm93czogW10sXG4gICAgICBjaGVja2VkUm93czogW10sXG4gICAgICByb3dzT25QYWdlOiAyMCxcbiAgICAgIHBhZ2U6IDEsXG4gICAgICBpc0FsbFJvd3NDaGVja2VkOiBmYWxzZSxcbiAgICB9KVxuXG4gICAgY29uc3QgeyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IsIHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvciB9ID0gdXNlQ29sb3JzKClcblxuICAgIGNvbnN0IGZpbHRlcnMgPSB7fVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtZGF0YS10YWJsZSc6IHRydWUsXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBoZWFkZXJPcHRpb25zID0gY29tcHV0ZWQ8SGVhZGVyT3B0aW9ucz4oKCkgPT4gKHtcbiAgICAgIGNvbG9yOiBwcm9wcy5jb2xvcixcbiAgICAgIGRhcms6IHByb3BzLmRhcmssXG4gICAgICAuLi5wcm9wcy5oZWFkZXJPcHRpb25zLFxuICAgIH0pKVxuXG4gICAgY29uc3QgZm9vdGVyT3B0aW9ucyA9IGNvbXB1dGVkPEZvb3Rlck9wdGlvbnM+KCgpID0+ICh7XG4gICAgICBjb2xvcjogcHJvcHMuY29sb3IsXG4gICAgICBkYXJrOiBwcm9wcy5kYXJrLFxuICAgICAgLi4ucHJvcHMuZm9vdGVyT3B0aW9ucyxcbiAgICB9KSlcblxuICAgIGNvbnN0IHBhZ2VzID0gY29tcHV0ZWQ8bnVtYmVyPigoKSA9PiB7XG4gICAgICByZXR1cm4gTWF0aC5jZWlsKGRhdGEucm93cz8ubGVuZ3RoIC8gZGF0YS5yb3dzT25QYWdlKVxuICAgIH0pXG5cbiAgICBjb25zdCBmaXJzdE9uUGFnZSA9IGNvbXB1dGVkPG51bWJlcj4oKCkgPT4ge1xuICAgICAgcmV0dXJuIGRhdGEucGFnZSA9PT0gMSA/IDEgOiAoZGF0YS5wYWdlIC0gMSkgKiBkYXRhLnJvd3NPblBhZ2UgKyAxXG4gICAgfSlcblxuICAgIGNvbnN0IGxhc3RPblBhZ2UgPSBjb21wdXRlZDxudW1iZXI+KCgpID0+IHtcbiAgICAgIHJldHVybiBkYXRhLnBhZ2UgKiBkYXRhLnJvd3NPblBhZ2UgPiBkYXRhLnJvd3M/Lmxlbmd0aFxuICAgICAgICA/IGRhdGEucm93cz8ubGVuZ3RoXG4gICAgICAgIDogZGF0YS5wYWdlICogZGF0YS5yb3dzT25QYWdlXG4gICAgfSlcblxuICAgIGNvbnN0IHBhZ2VDb3JyZWN0aW9uID0gY29tcHV0ZWQ8bnVtYmVyIHwgbnVsbD4oKCkgPT4ge1xuICAgICAgaWYgKChkYXRhLnBhZ2UgLSAxKSAqIGRhdGEucm93c09uUGFnZSA+IGRhdGEucm93cz8ubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwoXG4gICAgICAgICAgKGRhdGEucGFnZSAqIGRhdGEucm93c09uUGFnZSAtIGRhdGEucm93cz8ubGVuZ3RoKSAvIGRhdGEucm93c09uUGFnZVxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsXG4gICAgfSlcblxuICAgIHdhdGNoKFxuICAgICAgKCkgPT4gcHJvcHMuY29scyxcbiAgICAgICh0bykgPT4gKGRhdGEuY29scyA9IHRvKSxcbiAgICAgIHsgaW1tZWRpYXRlOiB0cnVlIH1cbiAgICApXG5cbiAgICB3YXRjaChcbiAgICAgICgpID0+IHByb3BzLnJvd3MsXG4gICAgICAodG8pID0+IChkYXRhLnJvd3MgPSB0byksXG4gICAgICB7IGltbWVkaWF0ZTogdHJ1ZSB9XG4gICAgKVxuXG4gICAgZnVuY3Rpb24gb25TZWxlY3RBbGwodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgIGRhdGEuaXNBbGxSb3dzQ2hlY2tlZCA9IHZhbHVlXG4gICAgICBkYXRhLnJvd3MuZm9yRWFjaCgocm93KSA9PiAocm93LmNoZWNrZWQgPSB2YWx1ZSkpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25TZWxlY3Q8VCBleHRlbmRzIFRhYmxlU3RhdGVbJ3Jvd3MnXT4ocm93czogVCkge1xuICAgICAgZGF0YS5jaGVja2VkUm93cyA9IHJvd3NcbiAgICAgIGVtaXQoJ3NlbGVjdDpyb3cnLCBkYXRhLmNoZWNrZWRSb3dzKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uUHJldlBhZ2UobnVtOiBudW1iZXIpIHtcbiAgICAgIGRhdGEucGFnZSA9IGRhdGEucGFnZSA+IDEgPyBkYXRhLnBhZ2UgKyBudW0gOiBkYXRhLnBhZ2VcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbk5leHRQYWdlKG51bTogbnVtYmVyKSB7XG4gICAgICBpZiAoZGF0YS5yb3dzLmxlbmd0aCAtIGRhdGEucGFnZSAqIGRhdGEucm93c09uUGFnZSA+IDApIHtcbiAgICAgICAgZGF0YS5wYWdlICs9IG51bVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uU29ydDxUIGV4dGVuZHMgRGF0YUNvbHVtbiwgUyBleHRlbmRzIERhdGFDb2x1bW5Qcm9wcz4oXG4gICAgICBjb2w6IFQgJiBTXG4gICAgKSB7XG4gICAgICBpZiAoY29sLnNvcnRlZCkge1xuICAgICAgICBjb2wuc29ydGVkID0gIWNvbC5zb3J0ZWRcbiAgICAgICAgcmV0dXJuIHNvcnRDb2x1bW4oY29sKVxuICAgICAgfVxuXG4gICAgICBkYXRhLmNvbHMuZm9yRWFjaCgoYzogVCAmIFMpID0+IChjLnNvcnRlZCA9IGNvbC5rZXkgPT09IGMua2V5KSlcblxuICAgICAgc29ydENvbHVtbihjb2wpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc29ydENvbHVtbjxUIGV4dGVuZHMgRGF0YUNvbHVtbiwgUyBleHRlbmRzIERhdGFDb2x1bW5Qcm9wcz4oXG4gICAgICBjb2w6IFQgJiBTXG4gICAgKSB7XG4gICAgICBpZiAoIWNvbC5zb3J0ZWQpIHtcbiAgICAgICAgcmV0dXJuIGRhdGEucm93cz8ucmV2ZXJzZSgpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGV4ZWN1dG9yID1cbiAgICAgICAgY29sLnNvcnQgfHxcbiAgICAgICAgKChhLCBiKSA9PiB7XG4gICAgICAgICAgaWYgKGNvbC5mb3JtYXQpIHJldHVybiBjb2wuZm9ybWF0KGEpID4gY29sLmZvcm1hdChiKSA/IDEgOiAtMVxuICAgICAgICAgIGlmIChjb2wuc29ydGVkKSByZXR1cm4gYVtjb2wua2V5XSA+IGJbY29sLmtleV0gPyAxIDogLTFcbiAgICAgICAgfSlcblxuICAgICAgZGF0YS5yb3dzPy5zb3J0KGV4ZWN1dG9yIGFzIGFueSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkZpbHRlcih7IHZhbHVlLCBjb2wgfTogVGFibGVGaWx0ZXIpIHtcbiAgICAgIGlmICghdmFsdWUgJiYgZmlsdGVyc1tjb2wua2V5XSkgZGVsZXRlIGZpbHRlcnNbY29sLmtleV1cblxuICAgICAgaWYgKHZhbHVlKSBmaWx0ZXJzW2NvbC5rZXldID0gdmFsdWVcblxuICAgICAgaWYgKGNvbC5maWx0ZXIpIHtcbiAgICAgICAgcmV0dXJuIChkYXRhLnJvd3MgPSBjb2wuZmlsdGVyKHsgdmFsdWUsIGNvbCB9KSlcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcy5jdXN0b21GaWx0ZXIpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLmN1c3RvbUZpbHRlcihmaWx0ZXJzIGFzIGFueSlcbiAgICAgIH1cbiAgICAgIGlmICghT2JqZWN0LmtleXMoZmlsdGVycykubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAoZGF0YS5yb3dzID0gcHJvcHMucm93cylcbiAgICAgIH1cblxuICAgICAgZGF0YS5yb3dzID0gZmlsdGVyUm93cyhwcm9wcy5yb3dzLCBwcm9wcy5jb2xzKVxuICAgICAgZGF0YS5wYWdlID0gMVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uU2VsZWN0Um93c0NvdW50KGNvdW50OiBudW1iZXIpIHtcbiAgICAgIGRhdGEucm93c09uUGFnZSA9IGNvdW50XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmlsdGVyUm93czxULCBDIGV4dGVuZHMgRGF0YUNvbHVtbj4ocm93czogVFtdLCBjb2xzOiBDW10pIHtcbiAgICAgIGNvbnN0IGZpbHRlcktleXMgPSBPYmplY3Qua2V5cyhmaWx0ZXJzKVxuXG4gICAgICByZXR1cm4gcm93cy5yZWR1Y2UoKGFjYywgcm93KSA9PiB7XG4gICAgICAgIGNvbnN0IHJvd1Jlc3VsdHM6IFRbXSA9IFtdXG5cbiAgICAgICAgZmlsdGVyS2V5cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICBjb25zdCB7IGZvcm1hdCB9ID0gY29scy5maW5kKChjb2wpID0+IGNvbC5rZXkgPT09IGtleSkgYXMgRGF0YUNvbHVtblxuXG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBmb3JtYXQgPyBmb3JtYXQocm93KSA6IHJvd1trZXldXG5cbiAgICAgICAgICBjb25zdCByb3dLZXlWYWx1ZSA9IGAke3ZhbHVlfWAudG9Mb3dlckNhc2UoKVxuICAgICAgICAgIGNvbnN0IGZpbHRlclZhbHVlID0gYCR7ZmlsdGVyc1trZXldfWAudG9Mb3dlckNhc2UoKVxuXG4gICAgICAgICAgaWYgKHJvd0tleVZhbHVlLmluY2x1ZGVzKGZpbHRlclZhbHVlKSkge1xuICAgICAgICAgICAgcm93UmVzdWx0cy5wdXNoKHJvd1trZXldKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgcm93UmVzdWx0cy5sZW5ndGggPT09IGZpbHRlcktleXMubGVuZ3RoICYmXG4gICAgICAgICAgcm93UmVzdWx0cy5ldmVyeSgodmFsdWUpID0+ICEhdmFsdWUpXG4gICAgICAgICkge1xuICAgICAgICAgIGFjYy5wdXNoKHJvdylcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhY2NcbiAgICAgIH0sIFtdIGFzIFRbXSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5UYWJsZVRvb2xzKCk6IFZOb2RlIHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHsgY2xhc3M6ICd2LWRhdGEtdGFibGVfX3Rvb2xiYXInIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBzbG90cy50b29sYmFyICYmIHNsb3RzLnRvb2xiYXIoKSxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuVGFibGVIZWFkZXIoKTogVk5vZGUge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjb2xzOiBkYXRhLmNvbHMsXG4gICAgICAgIGNvbG9yOiBwcm9wcy5jb2xvcixcbiAgICAgICAgc2hvd0NoZWNrYm94OiBwcm9wcy5zaG93Q2hlY2tib3gsXG4gICAgICAgIGRhcms6IHByb3BzLmRhcmssXG4gICAgICAgIGFsaWduOiBwcm9wcy5hbGlnbixcbiAgICAgICAgc2hvd1NlcXVlbmNlOiBwcm9wcy5zaG93U2VxdWVuY2UsXG4gICAgICAgIG9wdGlvbnM6IGhlYWRlck9wdGlvbnMudmFsdWUsXG4gICAgICAgIG9uRmlsdGVyLFxuICAgICAgICBvblNvcnQsXG4gICAgICAgIG9uU2VsZWN0QWxsLFxuICAgICAgfVxuXG4gICAgICBjb25zdCBjb250ZW50ID0gZGF0YS5jb2xzLnJlZHVjZSgoYWNjLCBjb2wpID0+IHtcbiAgICAgICAgY29uc3Qgc2xvdE5hbWUgPSBgJHtjb2wua2V5fS1maWx0ZXJgXG5cbiAgICAgICAgaWYgKGNvbCAmJiBzbG90c1tzbG90TmFtZV0pIHtcbiAgICAgICAgICBhY2Nbc2xvdE5hbWVdID0gYWRkU2NvcGVkU2xvdChzbG90TmFtZSwgc2xvdHMpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYWNjXG4gICAgICB9LCB7fSBhcyBhbnkpXG5cbiAgICAgIGNvbnRlbnQuaGVhZGVyID0gYWRkU2NvcGVkU2xvdCgnaGVhZGVyJywgc2xvdHMpXG5cbiAgICAgIHJldHVybiBoKFZEYXRhVGFibGVIZWFkZXIsIHByb3BzRGF0YSwgY29udGVudClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5UYWJsZUJvZHkoKTogVk5vZGUge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjb2xzOiBkYXRhLmNvbHMsXG4gICAgICAgIHJvd3M6IGRhdGEucm93cyxcbiAgICAgICAgcGFnZTogZGF0YS5wYWdlLFxuICAgICAgICByb3dzT25QYWdlOiBkYXRhLnJvd3NPblBhZ2UsXG4gICAgICAgIHNob3dDaGVja2JveDogcHJvcHMuc2hvd0NoZWNrYm94LFxuICAgICAgICBjaGVja0FsbFJvd3M6IGRhdGEuaXNBbGxSb3dzQ2hlY2tlZCxcbiAgICAgICAgYWxpZ246IHByb3BzLmFsaWduLFxuICAgICAgICBkYXJrOiBwcm9wcy5kYXJrLFxuICAgICAgICBzaG93U2VxdWVuY2U6IHByb3BzLnNob3dTZXF1ZW5jZSxcbiAgICAgICAgY29sb3I6IHByb3BzLmNvbG9yLFxuICAgICAgICBvblNlbGVjdCxcbiAgICAgICAgWydvbkNsaWNrOnJvdyddOiAoZSkgPT4gZW1pdCgnY2xpY2s6cm93JywgZSksXG4gICAgICAgIFsnb25EYmxjbGljazpyb3cnXTogKGUpID0+IGVtaXQoJ2RibGNsaWNrOnJvdycsIGUpLFxuICAgICAgICBbJ29uQ29udGV4dG1lbnU6cm93J106IChlKSA9PiBlbWl0KCdjb250ZXh0bWVudTpyb3cnLCBlKSxcbiAgICAgIH1cblxuICAgICAgY29uc3QgY29udGVudCA9IHByb3BzLmNvbHMucmVkdWNlKChhY2MsIGNvbCkgPT4ge1xuICAgICAgICBpZiAoY29sICYmIHNsb3RzW2NvbC5rZXldKSB7XG4gICAgICAgICAgYWNjW2NvbC5rZXldID0gYWRkU2NvcGVkU2xvdChjb2wua2V5LCBzbG90cylcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjXG4gICAgICB9LCB7fSlcblxuICAgICAgcmV0dXJuIGgoVkRhdGFUYWJsZUJvZHksIHByb3BzRGF0YSwgY29udGVudClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5UYWJsZUZvb3RlcigpOiBWTm9kZSB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIHBhZ2VzOiBwYWdlcy52YWx1ZSxcbiAgICAgICAgcGFnZTogZGF0YS5wYWdlLFxuICAgICAgICBmaXJzdE9uUGFnZTogZmlyc3RPblBhZ2UudmFsdWUsXG4gICAgICAgIGxhc3RPblBhZ2U6IGxhc3RPblBhZ2UudmFsdWUsXG4gICAgICAgIHBhZ2VDb3JyZWN0aW9uOiBwYWdlQ29ycmVjdGlvbi52YWx1ZSxcbiAgICAgICAgcm93c09uUGFnZTogZGF0YS5yb3dzT25QYWdlLFxuICAgICAgICByb3dzTGVuZ3RoOiBkYXRhLnJvd3M/Lmxlbmd0aCxcbiAgICAgICAgb3B0aW9uczogZm9vdGVyT3B0aW9ucy52YWx1ZSxcbiAgICAgICAgb25QcmV2UGFnZSxcbiAgICAgICAgb25OZXh0UGFnZSxcbiAgICAgICAgb25TZWxlY3RSb3dzQ291bnQsXG4gICAgICAgIG9uTGFzdFBhZ2U6ICgpID0+IGVtaXQoJ2xhc3QtcGFnZScsIHByb3BzLnJvd3MubGVuZ3RoKSxcbiAgICAgICAgb25Db3JyZWN0UGFnZTogKHZhbCkgPT4gKGRhdGEucGFnZSArPSB2YWwpLFxuICAgICAgfVxuXG4gICAgICBjb25zdCBjb250ZW50ID0gc2xvdHNbJ3BhZ2luYXRpb24tdGV4dCddXG4gICAgICAgID8ge1xuICAgICAgICAgIFsncGFnaW5hdGlvbi10ZXh0J106ICgpID0+XG4gICAgICAgICAgICAgIHNsb3RzWydwYWdpbmF0aW9uLXRleHQnXSAmJlxuICAgICAgICAgICAgICBzbG90c1sncGFnaW5hdGlvbi10ZXh0J10oe1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBmaXJzdE9uUGFnZS52YWx1ZSxcbiAgICAgICAgICAgICAgICBsYXN0OiBsYXN0T25QYWdlLnZhbHVlLFxuICAgICAgICAgICAgICAgIGxlbmd0aDogZGF0YS5yb3dzPy5sZW5ndGgsXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH1cbiAgICAgICAgOiAnJ1xuXG4gICAgICByZXR1cm4gaChWRGF0YVRhYmxlRm9vdGVyLCBwcm9wc0RhdGEsIGNvbnRlbnQpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuVGFibGVJbm5lcigpOiBWTm9kZSB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiAndi1kYXRhLXRhYmxlX19pbm5lcicsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIFtnZW5UYWJsZUhlYWRlcigpLCBnZW5UYWJsZUJvZHkoKV0pXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgIHN0eWxlOiBzdHlsZXMudmFsdWUsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIFtcbiAgICAgICAgc2xvdHMudG9vbGJhciAmJiBnZW5UYWJsZVRvb2xzKCksXG4gICAgICAgIGdlblRhYmxlSW5uZXIoKSxcbiAgICAgICAgZ2VuVGFibGVGb290ZXIoKSxcbiAgICAgIF0pXG4gICAgfVxuICB9LFxufSlcbiIsImV4cG9ydCAqIGZyb20gJy4vVkRhdGFUYWJsZSdcbiIsIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGgsIGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSdcblxuLy8gRWZmZWN0c1xuaW1wb3J0IHsgdXNlQ29sb3JzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtY29sb3JzJ1xuaW1wb3J0IHsgdXNlSWNvbnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1pY29ucydcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkljb24gfSBmcm9tICcuLi9WSWNvbidcblxuZXhwb3J0IGNvbnN0IFZEYXRlcGlja2VySGVhZGVyID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtZGF0ZS1waWNrZXItaGVhZGVyJyxcblxuICBwcm9wczoge1xuICAgIG9uTmV4dDogRnVuY3Rpb24sXG4gICAgb25QcmV2OiBGdW5jdGlvbixcbiAgICBjb2xvcjogU3RyaW5nLFxuICB9IGFzIGFueSxcblxuICBlbWl0czogWyd0YWJsZSddLFxuXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzLCBlbWl0IH0pIHtcbiAgICBjb25zdCB7IHNldFRleHRDbGFzc05hbWVDb2xvciwgc2V0VGV4dENzc0NvbG9yIH0gPSB1c2VDb2xvcnMoKVxuICAgIGNvbnN0IHsgaWNvbnMgfSA9IHVzZUljb25zKClcblxuICAgIGNvbnN0IGdlbkhlYWRlckJ1dHRvbiA9IChpc1JpZ2h0KSA9PiB7XG4gICAgICBjb25zdCBpY29uID0gaXNSaWdodCA/IGljb25zLiRhcnJvd1JpZ2h0IDogaWNvbnMuJGFycm93TGVmdFxuXG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiAndi1kYXRlLXBpY2tlcl9faGVhZGVyLWJ1dHRvbicsXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGljb25Qcm9wc0RhdGEgPSB7XG4gICAgICAgIGljb24sXG4gICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgICAgICB9LFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldFRleHRDc3NDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IChpc1JpZ2h0ID8gcHJvcHMub25OZXh0KCkgOiBwcm9wcy5vblByZXYoKSksXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGFycm93QnRuID0gaChWSWNvbiwgaWNvblByb3BzRGF0YSlcblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgYXJyb3dCdG4pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuSGVhZGVyRGlzcGxheSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1kYXRlLXBpY2tlcl9faGVhZGVyLWRpc3BsYXknOiB0cnVlLFxuICAgICAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldFRleHRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0VGV4dENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICAgICAgfSxcbiAgICAgICAgb25DbGljazogKCkgPT4gZW1pdCgndGFibGUnKSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCkpXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+XG4gICAgICBoKFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzOiAndi1kYXRlLXBpY2tlcl9faGVhZGVyJyxcbiAgICAgICAgfSxcbiAgICAgICAgW2dlbkhlYWRlckJ1dHRvbihmYWxzZSksIGdlbkhlYWRlckRpc3BsYXkoKSwgZ2VuSGVhZGVyQnV0dG9uKHRydWUpXVxuICAgICAgKVxuICB9LFxufSlcbiIsImV4cG9ydCB0eXBlIERhdGVMb2NhbGVzID0ge1xuICBtb250aHM6IHN0cmluZ1tdXG4gIG1vbnRoc0FiYnI6IHN0cmluZ1tdXG4gIHdlZWs6IHN0cmluZ1tdXG59XG5cbmV4cG9ydCB0eXBlIERhdGVUcmFuc2xhdGlvbnMgPSB7XG4gIHJ1OiBEYXRlTG9jYWxlc1xuICBlbjogRGF0ZUxvY2FsZXNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1vbnRoKGRhdGU6IERhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RnVsbFllYXIoZGF0ZTogRGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREYXRlKGRhdGU6IERhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREYXkoZGF0ZTogRGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXREYXkoKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SG91cnMoZGF0ZTogRGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRIb3VycygpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNaW51dGVzKGRhdGU6IERhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TWludXRlcygpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRGdWxsWWVhcihkYXRlLCB2YWx1ZSkge1xuICByZXR1cm4gZGF0ZS5zZXRGdWxsWWVhcih2YWx1ZSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldE1vbnRoKGRhdGUsIHZhbHVlKSB7XG4gIHJldHVybiBkYXRlLnNldE1vbnRoKHZhbHVlKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0RGF0ZShkYXRlLCB2YWx1ZSkge1xuICByZXR1cm4gZGF0ZS5zZXREYXRlKHZhbHVlKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZERhdGUoZGF0ZSkge1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGRhdGUpICE9PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICByZXR1cm4gIWlzTmFOKGRhdGUuZ2V0VGltZSgpKVxufVxuXG5mdW5jdGlvbiBnZXREYXlOYW1lQWJicihkYXRlLCBkYXlzKSB7XG4gIGlmICh0eXBlb2YgZGF0ZSAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0ludmFsaWQgVHlwZScpXG4gIH1cbiAgcmV0dXJuIGRheXNbZ2V0RGF5KGRhdGUpXVxufVxuXG5mdW5jdGlvbiBnZXRNb250aE5hbWUobW9udGg6IG51bWJlciwgbW9udGhzOiBzdHJpbmdbXSkge1xuICBpZiAoIW1vbnRocykge1xuICAgIHRocm93IEVycm9yKCdtaXNzaW5nIHNlY29uZCBwYXJhbWV0ZXIgTW9udGhzIGFycmF5JylcbiAgfVxuXG4gIHJldHVybiBtb250aHNbbW9udGhdXG59XG5cbmZ1bmN0aW9uIGdldE1vbnRoTmFtZUFiYnIobW9udGgsIG1vbnRoc0FiYnIpIHtcbiAgaWYgKCFtb250aHNBYmJyKSB7XG4gICAgdGhyb3cgRXJyb3IoJ21pc3NpbmcgMm5kIHBhcmFtdGVyIE1vbnRocyBhcnJheScpXG4gIH1cbiAgaWYgKHR5cGVvZiBtb250aCA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbW9udGhzQWJicltnZXRNb250aChtb250aCldXG4gIH1cbiAgaWYgKHR5cGVvZiBtb250aCA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gbW9udGhzQWJiclttb250aF1cbiAgfVxuICB0aHJvdyBUeXBlRXJyb3IoJ0ludmFsaWQgdHlwZScpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXREYXRlKFxuICBkYXRlOiBEYXRlLFxuICBmb3JtYXQ6IHN0cmluZyxcbiAgdHJhbnNsYXRpb246IERhdGVMb2NhbGVzXG4pIHtcbiAgY29uc3QgeWVhciA9IGdldEZ1bGxZZWFyKGRhdGUpXG4gIGNvbnN0IG1vbnRoID0gZ2V0TW9udGgoZGF0ZSkgKyAxXG4gIGNvbnN0IGRheSA9IGdldERhdGUoZGF0ZSlcblxuICByZXR1cm4gZm9ybWF0XG4gICAgLnJlcGxhY2UoL2RkLywgKCcwJyArIGRheSkuc2xpY2UoLTIpKVxuICAgIC5yZXBsYWNlKC9kLywgYCR7ZGF5fWApXG4gICAgLnJlcGxhY2UoL3l5eXkvLCBgJHt5ZWFyfWApXG4gICAgLnJlcGxhY2UoL3l5LywgU3RyaW5nKHllYXIpLnNsaWNlKDIpKVxuICAgIC5yZXBsYWNlKC9NTU1NLywgZ2V0TW9udGhOYW1lKGdldE1vbnRoKGRhdGUpLCB0cmFuc2xhdGlvbi5tb250aHMpKVxuICAgIC5yZXBsYWNlKC9NTU0vLCBnZXRNb250aE5hbWVBYmJyKGdldE1vbnRoKGRhdGUpLCB0cmFuc2xhdGlvbi5tb250aHNBYmJyKSlcbiAgICAucmVwbGFjZSgvTU0vLCAoJzAnICsgbW9udGgpLnNsaWNlKC0yKSlcbiAgICAucmVwbGFjZSgvTSg/IWF8w6R8ZSkvLCBgJHttb250aH1gKVxuICAgIC5yZXBsYWNlKC9EKD8hZXzDqXxpKS8sIGdldERheU5hbWVBYmJyKGRhdGUsIHRyYW5zbGF0aW9uLndlZWspKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVEYXRlSW5wdXQodmFsKSB7XG4gIHJldHVybiAoXG4gICAgdmFsID09PSBudWxsIHx8XG4gICAgdmFsIGluc3RhbmNlb2YgRGF0ZSB8fFxuICAgIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnIHx8XG4gICAgdHlwZW9mIHZhbCA9PT0gJ251bWJlcidcbiAgKVxufVxuIiwiaW1wb3J0IHsgaCwgVk5vZGUgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyBnZXRGdWxsWWVhciwgZ2V0TW9udGgsIGdldERhdGUsIGdldERheSB9IGZyb20gJy4vdXRpbHMnXG5pbXBvcnQgeyBEYXRlUGlja2VyRGF0ZSB9IGZyb20gJy4uLy4uLy4uL3R5cGVzJ1xuXG5leHBvcnQgZnVuY3Rpb24gZ2VuVGFibGVSb3dzKFxuICB2Tm9kZXNBcnJheTogVk5vZGVbXSxcbiAgcm93Q2xhc3NOYW1lOiBzdHJpbmcsXG4gIGNlbGxzSW5Sb3c6IG51bWJlclxuKSB7XG4gIGNvbnN0IHRhYmxlUm93czogVk5vZGVbXSA9IFtdXG4gIGxldCB2Tm9kZXNJblJvdzogVk5vZGVbXSA9IFtdXG5cbiAgY29uc3QgZ2VuVGFibGVSb3cgPSAoY2VsbFZOb2RlcykgPT4ge1xuICAgIHJldHVybiBoKCdkaXYnLCB7IGNsYXNzOiByb3dDbGFzc05hbWUgfSwgY2VsbFZOb2RlcylcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDw9IHZOb2Rlc0FycmF5Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGkgJiYgIShpICUgY2VsbHNJblJvdykpIHtcbiAgICAgIHRhYmxlUm93cy5wdXNoKGdlblRhYmxlUm93KHZOb2Rlc0luUm93KSlcbiAgICAgIHZOb2Rlc0luUm93ID0gW11cbiAgICB9XG5cbiAgICB2Tm9kZXNJblJvdy5wdXNoKHZOb2Rlc0FycmF5W2ldKVxuICB9XG5cbiAgaWYgKHZOb2Rlc0luUm93Lmxlbmd0aCkge1xuICAgIHRhYmxlUm93cy5wdXNoKGdlblRhYmxlUm93KHZOb2Rlc0luUm93KSBhcyBhbnkpXG4gIH1cblxuICByZXR1cm4gdGFibGVSb3dzXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0RhdGVTdHJpbmcoZGF0ZSkge1xuICByZXR1cm4gbmV3IERhdGUoZGF0ZS55ZWFyLCBkYXRlLm1vbnRoLCBkYXRlLmRhdGUpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZURhdGUoc2VsZWN0ZWREYXRlOiBEYXRlIHwgc3RyaW5nKTogRGF0ZVBpY2tlckRhdGUge1xuICBjb25zdCBkYXRlID0gbmV3IERhdGUoc2VsZWN0ZWREYXRlKVxuICBjb25zdCBkYXkgPSBnZXREYXkoZGF0ZSlcblxuICByZXR1cm4ge1xuICAgIHllYXI6IGdldEZ1bGxZZWFyKGRhdGUpLFxuICAgIG1vbnRoOiBnZXRNb250aChkYXRlKSxcbiAgICBkYXRlOiBnZXREYXRlKGRhdGUpLFxuICAgIG1sczogZGF0ZS5nZXRUaW1lKCksXG4gICAgZGF5LFxuICB9XG59XG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyBoLCByZWYsIGluamVjdCwgY29tcHV0ZWQsIHdhdGNoLCBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnXG5cbi8vIEhlbHBlcnNcbmltcG9ydCB7IGdlblRhYmxlUm93cywgcGFyc2VEYXRlLCB0b0RhdGVTdHJpbmcgfSBmcm9tICcuL2hlbHBlcnMnXG5cbi8vIEVmZmVjdHNcbmltcG9ydCB7IHVzZVRyYW5zaXRpb24gfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS10cmFuc2l0aW9uJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgVk5vZGUsIFJlZiB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IERhdGVQaWNrZXJCdG5IYW5kbGVycywgRGF0ZVBpY2tlckRhdGUgfSBmcm9tICcuLi8uLi8uLi90eXBlcydcbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvYmFzZSdcblxudHlwZSBVcGRhdGVQYXJhbXMgPSB7XG4gIG1vbnRoPzogbnVtYmVyXG4gIHllYXI/OiBudW1iZXJcbn1cblxuZXhwb3J0IGNvbnN0IFZEYXRlUGlja2VyRGF0ZXMgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1kYXRlLXBpY2tlci1kYXRlcycsXG5cbiAgcHJvcHM6IHtcbiAgICBsb2NhbGU6IEFycmF5LFxuICAgIHllYXI6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgbW9udGg6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgZGF0ZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICB2YWx1ZTogT2JqZWN0LFxuICAgIG1vbmRheUZpcnN0OiBCb29sZWFuLFxuICAgIGRpc2FibGVkRGF0ZXM6IE9iamVjdCxcbiAgfSBhcyBhbnksXG5cbiAgZW1pdHM6IFsndXBkYXRlOm1vbnRoJywgJ3VwZGF0ZTp2YWx1ZSddLFxuXG4gIHNldHVwKHByb3BzLCB7IGVtaXQsIHNsb3RzIH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3QgRklSU1RfTU9OVEggPSAwXG4gICAgY29uc3QgTEFTVF9NT05USCA9IDExXG4gICAgY29uc3QgREFZUyA9IFswLCAxLCAyLCAzLCA0LCA1LCA2XVxuICAgIGNvbnN0IEFOSU1BVElPTl9USU1FT1VUID0gMFxuXG4gICAgY29uc3QgZGF0ZXMgPSByZWY8KERhdGVQaWNrZXJEYXRlIHwgbnVsbClbXT4oW10pXG4gICAgY29uc3QgaXNEYXRlc0NoYW5nZWQgPSByZWY8Ym9vbGVhbj4oZmFsc2UpXG4gICAgY29uc3QgdG9kYXkgPSBwYXJzZURhdGUobmV3IERhdGUoKSlcblxuICAgIGNvbnN0IGhhbmRsZXJzID0gaW5qZWN0KCdoYW5kbGVycycpIGFzIFJlZjxEYXRlUGlja2VyQnRuSGFuZGxlcnM+XG5cbiAgICBoYW5kbGVycy52YWx1ZSA9IHtcbiAgICAgIG9uTmV4dDogKCkgPT4gdXBkYXRlTW9udGgodHJ1ZSksXG4gICAgICBvblByZXY6ICgpID0+IHVwZGF0ZU1vbnRoKGZhbHNlKSxcbiAgICB9XG5cbiAgICBpZiAocHJvcHMubW9uZGF5Rmlyc3QpIHtcbiAgICAgIERBWVMucHVzaChEQVlTLnNwbGljZSgwLCAxKVswXSlcbiAgICB9XG5cbiAgICBjb25zdCBkYXlzSW5Nb250aCA9IGNvbXB1dGVkPG51bWJlcj4oKCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKHByb3BzLnllYXIsIHByb3BzLm1vbnRoICsgMSwgMCkuZ2V0RGF0ZSgpXG4gICAgfSlcblxuICAgIHdhdGNoKFxuICAgICAgKCkgPT4gcHJvcHMubW9udGgsXG4gICAgICAoKSA9PiBnZW5UYWJsZURhdGVzKCksXG4gICAgICB7IGltbWVkaWF0ZTogdHJ1ZSB9LFxuICAgIClcblxuICAgIHdhdGNoKFxuICAgICAgKCkgPT4gaXNEYXRlc0NoYW5nZWQudmFsdWUsXG4gICAgICAoKSA9PiBzZXRUaW1lb3V0KCgpID0+IChpc0RhdGVzQ2hhbmdlZC52YWx1ZSA9IGZhbHNlKSwgQU5JTUFUSU9OX1RJTUVPVVQpLFxuICAgIClcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZU1vbnRoKGlzTmV4dDogYm9vbGVhbikge1xuICAgICAgY29uc3QgcGFyYW1zOiBVcGRhdGVQYXJhbXMgPSB7fVxuXG4gICAgICBwYXJhbXMubW9udGggPSBwcm9wcy5tb250aCArIChpc05leHQgPyAxIDogLTEpXG5cbiAgICAgIGlmICghaXNOZXh0ICYmIHBhcmFtcy5tb250aCEgPCBGSVJTVF9NT05USCkgcGFyYW1zLm1vbnRoID0gTEFTVF9NT05USFxuICAgICAgaWYgKGlzTmV4dCAmJiBwYXJhbXMubW9udGghID4gTEFTVF9NT05USCkgcGFyYW1zLm1vbnRoID0gRklSU1RfTU9OVEhcbiAgICAgIGlmIChpc05leHQgJiYgIXBhcmFtcy5tb250aCkgcGFyYW1zLnllYXIgPSBwcm9wcy55ZWFyICsgMVxuICAgICAgaWYgKCFpc05leHQgJiYgcGFyYW1zLm1vbnRoID09PSBMQVNUX01PTlRIKSBwYXJhbXMueWVhciA9IHByb3BzLnllYXIgLSAxXG5cbiAgICAgIGlzRGF0ZXNDaGFuZ2VkLnZhbHVlID0gdHJ1ZVxuICAgICAgZW1pdCgndXBkYXRlOm1vbnRoJywgcGFyYW1zKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbldlZWtEYXlzKCk6IFZOb2RlW10ge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogJ3YtZGF0ZS1waWNrZXItZGF0ZXNfX2RheScsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBEQVlTLm1hcCgoZGF5KSA9PlxuICAgICAgICBoKCdzcGFuJywgcHJvcHNEYXRhLCBwcm9wcy5sb2NhbGUhW2RheV0gYXMgc3RyaW5nKSxcbiAgICAgIClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5EYXRlT2JqZWN0KGRhdGUpOiBEYXRlUGlja2VyRGF0ZSB7XG4gICAgICBjb25zdCB7IHllYXIsIG1vbnRoIH0gPSBwcm9wc1xuICAgICAgcmV0dXJuIHBhcnNlRGF0ZShuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZGF0ZSkpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0RW1wdGllc0JlZm9yZUZpcnN0RGF0ZShkYXRlT2JqZWN0KSB7XG4gICAgICBjb25zdCBmaXJzdERheSA9IERBWVNbMF1cbiAgICAgIGNvbnN0IHN0YXJ0RGF5ID0gZmlyc3REYXkgJiYgIWRhdGVPYmplY3QuZGF5ID8gZGF0ZU9iamVjdC5kYXkgOiBmaXJzdERheVxuICAgICAgY29uc3QgdGlsbERheSA9XG4gICAgICAgIGZpcnN0RGF5ICYmICFkYXRlT2JqZWN0LmRheSA/IERBWVMubGVuZ3RoIC0gMSA6IGRhdGVPYmplY3QuZGF5XG5cbiAgICAgIGZvciAobGV0IGkgPSBzdGFydERheTsgaSA8PSB0aWxsRGF5OyBpICs9IDEpIHtcbiAgICAgICAgZGF0ZXMudmFsdWVbaV0gPSB7IGRhdGU6IG51bGwgfSBhcyBhbnlcbiAgICAgIH1cblxuICAgICAgZGF0ZXMudmFsdWVbdGlsbERheV0gPSBkYXRlT2JqZWN0XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuVGFibGVEYXRlcygpIHtcbiAgICAgIGRhdGVzLnZhbHVlID0gW11cbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IGRheXNJbk1vbnRoLnZhbHVlOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgZGF0ZU9iamVjdCA9IGdlbkRhdGVPYmplY3QoaSlcblxuICAgICAgICBpZiAoaSA9PT0gMSkge1xuICAgICAgICAgIHNldEVtcHRpZXNCZWZvcmVGaXJzdERhdGUoZGF0ZU9iamVjdClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRlcy52YWx1ZVtkYXRlcy52YWx1ZS5sZW5ndGhdID0gZGF0ZU9iamVjdCBhcyBhbnlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXBhcmVEYXRlcyhkYXRlMSwgZGF0ZTIpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGRhdGUxLmRhdGUgPT09IGRhdGUyLmRhdGUgJiZcbiAgICAgICAgZGF0ZTEubW9udGggPT09IGRhdGUyLm1vbnRoICYmXG4gICAgICAgIGRhdGUxLnllYXIgPT09IGRhdGUyLnllYXJcbiAgICAgIClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXREaXNhYmxlZChkYXRlOiBEYXRlUGlja2VyRGF0ZSk6IGJvb2xlYW4ge1xuICAgICAgaWYgKCFkYXRlLmRhdGUpIHJldHVybiBmYWxzZVxuICAgICAgaWYgKCFwcm9wcy5kaXNhYmxlZERhdGVzKSByZXR1cm4gISFkYXRlLmlzSG9saWRheVxuXG4gICAgICBjb25zdCB7IGRpc2FibGVkRGF0ZXMgfSA9IHByb3BzXG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIChkaXNhYmxlZERhdGVzLmRheXNPZk1vbnRoICYmIGRpc2FibGVEYXlzT2ZNb250aChkYXRlKSkgfHxcbiAgICAgICAgKGRpc2FibGVkRGF0ZXMuZnJvbSAmJiBkaXNhYmxlRnJvbVRvKGRhdGUsIGRpc2FibGVkRGF0ZXMpKSB8fFxuICAgICAgICAoZGlzYWJsZWREYXRlcy5kYXRlcyAmJiBkaXNhYmxlRGF0ZXMoZGF0ZSkpIHx8XG4gICAgICAgIChkaXNhYmxlZERhdGVzLmRheXMgJiYgZGlzYWJsZURheXMoZGF0ZSkpIHx8XG4gICAgICAgIChkaXNhYmxlZERhdGVzLnJhbmdlcyAmJiBkaXNhYmxlUmFuZ2VzKGRhdGUpKSB8fFxuICAgICAgICAoZGlzYWJsZWREYXRlcy5jdXN0b20gJiYgZGlzYWJsZWREYXRlcy5jdXN0b20oZGF0ZSkpXG4gICAgICApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlzYWJsZUZyb21UbyhkYXRlOiBEYXRlUGlja2VyRGF0ZSwgeyBmcm9tLCB0byB9KTogYm9vbGVhbiB7XG4gICAgICBjb25zdCBkYXRlRnJvbTogRGF0ZVBpY2tlckRhdGUgPSBwYXJzZURhdGUoZnJvbSlcbiAgICAgIGNvbnN0IGRhdGVUbzogRGF0ZVBpY2tlckRhdGUgPSBwYXJzZURhdGUodG8pXG5cbiAgICAgIHJldHVybiBkYXRlLm1scyA+PSBkYXRlRnJvbS5tbHMgJiYgZGF0ZS5tbHMgPD0gZGF0ZVRvLm1sc1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpc2FibGVEYXlzT2ZNb250aChkYXRlOiBEYXRlUGlja2VyRGF0ZSk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHByb3BzLmRpc2FibGVkRGF0ZXMuZGF5c09mTW9udGguc29tZSgoaXQpID0+IGl0ID09PSBkYXRlLmRhdGUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlzYWJsZURhdGVzKGRhdGU6IERhdGVQaWNrZXJEYXRlKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gcHJvcHMuZGlzYWJsZWREYXRlcy5kYXRlcy5maW5kKChkKSA9PiB7XG4gICAgICAgIHJldHVybiBTdHJpbmcoZCkgPT09IFN0cmluZyh0b0RhdGVTdHJpbmcoZGF0ZSkpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpc2FibGVEYXlzKGRhdGU6IERhdGVQaWNrZXJEYXRlKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gcHJvcHMuZGlzYWJsZWREYXRlcy5kYXlzLmZpbmQoKGQpID0+IGQgPT09IGRhdGUuZGF5KSA+PSAwXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlzYWJsZVJhbmdlcyhkYXRlOiBEYXRlUGlja2VyRGF0ZSkge1xuICAgICAgY29uc3QgeyByYW5nZXMgfSA9IHByb3BzLmRpc2FibGVkRGF0ZXNcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGRpc2FibGVGcm9tVG8oZGF0ZSwgcmFuZ2VzW2ldKSkgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5EYXRlQ2VsbChkYXRlOiBEYXRlUGlja2VyRGF0ZSk6IFZOb2RlIHtcbiAgICAgIGNvbnN0IGlzU2VsZWN0ZWQ6IGJvb2xlYW4gPSBjb21wYXJlRGF0ZXMoZGF0ZSwgcHJvcHMudmFsdWUpXG4gICAgICBjb25zdCBpc1RvZGF5OiBib29sZWFuID0gY29tcGFyZURhdGVzKGRhdGUsIHRvZGF5KVxuXG4gICAgICBkYXRlLmlzSG9saWRheSA9IHNldERpc2FibGVkKGRhdGUpXG5cbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1kYXRlLXBpY2tlci1kYXRlc19fY2VsbCc6ICEhZGF0ZS5kYXRlLFxuICAgICAgICAgICd2LWRhdGUtcGlja2VyLWRhdGVzX19jZWxsLS1lbXB0eSc6ICFkYXRlLmRhdGUsXG4gICAgICAgICAgJ3YtZGF0ZS1waWNrZXItZGF0ZXNfX2NlbGwtLXNlbGVjdGVkJzpcbiAgICAgICAgICAgIGlzU2VsZWN0ZWQgJiYgIXByb3BzLnZhbHVlLmRlZmF1bHQsXG4gICAgICAgICAgJ3YtZGF0ZS1waWNrZXItZGF0ZXNfX2NlbGwtLWN1cnJlbnQtZGF0ZSc6IGlzVG9kYXksXG4gICAgICAgICAgJ3YtZGF0ZS1waWNrZXItZGF0ZXNfX2NlbGwtLWhvbGlkYXknOiBkYXRlLmRhdGUgJiYgZGF0ZS5pc0hvbGlkYXksXG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IGRhdGUuZGF0ZSAmJiBlbWl0KCd1cGRhdGU6dmFsdWUnLCBkYXRlKSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgW1xuICAgICAgICAoZGF0ZS5kYXRlICYmIHNsb3RzLmRhdGUgJiYgc2xvdHMuZGF0ZShkYXRlKSkgfHwgZGF0ZS5kYXRlLFxuICAgICAgXSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5EYXRlQ2VsbHMoKTogVk5vZGVbXSB7XG4gICAgICByZXR1cm4gZGF0ZXMudmFsdWUucmVkdWNlKChhY2MsIGRhdGVPYmplY3QpID0+IHtcbiAgICAgICAgYWNjLnB1c2goZ2VuRGF0ZUNlbGwoZGF0ZU9iamVjdCEpKVxuICAgICAgICByZXR1cm4gYWNjXG4gICAgICB9LCBbXSBhcyBWTm9kZVtdKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbkRhdGVSb3dzKCk6IFZOb2RlW10ge1xuICAgICAgY29uc3QgZGF0ZXNWTm9kZXMgPSBnZW5EYXRlQ2VsbHMoKVxuXG4gICAgICByZXR1cm4gZ2VuVGFibGVSb3dzKGRhdGVzVk5vZGVzLCAndi1kYXRlLXBpY2tlci1kYXRlc19fcm93JywgREFZUy5sZW5ndGgpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuRGF0ZXMoKTogTWF5YmU8Vk5vZGU+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgICghaXNEYXRlc0NoYW5nZWQudmFsdWUgJiZcbiAgICAgICAgICBoKCdkaXYnLCB7IGNsYXNzOiAndi1kYXRlLXBpY2tlci1kYXRlc19fZGF0ZXMnIH0sIGdlbkRhdGVSb3dzKCkpKSB8fFxuICAgICAgICBudWxsXG4gICAgICApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuV2VlaygpOiBWTm9kZSB7XG4gICAgICByZXR1cm4gaCgnZGl2JywgeyBjbGFzczogJ3YtZGF0ZS1waWNrZXItZGF0ZXNfX3dlZWsnIH0sIGdlbldlZWtEYXlzKCkpXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+XG4gICAgICBoKCdkaXYnLCB7IGNsYXNzOiAndi1kYXRlLXBpY2tlci1kYXRlcycgfSwgW1xuICAgICAgICBnZW5XZWVrKCksXG4gICAgICAgIHVzZVRyYW5zaXRpb24oZ2VuRGF0ZXMoKSBhcyBhbnksICdmYWRlJyksXG4gICAgICBdKVxuICB9LFxufSlcbiIsIi8vIFZVZSBBUElcbmltcG9ydCB7IGgsIHJlZiwgd2F0Y2hFZmZlY3QsIGluamVjdCwgY29tcHV0ZWQsIGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSdcblxuLy8gSGVscGVyc1xuaW1wb3J0IHsgZ2VuVGFibGVSb3dzIH0gZnJvbSAnLi9oZWxwZXJzJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgVk5vZGUsIFJlZiB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IERhdGVQaWNrZXJCdG5IYW5kbGVycyB9IGZyb20gJy4uLy4uLy4uL3R5cGVzJ1xuXG4vLyBFZmZlY3RzXG5pbXBvcnQgeyB1c2VUcmFuc2l0aW9uIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtdHJhbnNpdGlvbidcblxuZXhwb3J0IGNvbnN0IFZEYXRlUGlja2VyWWVhcnMgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1kYXRlLXBpY2tlci15ZWFycycsXG5cbiAgcHJvcHM6IHtcbiAgICB5ZWFyOiBbTnVtYmVyLCBTdHJpbmddLFxuICB9IGFzIGFueSxcblxuICBlbWl0czogWyd1cGRhdGU6eWVhciddLFxuXG4gIHNldHVwKHByb3BzLCB7IGVtaXQgfSkge1xuICAgIGNvbnN0IExJTUlUID0gMTAwXG4gICAgY29uc3QgT05fVEFCTEUgPSAyMFxuICAgIGNvbnN0IENFTExTX0lOX1JPVyA9IDRcbiAgICBjb25zdCBDVVJSRU5UX1lFQVIgPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKClcbiAgICBjb25zdCBBTklNQVRJT05fVElNRU9VVCA9IDEwMFxuXG4gICAgY29uc3QgeWVhcnMgPSByZWY8QXJyYXk8bnVtYmVyW10+PihbXSlcbiAgICBjb25zdCBvblRhYmxlSW5kZXggPSByZWY8bnVtYmVyPigwKVxuICAgIGNvbnN0IGlzTGlzdENoYW5nZWQgPSByZWY8Ym9vbGVhbj4oZmFsc2UpXG4gICAgY29uc3QgdHJhbnNpdGlvbiA9IHJlZjxzdHJpbmc+KCcnKVxuXG4gICAgY29uc3QgaGFuZGxlcnMgPSBpbmplY3QoJ2hhbmRsZXJzJykgYXMgUmVmPERhdGVQaWNrZXJCdG5IYW5kbGVycz5cblxuICAgIHdhdGNoRWZmZWN0KFxuICAgICAgKCkgPT5cbiAgICAgICAgaXNMaXN0Q2hhbmdlZC52YWx1ZSAmJlxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBpc0xpc3RDaGFuZ2VkLnZhbHVlID0gZmFsc2VcbiAgICAgICAgfSwgQU5JTUFUSU9OX1RJTUVPVVQpXG4gICAgKVxuXG4gICAgY29uc3QgY29tcHV0ZWRZZWFyID0gY29tcHV0ZWQ8bnVtYmVyPih7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiArcHJvcHMueWVhciEgfHwgQ1VSUkVOVF9ZRUFSXG4gICAgICB9LFxuICAgICAgc2V0KHZhbDogbnVtYmVyKSB7XG4gICAgICAgIGVtaXQoJ3VwZGF0ZTp5ZWFyJywgdmFsKVxuICAgICAgfSxcbiAgICB9KVxuXG4gICAgaWYgKGhhbmRsZXJzPy52YWx1ZSkge1xuICAgICAgaGFuZGxlcnMudmFsdWUgPSB7XG4gICAgICAgIG9uTmV4dDogKCkgPT4gY2hhbmdlWWVhcnNMaXN0KHRydWUpLFxuICAgICAgICBvblByZXY6ICgpID0+IGNoYW5nZVllYXJzTGlzdChmYWxzZSksXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0Q3VycmVudFRyYW5zaXRpb24oaXNOZXh0KSB7XG4gICAgICB0cmFuc2l0aW9uLnZhbHVlID0gaXNOZXh0ID8gJ2ZhZGUtaW4tZG93bicgOiAnZmFkZS1pbi11cCdcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRUYWJsZUluZGV4KCkge1xuICAgICAgb25UYWJsZUluZGV4LnZhbHVlID0geWVhcnMudmFsdWUuZmluZEluZGV4KChyb3cpID0+IHtcbiAgICAgICAgcmV0dXJuIHJvdy5maW5kKCh5ZWFyKSA9PiB5ZWFyID09PSBjb21wdXRlZFllYXIudmFsdWUpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoYW5nZVllYXJzTGlzdChpc05leHQpIHtcbiAgICAgIGNvbnN0IG1heCA9IHllYXJzLnZhbHVlLmxlbmd0aCAtIDFcbiAgICAgIGNvbnN0IHZhbCA9IGlzTmV4dCA/IDEgOiAtMVxuXG4gICAgICBpZiAoXG4gICAgICAgIChvblRhYmxlSW5kZXgudmFsdWUgPT09IG1heCAmJiB2YWwgPiAwKSB8fFxuICAgICAgICAob25UYWJsZUluZGV4LnZhbHVlID09PSAwICYmIHZhbCA8IDApXG4gICAgICApXG4gICAgICAgIHJldHVyblxuXG4gICAgICBzZXRDdXJyZW50VHJhbnNpdGlvbihpc05leHQpXG5cbiAgICAgIG9uVGFibGVJbmRleC52YWx1ZSArPSB2YWxcbiAgICAgIGlzTGlzdENoYW5nZWQudmFsdWUgPSB0cnVlXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuVGFibGVZZWFycygpIHtcbiAgICAgIGNvbnN0IGZyb21ZZWFyID0gQ1VSUkVOVF9ZRUFSIC0gTElNSVRcbiAgICAgIGNvbnN0IG1heFllYXJzID0gTElNSVQgKiAyXG5cbiAgICAgIGxldCB5ZWFyc0xpc3Q6IG51bWJlcltdID0gW11cblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbWF4WWVhcnM7IGkgKz0gMSkge1xuICAgICAgICBpZiAoeWVhcnNMaXN0Lmxlbmd0aCA9PT0gT05fVEFCTEUpIHtcbiAgICAgICAgICB5ZWFycy52YWx1ZS5wdXNoKHllYXJzTGlzdClcbiAgICAgICAgICB5ZWFyc0xpc3QgPSBbXVxuICAgICAgICB9XG4gICAgICAgIHllYXJzTGlzdC5wdXNoKGZyb21ZZWFyICsgaSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5ZZWFyQ2VsbCh5ZWFyKTogVk5vZGUge1xuICAgICAgY29uc3QgaXNTZWxlY3RlZCA9IHllYXIgPT09IGNvbXB1dGVkWWVhci52YWx1ZVxuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LWRhdGUtcGlja2VyLXllYXJzX19jZWxsJzogdHJ1ZSxcbiAgICAgICAgICAndi1kYXRlLXBpY2tlci15ZWFyc19fY2VsbC0tc2VsZWN0ZWQnOiBpc1NlbGVjdGVkLFxuICAgICAgICAgICd2LWRhdGUtcGlja2VyLXllYXJzX19jZWxsLS1jdXJyZW50LXllYXInOiB5ZWFyID09PSBDVVJSRU5UX1lFQVIsXG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IChjb21wdXRlZFllYXIudmFsdWUgPSB5ZWFyKSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgeWVhcilcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5ZZWFyc1Jvd3MoKTogVk5vZGVbXSB7XG4gICAgICBjb25zdCBjdXJyZW50WWVhcnMgPSB5ZWFycy52YWx1ZVtvblRhYmxlSW5kZXgudmFsdWVdXG4gICAgICBjb25zdCB5ZWFyc1ZOb2RlcyA9IGN1cnJlbnRZZWFycy5tYXAoZ2VuWWVhckNlbGwpXG5cbiAgICAgIHJldHVybiBnZW5UYWJsZVJvd3MoeWVhcnNWTm9kZXMsICd2LWRhdGUtcGlja2VyLXllYXJzX19yb3cnLCBDRUxMU19JTl9ST1cpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuWWVhcnMoKTogVk5vZGUgfCBudWxsIHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHsgY2xhc3M6ICd2LWRhdGUtcGlja2VyLXllYXJzX195ZWFycycgfVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKCFpc0xpc3RDaGFuZ2VkLnZhbHVlICYmIGgoJ2RpdicsIHByb3BzRGF0YSwgZ2VuWWVhcnNSb3dzKCkpKSB8fCBudWxsXG4gICAgICApXG4gICAgfVxuXG4gICAgZ2VuVGFibGVZZWFycygpXG4gICAgc2V0VGFibGVJbmRleCgpXG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgY29udGVudCA9IHVzZVRyYW5zaXRpb24oZ2VuWWVhcnMoKSBhcyBWTm9kZSwgdHJhbnNpdGlvbi52YWx1ZSlcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHsgY2xhc3M6IHsgJ3YtZGF0ZS1waWNrZXIteWVhcnMnOiB0cnVlIH0gfVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBjb250ZW50KVxuICAgIH1cbiAgfSxcbn0pXG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyBoLCBpbmplY3QsIGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnXG5cbi8vIEhlbHBlcnNcbmltcG9ydCB7IGdlblRhYmxlUm93cyB9IGZyb20gJy4vaGVscGVycydcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgRGF0ZVBpY2tlckJ0bkhhbmRsZXJzIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnXG5cbmV4cG9ydCBjb25zdCBWRGF0ZVBpY2tlck1vbnRocyA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWRhdGUtcGlja2VyLW1vbnRocycsXG5cbiAgcHJvcHM6IHtcbiAgICBsYW5nOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnZW4nLFxuICAgIH0sXG4gICAgbW9udGg6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgeWVhcjogW1N0cmluZywgTnVtYmVyXSxcbiAgICBsb2NhbGU6IEFycmF5LFxuICB9IGFzIGFueSxcblxuICBlbWl0czogWyd1cGRhdGU6bW9udGgnLCAndXBkYXRlOnllYXInXSxcblxuICBzZXR1cChwcm9wcywgeyBlbWl0IH0pIHtcbiAgICBjb25zdCBDRUxMU19JTl9ST1cgPSAzXG4gICAgY29uc3QgTU9OVEhTID0gWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMV1cbiAgICBjb25zdCBDVVJSRU5UX01PTlRIID0gbmV3IERhdGUoKS5nZXRNb250aCgpXG5cbiAgICBjb25zdCBoYW5kbGVyczogYW55ID0gaW5qZWN0KCdoYW5kbGVycycpIGFzIERhdGVQaWNrZXJCdG5IYW5kbGVyc1xuXG4gICAgaGFuZGxlcnMudmFsdWUgPSB7XG4gICAgICBvbk5leHQ6ICgpID0+IHVwZGF0ZVllYXIodHJ1ZSksXG4gICAgICBvblByZXY6ICgpID0+IHVwZGF0ZVllYXIoZmFsc2UpLFxuICAgIH1cblxuICAgIGNvbnN0IGNvbXB1dGVkTW9udGggPSBjb21wdXRlZDxudW1iZXI+KHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLm1vbnRoICE9PSB1bmRlZmluZWQgPyArcHJvcHMubW9udGggOiBDVVJSRU5UX01PTlRIXG4gICAgICB9LFxuICAgICAgc2V0KHZhbCkge1xuICAgICAgICBlbWl0KCd1cGRhdGU6bW9udGgnLCB2YWwpXG4gICAgICB9LFxuICAgIH0pXG5cbiAgICBmdW5jdGlvbiB1cGRhdGVZZWFyKGlzTmV4dDogYm9vbGVhbikge1xuICAgICAgY29uc3QgeWVhciA9ICtwcm9wcy55ZWFyICsgKGlzTmV4dCA/IDEgOiAtMSlcbiAgICAgIGVtaXQoJ3VwZGF0ZTp5ZWFyJywgeWVhcilcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5Nb250aENlbGwobW9udGgpOiBWTm9kZSB7XG4gICAgICBjb25zdCBpc1NlbGVjdGVkID0gbW9udGggPT09IGNvbXB1dGVkTW9udGgudmFsdWVcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndi1kYXRlLXBpY2tlci1tb250aHNfX2NlbGwnOiB0cnVlLFxuICAgICAgICAgICd2LWRhdGUtcGlja2VyLW1vbnRoc19fY2VsbC0tc2VsZWN0ZWQnOiBpc1NlbGVjdGVkLFxuICAgICAgICAgICd2LWRhdGUtcGlja2VyLW1vbnRoc19fY2VsbC0tY3VycmVudC1tb250aCc6IG1vbnRoID09PSBDVVJSRU5UX01PTlRILFxuICAgICAgICB9LFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiAoY29tcHV0ZWRNb250aC52YWx1ZSA9IG1vbnRoKSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgcHJvcHMubG9jYWxlW21vbnRoXSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5Nb250aFJvd3MoKTogVk5vZGVbXSB7XG4gICAgICBjb25zdCBtb250aHNWTm9kZXMgPSBNT05USFMubWFwKGdlbk1vbnRoQ2VsbClcblxuICAgICAgcmV0dXJuIGdlblRhYmxlUm93cyhcbiAgICAgICAgbW9udGhzVk5vZGVzLFxuICAgICAgICAndi1kYXRlLXBpY2tlci1tb250aHNfX3JvdycsXG4gICAgICAgIENFTExTX0lOX1JPV1xuICAgICAgKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiAndi1kYXRlLXBpY2tlci1tb250aHMnLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBnZW5Nb250aFJvd3MoKSlcbiAgICB9XG4gIH0sXG59KVxuIiwiZXhwb3J0IGNvbnN0IGxvY2FsZSA9IHtcbiAgcnU6IHtcbiAgICBtb250aHM6IFtcbiAgICAgICfQr9C90LLQsNGA0YwnLFxuICAgICAgJ9Ck0LXQstCy0YDQsNC70YwnLFxuICAgICAgJ9Cc0LDRgNGCJyxcbiAgICAgICfQkNC/0YDQtdC70YwnLFxuICAgICAgJ9Cc0LDQuScsXG4gICAgICAn0JjRjtC90YwnLFxuICAgICAgJ9CY0Y7Qu9GMJyxcbiAgICAgICfQkNCy0LPRg9GB0YInLFxuICAgICAgJ9Ch0LXQvdGC0Y/QsdGA0YwnLFxuICAgICAgJ9Ce0LrRgtGP0LHRgNGMJyxcbiAgICAgICfQndC+0Y/QsdGA0YwnLFxuICAgICAgJ9CU0LXQutCw0LHRgNGMJyxcbiAgICBdLFxuICAgIG1vbnRoc0FiYnI6IFtcbiAgICAgICfQr9C90LInLFxuICAgICAgJ9Ck0LXQsicsXG4gICAgICAn0JzQsNGAJyxcbiAgICAgICfQkNC/0YAnLFxuICAgICAgJ9Cc0LDQuScsXG4gICAgICAn0JjRjtC9JyxcbiAgICAgICfQmNGO0LsnLFxuICAgICAgJ9CQ0LLQsycsXG4gICAgICAn0KHQtdC9JyxcbiAgICAgICfQntC60YInLFxuICAgICAgJ9Cd0L7RjycsXG4gICAgICAn0JTQtdC6JyxcbiAgICBdLFxuICAgIHdlZWs6IFsn0JLRgScsICfQn9C9JywgJ9CS0YInLCAn0KHRgCcsICfQp9GCJywgJ9Cf0YInLCAn0KHQsSddLFxuICB9LFxuICBlbjoge1xuICAgIG1vbnRoczogW1xuICAgICAgJ0phbnVhcnknLFxuICAgICAgJ0ZlYnJ1YXJ5JyxcbiAgICAgICdNYXJjaCcsXG4gICAgICAnQXByaWwnLFxuICAgICAgJ01heScsXG4gICAgICAnSnVuZScsXG4gICAgICAnSnVseScsXG4gICAgICAnQXVndXN0JyxcbiAgICAgICdTZXB0ZW1iZXInLFxuICAgICAgJ09jdG9iZXInLFxuICAgICAgJ05vdmVtYmVyJyxcbiAgICAgICdEZWNlbWJlcicsXG4gICAgXSxcbiAgICBtb250aHNBYmJyOiBbXG4gICAgICAnSmFuJyxcbiAgICAgICdGZWInLFxuICAgICAgJ01hcicsXG4gICAgICAnQXByJyxcbiAgICAgICdNYXknLFxuICAgICAgJ0p1bicsXG4gICAgICAnSnVsJyxcbiAgICAgICdBdWcnLFxuICAgICAgJ1NlcCcsXG4gICAgICAnT2N0JyxcbiAgICAgICdOb3YnLFxuICAgICAgJ0RlYycsXG4gICAgXSxcbiAgICB3ZWVrOiBbJ1N1JywgJ01vJywgJ1R1JywgJ1dlJywgJ1RoJywgJ0ZyJywgJ1NhJ10sXG4gIH0sXG59XG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyBjb21wdXRlZCwgZGVmaW5lQ29tcG9uZW50LCBoLCBwcm92aWRlLCByZWFjdGl2ZSwgcmVmIH0gZnJvbSAndnVlJ1xuXG4vLyBFZmZlY3RzXG5pbXBvcnQgeyB1c2VDb2xvcnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG5pbXBvcnQgeyBlbGV2YXRpb25Qcm9wcywgdXNlRWxldmF0aW9uIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtZWxldmF0aW9uJ1xuaW1wb3J0IHsgdXNlVHJhbnNpdGlvbiB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXRyYW5zaXRpb24nXG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZUZXh0RmllbGQgfSBmcm9tICcuLi9WVGV4dEZpZWxkJ1xuaW1wb3J0IHsgVkRhdGVwaWNrZXJIZWFkZXIgfSBmcm9tICcuL1ZEYXRlcGlja2VySGVhZGVyJ1xuaW1wb3J0IHsgVkRhdGVQaWNrZXJEYXRlcyB9IGZyb20gJy4vVkRhdGVQaWNrZXJEYXRlcydcbmltcG9ydCB7IFZEYXRlUGlja2VyWWVhcnMgfSBmcm9tICcuL1ZEYXRlUGlja2VyWWVhcnMnXG5pbXBvcnQgeyBWRGF0ZVBpY2tlck1vbnRocyB9IGZyb20gJy4vVkRhdGVQaWNrZXJNb250aHMnXG5pbXBvcnQgeyBWTWVudSB9IGZyb20gJy4uL1ZNZW51J1xuXG4vLyBIZWxwZXJzXG5pbXBvcnQgeyBwYXJzZURhdGUgfSBmcm9tICcuL2hlbHBlcnMnXG5pbXBvcnQgeyBhZGRTY29wZWRTbG90IH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuLy8gVXRpbHNcbmltcG9ydCB7IGZvcm1hdERhdGUgfSBmcm9tICcuL3V0aWxzJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyBEYXRlUGlja2VyQnRuSGFuZGxlcnMsIERhdGVQaWNrZXJEYXRlIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnXG5pbXBvcnQgeyBNYXliZSB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL2Jhc2UnXG5cbi8vIFNlcnZpY2VzXG5pbXBvcnQgeyBsb2NhbGUgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9sb2NhbGUnXG5cbnR5cGUgRGF0ZVBpY2tlckRhdGEgPSB7XG4gIHllYXI6IG51bWJlciB8IG51bGxcbiAgbW9udGg6IG51bWJlciB8IG51bGxcbiAgZGF0ZTogbnVtYmVyIHwgbnVsbFxuICBkYXk6IG51bWJlciB8IG51bGxcbiAgc2VsZWN0ZWQ6IERhdGVQaWNrZXJEYXRlIHwgbnVsbFxuICB0YWJsZU1vbnRoOiBudW1iZXIgfCBudWxsXG4gIHRhYmxlWWVhcjogbnVtYmVyIHwgbnVsbFxuICBjb252ZXJ0ZWREYXRlU3RyaW5nOiBzdHJpbmcgfCBudWxsXG4gIGlzWWVhcnM6IGJvb2xlYW5cbiAgaXNNb250aHM6IGJvb2xlYW5cbiAgaXNEYXRlczogYm9vbGVhblxuICBpc0FjdGl2ZTogYm9vbGVhblxufVxuXG5leHBvcnQgY29uc3QgVkRhdGVQaWNrZXIgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1kYXRlLXBpY2tlcicsXG4gIHByb3BzOiB7XG4gICAgZGFyazogQm9vbGVhbixcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICBjbGVhcmFibGU6IEJvb2xlYW4sXG4gICAgcmVhZG9ubHk6IEJvb2xlYW4sXG4gICAgdHlwZWFibGU6IEJvb2xlYW4sXG4gICAgbW9uZGF5Rmlyc3Q6IEJvb2xlYW4sXG4gICAgdG9kYXk6IEJvb2xlYW4sXG4gICAgdXNlTWxzOiBCb29sZWFuLFxuICAgIHVzZVV0YzogQm9vbGVhbixcbiAgICBsYW5nOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnZW4nLFxuICAgIH0sXG4gICAgbGFiZWw6IFN0cmluZyxcbiAgICBwcmVwZW5kSWNvbjogU3RyaW5nLFxuICAgIGZvcm1hdDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3l5eXkgTU0gZGQgRCcsXG4gICAgfSxcbiAgICBydWxlczogQXJyYXksXG4gICAgdmFsdWU6IFtTdHJpbmcsIERhdGUsIE51bWJlcl0sXG4gICAgbW9kZWxWYWx1ZTogW1N0cmluZywgRGF0ZSwgTnVtYmVyXSxcbiAgICBkaXNhYmxlZERhdGVzOiBPYmplY3QsXG4gICAgaGlnaGxpZ2h0ZWQ6IE9iamVjdCxcbiAgICBjb250ZW50Q29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdwcmltYXJ5JyxcbiAgICB9LFxuICAgIGNvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnd2hpdGUnLFxuICAgIH0sXG4gICAgLi4uZWxldmF0aW9uUHJvcHMoKSxcbiAgfSBhcyBhbnksXG5cbiAgZW1pdHM6IFsndXBkYXRlOnZhbHVlJywgJ3VwZGF0ZTptb2RlbFZhbHVlJywgJ3NlbGVjdGVkJ10sXG5cbiAgc2V0dXAocHJvcHMsIHsgZW1pdCwgc2xvdHMgfSkge1xuICAgIGNvbnN0IGRhdGE6IERhdGVQaWNrZXJEYXRhID0gcmVhY3RpdmUoe1xuICAgICAgeWVhcjogbnVsbCxcbiAgICAgIG1vbnRoOiBudWxsLFxuICAgICAgZGF0ZTogbnVsbCxcbiAgICAgIGRheTogbnVsbCxcbiAgICAgIHNlbGVjdGVkOiBudWxsLFxuICAgICAgdGFibGVNb250aDogbnVsbCxcbiAgICAgIHRhYmxlWWVhcjogbnVsbCxcbiAgICAgIGNvbnZlcnRlZERhdGVTdHJpbmc6IG51bGwsXG4gICAgICBpc1llYXJzOiBmYWxzZSxcbiAgICAgIGlzTW9udGhzOiBmYWxzZSxcbiAgICAgIGlzRGF0ZXM6IHRydWUsXG4gICAgICBpc0FjdGl2ZTogZmFsc2UsXG4gICAgfSlcblxuICAgIGNvbnN0IHtcbiAgICAgIHNldFRleHRDbGFzc05hbWVDb2xvcixcbiAgICAgIHNldFRleHRDc3NDb2xvcixcbiAgICAgIHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcixcbiAgICAgIHNldEJhY2tncm91bmRDc3NDb2xvcixcbiAgICB9ID0gdXNlQ29sb3JzKClcbiAgICBjb25zdCB7IGVsZXZhdGlvbkNsYXNzZXMgfSA9IHVzZUVsZXZhdGlvbihwcm9wcylcblxuICAgIGNvbnN0IGxvY2FsZU1vbnRoczogc3RyaW5nW10gPSBsb2NhbGVbcHJvcHMubGFuZ10ubW9udGhzQWJiclxuICAgIGNvbnN0IGxvY2FsZVdlZWs6IHN0cmluZ1tdID0gbG9jYWxlW3Byb3BzLmxhbmddLndlZWtcbiAgICBjb25zdCBjb250ZW50Q29sb3I6IHN0cmluZyA9IHByb3BzLmRhcmsgPyAnd2hpdGUnIDogcHJvcHMuY29udGVudENvbG9yXG5cbiAgICBjb25zdCBoYW5kbGVycyA9IHJlZjxEYXRlUGlja2VyQnRuSGFuZGxlcnM+KHt9KVxuICAgIGNvbnN0IGFjdGl2YXRvciA9IHJlZjxNYXliZTxWTm9kZT4+KG51bGwpXG4gICAgY29uc3QgY2xvc2VDb25kaXRpb25hbCA9IHJlZjxib29sZWFuPihmYWxzZSlcblxuICAgIHByb3ZpZGUoJ2hhbmRsZXJzJywgaGFuZGxlcnMpXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1kYXRlLXBpY2tlcic6IHRydWUsXG4gICAgICAndi1kYXRlLXBpY2tlci0tdHlwZWFibGUnOiBwcm9wcy50eXBlYWJsZSxcbiAgICAgICd2LWRhdGUtcGlja2VyLS1yZWFkb25seSc6ICFwcm9wcy50eXBlYWJsZSB8fCBwcm9wcy5yZWFkb25seSxcbiAgICB9KSlcblxuICAgIGNvbnN0IHRhYmxlQ2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtZGF0ZS1waWNrZXJfX3RhYmxlJzogdHJ1ZSxcbiAgICAgIC4uLmVsZXZhdGlvbkNsYXNzZXMudmFsdWUsXG4gICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgICAgLi4uKGNvbnRlbnRDb2xvciA/IHNldFRleHRDbGFzc05hbWVDb2xvcihjb250ZW50Q29sb3IpIDoge30pLFxuICAgIH0pKVxuXG4gICAgY29uc3QgdGFibGVTdHlsZXMgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0QmFja2dyb3VuZENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICAgIC4uLihjb250ZW50Q29sb3IgPyBzZXRUZXh0Q3NzQ29sb3IoY29udGVudENvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IGhlYWRlclZhbHVlID0gY29tcHV0ZWQ8c3RyaW5nPigoKSA9PiB7XG4gICAgICByZXR1cm4gZGF0YS5pc1llYXJzIHx8IGRhdGEuaXNNb250aHNcbiAgICAgICAgPyBgJHtkYXRhLnRhYmxlWWVhcn1gXG4gICAgICAgIDogZGF0YS5pc0RhdGVzXG4gICAgICAgID8gYCR7ZGF0YS50YWJsZVllYXJ9ICR7bG9jYWxlTW9udGhzW2RhdGEudGFibGVNb250aCFdfWBcbiAgICAgICAgOiAnJ1xuICAgIH0pXG5cbiAgICBjb25zdCBkaXNwbGF5RGF0ZSA9IGNvbXB1dGVkPHN0cmluZz4oKCkgPT4ge1xuICAgICAgY29uc3QgeyBtb250aCwgZGF0ZSwgZGF5IH0gPSBkYXRhLnNlbGVjdGVkIGFzIERhdGVQaWNrZXJEYXRlXG4gICAgICByZXR1cm4gYCR7bG9jYWxlTW9udGhzW21vbnRoXX0gJHtkYXRlfSAke2xvY2FsZVdlZWtbZGF5XX1gXG4gICAgfSlcblxuICAgIGNvbnN0IGNvbXB1dGVkVmFsdWUgPSBjb21wdXRlZDxzdHJpbmcgfCBudW1iZXIgfCBEYXRlPigoKSA9PiB7XG4gICAgICBjb25zdCB7IHllYXIsIG1vbnRoLCBkYXRlIH0gPSBkYXRhLnNlbGVjdGVkIGFzIERhdGVQaWNrZXJEYXRlXG4gICAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgbW9udGgsIGRhdGUgYXMgbnVtYmVyKVxuICAgIH0pXG5cbiAgICBmdW5jdGlvbiBzZXRJbml0RGF0ZSgpIHtcbiAgICAgIGlmIChwcm9wcy52YWx1ZSkgc2V0UGFyc2VkRGF0ZShwcm9wcy52YWx1ZSlcbiAgICAgIGVsc2UgaWYgKHByb3BzLm1vZGVsVmFsdWUpIHNldFBhcnNlZERhdGUocHJvcHMubW9kZWxWYWx1ZSlcbiAgICAgIGVsc2Ugc2V0UGFyc2VkRGF0ZSgpXG5cbiAgICAgIGlmIChwcm9wcy50b2RheSB8fCBwcm9wcy52YWx1ZSB8fCBwcm9wcy5tb2RlbFZhbHVlKSB7XG4gICAgICAgIGRhdGEuY29udmVydGVkRGF0ZVN0cmluZyA9IGNvbnZlcnRUb0Zvcm1hdCgpIGFzIHN0cmluZ1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uVGFibGVDaGFuZ2UoKTogdm9pZCB8IGJvb2xlYW4ge1xuICAgICAgaWYgKGRhdGEuaXNZZWFycykge1xuICAgICAgICBkYXRhLmlzWWVhcnMgPSBmYWxzZVxuICAgICAgICByZXR1cm4gKGRhdGEuaXNNb250aHMgPSB0cnVlKVxuICAgICAgfVxuICAgICAgaWYgKGRhdGEuaXNNb250aHMpIHtcbiAgICAgICAgZGF0YS5pc01vbnRocyA9IGZhbHNlXG4gICAgICAgIHJldHVybiAoZGF0YS5pc1llYXJzID0gdHJ1ZSlcbiAgICAgIH1cbiAgICAgIGlmIChkYXRhLmlzRGF0ZXMpIHtcbiAgICAgICAgZGF0YS5pc0RhdGVzID0gZmFsc2VcbiAgICAgICAgcmV0dXJuIChkYXRhLmlzTW9udGhzID0gdHJ1ZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXREYXRhRGF0ZTxUIGV4dGVuZHMgRGF0ZVBpY2tlckRhdGU+KHtcbiAgICAgIHllYXIsXG4gICAgICBtb250aCxcbiAgICAgIGRhdGUsXG4gICAgICBkYXksXG4gICAgfTogVCkge1xuICAgICAgZGF0YS50YWJsZU1vbnRoID0gbW9udGhcbiAgICAgIGRhdGEudGFibGVZZWFyID0geWVhclxuXG4gICAgICBkYXRhLnllYXIgPSB5ZWFyXG4gICAgICBkYXRhLm1vbnRoID0gbW9udGhcbiAgICAgIGRhdGEuZGF0ZSA9IGRhdGVcbiAgICAgIGRhdGEuZGF5ID0gZGF5XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0UGFyc2VkRGF0ZShzZWxlY3RlZERhdGU6IHN0cmluZyB8IG51bGwgPSBudWxsKSB7XG4gICAgICBjb25zdCBkYXRlRm9yUGFyc2luZyA9IHNlbGVjdGVkRGF0ZSB8fCBuZXcgRGF0ZSgpXG5cbiAgICAgIGRhdGEuc2VsZWN0ZWQgPSBwYXJzZURhdGUoZGF0ZUZvclBhcnNpbmcpXG4gICAgICAhc2VsZWN0ZWREYXRlICYmIChkYXRhLnNlbGVjdGVkIS5kZWZhdWx0ID0gIXNlbGVjdGVkRGF0ZSlcblxuICAgICAgc2V0RGF0YURhdGUoZGF0YS5zZWxlY3RlZCEpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25ZZWFyVXBkYXRlKHllYXI6IG51bWJlcikge1xuICAgICAgZGF0YS50YWJsZVllYXIgPSB5ZWFyXG4gICAgICBkYXRhLmlzTW9udGhzID0gdHJ1ZVxuICAgICAgZGF0YS5pc1llYXJzID0gZmFsc2VcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbk1vbnRoVXBkYXRlKG1vbnRoOiBudW1iZXIpIHtcbiAgICAgIGRhdGEudGFibGVNb250aCA9IG1vbnRoXG4gICAgICBkYXRhLmlzTW9udGhzID0gZmFsc2VcbiAgICAgIGRhdGEuaXNZZWFycyA9IGZhbHNlXG4gICAgICBkYXRhLmlzRGF0ZXMgPSB0cnVlXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25EYXRlVXBkYXRlKGRhdGU6IERhdGVQaWNrZXJEYXRlKSB7XG4gICAgICBpZiAoIWRhdGUpIHJldHVyblxuXG4gICAgICBjbG9zZUNvbmRpdGlvbmFsLnZhbHVlID0gdHJ1ZVxuXG4gICAgICBkYXRhLnNlbGVjdGVkID0gZGF0ZVxuICAgICAgZGF0YS50YWJsZU1vbnRoID0gZGF0ZS5tb250aFxuICAgICAgZGF0YS50YWJsZVllYXIgPSBkYXRlLnllYXJcblxuICAgICAgZGF0YS5jb252ZXJ0ZWREYXRlU3RyaW5nID0gY29udmVydFRvRm9ybWF0KCkgYXMgc3RyaW5nXG5cbiAgICAgIGVtaXQoJ3VwZGF0ZTp2YWx1ZScsIGNvbXB1dGVkVmFsdWUudmFsdWUpXG4gICAgICBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIGNvbXB1dGVkVmFsdWUudmFsdWUpXG4gICAgICBlbWl0KCdzZWxlY3RlZCcsIGNvbXB1dGVkVmFsdWUudmFsdWUpXG5cbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiAoY2xvc2VDb25kaXRpb25hbC52YWx1ZSA9IGZhbHNlKSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkRhdGVNb250aFVwZGF0ZShkYXRlT2JqZWN0KSB7XG4gICAgICBkYXRhLnRhYmxlTW9udGggPSBkYXRlT2JqZWN0Lm1vbnRoXG4gICAgICBpZiAoZGF0ZU9iamVjdC55ZWFyKSBkYXRhLnRhYmxlWWVhciA9IGRhdGVPYmplY3QueWVhclxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uRGF0ZUlucHV0KGRhdGU6IHN0cmluZyk6IGFueSB7XG4gICAgICBvbkRhdGVVcGRhdGUoc3RyaW5nVG9EYXRlKGRhdGUpISlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdHJpbmdUb0RhdGUoZGF0ZTogc3RyaW5nKTogRGF0ZVBpY2tlckRhdGUgfCBudWxsIHtcbiAgICAgIGlmIChkYXRlLmxlbmd0aCA9PT0gMTApIHtcbiAgICAgICAgY29uc3QgZGF0ZUFycmF5ID0gZGF0ZS50cmltKCkuc3BsaXQoL1xcVy8pXG5cbiAgICAgICAgaWYgKGRhdGVBcnJheVswXS5sZW5ndGggPCA0KSB7XG4gICAgICAgICAgZGF0ZSA9IGRhdGVBcnJheS5yZXZlcnNlKCkuam9pbignLicpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFyc2VEYXRlKG5ldyBEYXRlKERhdGUucGFyc2UoZGF0ZSkpKVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb252ZXJ0VG9Gb3JtYXQoKTogc3RyaW5nIHtcbiAgICAgIGlmICghZGF0YS5zZWxlY3RlZCkgcmV0dXJuICcnXG4gICAgICByZXR1cm4gZm9ybWF0RGF0ZShcbiAgICAgICAgbmV3IERhdGUoXG4gICAgICAgICAgZGF0YS5zZWxlY3RlZCEueWVhcixcbiAgICAgICAgICBkYXRhLnNlbGVjdGVkIS5tb250aCxcbiAgICAgICAgICBkYXRhLnNlbGVjdGVkIS5kYXRlIGFzIG51bWJlclxuICAgICAgICApLFxuICAgICAgICBwcm9wcy5mb3JtYXQsXG4gICAgICAgIGxvY2FsZVtwcm9wcy5sYW5nXVxuICAgICAgKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbkRpc3BsYXlWYWx1ZSh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKTogVk5vZGUge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogJ3YtZGF0ZS1waWNrZXJfX2Rpc3BsYXktdmFsdWUnLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdXNlVHJhbnNpdGlvbihcbiAgICAgICAgaCgnc3BhbicsIHByb3BzRGF0YSwgdmFsdWUpLFxuICAgICAgICAnc2NhbGUtaW4tb3V0JyxcbiAgICAgICAgJ291dC1pbidcbiAgICAgIClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5EYXRlcGlja2VyRGlzcGxheUlubmVyKCk6IFZOb2RlIHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6ICd2LWRhdGUtcGlja2VyX19kaXNwbGF5LWlubmVyJyxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgW1xuICAgICAgICBnZW5EaXNwbGF5VmFsdWUoZGF0YS5zZWxlY3RlZD8ueWVhciBhcyBudW1iZXIpLFxuICAgICAgICBnZW5EaXNwbGF5VmFsdWUoZGlzcGxheURhdGUudmFsdWUpLFxuICAgICAgXSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5EYXRlcGlja2VyRGlzcGxheSgpOiBWTm9kZSB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgJ3YtZGF0ZS1waWNrZXJfX2Rpc3BsYXknOiB0cnVlLFxuICAgICAgICAgIC4uLihjb250ZW50Q29sb3IgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IoY29udGVudENvbG9yKSA6IHt9KSxcbiAgICAgICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgICAgICB9LFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIC4uLihjb250ZW50Q29sb3IgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IoY29udGVudENvbG9yKSA6IHt9KSxcbiAgICAgICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRUZXh0Q3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgICAgICB9LFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBnZW5EYXRlcGlja2VyRGlzcGxheUlubmVyKCkpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuRGF0ZXBpY2tlckhlYWRlcigpOiBWTm9kZSB7XG4gICAgICByZXR1cm4gaChcbiAgICAgICAgVkRhdGVwaWNrZXJIZWFkZXIsXG4gICAgICAgIHtcbiAgICAgICAgICBvbk5leHQ6ICgpID0+IGhhbmRsZXJzLnZhbHVlLm9uTmV4dCEoKSxcbiAgICAgICAgICBvblByZXY6ICgpID0+IGhhbmRsZXJzLnZhbHVlLm9uUHJldiEoKSxcbiAgICAgICAgICBvblRhYmxlOiBvblRhYmxlQ2hhbmdlLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gaGVhZGVyVmFsdWUudmFsdWUsXG4gICAgICAgIH1cbiAgICAgIClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5EYXRlcGlja2VyWWVhcnNUYWJsZSgpOiBWTm9kZSB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIHllYXI6IGRhdGEudGFibGVZZWFyLFxuICAgICAgICBbJ29uVXBkYXRlOnllYXInXTogb25ZZWFyVXBkYXRlLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaChWRGF0ZVBpY2tlclllYXJzLCBwcm9wc0RhdGEpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuRGF0ZXBpY2tlck1vbnRoc1RhYmxlKCk6IFZOb2RlIHtcbiAgICAgIHJldHVybiBoKFZEYXRlUGlja2VyTW9udGhzLCB7XG4gICAgICAgIGxhbmc6IHByb3BzLmxhbmcsXG4gICAgICAgIG1vbnRoOiBkYXRhLnRhYmxlTW9udGgsXG4gICAgICAgIHllYXI6IGRhdGEudGFibGVZZWFyLFxuICAgICAgICBsb2NhbGU6IGxvY2FsZU1vbnRocyxcbiAgICAgICAgWydvblVwZGF0ZTptb250aCddOiBvbk1vbnRoVXBkYXRlLFxuICAgICAgICBbJ29uVXBkYXRlOnllYXInXTogb25ZZWFyVXBkYXRlLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5EYXRlcGlja2VyRGF0ZXNUYWJsZSgpOiBWTm9kZSB7XG4gICAgICByZXR1cm4gaChcbiAgICAgICAgVkRhdGVQaWNrZXJEYXRlcyxcbiAgICAgICAge1xuICAgICAgICAgIGxvY2FsZTogbG9jYWxlV2VlayxcbiAgICAgICAgICBtb25kYXlGaXJzdDogcHJvcHMubW9uZGF5Rmlyc3QsXG4gICAgICAgICAgbW9udGg6IGRhdGEudGFibGVNb250aCxcbiAgICAgICAgICB5ZWFyOiBkYXRhLnRhYmxlWWVhcixcbiAgICAgICAgICB2YWx1ZTogZGF0YS5zZWxlY3RlZCxcbiAgICAgICAgICBkaXNhYmxlZERhdGVzOiBwcm9wcy5kaXNhYmxlZERhdGVzLFxuICAgICAgICAgIFsnb25VcGRhdGU6dmFsdWUnXTogb25EYXRlVXBkYXRlLFxuICAgICAgICAgIFsnb25VcGRhdGU6bW9udGgnXTogb25EYXRlTW9udGhVcGRhdGUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkYXRlOiBzbG90cy5kYXRlICYmIGFkZFNjb3BlZFNsb3QoJ2RhdGUnLCBzbG90cyksXG4gICAgICAgIH1cbiAgICAgIClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5EYXRlcGlja2VyQm9keSgpOiBWTm9kZSB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgJ3YtZGF0ZS1waWNrZXJfX2JvZHknOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHByb3BzRGF0YSxcbiAgICAgICAgdXNlVHJhbnNpdGlvbihcbiAgICAgICAgICAoKGRhdGEuaXNZZWFycyAmJiBnZW5EYXRlcGlja2VyWWVhcnNUYWJsZSgpKSB8fFxuICAgICAgICAgICAgKGRhdGEuaXNNb250aHMgJiYgZ2VuRGF0ZXBpY2tlck1vbnRoc1RhYmxlKCkpIHx8XG4gICAgICAgICAgICAoZGF0YS5pc0RhdGVzICYmIGdlbkRhdGVwaWNrZXJEYXRlc1RhYmxlKCkpKSBhcyBWTm9kZSxcbiAgICAgICAgICAnc2xpZGUtaW4tbGVmdCcsXG4gICAgICAgICAgJ291dC1pbidcbiAgICAgICAgKVxuICAgICAgKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbkRhdGVwaWNrZXJJbnB1dCgpOiBWTm9kZSB7XG4gICAgICByZXR1cm4gaChWVGV4dEZpZWxkLCB7XG4gICAgICAgIG1vZGVsVmFsdWU6IGRhdGEuY29udmVydGVkRGF0ZVN0cmluZyEsXG4gICAgICAgIGRhcms6IHByb3BzLmRhcmssXG4gICAgICAgIGxhYmVsOiBwcm9wcy5sYWJlbCxcbiAgICAgICAgcmVhZG9ubHk6ICFwcm9wcy50eXBlYWJsZSxcbiAgICAgICAgZGlzYWJsZWQ6IHByb3BzLmRpc2FibGVkLFxuICAgICAgICBwcmVwZW5kSWNvbjogcHJvcHMucHJlcGVuZEljb24sXG4gICAgICAgIHJ1bGVzOiBwcm9wcy5ydWxlcyxcbiAgICAgICAgY2xlYXJhYmxlOiBwcm9wcy5jbGVhcmFibGUsXG4gICAgICAgIHJlZjogYWN0aXZhdG9yLFxuICAgICAgICBvbklucHV0OiBvbkRhdGVJbnB1dCxcbiAgICAgICAgb25DbGVhcjogKCkgPT4ge1xuICAgICAgICAgIGRhdGEuY29udmVydGVkRGF0ZVN0cmluZyA9ICcnXG4gICAgICAgICAgZW1pdCgndXBkYXRlOnZhbHVlJywgbnVsbClcbiAgICAgICAgICBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIG51bGwpXG4gICAgICAgICAgZW1pdCgnc2VsZWN0ZWQnLCBudWxsKVxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5EYXRlcGlja2VyVGFibGUoKTogVk5vZGUge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogdGFibGVDbGFzc2VzLnZhbHVlLFxuICAgICAgICBzdHlsZTogdGFibGVTdHlsZXMudmFsdWUsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIFtcbiAgICAgICAgZ2VuRGF0ZXBpY2tlckRpc3BsYXkoKSxcbiAgICAgICAgZ2VuRGF0ZXBpY2tlckhlYWRlcigpLFxuICAgICAgICBnZW5EYXRlcGlja2VyQm9keSgpLFxuICAgICAgXSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5NZW51KCkge1xuICAgICAgcmV0dXJuIGgoXG4gICAgICAgIFZNZW51LFxuICAgICAgICB7XG4gICAgICAgICAgYWN0aXZhdG9yOiBhY3RpdmF0b3IudmFsdWUhLFxuICAgICAgICAgIGludGVybmFsQWN0aXZhdG9yOiB0cnVlLFxuICAgICAgICAgIGlucHV0QWN0aXZhdG9yOiAnLnYtaW5wdXRfX3RleHQtZmllbGQnLFxuICAgICAgICAgIHdpZHRoOiAnYXV0bycsXG4gICAgICAgICAgbWF4SGVpZ2h0OiAnYXV0bycsXG4gICAgICAgICAgYm90dG9tOiBwcm9wcy50eXBlYWJsZSxcbiAgICAgICAgICBvcGVuT25DbGljazogdHJ1ZSxcbiAgICAgICAgICBjbG9zZU9uQ2xpY2s6IGNsb3NlQ29uZGl0aW9uYWwudmFsdWUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBnZW5EYXRlcGlja2VyVGFibGUoKSxcbiAgICAgICAgfVxuICAgICAgKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbkRhdGVwaWNrZXIoKTogVk5vZGUge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHByb3BzRGF0YSwgW1xuICAgICAgICBnZW5EYXRlcGlja2VySW5wdXQoKSxcbiAgICAgICAgYWN0aXZhdG9yLnZhbHVlICYmIGdlbk1lbnUoKSxcbiAgICAgIF0pXG4gICAgfVxuXG4gICAgc2V0SW5pdERhdGUoKVxuXG4gICAgcmV0dXJuICgpID0+IGdlbkRhdGVwaWNrZXIoKVxuICB9LFxufSlcbiIsImV4cG9ydCAqIGZyb20gJy4vVkRhdGVQaWNrZXInXG4iLCIvLyBWdWUgQVBJXG5pbXBvcnQgeyBoLCBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnXG5cbi8vIEVmZmVjdHNcbmltcG9ydCB7IHVzZUNvbG9ycyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLWNvbG9ycydcblxuZXhwb3J0IGNvbnN0IFZQcm9ncmVzc0xpbmVhciA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LXByb2dyZXNzLWxpbmVhcicsXG4gIHByb3BzOiB7XG4gICAgdmFsdWU6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gICAgbW9kZWxWYWx1ZToge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgfSxcbiAgICBidWZmZXJWYWx1ZToge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgfSxcbiAgICBoZWlnaHQ6IHtcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgICBkZWZhdWx0OiA0LFxuICAgIH0sXG4gICAgY29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdwcmltYXJ5JyxcbiAgICB9LFxuICAgIGJhY2tncm91bmRDb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3ByaW1hcnknLFxuICAgIH0sXG4gICAgYmFja2dyb3VuZE9wYWNpdHk6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcwLjMnLFxuICAgIH0sXG4gICAgaW5kZXRlcm1pbmF0ZTogQm9vbGVhbixcbiAgICByZXZlcnNlOiBCb29sZWFuLFxuICAgIHJvdW5kZWQ6IEJvb2xlYW4sXG4gICAgc3RyZWFtOiBCb29sZWFuLFxuICAgIHN0cmlwZWQ6IEJvb2xlYW4sXG4gIH0sXG4gIHNldHVwKHByb3BzKSB7XG4gICAgY29uc3QgeyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IsIHNldEJhY2tncm91bmRDc3NDb2xvciB9ID0gdXNlQ29sb3JzKClcblxuICAgIGNvbnN0IGdlblByb2dyZXNzQmFyID0gKHR5cGUgPSAnJykgPT4ge1xuICAgICAgY29uc3QgYmFyV2lkdGggPSBwcm9wcy52YWx1ZSB8fCBwcm9wcy5tb2RlbFZhbHVlXG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgJ3YtcHJvZ3Jlc3MtbGluZWFyX19iYXInOiB0cnVlLFxuICAgICAgICAgIFt0eXBlXTogISF0eXBlLFxuICAgICAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldEJhY2tncm91bmRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgd2lkdGg6ICFwcm9wcy5pbmRldGVybWluYXRlID8gYmFyV2lkdGggKyAnJScgOiAnJyxcbiAgICAgICAgICAuLi4ocHJvcHMuY29sb3IgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMuY29sb3IpIDoge30pLFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5Qcm9ncmVzc0J1ZmZlciA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGJ1ZmZlcldpZHRoID0gcHJvcHMudmFsdWUgfHwgcHJvcHMubW9kZWxWYWx1ZVxuXG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgJ3YtcHJvZ3Jlc3MtbGluZWFyX19idWZmZXInOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIHdpZHRoOiBidWZmZXJXaWR0aCA/IGJ1ZmZlcldpZHRoICsgJyUnIDogJycsXG4gICAgICAgIH0sXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuUHJvZ3Jlc3NCYWNrZ3JvdW5kKCkge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LXByb2dyZXNzLWxpbmVhcl9fYmFja2dyb3VuZCc6IHRydWUsXG4gICAgICAgICAgLi4uKHByb3BzLmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgPyBzZXRCYWNrZ3JvdW5kQ2xhc3NOYW1lQ29sb3IocHJvcHMuYmFja2dyb3VuZENvbG9yKVxuICAgICAgICAgICAgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgb3BhY2l0eTogcHJvcHMuYmFja2dyb3VuZE9wYWNpdHksXG4gICAgICAgICAgLi4uKHByb3BzLmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgPyBzZXRCYWNrZ3JvdW5kQ3NzQ29sb3IocHJvcHMuYmFja2dyb3VuZENvbG9yKVxuICAgICAgICAgICAgOiB7fSksXG4gICAgICAgIH0sXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuUHJvZ3Jlc3NJbmRldGVybWluYXRlKCkge1xuICAgICAgcmV0dXJuIGgoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3M6IHsgJ3YtcHJvZ3Jlc3MtbGluZWFyX19pbmRldGVybWluYXRlJzogdHJ1ZSB9LFxuICAgICAgICB9LFxuICAgICAgICBbZ2VuUHJvZ3Jlc3NCYXIoJ2xvbmcnKSwgZ2VuUHJvZ3Jlc3NCYXIoJ3Nob3J0JyldXG4gICAgICApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuUHJvZ3Jlc3NMaW5lYXIoKSB7XG4gICAgICByZXR1cm4gaChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzczogJ3YtcHJvZ3Jlc3MtbGluZWFyJyxcbiAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgaGVpZ2h0OiBgJHtwcm9wcy5oZWlnaHR9cHhgLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIFtcbiAgICAgICAgICBnZW5Qcm9ncmVzc0JhY2tncm91bmQoKSxcbiAgICAgICAgICBnZW5Qcm9ncmVzc0J1ZmZlcigpLFxuICAgICAgICAgIHByb3BzLmluZGV0ZXJtaW5hdGUgPyBnZW5Qcm9ncmVzc0luZGV0ZXJtaW5hdGUoKSA6IGdlblByb2dyZXNzQmFyKCksXG4gICAgICAgIF1cbiAgICAgIClcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4gZ2VuUHJvZ3Jlc3NMaW5lYXIoKVxuICB9LFxufSlcbiIsIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGgsIHJlZiwgcmVhY3RpdmUsIGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQsIG9uQmVmb3JlTW91bnQgfSBmcm9tICd2dWUnXG5cbi8vIEVmZmVjdHNcbmltcG9ydCB7IHZhbGlkYXRpb25Qcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXZhbGlkYXRpb24nXG5pbXBvcnQgeyB1c2VDb2xvcnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1jb2xvcnMnXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gJ3Z1ZSdcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVklucHV0IH0gZnJvbSAnLi4vVklucHV0J1xuaW1wb3J0IHsgVlNlbGVjdExpc3QgfSBmcm9tICcuLi9WU2VsZWN0J1xuaW1wb3J0IHsgVk1lbnUgfSBmcm9tICcuLi9WTWVudSdcbmltcG9ydCB7IFZQcm9ncmVzc0xpbmVhciB9IGZyb20gJy4uL1ZQcm9ncmVzc0xpbmVhcidcblxuLy8gSGVscGVyc1xuaW1wb3J0IHsgZ2V0S2V5VmFsdWVGcm9tVGFyZ2V0IH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxudHlwZSBTZWxlY3RTdGF0ZSA9IHtcbiAgZm9jdXNlZDogYm9vbGVhblxuICBpc01lbnVBY3RpdmU6IGJvb2xlYW5cbiAgc2VhcmNoOiBzdHJpbmdcbiAgc2VsZWN0OiBhbnlcbn1cblxuZXhwb3J0IGNvbnN0IFZBdXRvY29tcGxldGUgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1hdXRvY29tcGxldGUnLFxuICBwcm9wczoge1xuICAgIGxhYmVsOiBTdHJpbmcsXG4gICAgaXRlbXM6IEFycmF5LFxuICAgIGRhcms6IEJvb2xlYW4sXG4gICAgdmFsdWVLZXk6IFN0cmluZyxcbiAgICBpZEtleTogU3RyaW5nLFxuICAgIGxpc3RDb2xvcjogU3RyaW5nLFxuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIHR5cGVhYmxlOiBCb29sZWFuLFxuICAgIGxvYWRpbmc6IEJvb2xlYW4sXG4gICAgbW9kZWxWYWx1ZToge1xuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICB9LFxuICAgIGNvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAncHJpbWFyeScsXG4gICAgfSxcbiAgICAuLi52YWxpZGF0aW9uUHJvcHMoKSxcbiAgfSBhcyBhbnksXG5cbiAgZW1pdHM6IFtcbiAgICAnaW5wdXQnLFxuICAgICdibHVyJyxcbiAgICAnZm9jdXMnLFxuICAgICdzZWxlY3QnLFxuICAgICd1cGRhdGU6bW9kZWxWYWx1ZScsXG4gICAgJ3VwZGF0ZTp2YWx1ZScsXG4gIF0sXG5cbiAgc2V0dXAocHJvcHMsIHsgZW1pdCB9KTogKCkgPT4gVk5vZGUge1xuICAgIGNvbnN0IHN0YXRlOiBTZWxlY3RTdGF0ZSA9IHJlYWN0aXZlKHtcbiAgICAgIGZvY3VzZWQ6IGZhbHNlLFxuICAgICAgaXNNZW51QWN0aXZlOiBmYWxzZSxcbiAgICAgIHNlYXJjaDogJycsXG4gICAgICBzZWxlY3Q6IG51bGwsXG4gICAgfSlcblxuICAgIGNvbnN0IHsgc2V0VGV4dENzc0NvbG9yLCBzZXRUZXh0Q2xhc3NOYW1lQ29sb3IgfSA9IHVzZUNvbG9ycygpXG4gICAgY29uc3QgYWN0aXZhdG9yID0gcmVmKG51bGwpXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1hdXRvY29tcGxldGUnOiB0cnVlLFxuICAgICAgJ3YtYXV0b2NvbXBsZXRlLS1kaXNhYmxlZCc6IHByb3BzLmRpc2FibGVkLFxuICAgICAgJ3YtYXV0b2NvbXBsZXRlLS1mb2N1c2VkJzogc3RhdGUuZm9jdXNlZCxcbiAgICAgIC4uLihwcm9wcy5jb2xvciA/IHNldFRleHRDbGFzc05hbWVDb2xvcihwcm9wcy5jb2xvcikgOiB7fSksXG4gICAgfSkpXG5cbiAgICBjb25zdCBzdHlsZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PigoKSA9PiAoe1xuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0VGV4dENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IHZhbHVlUHJvcGVydHkgPSBjb21wdXRlZDxhbnk+KCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5tb2RlbFZhbHVlIHx8IHByb3BzLnZhbHVlXG4gICAgfSlcblxuICAgIGNvbnN0IGlucHV0VmFsdWUgPSBjb21wdXRlZDxzdHJpbmc+KCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy52YWx1ZUtleSAmJiB2YWx1ZVByb3BlcnR5LnZhbHVlXG4gICAgICAgID8gZ2V0S2V5VmFsdWVGcm9tVGFyZ2V0KHByb3BzLnZhbHVlS2V5LCB2YWx1ZVByb3BlcnR5LnZhbHVlKVxuICAgICAgICA6IHZhbHVlUHJvcGVydHkudmFsdWVcbiAgICB9KVxuXG4gICAgY29uc3Qgb25Gb2N1cyA9ICgpID0+IHtcbiAgICAgIHN0YXRlLmZvY3VzZWQgPSB0cnVlXG4gICAgICBzdGF0ZS5pc01lbnVBY3RpdmUgPSB0cnVlXG4gICAgICBlbWl0KCdmb2N1cycpXG4gICAgfVxuXG4gICAgY29uc3Qgb25CbHVyID0gKCkgPT4ge1xuICAgICAgaWYgKCF2YWx1ZVByb3BlcnR5LnZhbHVlICYmICFzdGF0ZS5zZWFyY2gpIHN0YXRlLnNlYXJjaCA9ICcnXG4gICAgICBpZiAoIXN0YXRlLnNlYXJjaCAmJiB2YWx1ZVByb3BlcnR5LnZhbHVlKSBzdGF0ZS5zZWFyY2ggPSBpbnB1dFZhbHVlLnZhbHVlXG4gICAgICBzdGF0ZS5mb2N1c2VkID0gZmFsc2VcbiAgICAgIGVtaXQoJ2JsdXInKVxuICAgIH1cblxuICAgIGNvbnN0IG9uSW5wdXQgPSAoZSkgPT4ge1xuICAgICAgc3RhdGUuc2VhcmNoID0gZS50YXJnZXQudmFsdWVcbiAgICAgIGVtaXQoJ2lucHV0JywgZS50YXJnZXQudmFsdWUpXG4gICAgfVxuXG4gICAgY29uc3Qgb25DbGVhciA9ICgpID0+IHtcbiAgICAgIHN0YXRlLnNlYXJjaCA9ICcnXG4gICAgICBzdGF0ZS5zZWxlY3QgPSBudWxsXG4gICAgICBlbWl0KCdzZWxlY3QnLCBudWxsKVxuICAgICAgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCBudWxsKVxuICAgICAgZW1pdCgndXBkYXRlOnZhbHVlJywgbnVsbClcbiAgICB9XG5cbiAgICBjb25zdCBvblNlbGVjdCA9IChpdCkgPT4ge1xuICAgICAgc3RhdGUuc2VhcmNoID0gcHJvcHMudmFsdWVLZXlcbiAgICAgICAgPyBnZXRLZXlWYWx1ZUZyb21UYXJnZXQocHJvcHMudmFsdWVLZXksIGl0KVxuICAgICAgICA6IGl0XG4gICAgICBzdGF0ZS5zZWxlY3QgPSBpdFxuICAgICAgZW1pdCgnc2VsZWN0JywgaXQpXG4gICAgICBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIGl0KVxuICAgICAgZW1pdCgndXBkYXRlOnZhbHVlJywgaXQpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuSW5wdXQgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2lucHV0Jywge1xuICAgICAgICB2YWx1ZTogc3RhdGUuc2VhcmNoLFxuICAgICAgICBkaXNhYmxlZDogcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIHJlYWRvbmx5OiBwcm9wcy5yZWFkb25seSAmJiAhcHJvcHMudHlwZWFibGUsXG4gICAgICAgIHJlZjogYWN0aXZhdG9yLFxuICAgICAgICBjbGFzczogJ3YtYXV0b2NvbXBsZXRlX19pbnB1dCcsXG4gICAgICAgIG9uSW5wdXQsXG4gICAgICAgIG9uRm9jdXMsXG4gICAgICAgIG9uQmx1cixcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQXV0b2NvbXBsZXRlTGlzdCA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaChWU2VsZWN0TGlzdCwge1xuICAgICAgICBpdGVtczogcHJvcHMuaXRlbXMsXG4gICAgICAgIHZhbHVlS2V5OiBwcm9wcy52YWx1ZUtleSxcbiAgICAgICAgaWRLZXk6IHByb3BzLmlkS2V5LFxuICAgICAgICBhY3RpdmU6IHN0YXRlLmlzTWVudUFjdGl2ZSxcbiAgICAgICAgY29sb3I6IHByb3BzLmRhcmsgPyAnd2hpdGUnIDogcHJvcHMuY29sb3IsXG4gICAgICAgIGxpc3RDb2xvcjogcHJvcHMubGlzdENvbG9yLFxuICAgICAgICBzZWxlY3Q6IHN0YXRlLnNlbGVjdCxcbiAgICAgICAgb25TZWxlY3QsXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlbk1lbnUgPSAoKTogVk5vZGUgPT4ge1xuICAgICAgcmV0dXJuIGgoXG4gICAgICAgIFZNZW51LFxuICAgICAgICB7XG4gICAgICAgICAgYWN0aXZhdG9yOiBhY3RpdmF0b3IudmFsdWUhLFxuICAgICAgICAgIG9wZW5PbkNsaWNrOiB0cnVlLFxuICAgICAgICAgIG1heEhlaWdodDogMjQwLFxuICAgICAgICAgIGJvdHRvbTogdHJ1ZSxcbiAgICAgICAgICBvbkhpZGU6ICgpID0+IChzdGF0ZS5pc01lbnVBY3RpdmUgPSBzdGF0ZS5mb2N1c2VkKSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGRlZmF1bHQ6IGdlbkF1dG9jb21wbGV0ZUxpc3QsXG4gICAgICAgIH1cbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5MaW5lYXJQcm9ncmVzcyA9ICgpOiBWTm9kZSA9PiB7XG4gICAgICByZXR1cm4gaChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzczogeyAndi1hdXRvY29tcGxldGVfX2xvYWRpbmcnOiB0cnVlIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGgoVlByb2dyZXNzTGluZWFyLCB7XG4gICAgICAgICAgaGVpZ2h0OiAyLFxuICAgICAgICAgIGluZGV0ZXJtaW5hdGU6IHRydWUsXG4gICAgICAgICAgY29sb3I6IHByb3BzLmNvbG9yLFxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcHJvcHMuY29sb3IsXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQXV0b2NvbXBsZXRlID0gKCk6IFZOb2RlID0+IHtcbiAgICAgIHJldHVybiBoKFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgICAgIHN0eWxlOiBzdHlsZXMudmFsdWUsXG4gICAgICAgIH0sXG4gICAgICAgIFtcbiAgICAgICAgICBnZW5JbnB1dCgpLFxuICAgICAgICAgIHByb3BzLmxvYWRpbmcgJiYgZ2VuTGluZWFyUHJvZ3Jlc3MoKSxcbiAgICAgICAgICBhY3RpdmF0b3IudmFsdWUgJiYgZ2VuTWVudSgpLFxuICAgICAgICBdXG4gICAgICApXG4gICAgfVxuXG4gICAgb25CZWZvcmVNb3VudCgoKSA9PiB7XG4gICAgICBzdGF0ZS5zZWxlY3QgPSB2YWx1ZVByb3BlcnR5LnZhbHVlXG4gICAgICBzdGF0ZS5zZWFyY2ggPSBpbnB1dFZhbHVlLnZhbHVlXG4gICAgfSlcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGxhYmVsOiBwcm9wcy5sYWJlbCxcbiAgICAgICAgZm9jdXNlZDogc3RhdGUuaXNNZW51QWN0aXZlLFxuICAgICAgICBoYXNTdGF0ZTogISFzdGF0ZS5zZWFyY2gsXG4gICAgICAgIGRhcms6IHByb3BzLmRhcmssXG4gICAgICAgIGRpc2FibGVkOiBwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgY2xlYXJhYmxlOiBwcm9wcy5jbGVhcmFibGUsXG4gICAgICAgIGNvbG9yOiBwcm9wcy5jb2xvcixcbiAgICAgICAgcnVsZXM6IHByb3BzLnJ1bGVzLFxuICAgICAgICB2YWx1ZTogdmFsdWVQcm9wZXJ0eS52YWx1ZSB8fCBzdGF0ZS5zZWFyY2gsXG4gICAgICAgIG9uQ2xlYXIsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKFZJbnB1dCwgcHJvcHNEYXRhLCB7XG4gICAgICAgICd0ZXh0LWZpZWxkJzogKCkgPT4gZ2VuQXV0b2NvbXBsZXRlKCksXG4gICAgICB9KVxuICAgIH1cbiAgfSxcbn0pXG4iLCJleHBvcnQgKiBmcm9tICcuL1ZBdXRvY29tcGxldGUnXG4iLCJleHBvcnQgKiBmcm9tICcuL1ZQcm9ncmVzc0xpbmVhcidcbiIsImV4cG9ydCAqIGZyb20gJy4vVlByb2dyZXNzQ2lyY3VsYXInXG4iLCJleHBvcnQgKiBmcm9tICcuL1ZBcHAnXG5leHBvcnQgKiBmcm9tICcuL1ZCdXR0b24nXG5leHBvcnQgKiBmcm9tICcuL1ZDYXJkJ1xuZXhwb3J0ICogZnJvbSAnLi9WR3JpZCdcbmV4cG9ydCAqIGZyb20gJy4vVk92ZXJsYXknXG5leHBvcnQgKiBmcm9tICcuL1ZNb2RhbCdcbmV4cG9ydCAqIGZyb20gJy4vVk1lbnUnXG5leHBvcnQgKiBmcm9tICcuL1ZUZXh0RmllbGQnXG5leHBvcnQgKiBmcm9tICcuL1ZJbnB1dCdcbmV4cG9ydCAqIGZyb20gJy4vVkZpbGVJbnB1dCdcbmV4cG9ydCAqIGZyb20gJy4vVlNlbGVjdCdcbmV4cG9ydCAqIGZyb20gJy4vVkZvcm0nXG5leHBvcnQgKiBmcm9tICcuL1ZMYWJlbCdcbmV4cG9ydCAqIGZyb20gJy4vVkJhZGdlJ1xuZXhwb3J0ICogZnJvbSAnLi9WR3JvdXAnXG5leHBvcnQgKiBmcm9tICcuL1ZSZXNpemUnXG5leHBvcnQgKiBmcm9tICcuL1ZJY29uJ1xuZXhwb3J0ICogZnJvbSAnLi9WQ2hpcCdcbmV4cG9ydCAqIGZyb20gJy4vVkxpc3QnXG5leHBvcnQgKiBmcm9tICcuL1ZDaGVja2JveCdcbmV4cG9ydCAqIGZyb20gJy4vVlRvb2x0aXAnXG5leHBvcnQgKiBmcm9tICcuL1ZUb29sYmFyJ1xuZXhwb3J0ICogZnJvbSAnLi9WTmF2aWdhdGlvbidcbmV4cG9ydCAqIGZyb20gJy4vVk1haW4nXG5leHBvcnQgKiBmcm9tICcuL1ZUZXh0YXJlYSdcbmV4cG9ydCAqIGZyb20gJy4vVlNrZWxldG9uJ1xuZXhwb3J0ICogZnJvbSAnLi9WRGF0YVRhYmxlJ1xuZXhwb3J0ICogZnJvbSAnLi9WRGF0ZVBpY2tlcidcbmV4cG9ydCAqIGZyb20gJy4vVkF1dG9jb21wbGV0ZSdcbmV4cG9ydCAqIGZyb20gJy4vVlByb2dyZXNzTGluZWFyJ1xuZXhwb3J0ICogZnJvbSAnLi9WUHJvZ3Jlc3NDaXJjdWxhcidcbiIsImV4cG9ydCAqIGZyb20gJy4vdi1jbGljay1vdXRzaWRlJ1xuZXhwb3J0ICogZnJvbSAnLi92LXJlc2l6ZSdcbiIsImltcG9ydCAqIGFzIGNvbXBvbmVudHMgZnJvbSAnLi9jb21wb25lbnRzJ1xuaW1wb3J0ICogYXMgZGlyZWN0aXZlcyBmcm9tICcuL2RpcmVjdGl2ZXMnXG5pbXBvcnQgeyBVc2VyT3B0aW9ucyB9IGZyb20gJy4uL3R5cGVzJ1xuXG5leHBvcnQgY2xhc3MgVnVlbGFuZCB7XG4gIHN0YXRpYyBpbnN0YWxsZWQ6IGJvb2xlYW4gPSBmYWxzZVxuICBzdGF0aWMgb3B0aW9uczogVXNlck9wdGlvbnNcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zPzogVXNlck9wdGlvbnMpIHtcbiAgICBWdWVsYW5kLm9wdGlvbnMgPSBvcHRpb25zIVxuICB9XG5cbiAgc3RhdGljIGluc3RhbGwoYXBwOiBhbnkpIHtcbiAgICBpZiAoVnVlbGFuZC5pbnN0YWxsZWQpIHJldHVyblxuXG4gICAgVnVlbGFuZC5pbnN0YWxsZWQgPSB0cnVlXG5cbiAgICBPYmplY3Qua2V5cyhjb21wb25lbnRzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkgJiYgKGNvbXBvbmVudHMgYXMgYW55KVtrZXldKSB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IChjb21wb25lbnRzIGFzIGFueSlba2V5XVxuICAgICAgICBhcHAuY29tcG9uZW50KGtleSwgY29tcG9uZW50IGFzIHR5cGVvZiBhcHApXG4gICAgICB9XG4gICAgfSlcblxuICAgIE9iamVjdC5rZXlzKGRpcmVjdGl2ZXMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleSAmJiAoZGlyZWN0aXZlcyBhcyBhbnkpW2tleV0pIHtcbiAgICAgICAgYXBwLmRpcmVjdGl2ZShrZXksIChkaXJlY3RpdmVzIGFzIGFueSlba2V5XSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgYXBwLnByb3ZpZGUoJyRvcHRpb25zJywgVnVlbGFuZC5vcHRpb25zKVxuICB9XG59XG4iLCJpbXBvcnQgeyBWdWVsYW5kIH0gZnJvbSAnLi9saWJyYXJ5J1xuXG5leHBvcnQgKiBmcm9tICcuL2NvbXBvbmVudHMnXG5leHBvcnQgeyBWdWVsYW5kIH1cblxuZXhwb3J0IGRlZmF1bHQgVnVlbGFuZFxuIl0sIm5hbWVzIjpbInJlc2l6ZSIsIm1vdW50ZWQiLCJlbCIsImJpbmRpbmciLCJjYWxsYmFjayIsInZhbHVlIiwib3B0aW9ucyIsInBhc3NpdmUiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiX29uUmVzaXplIiwibW9kaWZpZXJzIiwicXVpZXQiLCJiZWZvcmVVbm1vdW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImJyZWFrcG9pbnRzIiwic20iLCJtZCIsImxnIiwieGwiLCJ0aHJvdHRsZSIsImZuIiwidGltZW91dCIsImxhc3RUaGlzIiwibGFzdEFyZ3MiLCJpc1Rocm90dGxlZCIsIndyYXBwZXIiLCJhcmdzIiwiY2FsbCIsInNldFRpbWVvdXQiLCJhcHBseSIsImRlZmluZUNvbXBvbmVudCIsInByb3ZpZGUiLCJyZWFjdGl2ZSIsImgiLCJ3aXRoRGlyZWN0aXZlcyIsIm9uTW91bnRlZCIsIlZBcHAiLCJuYW1lIiwiZGlyZWN0aXZlcyIsInByb3BzIiwiZ2xvYmFsIiwidHlwZSIsIk9iamVjdCIsInNldHVwIiwic2xvdHMiLCJUSFJPVFRMSU5HX1RJTUVPVVQiLCJzdGF0ZSIsImN1cnJlbnQiLCJ4bEFuZExlc3MiLCJsZ0FuZExlc3MiLCJtZEFuZExlc3MiLCJzbUFuZExlc3MiLCJzZXRDdXJyZW50QnJlYWtwb2ludE5hbWUiLCJzY3JlZW4iLCJzZXRJbnRlcnZhbHMiLCJzZXRTaXplcyIsIl9hIiwiaW5uZXJXaWR0aCIsInRocm90dGxlZFJlc2l6ZUxpc3RlbmVyIiwiZ2VuQXBwV3JhcHBlciIsImlzQ3NzQ29sb3IiLCJjb2xvciIsIm1hdGNoIiwiY29sb3JQcm9wcyIsImRlZmF1bHRDb2xvciIsIlN0cmluZyIsInVzZUNvbG9ycyIsInNldFRleHRDbGFzc05hbWVDb2xvciIsImNsYXNzZXMiLCJ0cmltIiwic3BsaXQiLCJjb2xvck5hbWUiLCJjb2xvck1vZGlmaWVyIiwic2V0VGV4dENzc0NvbG9yIiwic3R5bGVzIiwic2V0QmFja2dyb3VuZENzc0NvbG9yIiwic2V0QmFja2dyb3VuZENsYXNzTmFtZUNvbG9yIiwiY29tcHV0ZWQiLCJlbGV2YXRpb25Qcm9wcyIsImVsZXZhdGlvbiIsIk51bWJlciIsInVzZUVsZXZhdGlvbiIsImVsZXZhdGlvbkNsYXNzZXMiLCJwb3NpdGlvblByb3BzIiwiYWJzb2x1dGUiLCJCb29sZWFuIiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwidXNlUG9zaXRpb24iLCJwb3NpdGlvbkNsYXNzZXMiLCJjcmVhdGVTaW1wbGVGdW5jdGlvbmFsIiwiYyIsInJlcGxhY2UiLCJfIiwicHJvcHNEYXRhIiwiYWRkT25jZUxpc3RlbmVyIiwiZXZlbnROYW1lIiwiY2IiLCJvbmNlIiwiZXZlbnQiLCJjb252ZXJ0VG9Vbml0Iiwic3RyIiwidW5pdCIsImlzTmFOIiwid2FybmluZyIsIndhcm5pbmdUZXh0IiwiY29uc29sZSIsIndhcm4iLCJjb3B5V2l0aG91dExpbmsiLCJvYmoiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJhZGRTY29wZWRTbG90Iiwic2xvdE5hbWUiLCJzY29wZWQiLCJhcmciLCJnZXRLZXlWYWx1ZUZyb21UYXJnZXQiLCJ2YWx1ZUtleSIsInRhcmdldCIsInJlZHVjZSIsImFjYyIsIml0IiwibWFwVG9WYWxBcnJheSIsIm1hcCIsIkFycmF5IiwiZnJvbSIsInZhbHVlcyIsInVuaXF1ZUFycmF5IiwiYXJyIiwiZ2V0U3RyaW5nS2V5c1ZhbHVlIiwidG9DYW1lbENhc2UiLCJyZXMiLCJzIiwiaSIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJWUHJvZ3Jlc3NDaXJjdWxhciIsImluZGV0ZXJtaW5hdGUiLCJzaXplIiwid2lkdGgiLCJyb3RhdGUiLCJyYWRpdXMiLCJub3JtYWxpemVkVmFsdWUiLCJwYXJzZUZsb2F0IiwiY2lyY3VtZmVyZW5jZSIsIk1hdGgiLCJQSSIsInN0cm9rZURhc2hBcnJheSIsInJvdW5kIiwic3Ryb2tlRGFzaE9mZnNldCIsInZpZXdCb3hTaXplIiwic3Ryb2tlV2lkdGgiLCJoZWlnaHQiLCJzdmdTdHlsZSIsInRyYW5zZm9ybSIsImdlbkNpcmNsZSIsIm9mZnNldCIsImZpbGwiLCJjeCIsImN5IiwiciIsImdlblN2ZyIsImNoaWxkcmVuIiwieG1sbnMiLCJ2aWV3Qm94Iiwic3R5bGUiLCJnZW5JbmZvIiwiVkJ1dHRvbiIsImRpc2FibGVkIiwib3V0bGluZWQiLCJyb3VuZGVkIiwibG9hZGluZyIsInRleHQiLCJkYXJrIiwibGFiZWwiLCJlbWl0cyIsImVtaXQiLCJpc0ZsYXQiLCJpc0xvYWRhYmxlIiwiaXNFbGV2ZXRhYmxlIiwiZWxldmF0aW9ucyIsImdlbkxvYWRlciIsImdlbkxhYmVsIiwiZ2VuQ29udGVudCIsIm9uQ2xpY2siLCJWQ2FyZCIsImdlbkNhcmQiLCJWQ2FyZFRpdGxlIiwiVkNhcmRTdWJ0aXRsZSIsIlZDYXJkQ29udGVudCIsIlZDYXJkQWN0aW9ucyIsInBvc2l0aW9ucyIsIlZSb3ciLCJhbGlnbiIsInZhbGlkYXRvciIsImluY2x1ZGVzIiwiYWxpZ25Db250ZW50IiwianVzdGlmeSIsIm5vR3V0dGVyIiwiYnAiLCJjbHMiLCJmb3JFYWNoIiwicG9zIiwiY29sUHJvcHMiLCJwIiwib3JkZXJQcm9wcyIsIm9mZnNldFByb3BzIiwiVkNvbCIsIm9yZGVyIiwiY29scyIsIm9yZGVycyIsInByb3BWYWx1ZSIsIm9mZnNldHMiLCJWTGF5b3V0IiwiY29sdW1uIiwid3JhcCIsIlZTcGFjZXIiLCJWT3ZlcmxheSIsImhpZGUiLCJhY3RpdmUiLCJmaXhlZCIsInJlZiIsInJlbmRlciIsIm92ZXJsYXlQcm9wcyIsIm92ZXJsYXkiLCJvdmVybGF5Q29sb3IiLCJ1c2VPdmVybGF5Iiwib3ZlcmxheU9uIiwiY29udGFpbmVyIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwib3ZlcmxheUVsZW1lbnQiLCJvdmVybGF5Vk5vZGUiLCJyZW5kZXJPdmVybGF5IiwiY3JlYXRlT3ZlcmxheSIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJhZGQiLCJyZW1vdmVPdmVybGF5IiwicmVtb3ZlQ2hpbGQiLCJmaXJzdENoaWxkIiwiVHJhbnNpdGlvbiIsInRyYW5zaXRpb25Qcm9wcyIsInRyYW5zaXRpb24iLCJ1c2VUcmFuc2l0aW9uIiwidk5vZGUiLCJtb2RlIiwid2F0Y2giLCJ1c2VUb2dnbGUiLCJwcm9wTmFtZSIsImlzQWN0aXZlIiwicHJvcCIsInRvIiwiaW1tZWRpYXRlIiwidlNob3ciLCJWTW9kYWwiLCJtb2RlbFZhbHVlIiwibW9kYWxSZWYiLCJnZW5Nb2RhbCIsInZhbCIsImF1dG9Qb3NpdGlvblByb3BzIiwicG9zaXRpb25YIiwicG9zaXRpb25ZIiwidXNlQXV0b1Bvc2l0aW9uIiwiZGltZW5zaW9ucyIsImFjdGl2YXRvciIsImNvbnRlbnQiLCJwYWdlWU9mZnNldCIsInBhZ2VXaWR0aCIsImNvbnRlbnRSZWYiLCJvZmZzZXRZIiwiY29udGVudEJvdHRvbUJvcmRlciIsImdldFJlY3QiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiaXNBYnNvbHV0ZVBvc2l0aW9uZWQiLCJnZXRJbm5lckhlaWdodCIsImlubmVySGVpZ2h0IiwiZG9jdW1lbnRFbGVtZW50IiwiY2xpZW50SGVpZ2h0IiwiZ2V0U2Nyb2xsVG9wIiwic2Nyb2xsVG9wIiwiZ2V0U2Nyb2xsTGVmdCIsInBhZ2VYT2Zmc2V0Iiwic2Nyb2xsTGVmdCIsImdldENvbnRlbnRBYnNvbHV0ZUJvdHRvbVBvaW50IiwiZ2V0Q29udGVudEJvdHRvbUJvcmRlciIsImNhbGNDb250ZW50Qm90dG9tUG9zaXRpb24iLCJmdWxsSGVpZ2h0IiwiY29udGVudEJvdHRvbVBvc2l0aW9uIiwiY2FsY0Fic29sdXRlVG9wIiwidG9wUG9zaXRpb24iLCJjYWxjQm90dG9tUG9zaXRpb24iLCJjYWxjVG9wUG9zaXRpb24iLCJjYWxjQ29udGVudEF1dG9Qb3NpdGlvbiIsImNhbGNQb3NpdGlvblkiLCJjYWxjUG9zaXRpb25YIiwic25hcFNob3QiLCJkaXNwbGF5IiwidXBkYXRlRGltZW5zaW9ucyIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0QWN0aXZhdG9yRGltZW5zaW9ucyIsInNldENvbnRlbnREaW1lbnNpb25zIiwib2Zmc2V0SGVpZ2h0Iiwic2V0RGltZW5zaW9ucyIsImFjdGl2YXRvckVsIiwiYWN0aXZhdG9yUHJvcHMiLCJpbnRlcm5hbEFjdGl2YXRvciIsInVzZUFjdGl2YXRvciIsImFjdGl2YXRvclJlZiIsImFjdGl2YXRvclNpemVzIiwibGlzdGVuZXJzIiwiZ2V0QWN0aXZhdG9yIiwiJGVsIiwiaW5wdXRBY3RpdmF0b3IiLCJxdWVyeVNlbGVjdG9yIiwiY3VycmVudFRhcmdldCIsImdldEFjdGl2YXRvclNpemVzIiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsIm9mZnNldFdpZHRoIiwiZ2VuQWN0aXZhdG9yTGlzdGVuZXJzIiwiaGFuZGxlcnMiLCJvcGVuT25Ib3ZlciIsIm1vdXNlZW50ZXIiLCJlIiwibW91c2VsZWF2ZSIsIm9wZW5PbkNsaWNrIiwiY2xpY2siLCJvcGVuT25Db250ZXh0bWVudSIsImNvbnRleHRtZW51IiwiYWRkQWN0aXZhdG9yRXZlbnRzIiwiZXZlbnRzIiwia2V5cyIsImtleSIsInJlbW92ZUFjdGl2YXRvckV2ZW50cyIsInVzZURldGFjaCIsInNldERldGFjaGVkIiwic2VsZWN0b3IiLCJhcHBlbmRDaGlsZCIsInJlbW92ZURldGFjaGVkIiwiY2xpY2tIYW5kbGVyIiwiY29udGFpbnMiLCJfYmluZHMiLCJfYiIsImNsb3NlQ29uZGl0aW9uYWwiLCJfYyIsIl9kIiwiaGFuZGxlciIsInJlbW92ZUxpc3RlbmVyIiwiYm9keSIsIl9vbkNsaWNrIiwiY2xpY2tPdXRzaWRlIiwiYmVmb3JlTW91bnQiLCJiZWZvcmVVcGRhdGUiLCJvbkJlZm9yZVVubW91bnQiLCJWTWVudSIsIm1heEhlaWdodCIsInpJbmRleCIsImNsb3NlT25DbGljayIsIm9mZnNldFgiLCJzZXREaW1lbnNpb25zT24iLCJmbGFnIiwidGhlbiIsImRpcmVjdGl2ZSIsInVuZGVmaW5lZCIsImNhbGNXaWR0aCIsImNvbnRlbnRDbGFzc2VzIiwiY29udGVudFN0eWxlcyIsIm9uQ29udGVudENsaWNrIiwib25SZXNpemUiLCJnZW5BY3RpdmF0b3JTbG90Iiwic2xvdENvbnRlbnQiLCJvbiIsImdlbkNvbnRlbnRTbG90IiwidmFsaWRhdGlvblByb3BzIiwicnVsZXMiLCJEYXRlIiwidXNlVmFsaWRhdGlvbiIsImVycm9yU3RhdGUiLCJpbm5lckVycm9yIiwiaW5uZXJFcnJvck1lc3NhZ2UiLCJpc0RpcnR5IiwidmFsaWRhdGlvbkNsYXNzZXMiLCJjb21wdXRlZENvbG9yIiwiaGFzUnVsZXMiLCJsZW5ndGgiLCJkaXJ0eSIsInVwZGF0ZSIsImVyciIsIm1zZyIsInZhbGlkYXRlIiwibGVuIiwicnVsZSIsInJlc3VsdCIsInVzZUlucHV0U3RhdGVzIiwiYXR0cnMiLCJmb2N1c2VkIiwiaXNEaXNhYmxlZCIsImlzUmVhZG9ubHkiLCJyZWFkb25seSIsIm9uRm9jdXMiLCJvbkNoYW5nZSIsIm9uQmx1ciIsIm9uU2VsZWN0IiwiVkxhYmVsIiwic2l6ZVByb3BzIiwiZGVmYXVsdFNpemUiLCJ1c2VTaXplIiwic2l6ZXMiLCJmaW5kIiwiVkljb24iLCJjbGlja2FibGUiLCJpY29uIiwidGFnIiwiaWNvblRhZyIsImNvbXB1dGVkSWNvbiIsImZvbnRTaXplIiwiZ2V0U2l6ZXMiLCJleHBsaWNpdFNpemUiLCJpbmplY3QiLCJvbkJlZm9yZU1vdW50IiwiVklucHV0IiwiY29tcG9uZW50cyIsImluaGVyaXRBdHRycyIsInByZXBlbmRJY29uIiwiYXBwZW5kSWNvbiIsImZpbGUiLCJoaW50cyIsImhpbnRNZXNzYWdlIiwidGV4dENvbG9yIiwiZm9ybSIsInRleHRDbGFzc0NvbG9yIiwidGV4dENzc0NvbG9yIiwiaGFzUHJlcGVuZEljb24iLCJoYXNBcHBlbmRJY29uIiwiZ2VuSWNvbiIsImljb25OYW1lIiwiZ2VuUHJlcGVuZEljb24iLCJnZW5BcHBlbmRJY29uIiwiZ2VuVGV4dEZpZWxkU2xvdCIsInByZXBlbmRJY29uQ29udGVudCIsImFwcGVuZEljb25Db250ZW50IiwidGV4dEZpZWxkQ29udGVudCIsImdlbkhpbnRNZXNzYWdlIiwiZ2VuSGludHMiLCJnZW5TZWxlY3RTbG90Iiwic2VsZWN0IiwiVlRleHRGaWVsZCIsImNvbXB1dGVkVmFsdWUiLCJnZXQiLCJzZXQiLCJvbklucHV0IiwiZ2VuSW5wdXRGaWVsZCIsInBsYWNlaG9sZGVyIiwiZ2VuVGV4dEZpZWxkV3JhcHBlciIsImNsc0NvbG9yIiwiY3NzQ29sb3IiLCJGYUljb25zIiwiTWF0ZXJpYWxJY29ucyIsIk1hdGVyaWFsU2l6ZXMiLCJGYVNpemVzIiwidXNlSWNvbnMiLCJpY29ucyIsIlZDaGlwIiwidGl0bGUiLCJjbG9zYWJsZSIsImdlbkNsb3NlSWNvbiIsIiRjbG9zZSIsImdlbkNoaXBDb250ZW50IiwiVkZpbGVJbnB1dCIsIm11bHRpcGxlIiwiY2hpcENvbG9yIiwiaW5wdXRSZWYiLCJzcmNSZWYiLCJmaWxlcyIsImNvbmNhdCIsIm9uQ2xvc2UiLCJmaWx0ZXIiLCJzcmNFbGVtZW50IiwiZ2VuRmlsZUlucHV0IiwicG9zaXRpb24iLCJ2aXNpYmlsaXR5IiwiZ2VuQ2hpcHMiLCJnZW5DaGlwc0NvbnRhaW5lciIsImdlbkNvbXBvbmVudCIsIiRwYXBlcmNsaXAiLCJWTGlzdCIsImFjdGl2ZUNsYXNzIiwiaXRlbXMiLCJNYXAiLCJpc1RydXN0ZWRTZWxlY3QiLCJyZWdpc3RlciIsIml0ZW0iLCJoYXMiLCJ1bnJlZ2lzdGVyIiwiZGlzcGF0Y2hFdmVudCIsInNldEFjdGl2ZUl0ZW0iLCJ0b2dnbGVJdGVtIiwicHJlcGFyZUluZGV4ZXMiLCJwdXNoIiwic2V0SXRlbVN0YXRlIiwiaW5kIiwiVkxpc3RJdGVtIiwiaXRlbVJlZiIsImxpc3QiLCJWTGlzdEl0ZW1UaXRsZSIsIlZMaXN0SXRlbVN1YnRpdGxlIiwiVkxpc3RJdGVtQ29udGVudCIsIlZMaXN0SXRlbUljb24iLCJWU2VsZWN0TGlzdCIsInNlbGVjdGVkIiwiY29tcHV0ZWRTZWxlY3QiLCJzZWxlY3RlZFZhbHVlIiwiZmluZEluZGV4IiwiaXRlbVZhbHVlIiwibG9nIiwiZ2VuSXRlbXMiLCJnZW5JdGVtc0xpc3QiLCJWU2VsZWN0IiwiZ2VuSW5wdXQiLCJnZW5TZWxlY3RMaXN0Iiwib25TaG93Iiwib25IaWRlIiwiZ2VuRXhwYW5kSWNvbiIsIiRjaGV2cm9uRG93biIsImdlblNlbGVjdCIsIlZGb3JtIiwiZmllbGRzIiwiYWRkRmllbGRWYWxpZGF0b3IiLCJyZW1vdmVGaWVsZFZhbGlkYXRvciIsInYiLCJwcm9taXNlcyIsInNvbWUiLCJmIiwicmVqZWN0Iiwib25TdWJtaXQiLCJwcmV2ZW50RGVmYXVsdCIsIlZCYWRnZSIsImRvdCIsImF2YXRhciIsImJvcmRlciIsInRvZ2dsZSIsInJlcXVpcmVkIiwiY2FsY1Bvc2l0aW9uIiwib2Zmc2V0VmFsIiwiY29tcHV0ZWRMZWZ0IiwiY29tcHV0ZWRSaWdodCIsImNvbXB1dGVkVG9wIiwiY29tcHV0ZWRCb3R0b20iLCJiYWRnZUNsYXNzZXMiLCJhZGRDb250ZW50IiwiZ2VuQmFkZ2VTbG90IiwiYmFkZ2UiLCJnZW5CYWRnZSIsIndpdGhDdHgiLCJjcmVhdGVCbG9jayIsImNyZWF0ZVRyYW5zaXRpb24iLCJob29rcyIsImluaXQiLCJwcm9wU2l6ZSIsIlBSSU1BUllfVFJBTlNJVElPTiIsInJlc2V0U3R5bGVzIiwiZ2V0Q2hpbGRyZW5TaXplcyIsInByb3RvdHlwZSIsImdldENvbXB1dGVkU3R5bGUiLCJzZXRJbml0U3R5bGVzIiwieCIsImV4cGFuZEhvb2tzIiwiZXhwYW5kZWRQYXJlbnRDbGFzcyIsIm9uQmVmb3JlRW50ZXIiLCJvbkVudGVyIiwib25BZnRlckVudGVyIiwib25CZWZvcmVMZWF2ZSIsIm9uTGVhdmUiLCJvbkFmdGVyTGVhdmUiLCJFeHBhbmRUcmFuc2l0aW9uIiwiVkdyb3VwIiwiZXhwYW5kIiwic3ViZ3JvdXAiLCJnZW5IZWFkZXJDb250ZW50IiwiaGVhZGVyIiwiZ2VuU3ViRXhwYW5kSWNvbiIsImdlbkdyb3VwSGVhZGVyIiwiJGNhcmV0RG93biIsImdlbkdyb3VwQ2hpbGRDb250ZW50IiwiVlJlc2l6ZSIsImN1c3RvbUNsYXNzIiwibWluU2l6ZSIsImRhdGEiLCJzdGFydE9mZnNldCIsInBhcmVudEhlaWdodCIsInBhcmVudFdpZHRoIiwibWFyZ2luTGVmdCIsIm1hcmdpblRvcCIsInJlc2l6ZVJlZiIsImlzRGlyZWN0WSIsImlzTmVlZFJldmVyc2UiLCJjdXJyZW50U2l6ZSIsInNpemVQcm9wIiwicmV2ZXJzZURpcmVjdGlvbiIsInJldmVyc2VPZmZzZXRLZXkiLCJzaWRlIiwiZGlyZWN0aW9uIiwibW92ZVJldmVyc2UiLCJyZXZlcnNlVG8iLCJzZXRPckVtaXRTaXplIiwicmVzZXRNaW5NYXhTdHlsZXMiLCJtaW5IZWlnaHQiLCJtYXhXaWR0aCIsIm1pbldpZHRoIiwic2V0UGFyZW50IiwicGFyZW50IiwiY29tcHV0ZVNpemVzIiwic2V0U3RhcnRQb3NpdGlvbnMiLCJkaXNhYmxlU2VsZWN0aW9uIiwiaW5pdFJlc2l6ZSIsInNldFN0YXJ0T2Zmc2V0IiwicmVzZXQiLCJvbk1vdXNldXAiLCJyZW1vdmVIYW5kbGVycyIsIm9uTW91c2Vkb3duIiwiVkNoZWNrYm94Iiwib25JY29uIiwib2ZmSWNvbiIsImlzQ2hlY2tlZCIsImlzQXJyYXkiLCJpc1ZhbHVlU2V0IiwidmFsaWRhdGVWYWx1ZSIsImdlbkxhYmVsV3JhcHBlciIsIiRjaGVja09uIiwiJGNoZWNrT2ZmIiwiZ2VuQ2hlY2tib3giLCJjb21wdXRlVmFsdWUiLCJ0cmFuc2l0aW9ucyIsIlZUb29sdGlwIiwidG9vbHRpcCIsInRvb2x0aXBSZWYiLCJjb21wdXRlVG9wUG9zaXRpb24iLCJjb21wdXRlTGVmdFBvc2l0aW9uIiwiZ2VuQWN0aXZhdG9yIiwic2V0VG9vbHRpcFBvc2l0aW9uIiwiU0NBTEVfSU4iLCJGQURFIiwiVlRvb2xiYXIiLCJWVG9vbGJhck5hdkJ0biIsImdlbk5hdkJ0biIsIiRtZW51IiwiVlRvb2xiYXJJdGVtcyIsIlZUb29sYmFyTG9nbyIsIlZUb29sYmFyQ29udGVudCIsIlZOYXZpZ2F0aW9uIiwib25Ib3ZlciIsIm1pbmlWYXJpYW50IiwibWluaVZhcmlhbnRXaWR0aCIsIm1heFZhcmlhbnRXaWR0aCIsImlzSG92ZXJlZCIsImlzRXhwYW5kZWQiLCJjb21wdXRlZFdpZHRoIiwiZ2VuTmF2aWdhdGlvbkNvbnRlbnQiLCJvbk1vdXNlZW50ZXIiLCJvbk1vdXNlbGVhdmUiLCJWTWFpbiIsIlZUZXh0YXJlYSIsIlZTa2VsZXRvbiIsImxpZ2h0IiwiZHluYW1pYyIsImZsZXhCYXNpcyIsImJvcmRlclJhZGl1cyIsIlZEYXRhVGFibGVDZWxsIiwicmVzaXplYWJsZSIsInJlc2l6ZXJDb2xvciIsImNvbnRlbnRDb2xvciIsImdlblJlc2l6ZSIsIiRzaXplIiwiZ2VuQ2VsbENvbnRlbnQiLCJWRGF0YVRhYmxlSGVhZGVyIiwic2hvd1NlcXVlbmNlIiwic2hvd0NoZWNrYm94IiwiY29sV2lkdGgiLCJjb21wdXRlZENvbnRlbnRDb2xvciIsIm9uU29ydCIsIiR2YWx1ZSIsImZpbHRlcmVkIiwiY29sIiwic2hvd0ZpbHRlciIsImdlblNvcnRCdXR0b24iLCJzb3J0ZWQiLCIkYXJyb3dVcCIsImdlbkZpbHRlckJ1dHRvbiIsIiRmaWx0ZXIiLCJjZWxsQ2xhc3MiLCJnZW5IZWFkZXJBY3Rpb25zIiwic29ydGFibGUiLCJmaWx0ZXJhYmxlIiwiZ2VuRmlsdGVySW5wdXQiLCIkc2VhcmNoIiwiY2xlYXJhYmxlIiwiZ2VuRmlsdGVyV3JhcHBlciIsImZpbHRlclNsb3QiLCJnZW5IZWFkZXJUaXRsZSIsImdlbk51bWJlckNlbGwiLCJnZW5DaGVja2JveENlbGwiLCJvbkNoZWNrZWQiLCJnZW5IZWFkZXJDZWxsIiwiZ2VuSGVhZGVyQ2hpbGRyZW4iLCJoZWFkZXJTbG90IiwiaGFzT3duUHJvcGVydHkiLCJzaG93IiwiVkRhdGFUYWJsZUJvZHkiLCJyb3dzIiwiY2hlY2tBbGxSb3dzIiwicGFnZSIsInJvd3NPblBhZ2UiLCJjaGVja2VkUm93cyIsInJvd3NPblRhYmxlIiwib25TZWxlY3RSb3dzIiwiY291bnQiLCJyb3ciLCJnZW5Sb3dDZWxsIiwiZm9ybWF0IiwiZ2VuVGFibGVSb3ciLCJyb3dDb3VudCIsInJvd0NlbGxzIiwib25EYmxjbGljayIsIm9uQ29udGV4dG1lbnUiLCJnZW5UYWJsZVJvd3MiLCJ0YWJsZVJvd3MiLCJyb3dzTGVuZ3RoIiwiVkRhdGFUYWJsZUZvb3RlciIsInBhZ2VzIiwiZmlyc3RPblBhZ2UiLCJsYXN0T25QYWdlIiwicGFnZUNvcnJlY3Rpb24iLCJwYWdpbmF0aW9uRGlzcGxheVRleHQiLCJpc0xhc3RQYWdlIiwiY2hhbmdlVGFibGVSb3dzUGFnZSIsImlzTmV4dCIsImdlblBhZ2luYXRpb25CdXR0b24iLCJidG5Db2xvciIsInBhZ2luYXRpb24iLCJidXR0b25zQ29sb3IiLCJkaXNhYmxlSWYiLCIkYXJyb3dSaWdodCIsIiRhcnJvd0xlZnQiLCJnZW5QYWdpbmF0aW9uUGFnZURpc3BsYXkiLCJkaXNwbGF5Q29sb3IiLCJtYXJnaW4iLCJnZW5Sb3dzQ291bnRTZWxlY3RMaXN0IiwiY291bnRzIiwicm93c1BlclBhZ2VPcHRpb25zIiwiZ2VuTWVudSIsImdlblJvd3NDb3VudEZpZWxkIiwiZ2VuUm93c0NvdW50U2VsZWN0IiwiZ2VuUm93c0NvdW50U2VsZWN0Q2FwdGlvbiIsInJvd3NQZXJQYWdlVGV4dCIsImdlblJvd3NDb3VudFNlbGVjdEJsb2NrIiwiZ2VuUGFnZXNDb3VudERpc3BsYXkiLCJnZW5QYWdpbmF0aW9uQnV0dG9uc0Jsb2NrIiwiZ2VuUGFnaW5hdGlvbkJsb2NrIiwiVkRhdGFUYWJsZSIsImhlYWRlck9wdGlvbnMiLCJmb290ZXJPcHRpb25zIiwiY3VzdG9tRmlsdGVyIiwiRnVuY3Rpb24iLCJpc0FsbFJvd3NDaGVja2VkIiwiZmlsdGVycyIsImNlaWwiLCJvblNlbGVjdEFsbCIsImNoZWNrZWQiLCJvblByZXZQYWdlIiwibnVtIiwib25OZXh0UGFnZSIsInNvcnRDb2x1bW4iLCJyZXZlcnNlIiwiZXhlY3V0b3IiLCJzb3J0IiwiYSIsImIiLCJvbkZpbHRlciIsImZpbHRlclJvd3MiLCJvblNlbGVjdFJvd3NDb3VudCIsImZpbHRlcktleXMiLCJyb3dSZXN1bHRzIiwicm93S2V5VmFsdWUiLCJ0b0xvd2VyQ2FzZSIsImZpbHRlclZhbHVlIiwiZXZlcnkiLCJnZW5UYWJsZVRvb2xzIiwidG9vbGJhciIsImdlblRhYmxlSGVhZGVyIiwiZ2VuVGFibGVCb2R5IiwiZ2VuVGFibGVGb290ZXIiLCJvbkxhc3RQYWdlIiwib25Db3JyZWN0UGFnZSIsInN0YXJ0IiwibGFzdCIsImdlblRhYmxlSW5uZXIiLCJWRGF0ZXBpY2tlckhlYWRlciIsIm9uTmV4dCIsIm9uUHJldiIsImdlbkhlYWRlckJ1dHRvbiIsImlzUmlnaHQiLCJpY29uUHJvcHNEYXRhIiwiYXJyb3dCdG4iLCJnZW5IZWFkZXJEaXNwbGF5IiwiZ2V0TW9udGgiLCJkYXRlIiwiZ2V0RnVsbFllYXIiLCJnZXREYXRlIiwiZ2V0RGF5IiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwic2V0RnVsbFllYXIiLCJzZXRNb250aCIsInNldERhdGUiLCJpc1ZhbGlkRGF0ZSIsInRvU3RyaW5nIiwiZ2V0VGltZSIsImdldERheU5hbWVBYmJyIiwiZGF5cyIsIlR5cGVFcnJvciIsImdldE1vbnRoTmFtZSIsIm1vbnRoIiwibW9udGhzIiwiRXJyb3IiLCJnZXRNb250aE5hbWVBYmJyIiwibW9udGhzQWJiciIsImZvcm1hdERhdGUiLCJ0cmFuc2xhdGlvbiIsInllYXIiLCJkYXkiLCJ3ZWVrIiwidmFsaWRhdGVEYXRlSW5wdXQiLCJ2Tm9kZXNBcnJheSIsInJvd0NsYXNzTmFtZSIsImNlbGxzSW5Sb3ciLCJ2Tm9kZXNJblJvdyIsImNlbGxWTm9kZXMiLCJ0b0RhdGVTdHJpbmciLCJwYXJzZURhdGUiLCJzZWxlY3RlZERhdGUiLCJtbHMiLCJWRGF0ZVBpY2tlckRhdGVzIiwibG9jYWxlIiwibW9uZGF5Rmlyc3QiLCJkaXNhYmxlZERhdGVzIiwiRklSU1RfTU9OVEgiLCJMQVNUX01PTlRIIiwiREFZUyIsIkFOSU1BVElPTl9USU1FT1VUIiwiZGF0ZXMiLCJpc0RhdGVzQ2hhbmdlZCIsInRvZGF5IiwidXBkYXRlTW9udGgiLCJzcGxpY2UiLCJkYXlzSW5Nb250aCIsImdlblRhYmxlRGF0ZXMiLCJwYXJhbXMiLCJnZW5XZWVrRGF5cyIsImdlbkRhdGVPYmplY3QiLCJzZXRFbXB0aWVzQmVmb3JlRmlyc3REYXRlIiwiZGF0ZU9iamVjdCIsImZpcnN0RGF5Iiwic3RhcnREYXkiLCJ0aWxsRGF5IiwiY29tcGFyZURhdGVzIiwiZGF0ZTEiLCJkYXRlMiIsInNldERpc2FibGVkIiwiaXNIb2xpZGF5IiwiZGF5c09mTW9udGgiLCJkaXNhYmxlRGF5c09mTW9udGgiLCJkaXNhYmxlRnJvbVRvIiwiZGlzYWJsZURhdGVzIiwiZGlzYWJsZURheXMiLCJyYW5nZXMiLCJkaXNhYmxlUmFuZ2VzIiwiY3VzdG9tIiwiZGF0ZUZyb20iLCJkYXRlVG8iLCJkIiwiZ2VuRGF0ZUNlbGwiLCJpc1NlbGVjdGVkIiwiaXNUb2RheSIsImdlbkRhdGVDZWxscyIsImdlbkRhdGVSb3dzIiwiZGF0ZXNWTm9kZXMiLCJnZW5EYXRlcyIsImdlbldlZWsiLCJ3YXRjaEVmZmVjdCIsIlZEYXRlUGlja2VyWWVhcnMiLCJMSU1JVCIsIk9OX1RBQkxFIiwiQ0VMTFNfSU5fUk9XIiwiQ1VSUkVOVF9ZRUFSIiwieWVhcnMiLCJvblRhYmxlSW5kZXgiLCJpc0xpc3RDaGFuZ2VkIiwiY29tcHV0ZWRZZWFyIiwiY2hhbmdlWWVhcnNMaXN0Iiwic2V0Q3VycmVudFRyYW5zaXRpb24iLCJzZXRUYWJsZUluZGV4IiwibWF4IiwiZ2VuVGFibGVZZWFycyIsImZyb21ZZWFyIiwibWF4WWVhcnMiLCJ5ZWFyc0xpc3QiLCJnZW5ZZWFyQ2VsbCIsImdlblllYXJzUm93cyIsImN1cnJlbnRZZWFycyIsInllYXJzVk5vZGVzIiwiZ2VuWWVhcnMiLCJWRGF0ZVBpY2tlck1vbnRocyIsImxhbmciLCJNT05USFMiLCJDVVJSRU5UX01PTlRIIiwidXBkYXRlWWVhciIsImNvbXB1dGVkTW9udGgiLCJnZW5Nb250aENlbGwiLCJnZW5Nb250aFJvd3MiLCJtb250aHNWTm9kZXMiLCJydSIsImVuIiwiVkRhdGVQaWNrZXIiLCJ0eXBlYWJsZSIsInVzZU1scyIsInVzZVV0YyIsImhpZ2hsaWdodGVkIiwidGFibGVNb250aCIsInRhYmxlWWVhciIsImNvbnZlcnRlZERhdGVTdHJpbmciLCJpc1llYXJzIiwiaXNNb250aHMiLCJpc0RhdGVzIiwibG9jYWxlTW9udGhzIiwibG9jYWxlV2VlayIsInRhYmxlQ2xhc3NlcyIsInRhYmxlU3R5bGVzIiwiaGVhZGVyVmFsdWUiLCJkaXNwbGF5RGF0ZSIsInNldEluaXREYXRlIiwic2V0UGFyc2VkRGF0ZSIsImNvbnZlcnRUb0Zvcm1hdCIsIm9uVGFibGVDaGFuZ2UiLCJzZXREYXRhRGF0ZSIsImRhdGVGb3JQYXJzaW5nIiwib25ZZWFyVXBkYXRlIiwib25Nb250aFVwZGF0ZSIsIm9uRGF0ZVVwZGF0ZSIsIm9uRGF0ZU1vbnRoVXBkYXRlIiwib25EYXRlSW5wdXQiLCJzdHJpbmdUb0RhdGUiLCJkYXRlQXJyYXkiLCJqb2luIiwiZ2VuRGlzcGxheVZhbHVlIiwiZ2VuRGF0ZXBpY2tlckRpc3BsYXlJbm5lciIsImdlbkRhdGVwaWNrZXJEaXNwbGF5IiwiZ2VuRGF0ZXBpY2tlckhlYWRlciIsIm9uVGFibGUiLCJnZW5EYXRlcGlja2VyWWVhcnNUYWJsZSIsImdlbkRhdGVwaWNrZXJNb250aHNUYWJsZSIsImdlbkRhdGVwaWNrZXJEYXRlc1RhYmxlIiwiZ2VuRGF0ZXBpY2tlckJvZHkiLCJnZW5EYXRlcGlja2VySW5wdXQiLCJvbkNsZWFyIiwiZ2VuRGF0ZXBpY2tlclRhYmxlIiwiZ2VuRGF0ZXBpY2tlciIsIlZQcm9ncmVzc0xpbmVhciIsImJ1ZmZlclZhbHVlIiwiYmFja2dyb3VuZENvbG9yIiwiYmFja2dyb3VuZE9wYWNpdHkiLCJzdHJlYW0iLCJzdHJpcGVkIiwiZ2VuUHJvZ3Jlc3NCYXIiLCJiYXJXaWR0aCIsImdlblByb2dyZXNzQnVmZmVyIiwiYnVmZmVyV2lkdGgiLCJnZW5Qcm9ncmVzc0JhY2tncm91bmQiLCJvcGFjaXR5IiwiZ2VuUHJvZ3Jlc3NJbmRldGVybWluYXRlIiwiZ2VuUHJvZ3Jlc3NMaW5lYXIiLCJWQXV0b2NvbXBsZXRlIiwiaWRLZXkiLCJsaXN0Q29sb3IiLCJpc01lbnVBY3RpdmUiLCJzZWFyY2giLCJ2YWx1ZVByb3BlcnR5IiwiaW5wdXRWYWx1ZSIsImdlbkF1dG9jb21wbGV0ZUxpc3QiLCJnZW5MaW5lYXJQcm9ncmVzcyIsImdlbkF1dG9jb21wbGV0ZSIsImhhc1N0YXRlIiwiVnVlbGFuZCIsImFwcCIsImluc3RhbGxlZCIsImNvbXBvbmVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///433\n")},895:function(Q){Q.exports=__WEBPACK_EXTERNAL_MODULE__895__}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var B=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](B,B.exports,__webpack_require__),B.exports}__webpack_require__.d=function(Q,F){for(var B in F)__webpack_require__.o(F,B)&&!__webpack_require__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:F[B]})},__webpack_require__.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},__webpack_require__.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(433);return __webpack_exports__}()}));