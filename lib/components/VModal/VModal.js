import { h, shallowRef, watch, withDirectives, defineComponent, vShow, onMounted, } from 'vue';
import { overlayProps, useOverlay } from '../../composable/use-overlay';
import { transitionProps, useTransition } from '../../composable/use-transition';
import { useToggle } from '../../composable/use-toggle';
import { convertToUnit } from '../../helpers';
export default defineComponent({
    name: 'v-modal',
    props: {
        modelValue: Boolean,
        width: {
            type: [Number, String],
            default: null,
        },
        ...overlayProps(),
        ...transitionProps(),
    },
    emits: ['update:modelValue'],
    setup(props, { slots, emit }) {
        const { isActive } = useToggle(props);
        const modalRef = shallowRef(null);
        onMounted(() => {
            if (props.overlay) {
                const { createOverlay, removeOverlay } = useOverlay(props, modalRef.value);
                isActive.value && createOverlay();
                watch(() => isActive.value, (to) => {
                    to && createOverlay();
                    !to && removeOverlay();
                });
            }
        });
        function genContent() {
            const propsData = {
                class: 'v-modal__content',
                style: {
                    width: props.width ? convertToUnit(props.width) : '',
                },
            };
            return h('div', propsData, slots.default && slots.default());
        }
        function genModal() {
            const propsData = {
                class: 'v-modal',
                ref: modalRef,
                ['onUpdate:modelValue']: (val) => emit('update:modelValue', val),
            };
            return withDirectives(h('div', propsData, genContent()), [
                [vShow, isActive.value],
            ]);
        }
        return () => useTransition(genModal(), props.transition);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVk1vZGFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVk1vZGFsL1ZNb2RhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0wsQ0FBQyxFQUNELFVBQVUsRUFDVixLQUFLLEVBQ0wsY0FBYyxFQUNkLGVBQWUsRUFDZixLQUFLLEVBQ0wsU0FBUyxHQUNWLE1BQU0sS0FBSyxDQUFBO0FBR1osT0FBTyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQTtBQUN2RSxPQUFPLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxNQUFNLGlDQUFpQyxDQUFBO0FBQ2hGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQTtBQUl2RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBRTdDLGVBQWUsZUFBZSxDQUFDO0lBQzdCLElBQUksRUFBRSxTQUFTO0lBRWYsS0FBSyxFQUFFO1FBQ0wsVUFBVSxFQUFFLE9BQU87UUFDbkIsS0FBSyxFQUFFO1lBQ0wsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztZQUN0QixPQUFPLEVBQUUsSUFBSTtTQUNkO1FBQ0QsR0FBRyxZQUFZLEVBQUU7UUFDakIsR0FBRyxlQUFlLEVBQUU7S0FDZDtJQUVSLEtBQUssRUFBRSxDQUFDLG1CQUFtQixDQUFDO0lBRTVCLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO1FBQzFCLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUE7UUFFckMsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRWpDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDYixJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7Z0JBQ2pCLE1BQU0sRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLEdBQUcsVUFBVSxDQUNqRCxLQUFLLEVBQ0wsUUFBUSxDQUFDLEtBQU0sQ0FDaEIsQ0FBQTtnQkFFRCxRQUFRLENBQUMsS0FBSyxJQUFJLGFBQWEsRUFBRSxDQUFBO2dCQUVqQyxLQUFLLENBQ0gsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssRUFDcEIsQ0FBQyxFQUFFLEVBQUUsRUFBRTtvQkFDTCxFQUFFLElBQUksYUFBYSxFQUFFLENBQUE7b0JBQ3JCLENBQUMsRUFBRSxJQUFJLGFBQWEsRUFBRSxDQUFBO2dCQUN4QixDQUFDLENBQ0YsQ0FBQTthQUNGO1FBQ0gsQ0FBQyxDQUFDLENBQUE7UUFFRixTQUFTLFVBQVU7WUFDakIsTUFBTSxTQUFTLEdBQUc7Z0JBQ2hCLEtBQUssRUFBRSxrQkFBa0I7Z0JBQ3pCLEtBQUssRUFBRTtvQkFDTCxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtpQkFDckQ7YUFDRixDQUFBO1lBQ0QsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFBO1FBQzlELENBQUM7UUFFRCxTQUFTLFFBQVE7WUFDZixNQUFNLFNBQVMsR0FBRztnQkFDaEIsS0FBSyxFQUFFLFNBQVM7Z0JBQ2hCLEdBQUcsRUFBRSxRQUFRO2dCQUNiLENBQUMscUJBQXFCLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsQ0FBQzthQUNqRSxDQUFBO1lBRUQsT0FBTyxjQUFjLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRTtnQkFDdkQsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQzthQUN4QixDQUFDLENBQUE7UUFDSixDQUFDO1FBRUQsT0FBTyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQzFELENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBWdWUgQVBJXG5pbXBvcnQge1xuICBoLFxuICBzaGFsbG93UmVmLFxuICB3YXRjaCxcbiAgd2l0aERpcmVjdGl2ZXMsXG4gIGRlZmluZUNvbXBvbmVudCxcbiAgdlNob3csXG4gIG9uTW91bnRlZCxcbn0gZnJvbSAndnVlJ1xuXG4vLyBFZmZlY3RzXG5pbXBvcnQgeyBvdmVybGF5UHJvcHMsIHVzZU92ZXJsYXkgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlL3VzZS1vdmVybGF5J1xuaW1wb3J0IHsgdHJhbnNpdGlvblByb3BzLCB1c2VUcmFuc2l0aW9uIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZS91c2UtdHJhbnNpdGlvbidcbmltcG9ydCB7IHVzZVRvZ2dsZSB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGUvdXNlLXRvZ2dsZSdcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LW1vZGFsJyxcblxuICBwcm9wczoge1xuICAgIG1vZGVsVmFsdWU6IEJvb2xlYW4sXG4gICAgd2lkdGg6IHtcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gICAgLi4ub3ZlcmxheVByb3BzKCksXG4gICAgLi4udHJhbnNpdGlvblByb3BzKCksXG4gIH0gYXMgYW55LFxuXG4gIGVtaXRzOiBbJ3VwZGF0ZTptb2RlbFZhbHVlJ10sXG5cbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMsIGVtaXQgfSkge1xuICAgIGNvbnN0IHsgaXNBY3RpdmUgfSA9IHVzZVRvZ2dsZShwcm9wcylcblxuICAgIGNvbnN0IG1vZGFsUmVmID0gc2hhbGxvd1JlZihudWxsKVxuXG4gICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgIGlmIChwcm9wcy5vdmVybGF5KSB7XG4gICAgICAgIGNvbnN0IHsgY3JlYXRlT3ZlcmxheSwgcmVtb3ZlT3ZlcmxheSB9ID0gdXNlT3ZlcmxheShcbiAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICBtb2RhbFJlZi52YWx1ZSEsXG4gICAgICAgIClcblxuICAgICAgICBpc0FjdGl2ZS52YWx1ZSAmJiBjcmVhdGVPdmVybGF5KClcblxuICAgICAgICB3YXRjaChcbiAgICAgICAgICAoKSA9PiBpc0FjdGl2ZS52YWx1ZSxcbiAgICAgICAgICAodG8pID0+IHtcbiAgICAgICAgICAgIHRvICYmIGNyZWF0ZU92ZXJsYXkoKVxuICAgICAgICAgICAgIXRvICYmIHJlbW92ZU92ZXJsYXkoKVxuICAgICAgICAgIH0sXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgZnVuY3Rpb24gZ2VuQ29udGVudCgpOiBWTm9kZSB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiAndi1tb2RhbF9fY29udGVudCcsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgd2lkdGg6IHByb3BzLndpZHRoID8gY29udmVydFRvVW5pdChwcm9wcy53aWR0aCkgOiAnJyxcbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICAgIHJldHVybiBoKCdkaXYnLCBwcm9wc0RhdGEsIHNsb3RzLmRlZmF1bHQgJiYgc2xvdHMuZGVmYXVsdCgpKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbk1vZGFsKCkge1xuICAgICAgY29uc3QgcHJvcHNEYXRhID0ge1xuICAgICAgICBjbGFzczogJ3YtbW9kYWwnLFxuICAgICAgICByZWY6IG1vZGFsUmVmLFxuICAgICAgICBbJ29uVXBkYXRlOm1vZGVsVmFsdWUnXTogKHZhbCkgPT4gZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCB2YWwpLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gd2l0aERpcmVjdGl2ZXMoaCgnZGl2JywgcHJvcHNEYXRhLCBnZW5Db250ZW50KCkpLCBbXG4gICAgICAgIFt2U2hvdywgaXNBY3RpdmUudmFsdWVdLFxuICAgICAgXSlcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4gdXNlVHJhbnNpdGlvbihnZW5Nb2RhbCgpLCBwcm9wcy50cmFuc2l0aW9uKVxuICB9LFxufSlcbiJdfQ==