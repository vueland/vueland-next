import { defineComponent, h, computed } from 'vue';
import { useColors, colorProps } from '../../composables/use-colors';
import { sizeProps, useSize } from '../../composables/use-size';
import { convertToUnit } from '../../helpers';
import { useIcons } from '@/composables/use-icons';
export default defineComponent({
    name: 'v-icon',
    props: {
        disabled: Boolean,
        clickable: Boolean,
        size: [String, Number],
        icon: String,
        tag: {
            type: String,
            default: 'i',
        },
        ...colorProps(),
        ...sizeProps('sm'),
    },
    emits: ['click'],
    setup(props, { slots, emit }) {
        const { setTextCssColor, setTextClassNameColor } = useColors();
        const { isMaterial, iconsBaseClass } = useIcons();
        const { size } = useSize(props);
        const iconTag = props.clickable ? 'button' : props.tag;
        const computedIcon = computed(() => props.icon || slots.default?.());
        const classes = computed(() => ({
            'v-icon': true,
            'v-icon--disabled': props.disabled,
            'v-icon--clickable': props.clickable,
            [iconsBaseClass]: isMaterial,
            [computedIcon.value]: !!props.icon && !isMaterial,
            [size.value]: !props.size,
            ...(props.color ? setTextClassNameColor(props.color) : {}),
        }));
        const styles = computed(() => ({
            fontSize: props.size && convertToUnit(props.size),
            ...(props.color ? setTextCssColor(props.color) : {}),
        }));
        const onClick = () => {
            if (!props.disabled && props.clickable)
                emit('click');
        };
        return () => h(iconTag, {
            class: classes.value,
            style: styles.value,
            onClick,
        }, {
            default: () => isMaterial ? computedIcon.value : null,
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkljb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WSWNvbi9WSWNvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxLQUFLLENBQUE7QUFHbEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQTtBQUNwRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxNQUFNLDRCQUE0QixDQUFBO0FBRy9ELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFNN0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBRWxELGVBQWUsZUFBZSxDQUFDO0lBQzdCLElBQUksRUFBRSxRQUFRO0lBRWQsS0FBSyxFQUFFO1FBQ0wsUUFBUSxFQUFFLE9BQU87UUFDakIsU0FBUyxFQUFFLE9BQU87UUFDbEIsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztRQUN0QixJQUFJLEVBQUUsTUFBTTtRQUNaLEdBQUcsRUFBRTtZQUNILElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLEdBQUc7U0FDYjtRQUNELEdBQUcsVUFBVSxFQUFFO1FBQ2YsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDO0tBQ1o7SUFFUixLQUFLLEVBQUUsQ0FBQyxPQUFPLENBQUM7SUFFaEIsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7UUFDMUIsTUFBTSxFQUFFLGVBQWUsRUFBRSxxQkFBcUIsRUFBRSxHQUFHLFNBQVMsRUFBRSxDQUFBO1FBQzlELE1BQU0sRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLEdBQUcsUUFBUSxFQUFFLENBQUE7UUFDakQsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUMvQixNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUE7UUFFdEQsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFTLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQTtRQUU1RSxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQTBCLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDdkQsUUFBUSxFQUFFLElBQUk7WUFDZCxrQkFBa0IsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUNsQyxtQkFBbUIsRUFBRSxLQUFLLENBQUMsU0FBUztZQUNwQyxDQUFDLGNBQWMsQ0FBQyxFQUFFLFVBQVU7WUFDNUIsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVO1lBQ2pELENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUk7WUFDekIsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1NBQzNELENBQUMsQ0FBQyxDQUFBO1FBRUgsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUF5QixHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ3JELFFBQVEsRUFBRSxLQUFLLENBQUMsSUFBSSxJQUFJLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1lBQ2pELEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7U0FDckQsQ0FBQyxDQUFDLENBQUE7UUFFSCxNQUFNLE9BQU8sR0FBRyxHQUFHLEVBQUU7WUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLElBQUksS0FBSyxDQUFDLFNBQVM7Z0JBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ3ZELENBQUMsQ0FBQTtRQUVELE9BQU8sR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRTtZQUN0QixLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7WUFDcEIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLO1lBQ25CLE9BQU87U0FDUixFQUFFO1lBQ0QsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSTtTQUN0RCxDQUFDLENBQUE7SUFDSixDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVnVlIEFQSVxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcblxuLy8gQ29tcG9zYWJsZVxuaW1wb3J0IHsgdXNlQ29sb3JzLCBjb2xvclByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvdXNlLWNvbG9ycydcbmltcG9ydCB7IHNpemVQcm9wcywgdXNlU2l6ZSB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3VzZS1zaXplJ1xuXG4vLyBIZWxwZXJzXG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0IH0gZnJvbSAnLi4vLi4vaGVscGVycydcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuXG4vLyBTZXJ2aWNlc1xuaW1wb3J0IHsgdXNlSWNvbnMgfSBmcm9tICdAL2NvbXBvc2FibGVzL3VzZS1pY29ucydcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtaWNvbicsXG5cbiAgcHJvcHM6IHtcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICBjbGlja2FibGU6IEJvb2xlYW4sXG4gICAgc2l6ZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICBpY29uOiBTdHJpbmcsXG4gICAgdGFnOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnaScsXG4gICAgfSxcbiAgICAuLi5jb2xvclByb3BzKCksXG4gICAgLi4uc2l6ZVByb3BzKCdzbScpLFxuICB9IGFzIGFueSxcblxuICBlbWl0czogWydjbGljayddLFxuXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzLCBlbWl0IH0pOiAoKSA9PiBWTm9kZSB7XG4gICAgY29uc3QgeyBzZXRUZXh0Q3NzQ29sb3IsIHNldFRleHRDbGFzc05hbWVDb2xvciB9ID0gdXNlQ29sb3JzKClcbiAgICBjb25zdCB7IGlzTWF0ZXJpYWwsIGljb25zQmFzZUNsYXNzIH0gPSB1c2VJY29ucygpXG4gICAgY29uc3QgeyBzaXplIH0gPSB1c2VTaXplKHByb3BzKVxuICAgIGNvbnN0IGljb25UYWcgPSBwcm9wcy5jbGlja2FibGUgPyAnYnV0dG9uJyA6IHByb3BzLnRhZ1xuXG4gICAgY29uc3QgY29tcHV0ZWRJY29uID0gY29tcHV0ZWQ8c3RyaW5nPigoKSA9PiBwcm9wcy5pY29uIHx8IHNsb3RzLmRlZmF1bHQ/LigpKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PigoKSA9PiAoe1xuICAgICAgJ3YtaWNvbic6IHRydWUsXG4gICAgICAndi1pY29uLS1kaXNhYmxlZCc6IHByb3BzLmRpc2FibGVkLFxuICAgICAgJ3YtaWNvbi0tY2xpY2thYmxlJzogcHJvcHMuY2xpY2thYmxlLFxuICAgICAgW2ljb25zQmFzZUNsYXNzXTogaXNNYXRlcmlhbCxcbiAgICAgIFtjb21wdXRlZEljb24udmFsdWVdOiAhIXByb3BzLmljb24gJiYgIWlzTWF0ZXJpYWwsXG4gICAgICBbc2l6ZS52YWx1ZV06ICFwcm9wcy5zaXplLFxuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0VGV4dENsYXNzTmFtZUNvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IHN0eWxlcyA9IGNvbXB1dGVkPFJlY29yZDxzdHJpbmcsIHN0cmluZz4+KCgpID0+ICh7XG4gICAgICBmb250U2l6ZTogcHJvcHMuc2l6ZSAmJiBjb252ZXJ0VG9Vbml0KHByb3BzLnNpemUpLFxuICAgICAgLi4uKHByb3BzLmNvbG9yID8gc2V0VGV4dENzc0NvbG9yKHByb3BzLmNvbG9yKSA6IHt9KSxcbiAgICB9KSlcblxuICAgIGNvbnN0IG9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICBpZiAoIXByb3BzLmRpc2FibGVkICYmIHByb3BzLmNsaWNrYWJsZSkgZW1pdCgnY2xpY2snKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiBoKGljb25UYWcsIHtcbiAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgc3R5bGU6IHN0eWxlcy52YWx1ZSxcbiAgICAgIG9uQ2xpY2ssXG4gICAgfSwge1xuICAgICAgZGVmYXVsdDogKCkgPT4gaXNNYXRlcmlhbCA/IGNvbXB1dGVkSWNvbi52YWx1ZSA6IG51bGwsXG4gICAgfSlcbiAgfSxcbn0pXG4iXX0=