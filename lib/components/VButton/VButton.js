import { defineComponent, h, computed } from 'vue';
import { useColors } from '../../composables/use-colors';
import { elevationProps, useElevation } from '../../composables/use-elevation';
import { usePosition } from '../../composables/use-position';
import { VProgressCircular } from '../VProgressCircular';
import { convertToUnit } from '../../helpers';
export default defineComponent({
    name: 'v-button',
    props: {
        disabled: Boolean,
        outlined: Boolean,
        rounded: Boolean,
        round: Boolean,
        absolute: Boolean,
        loading: Boolean,
        left: Boolean,
        right: Boolean,
        text: Boolean,
        dark: Boolean,
        label: String,
        width: [String, Number],
        height: [String, Number],
        color: {
            type: String,
            default: 'grey lighten-1',
        },
        ...elevationProps(),
    },
    emits: ['click'],
    setup(props, { slots, emit }) {
        const { setTextClassNameColor, setBackgroundClassNameColor, setBackgroundCssColor, setTextCssColor, } = useColors();
        const { elevationClasses } = useElevation(props);
        const { positionClasses } = usePosition(props);
        const isFlat = computed(() => {
            return props.text || props.outlined;
        });
        const isLoadable = computed(() => {
            return !props.text && !props.outlined && props.loading;
        });
        const isElevetable = computed(() => {
            return !isLoadable.value && !props.disabled;
        });
        const classes = computed(() => {
            const elevations = isElevetable.value ? elevationClasses.value : {};
            return {
                'v-button': true,
                'v-button--text': props.text || props.outlined,
                'v-button--outlined': props.outlined,
                'v-button--rounded': !props.round && props.rounded,
                'v-button--round': props.round,
                'v-button--disabled': props.disabled || isLoadable.value,
                'v-button--loading': props.loading,
                ...elevations,
                ...positionClasses.value,
                ...(props.color && isFlat.value
                    ? setTextClassNameColor(props.color)
                    : {}),
                ...(props.color && !isFlat.value
                    ? setBackgroundClassNameColor(props.color)
                    : {}),
            };
        });
        const styles = computed(() => {
            const width = props.width || 40;
            const height = props.round ? width : props.height ? props.height : '';
            return {
                width: (props.width || props.round) && convertToUnit(width),
                height: !!height && convertToUnit(height),
                ...(props.color && isFlat.value ? setTextCssColor(props.color) : {}),
                ...(props.color && !isFlat.value
                    ? setBackgroundCssColor(props.color)
                    : {}),
            };
        });
        const genLoader = () => {
            return h('span', {
                class: 'v-button__loader',
            }, (slots.loading && slots.loading()) ||
                h(VProgressCircular, {
                    indeterminate: true,
                    size: 23,
                    width: 2,
                }));
        };
        const genLabel = () => {
            return h('span', {
                class: 'v-button__label',
            }, props.label);
        };
        const genContent = () => {
            return h('div', { class: 'v-button__content' }, [(slots.default && slots.default()) || (props.label && genLabel())]);
        };
        return () => h('button', {
            class: classes.value,
            style: styles.value,
            onClick: () => !props.disabled && emit('click'),
        }, [genContent(), props.loading && genLoader()]);
    },
});
//# sourceMappingURL=data:application/json;base64,