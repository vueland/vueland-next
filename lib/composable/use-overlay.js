import { render } from 'vue';
import { VOverlay } from '../components/VOverlay';
import { addOnceListener } from '../helpers';
export function overlayProps() {
    return {
        overlay: Boolean,
        overlayColor: {
            type: String,
            default: '#000000',
        },
    };
}
export function useOverlay(props, overlayOn) {
    const container = document.createElement('div');
    const overlayProps = {
        active: false,
        color: props.overlayColor,
    };
    let overlayElement = null;
    const overlayVNode = () => {
        return VOverlay.setup(overlayProps, {});
    };
    const renderOverlay = () => render(overlayVNode(), container);
    const createOverlay = () => {
        overlayOn?.parentNode?.insertBefore(overlayElement, overlayOn);
        overlayElement?.classList.remove('v-overlay--hidden');
        requestAnimationFrame(() => {
            overlayElement?.classList.add('v-overlay--active');
        });
    };
    const removeOverlay = () => {
        overlayElement.classList.remove('v-overlay--active');
        requestAnimationFrame(() => {
            overlayElement?.classList.add('v-overlay--hidden');
        });
        const remove = () => {
            overlayElement?.parentNode?.removeChild(overlayElement);
        };
        addOnceListener(overlayElement, 'transitionend', remove);
    };
    renderOverlay();
    overlayElement = container.firstChild;
    return {
        createOverlay,
        removeOverlay,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLW92ZXJsYXkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9zYWJsZS91c2Utb3ZlcmxheS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sS0FBSyxDQUFBO0FBRzVCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQTtBQU1qRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBUTVDLE1BQU0sVUFBVSxZQUFZO0lBQzFCLE9BQU87UUFDTCxPQUFPLEVBQUUsT0FBTztRQUNoQixZQUFZLEVBQUU7WUFDWixJQUFJLEVBQUUsTUFBTTtZQUNaLE9BQU8sRUFBRSxTQUFTO1NBQ25CO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFDLEtBQVUsRUFBRSxTQUFtQjtJQUN4RCxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBRS9DLE1BQU0sWUFBWSxHQUFHO1FBQ25CLE1BQU0sRUFBRSxLQUFLO1FBQ2IsS0FBSyxFQUFFLEtBQUssQ0FBQyxZQUFZO0tBQzFCLENBQUE7SUFFRCxJQUFJLGNBQWMsR0FBdUIsSUFBSSxDQUFBO0lBRTdDLE1BQU0sWUFBWSxHQUFHLEdBQUcsRUFBRTtRQUN4QixPQUFPLFFBQVEsQ0FBQyxLQUFNLENBQ3BCLFlBQXFDLEVBQ3JDLEVBQWtCLENBQ25CLENBQUE7SUFDSCxDQUFDLENBQUE7SUFFRCxNQUFNLGFBQWEsR0FBRyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFXLEVBQUUsU0FBVSxDQUFDLENBQUE7SUFFdkUsTUFBTSxhQUFhLEdBQUcsR0FBRyxFQUFFO1FBQ3pCLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxDQUFDLGNBQWUsRUFBRSxTQUFTLENBQUMsQ0FBQTtRQUMvRCxjQUFjLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1FBRXJELHFCQUFxQixDQUFDLEdBQUcsRUFBRTtZQUN6QixjQUFjLEVBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1FBQ3BELENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFBO0lBRUQsTUFBTSxhQUFhLEdBQUcsR0FBRyxFQUFFO1FBQ3pCLGNBQWUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUE7UUFFckQscUJBQXFCLENBQUMsR0FBRyxFQUFFO1lBQ3pCLGNBQWMsRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUE7UUFDcEQsQ0FBQyxDQUFDLENBQUE7UUFFRixNQUFNLE1BQU0sR0FBRyxHQUFHLEVBQUU7WUFDbEIsY0FBYyxFQUFFLFVBQVUsRUFBRSxXQUFXLENBQUMsY0FBZSxDQUFDLENBQUE7UUFDMUQsQ0FBQyxDQUFBO1FBRUQsZUFBZSxDQUFDLGNBQWUsRUFBRSxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDM0QsQ0FBQyxDQUFBO0lBRUQsYUFBYSxFQUFFLENBQUE7SUFFZixjQUFjLEdBQUcsU0FBUyxDQUFDLFVBQXlCLENBQUE7SUFFcEQsT0FBTztRQUNMLGFBQWE7UUFDYixhQUFhO0tBQ2QsQ0FBQTtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIgfSBmcm9tICd2dWUnXG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZPdmVybGF5IH0gZnJvbSAnLi4vY29tcG9uZW50cy9WT3ZlcmxheSdcblxuLy8gVHlwZXNcbmltcG9ydCB7IFNldHVwQ29udGV4dCwgVk5vZGUgfSBmcm9tICd2dWUnXG5cbi8vIEhlbHBlcnNcbmltcG9ydCB7IGFkZE9uY2VMaXN0ZW5lciB9IGZyb20gJy4uL2hlbHBlcnMnXG5pbXBvcnQgeyBNYXliZSB9IGZyb20gJy4uLy4uL3R5cGVzL2Jhc2UnXG5cbmludGVyZmFjZSBPdmVybGF5Q29udHJvbGxlciB7XG4gIGNyZWF0ZU92ZXJsYXk6ICgpID0+IHZvaWRcbiAgcmVtb3ZlT3ZlcmxheTogKCkgPT4gdm9pZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gb3ZlcmxheVByb3BzKCkge1xuICByZXR1cm4ge1xuICAgIG92ZXJsYXk6IEJvb2xlYW4sXG4gICAgb3ZlcmxheUNvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnIzAwMDAwMCcsXG4gICAgfSxcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlT3ZlcmxheShwcm9wczogYW55LCBvdmVybGF5T24/OiBFbGVtZW50KTogT3ZlcmxheUNvbnRyb2xsZXIge1xuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuXG4gIGNvbnN0IG92ZXJsYXlQcm9wcyA9IHtcbiAgICBhY3RpdmU6IGZhbHNlLFxuICAgIGNvbG9yOiBwcm9wcy5vdmVybGF5Q29sb3IsXG4gIH1cblxuICBsZXQgb3ZlcmxheUVsZW1lbnQ6IE1heWJlPEhUTUxFbGVtZW50PiA9IG51bGxcblxuICBjb25zdCBvdmVybGF5Vk5vZGUgPSAoKSA9PiB7XG4gICAgcmV0dXJuIFZPdmVybGF5LnNldHVwIShcbiAgICAgIG92ZXJsYXlQcm9wcyBhcyB0eXBlb2YgVk92ZXJsYXkucHJvcHMsXG4gICAgICB7fSBhcyBTZXR1cENvbnRleHQsXG4gICAgKVxuICB9XG5cbiAgY29uc3QgcmVuZGVyT3ZlcmxheSA9ICgpID0+IHJlbmRlcihvdmVybGF5Vk5vZGUoKSBhcyBWTm9kZSwgY29udGFpbmVyISlcblxuICBjb25zdCBjcmVhdGVPdmVybGF5ID0gKCkgPT4ge1xuICAgIG92ZXJsYXlPbj8ucGFyZW50Tm9kZT8uaW5zZXJ0QmVmb3JlKG92ZXJsYXlFbGVtZW50ISwgb3ZlcmxheU9uKVxuICAgIG92ZXJsYXlFbGVtZW50Py5jbGFzc0xpc3QucmVtb3ZlKCd2LW92ZXJsYXktLWhpZGRlbicpXG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgb3ZlcmxheUVsZW1lbnQ/LmNsYXNzTGlzdC5hZGQoJ3Ytb3ZlcmxheS0tYWN0aXZlJylcbiAgICB9KVxuICB9XG5cbiAgY29uc3QgcmVtb3ZlT3ZlcmxheSA9ICgpID0+IHtcbiAgICBvdmVybGF5RWxlbWVudCEuY2xhc3NMaXN0LnJlbW92ZSgndi1vdmVybGF5LS1hY3RpdmUnKVxuXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIG92ZXJsYXlFbGVtZW50Py5jbGFzc0xpc3QuYWRkKCd2LW92ZXJsYXktLWhpZGRlbicpXG4gICAgfSlcblxuICAgIGNvbnN0IHJlbW92ZSA9ICgpID0+IHtcbiAgICAgIG92ZXJsYXlFbGVtZW50Py5wYXJlbnROb2RlPy5yZW1vdmVDaGlsZChvdmVybGF5RWxlbWVudCEpXG4gICAgfVxuXG4gICAgYWRkT25jZUxpc3RlbmVyKG92ZXJsYXlFbGVtZW50ISwgJ3RyYW5zaXRpb25lbmQnLCByZW1vdmUpXG4gIH1cblxuICByZW5kZXJPdmVybGF5KClcblxuICBvdmVybGF5RWxlbWVudCA9IGNvbnRhaW5lci5maXJzdENoaWxkIGFzIEhUTUxFbGVtZW50XG5cbiAgcmV0dXJuIHtcbiAgICBjcmVhdGVPdmVybGF5LFxuICAgIHJlbW92ZU92ZXJsYXksXG4gIH1cbn1cbiJdfQ==