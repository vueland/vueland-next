import './VModal.scss';
import { h, ref, watch, withDirectives, defineComponent, vShow, onMounted, } from 'vue';
import { overlayProps, useOverlay } from '../../effects/use-overlay';
import { transitionProps, useTransition } from '../../effects/use-transition';
import { useToggle } from '../../effects/use-toggle';
export const VModal = defineComponent({
    name: 'v-modal',
    props: {
        modelValue: Boolean,
        ...overlayProps(),
        ...transitionProps(),
    },
    setup(props, { slots, emit }) {
        const { isActive } = useToggle(props);
        const modalRef = ref(null);
        onMounted(() => {
            if (props.overlay) {
                const { createOverlay, removeOverlay } = useOverlay(props, modalRef.value);
                isActive.value && createOverlay();
                watch(() => isActive.value, to => {
                    to && createOverlay();
                    !to && removeOverlay();
                });
            }
        });
        function genContent() {
            const propsData = {
                class: 'v-modal__content',
            };
            return h('div', propsData, slots.default && slots.default());
        }
        function genModal() {
            const propsData = {
                class: 'v-modal',
                ref: modalRef,
                ['onUpdate:modelValue']: val => emit('update:modelValue', val),
            };
            return withDirectives(h('div', propsData, genContent()), [[vShow, isActive.value]]);
        }
        return () => useTransition(genModal(), props.transition);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVk1vZGFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVk1vZGFsL1ZNb2RhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLGVBQWUsQ0FBQTtBQUd0QixPQUFPLEVBQ0wsQ0FBQyxFQUNELEdBQUcsRUFDSCxLQUFLLEVBQ0wsY0FBYyxFQUNkLGVBQWUsRUFDZixLQUFLLEVBQ0wsU0FBUyxHQUNWLE1BQU0sS0FBSyxDQUFBO0FBR1osT0FBTyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQTtBQUNwRSxPQUFPLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxNQUFNLDhCQUE4QixDQUFBO0FBQzdFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUtwRCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsZUFBZSxDQUFDO0lBQ3BDLElBQUksRUFBRSxTQUFTO0lBRWYsS0FBSyxFQUFFO1FBQ0wsVUFBVSxFQUFFLE9BQU87UUFDbkIsR0FBRyxZQUFZLEVBQUU7UUFDakIsR0FBRyxlQUFlLEVBQUU7S0FDZDtJQUVSLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO1FBQzFCLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUE7UUFFckMsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRTFCLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDYixJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7Z0JBQ2pCLE1BQU0sRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLEdBQUcsVUFBVSxDQUNqRCxLQUFLLEVBQ0wsUUFBUSxDQUFDLEtBQU0sQ0FDaEIsQ0FBQTtnQkFFRCxRQUFRLENBQUMsS0FBSyxJQUFJLGFBQWEsRUFBRSxDQUFBO2dCQUVqQyxLQUFLLENBQ0gsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssRUFDcEIsRUFBRSxDQUFDLEVBQUU7b0JBQ0gsRUFBRSxJQUFJLGFBQWEsRUFBRSxDQUFBO29CQUNyQixDQUFDLEVBQUUsSUFBSSxhQUFhLEVBQUUsQ0FBQTtnQkFDeEIsQ0FBQyxDQUNGLENBQUE7YUFDRjtRQUNILENBQUMsQ0FBQyxDQUFBO1FBRUYsU0FBUyxVQUFVO1lBQ2pCLE1BQU0sU0FBUyxHQUFHO2dCQUNoQixLQUFLLEVBQUUsa0JBQWtCO2FBQzFCLENBQUE7WUFDRCxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxPQUFPLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7UUFDOUQsQ0FBQztRQUVELFNBQVMsUUFBUTtZQUNmLE1BQU0sU0FBUyxHQUFHO2dCQUNoQixLQUFLLEVBQUUsU0FBUztnQkFDaEIsR0FBRyxFQUFFLFFBQVE7Z0JBQ2IsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsQ0FBQzthQUMvRCxDQUFBO1lBRUQsT0FBTyxjQUFjLENBQ25CLENBQUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQ2pDLENBQUMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQzFCLENBQUE7UUFDSCxDQUFDO1FBRUQsT0FBTyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQzFELENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTdHlsZXNcbmltcG9ydCAnLi9WTW9kYWwuc2NzcydcblxuLy8gVnVlIEFQSVxuaW1wb3J0IHtcbiAgaCxcbiAgcmVmLFxuICB3YXRjaCxcbiAgd2l0aERpcmVjdGl2ZXMsXG4gIGRlZmluZUNvbXBvbmVudCxcbiAgdlNob3csXG4gIG9uTW91bnRlZCxcbn0gZnJvbSAndnVlJ1xuXG4vLyBFZmZlY3RzXG5pbXBvcnQgeyBvdmVybGF5UHJvcHMsIHVzZU92ZXJsYXkgfSBmcm9tICcuLi8uLi9lZmZlY3RzL3VzZS1vdmVybGF5J1xuaW1wb3J0IHsgdHJhbnNpdGlvblByb3BzLCB1c2VUcmFuc2l0aW9uIH0gZnJvbSAnLi4vLi4vZWZmZWN0cy91c2UtdHJhbnNpdGlvbidcbmltcG9ydCB7IHVzZVRvZ2dsZSB9IGZyb20gJy4uLy4uL2VmZmVjdHMvdXNlLXRvZ2dsZSdcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuXG5leHBvcnQgY29uc3QgVk1vZGFsID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtbW9kYWwnLFxuXG4gIHByb3BzOiB7XG4gICAgbW9kZWxWYWx1ZTogQm9vbGVhbixcbiAgICAuLi5vdmVybGF5UHJvcHMoKSxcbiAgICAuLi50cmFuc2l0aW9uUHJvcHMoKSxcbiAgfSBhcyBhbnksXG5cbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMsIGVtaXQgfSkge1xuICAgIGNvbnN0IHsgaXNBY3RpdmUgfSA9IHVzZVRvZ2dsZShwcm9wcylcblxuICAgIGNvbnN0IG1vZGFsUmVmID0gcmVmKG51bGwpXG5cbiAgICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgICAgaWYgKHByb3BzLm92ZXJsYXkpIHtcbiAgICAgICAgY29uc3QgeyBjcmVhdGVPdmVybGF5LCByZW1vdmVPdmVybGF5IH0gPSB1c2VPdmVybGF5KFxuICAgICAgICAgIHByb3BzLFxuICAgICAgICAgIG1vZGFsUmVmLnZhbHVlISxcbiAgICAgICAgKVxuXG4gICAgICAgIGlzQWN0aXZlLnZhbHVlICYmIGNyZWF0ZU92ZXJsYXkoKVxuXG4gICAgICAgIHdhdGNoKFxuICAgICAgICAgICgpID0+IGlzQWN0aXZlLnZhbHVlLFxuICAgICAgICAgIHRvID0+IHtcbiAgICAgICAgICAgIHRvICYmIGNyZWF0ZU92ZXJsYXkoKVxuICAgICAgICAgICAgIXRvICYmIHJlbW92ZU92ZXJsYXkoKVxuICAgICAgICAgIH0sXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgZnVuY3Rpb24gZ2VuQ29udGVudCgpOiBWTm9kZSB7XG4gICAgICBjb25zdCBwcm9wc0RhdGEgPSB7XG4gICAgICAgIGNsYXNzOiAndi1tb2RhbF9fY29udGVudCcsXG4gICAgICB9XG4gICAgICByZXR1cm4gaCgnZGl2JywgcHJvcHNEYXRhLCBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5Nb2RhbCgpIHtcbiAgICAgIGNvbnN0IHByb3BzRGF0YSA9IHtcbiAgICAgICAgY2xhc3M6ICd2LW1vZGFsJyxcbiAgICAgICAgcmVmOiBtb2RhbFJlZixcbiAgICAgICAgWydvblVwZGF0ZTptb2RlbFZhbHVlJ106IHZhbCA9PiBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIHZhbCksXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB3aXRoRGlyZWN0aXZlcyhcbiAgICAgICAgaCgnZGl2JywgcHJvcHNEYXRhLCBnZW5Db250ZW50KCkpLFxuICAgICAgICBbW3ZTaG93LCBpc0FjdGl2ZS52YWx1ZV1dLFxuICAgICAgKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB1c2VUcmFuc2l0aW9uKGdlbk1vZGFsKCksIHByb3BzLnRyYW5zaXRpb24pXG4gIH0sXG59KVxuIl19