import { render, h } from 'vue';
import { VOverlay } from '../components/VOverlay';
import { addOnceListener } from '../helpers';
export const overlayProps = () => ({
    overlay: Boolean,
    overlayColor: {
        type: String,
        default: '#000000'
    }
});
export const useOverlay = (props, overlayOn) => {
    const container = document.createElement('div');
    let overlayElement = null;
    const renderOverlay = () => render(h(VOverlay, { active: false, color: props.overlayColor }), container);
    const createOverlay = () => {
        overlayElement.style.zIndex = `${props.zIndex - 1}`;
        overlayOn.style.zIndex = `${props.zIndex}`;
        overlayOn?.parentNode?.insertBefore(overlayElement, overlayOn);
        overlayElement?.classList.remove('v-overlay--hidden');
        requestAnimationFrame(() => {
            overlayElement?.classList.add('v-overlay--active');
        });
    };
    const removeOverlay = () => {
        overlayElement.classList.remove('v-overlay--active');
        requestAnimationFrame(() => {
            overlayElement?.classList.add('v-overlay--hidden');
        });
        const remove = () => {
            overlayElement?.parentNode?.removeChild(overlayElement);
        };
        addOnceListener(overlayElement, 'transitionend', remove);
    };
    renderOverlay();
    overlayElement = container.firstChild;
    return {
        createOverlay,
        removeOverlay
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLW92ZXJsYXkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9zYWJsZXMvdXNlLW92ZXJsYXkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsTUFBTSxLQUFLLENBQUE7QUFHL0IsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHdCQUF3QixDQUFBO0FBSWpELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFPNUMsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDakMsT0FBTyxFQUFFLE9BQU87SUFDaEIsWUFBWSxFQUFFO1FBQ1osSUFBSSxFQUFFLE1BQU07UUFDWixPQUFPLEVBQUUsU0FBUztLQUNuQjtDQUNGLENBQUMsQ0FBQTtBQUVGLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUFDLEtBQVUsRUFBRSxTQUF1QixFQUFxQixFQUFFO0lBQ25GLE1BQU0sU0FBUyxHQUFnQixRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBRTVELElBQUksY0FBYyxHQUF1QixJQUFJLENBQUE7SUFFN0MsTUFBTSxhQUFhLEdBQUcsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUNoQyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDLEVBQ3pELFNBQVUsQ0FDWCxDQUFBO0lBRUQsTUFBTSxhQUFhLEdBQUcsR0FBRyxFQUFFO1FBQ3pCLGNBQWUsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEdBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFFLEVBQUUsQ0FBQTtRQUN0RCxTQUFVLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxHQUFJLEtBQUssQ0FBQyxNQUFPLEVBQUUsQ0FBQTtRQUU3QyxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksQ0FBQyxjQUFlLEVBQUUsU0FBUyxDQUFDLENBQUE7UUFDL0QsY0FBYyxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtRQUVyRCxxQkFBcUIsQ0FBQyxHQUFHLEVBQUU7WUFDekIsY0FBYyxFQUFFLFNBQVMsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtRQUNwRCxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQTtJQUVELE1BQU0sYUFBYSxHQUFHLEdBQUcsRUFBRTtRQUN6QixjQUFlLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1FBRXJELHFCQUFxQixDQUFDLEdBQUcsRUFBRTtZQUN6QixjQUFjLEVBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1FBQ3BELENBQUMsQ0FBQyxDQUFBO1FBRUYsTUFBTSxNQUFNLEdBQUcsR0FBRyxFQUFFO1lBQ2xCLGNBQWMsRUFBRSxVQUFVLEVBQUUsV0FBVyxDQUFDLGNBQWUsQ0FBQyxDQUFBO1FBQzFELENBQUMsQ0FBQTtRQUVELGVBQWUsQ0FBQyxjQUFlLEVBQUUsZUFBZSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQzNELENBQUMsQ0FBQTtJQUVELGFBQWEsRUFBRSxDQUFBO0lBQ2YsY0FBYyxHQUFHLFNBQVMsQ0FBQyxVQUF5QixDQUFBO0lBRXBELE9BQU87UUFDTCxhQUFhO1FBQ2IsYUFBYTtLQUNkLENBQUE7QUFDSCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIsIGggfSBmcm9tICd2dWUnXG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZPdmVybGF5IH0gZnJvbSAnLi4vY29tcG9uZW50cy9WT3ZlcmxheSdcbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vLi4vdHlwZXMvYmFzZSdcblxuLy8gSGVscGVyc1xuaW1wb3J0IHsgYWRkT25jZUxpc3RlbmVyIH0gZnJvbSAnLi4vaGVscGVycydcblxuaW50ZXJmYWNlIE92ZXJsYXlDb250cm9sbGVyIHtcbiAgY3JlYXRlT3ZlcmxheTogKCkgPT4gdm9pZFxuICByZW1vdmVPdmVybGF5OiAoKSA9PiB2b2lkXG59XG5cbmV4cG9ydCBjb25zdCBvdmVybGF5UHJvcHMgPSAoKSA9PiAoe1xuICBvdmVybGF5OiBCb29sZWFuLFxuICBvdmVybGF5Q29sb3I6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJyMwMDAwMDAnXG4gIH1cbn0pXG5cbmV4cG9ydCBjb25zdCB1c2VPdmVybGF5ID0gKHByb3BzOiBhbnksIG92ZXJsYXlPbj86IEhUTUxFbGVtZW50KTogT3ZlcmxheUNvbnRyb2xsZXIgPT4ge1xuICBjb25zdCBjb250YWluZXI6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcblxuICBsZXQgb3ZlcmxheUVsZW1lbnQ6IE1heWJlPEhUTUxFbGVtZW50PiA9IG51bGxcblxuICBjb25zdCByZW5kZXJPdmVybGF5ID0gKCkgPT4gcmVuZGVyKFxuICAgIGgoVk92ZXJsYXksIHsgYWN0aXZlOiBmYWxzZSwgY29sb3I6IHByb3BzLm92ZXJsYXlDb2xvciB9KSxcbiAgICBjb250YWluZXIhXG4gIClcblxuICBjb25zdCBjcmVhdGVPdmVybGF5ID0gKCkgPT4ge1xuICAgIG92ZXJsYXlFbGVtZW50IS5zdHlsZS56SW5kZXggPSBgJHsgcHJvcHMuekluZGV4IC0gMSB9YFxuICAgIG92ZXJsYXlPbiEuc3R5bGUuekluZGV4ID0gYCR7IHByb3BzLnpJbmRleCB9YFxuXG4gICAgb3ZlcmxheU9uPy5wYXJlbnROb2RlPy5pbnNlcnRCZWZvcmUob3ZlcmxheUVsZW1lbnQhLCBvdmVybGF5T24pXG4gICAgb3ZlcmxheUVsZW1lbnQ/LmNsYXNzTGlzdC5yZW1vdmUoJ3Ytb3ZlcmxheS0taGlkZGVuJylcblxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBvdmVybGF5RWxlbWVudD8uY2xhc3NMaXN0LmFkZCgndi1vdmVybGF5LS1hY3RpdmUnKVxuICAgIH0pXG4gIH1cblxuICBjb25zdCByZW1vdmVPdmVybGF5ID0gKCkgPT4ge1xuICAgIG92ZXJsYXlFbGVtZW50IS5jbGFzc0xpc3QucmVtb3ZlKCd2LW92ZXJsYXktLWFjdGl2ZScpXG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgb3ZlcmxheUVsZW1lbnQ/LmNsYXNzTGlzdC5hZGQoJ3Ytb3ZlcmxheS0taGlkZGVuJylcbiAgICB9KVxuXG4gICAgY29uc3QgcmVtb3ZlID0gKCkgPT4ge1xuICAgICAgb3ZlcmxheUVsZW1lbnQ/LnBhcmVudE5vZGU/LnJlbW92ZUNoaWxkKG92ZXJsYXlFbGVtZW50ISlcbiAgICB9XG5cbiAgICBhZGRPbmNlTGlzdGVuZXIob3ZlcmxheUVsZW1lbnQhLCAndHJhbnNpdGlvbmVuZCcsIHJlbW92ZSlcbiAgfVxuXG4gIHJlbmRlck92ZXJsYXkoKVxuICBvdmVybGF5RWxlbWVudCA9IGNvbnRhaW5lci5maXJzdENoaWxkIGFzIEhUTUxFbGVtZW50XG5cbiAgcmV0dXJuIHtcbiAgICBjcmVhdGVPdmVybGF5LFxuICAgIHJlbW92ZU92ZXJsYXlcbiAgfVxufVxuIl19