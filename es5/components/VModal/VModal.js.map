{"version":3,"sources":["../../../../src/components/VModal/VModal.ts"],"names":[],"mappings":";;;;;;;AACA;;AAGA;;AAWA;;AACA;;AACA;;;;;;;;AAKO,IAAM,MAAM,GAAG,0BAAgB;AACpC,EAAA,IAAI,EAAE,SAD8B;AAGpC,EAAA,KAAK;AACH,IAAA,UAAU,EAAE;AADT,KAEA,gCAFA,GAGA,qCAHA,CAH+B;AASpC,EAAA,KAAK,EAAE,CAAC,mBAAD,CAT6B;AAWpC,EAAA,KAXoC,iBAW9B,KAX8B,QAWR;AAAA,QAAb,KAAa,QAAb,KAAa;AAAA,QAAN,IAAM,QAAN,IAAM;;AAAA,qBACL,2BAAU,KAAV,CADK;AAAA,QAClB,QADkB,cAClB,QADkB;;AAG1B,QAAM,QAAQ,GAAG,cAAI,IAAJ,CAAjB;AAEA,wBAAU,YAAK;AACb,UAAI,KAAK,CAAC,OAAV,EAAmB;AAAA,0BACwB,6BACvC,KADuC,EAEvC,QAAQ,CAAC,KAF8B,CADxB;AAAA,YACT,aADS,eACT,aADS;AAAA,YACM,aADN,eACM,aADN;;AAMjB,QAAA,QAAQ,CAAC,KAAT,IAAkB,aAAa,EAA/B;AAEA,wBACE;AAAA,iBAAM,QAAQ,CAAC,KAAf;AAAA,SADF,EAEE,UAAC,EAAD,EAAO;AACL,UAAA,EAAE,IAAI,aAAa,EAAnB;AACA,WAAC,EAAD,IAAO,aAAa,EAApB;AACD,SALH;AAOD;AACF,KAjBD;;AAmBA,aAAS,UAAT,GAAmB;AACjB,UAAM,SAAS,GAAG;AAChB,iBAAO;AADS,OAAlB;AAGA,aAAO,YAAE,KAAF,EAAS,SAAT,EAAoB,KAAK,WAAL,IAAiB,KAAK,WAAL,EAArC,CAAP;AACD;;AAED,aAAS,QAAT,GAAiB;AACf,UAAM,SAAS;AACb,iBAAO,SADM;AAEb,QAAA,GAAG,EAAE;AAFQ,SAGZ,qBAHY,EAGY,4BAAC,GAAD;AAAA,eAAS,IAAI,CAAC,mBAAD,EAAsB,GAAtB,CAAb;AAAA,OAHZ,CAAf;;AAMA,aAAO,yBAAe,YAAE,KAAF,EAAS,SAAT,EAAoB,UAAU,EAA9B,CAAf,EAAkD,CACvD,CAAC,UAAD,EAAQ,QAAQ,CAAC,KAAjB,CADuD,CAAlD,CAAP;AAGD;;AAED,WAAO;AAAA,aAAM,kCAAc,QAAQ,EAAtB,EAA0B,KAAK,CAAC,UAAhC,CAAN;AAAA,KAAP;AACD;AAvDmC,CAAhB,CAAf","sourcesContent":["// Styles\nimport './VModal.scss'\n\n// Vue API\nimport {\n  h,\n  ref,\n  watch,\n  withDirectives,\n  defineComponent,\n  vShow,\n  onMounted,\n} from 'vue'\n\n// Effects\nimport { overlayProps, useOverlay } from '../../effects/use-overlay'\nimport { transitionProps, useTransition } from '../../effects/use-transition'\nimport { useToggle } from '../../effects/use-toggle'\n\n// Types\nimport { VNode } from 'vue'\n\nexport const VModal = defineComponent({\n  name: 'v-modal',\n\n  props: {\n    modelValue: Boolean,\n    ...overlayProps(),\n    ...transitionProps(),\n  } as any,\n\n  emits: ['update:modelValue'],\n\n  setup(props, { slots, emit }) {\n    const { isActive } = useToggle(props)\n\n    const modalRef = ref(null)\n\n    onMounted(() => {\n      if (props.overlay) {\n        const { createOverlay, removeOverlay } = useOverlay(\n          props,\n          modalRef.value!\n        )\n\n        isActive.value && createOverlay()\n\n        watch(\n          () => isActive.value,\n          (to) => {\n            to && createOverlay()\n            !to && removeOverlay()\n          }\n        )\n      }\n    })\n\n    function genContent(): VNode {\n      const propsData = {\n        class: 'v-modal__content',\n      }\n      return h('div', propsData, slots.default && slots.default())\n    }\n\n    function genModal() {\n      const propsData = {\n        class: 'v-modal',\n        ref: modalRef,\n        ['onUpdate:modelValue']: (val) => emit('update:modelValue', val),\n      }\n\n      return withDirectives(h('div', propsData, genContent()), [\n        [vShow, isActive.value],\n      ])\n    }\n\n    return () => useTransition(genModal(), props.transition)\n  },\n})\n"],"sourceRoot":"","file":"VModal.js"}