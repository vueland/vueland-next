import { h, defineComponent, ref, computed } from 'vue';
import { VInput } from '../VInput';
import { VChip } from '../VChip';
import { useIcons } from '../../composables/use-icons';
import { useInputStates } from '../../composables/use-input-states';
import { uniqueArray } from '../../helpers';
export default defineComponent({
    name: 'v-file-input',
    props: {
        disabled: Boolean,
        multiple: Boolean,
        chipColor: {
            type: String,
            default: 'primary',
        },
        value: {
            type: Array,
            default: () => [],
        },
    },
    emits: ['update:value', 'delete'],
    setup(props, { emit, attrs }) {
        const { icons } = useIcons();
        const { isDisabled, isReadonly } = useInputStates(props, { emit, attrs });
        const inputRef = ref(null);
        const srcRef = ref(null);
        const classes = computed(() => ({
            'v-file-input': true,
            'v-file-input--disabled': isDisabled.value,
            'v-file-input--readonly': isReadonly.value,
            'v-file-input--multiple': props.multiple,
        }));
        const onChange = (event) => {
            let files = Array.from(event.target.files);
            if (props.multiple) {
                files = uniqueArray(props.value.concat(files));
            }
            event.target.value = '';
            emit('update:value', files);
        };
        const onClose = (file) => {
            const files = props.value.filter(it => {
                return file.name !== it.name;
            });
            emit('update:value', files);
            emit('delete', file);
        };
        const onClick = ({ srcElement }) => {
            if (srcElement !== srcRef.value)
                return;
            inputRef.value.click();
        };
        const genFileInput = () => {
            return h('input', {
                class: 'v-file-input__field',
                type: 'file',
                multiple: props.multiple,
                ref: inputRef,
                style: {
                    position: 'absolute',
                    visibility: 'hidden',
                },
                onChange,
            });
        };
        const genChips = () => {
            return uniqueArray(props.value)
                .map(file => h(VChip, {
                title: file.name,
                class: 'ma-1',
                color: props.chipColor,
                onClose: () => onClose(file),
            }));
        };
        const genChipsContainer = () => {
            return h('div', {
                class: 'v-file-input__container',
                ref: srcRef,
            }, genChips());
        };
        const genComponent = () => h('div', {
            class: classes.value,
            onClick,
        }, [
            genFileInput(),
            genChipsContainer(),
        ]);
        return () => h(VInput, {
            prependIcon: icons.$paperclip,
            file: true,
            disabled: isDisabled.value,
        }, {
            'text-field': () => genComponent(),
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkZpbGVJbnB1dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3Z1ZWxhbmQvc3JjL2NvbXBvbmVudHMvVkZpbGVJbnB1dC9WRmlsZUlucHV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxDQUFDLEVBQUUsZUFBZSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQVksTUFBTSxLQUFLLENBQUE7QUFFakUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUNsQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBRWhDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQTtBQUN0RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0NBQW9DLENBQUE7QUFFbkUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUUzQyxlQUFlLGVBQWUsQ0FBQztJQUM3QixJQUFJLEVBQUUsY0FBYztJQUNwQixLQUFLLEVBQUU7UUFDTCxRQUFRLEVBQUUsT0FBTztRQUNqQixRQUFRLEVBQUUsT0FBTztRQUNqQixTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsTUFBTTtZQUNaLE9BQU8sRUFBRSxTQUFTO1NBQ25CO1FBQ0QsS0FBSyxFQUFFO1lBQ0wsSUFBSSxFQUFFLEtBQThCO1lBQ3BDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFO1NBQ2xCO0tBQ0Y7SUFDRCxLQUFLLEVBQUUsQ0FBQyxjQUFjLEVBQUUsUUFBUSxDQUFDO0lBQ2pDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFO1FBQzFCLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxRQUFRLEVBQUUsQ0FBQTtRQUM1QixNQUFNLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxHQUFHLGNBQWMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUs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WUFBWSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUU7WUFDbEMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO1lBQ3BCLE9BQU87U0FDUixFQUFFO1lBQ0QsWUFBWSxFQUFFO1lBQ2QsaUJBQWlCLEVBQUU7U0FDcEIsQ0FBQyxDQUFBO1FBRUYsT0FBTyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFO1lBQ3JCLFdBQVcsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM3QixJQUFJLEVBQUUsSUFBSTtZQUNWLFFBQVEsRUFBRSxVQUFVLENBQUMsS0FBSztTQUMzQixFQUFFO1lBQ0QsWUFBWSxFQUFFLEdBQUcsRUFBRSxDQUFDLFlBQVksRUFBRTtTQUNuQyxDQUFDLENBQUE7SUFDSixDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVnVlIEFQSVxuaW1wb3J0IHsgaCwgZGVmaW5lQ29tcG9uZW50LCByZWYsIGNvbXB1dGVkLCBQcm9wVHlwZSB9IGZyb20gJ3Z1ZSdcbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZJbnB1dCB9IGZyb20gJy4uL1ZJbnB1dCdcbmltcG9ydCB7IFZDaGlwIH0gZnJvbSAnLi4vVkNoaXAnXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlSWNvbnMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy91c2UtaWNvbnMnXG5pbXBvcnQgeyB1c2VJbnB1dFN0YXRlcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3VzZS1pbnB1dC1zdGF0ZXMnXG4vLyBIZWxwZXJzXG5pbXBvcnQgeyB1bmlxdWVBcnJheSB9IGZyb20gJy4uLy4uL2hlbHBlcnMnXG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICd2LWZpbGUtaW5wdXQnLFxuICBwcm9wczoge1xuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIG11bHRpcGxlOiBCb29sZWFuLFxuICAgIGNoaXBDb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3ByaW1hcnknLFxuICAgIH0sXG4gICAgdmFsdWU6IHtcbiAgICAgIHR5cGU6IEFycmF5IGFzIFByb3BUeXBlPEFycmF5PEZpbGU+PixcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFtdLFxuICAgIH0sXG4gIH0sXG4gIGVtaXRzOiBbJ3VwZGF0ZTp2YWx1ZScsICdkZWxldGUnXSxcbiAgc2V0dXAocHJvcHMsIHsgZW1pdCwgYXR0cnMgfSkge1xuICAgIGNvbnN0IHsgaWNvbnMgfSA9IHVzZUljb25zKClcbiAgICBjb25zdCB7IGlzRGlzYWJsZWQsIGlzUmVhZG9ubHkgfSA9IHVzZUlucHV0U3RhdGVzKHByb3BzLCB7IGVtaXQsIGF0dHJzIH0pXG5cbiAgICBjb25zdCBpbnB1dFJlZiA9IHJlZjxNYXliZTxIVE1MSW5wdXRFbGVtZW50Pj4obnVsbClcbiAgICBjb25zdCBzcmNSZWYgPSByZWY8TWF5YmU8SFRNTEVsZW1lbnQ+PihudWxsKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICAndi1maWxlLWlucHV0JzogdHJ1ZSxcbiAgICAgICd2LWZpbGUtaW5wdXQtLWRpc2FibGVkJzogaXNEaXNhYmxlZC52YWx1ZSxcbiAgICAgICd2LWZpbGUtaW5wdXQtLXJlYWRvbmx5JzogaXNSZWFkb25seS52YWx1ZSxcbiAgICAgICd2LWZpbGUtaW5wdXQtLW11bHRpcGxlJzogcHJvcHMubXVsdGlwbGUsXG4gICAgfSkpXG5cbiAgICBjb25zdCBvbkNoYW5nZSA9IChldmVudCkgPT4ge1xuICAgICAgbGV0IGZpbGVzID0gQXJyYXkuZnJvbShldmVudC50YXJnZXQuZmlsZXMpIGFzIEZpbGVbXVxuXG4gICAgICBpZiAocHJvcHMubXVsdGlwbGUpIHtcbiAgICAgICAgZmlsZXMgPSB1bmlxdWVBcnJheTxGaWxlPihwcm9wcy52YWx1ZS5jb25jYXQoZmlsZXMpKVxuICAgICAgfVxuXG4gICAgICBldmVudC50YXJnZXQudmFsdWUgPSAnJ1xuICAgICAgZW1pdCgndXBkYXRlOnZhbHVlJywgZmlsZXMpXG4gICAgfVxuXG4gICAgY29uc3Qgb25DbG9zZSA9IChmaWxlKSA9PiB7XG4gICAgICBjb25zdCBmaWxlcyA9IHByb3BzLnZhbHVlLmZpbHRlcihpdCA9PiB7XG4gICAgICAgIHJldHVybiBmaWxlLm5hbWUgIT09IGl0Lm5hbWVcbiAgICAgIH0pXG5cbiAgICAgIGVtaXQoJ3VwZGF0ZTp2YWx1ZScsIGZpbGVzKVxuICAgICAgZW1pdCgnZGVsZXRlJywgZmlsZSlcbiAgICB9XG5cbiAgICBjb25zdCBvbkNsaWNrID0gKHsgc3JjRWxlbWVudCB9KSA9PiB7XG4gICAgICBpZiAoc3JjRWxlbWVudCAhPT0gc3JjUmVmLnZhbHVlKSByZXR1cm5cbiAgICAgIGlucHV0UmVmLnZhbHVlIS5jbGljaygpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuRmlsZUlucHV0ID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2lucHV0Jywge1xuICAgICAgICBjbGFzczogJ3YtZmlsZS1pbnB1dF9fZmllbGQnLFxuICAgICAgICB0eXBlOiAnZmlsZScsXG4gICAgICAgIG11bHRpcGxlOiBwcm9wcy5tdWx0aXBsZSxcbiAgICAgICAgcmVmOiBpbnB1dFJlZixcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgICAgICAgfSxcbiAgICAgICAgb25DaGFuZ2UsXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkNoaXBzID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIHVuaXF1ZUFycmF5PEZpbGU+KHByb3BzLnZhbHVlKVxuICAgICAgICAubWFwKGZpbGUgPT4gaChWQ2hpcCwge1xuICAgICAgICAgICAgdGl0bGU6IGZpbGUubmFtZSxcbiAgICAgICAgICAgIGNsYXNzOiAnbWEtMScsXG4gICAgICAgICAgICBjb2xvcjogcHJvcHMuY2hpcENvbG9yLFxuICAgICAgICAgICAgb25DbG9zZTogKCkgPT4gb25DbG9zZShmaWxlKSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkNoaXBzQ29udGFpbmVyID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcbiAgICAgICAgY2xhc3M6ICd2LWZpbGUtaW5wdXRfX2NvbnRhaW5lcicsXG4gICAgICAgIHJlZjogc3JjUmVmLFxuICAgICAgfSwgZ2VuQ2hpcHMoKSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5Db21wb25lbnQgPSAoKSA9PiBoKCdkaXYnLCB7XG4gICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgIG9uQ2xpY2ssXG4gICAgfSwgW1xuICAgICAgZ2VuRmlsZUlucHV0KCksXG4gICAgICBnZW5DaGlwc0NvbnRhaW5lcigpLFxuICAgIF0pXG5cbiAgICByZXR1cm4gKCkgPT4gaChWSW5wdXQsIHtcbiAgICAgIHByZXBlbmRJY29uOiBpY29ucy4kcGFwZXJjbGlwLFxuICAgICAgZmlsZTogdHJ1ZSxcbiAgICAgIGRpc2FibGVkOiBpc0Rpc2FibGVkLnZhbHVlLFxuICAgIH0sIHtcbiAgICAgICd0ZXh0LWZpZWxkJzogKCkgPT4gZ2VuQ29tcG9uZW50KCksXG4gICAgfSlcbiAgfSxcbn0pXG4iXX0=