import { computed, reactive } from 'vue';
export const useInputStates = (props, { attrs, emit }) => {
    const state = reactive({
        focused: false,
    });
    const isDisabled = computed(() => {
        if (props.disabled)
            return true;
        if (typeof attrs.disabled === 'boolean')
            return attrs.disabled;
        return attrs.disabled !== undefined;
    });
    const isReadonly = computed(() => {
        if (props.readonly)
            return true;
        if (typeof attrs.readonly === 'boolean')
            return attrs.readonly;
        return attrs.readonly !== undefined;
    });
    const onFocus = (e) => {
        if (isReadonly.value)
            return;
        state.focused = true;
        emit('focus', e);
    };
    const onChange = () => {
        if (isReadonly.value)
            return;
        emit('change');
    };
    const onBlur = (e) => {
        if (isReadonly.value)
            return;
        state.focused = false;
        emit('blur', e);
    };
    const onSelect = (val) => {
        state.focused = false;
        emit('update:modelValue', val);
        emit('select', val);
        onChange();
    };
    return {
        state,
        isReadonly,
        isDisabled,
        onFocus,
        onBlur,
        onChange,
        onSelect,
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWlucHV0LXN0YXRlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb3NhYmxlL3VzZS1pbnB1dC1zdGF0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxLQUFLLENBQUE7QUFNeEMsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUU7SUFDdkQsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFRO1FBQzVCLE9BQU8sRUFBRSxLQUFLO0tBQ2YsQ0FBQyxDQUFBO0lBRUYsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFVLEdBQUcsRUFBRTtRQUN4QyxJQUFJLEtBQUssQ0FBQyxRQUFRO1lBQUUsT0FBTyxJQUFJLENBQUE7UUFFL0IsSUFBSSxPQUFPLEtBQUssQ0FBQyxRQUFRLEtBQUssU0FBUztZQUFFLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQTtRQUU5RCxPQUFPLEtBQUssQ0FBQyxRQUFRLEtBQUssU0FBUyxDQUFBO0lBQ3JDLENBQUMsQ0FBQyxDQUFBO0lBRUYsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFVLEdBQUcsRUFBRTtRQUN4QyxJQUFJLEtBQUssQ0FBQyxRQUFRO1lBQUUsT0FBTyxJQUFJLENBQUE7UUFFL0IsSUFBSSxPQUFPLEtBQUssQ0FBQyxRQUFRLEtBQUssU0FBUztZQUFFLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQTtRQUU5RCxPQUFPLEtBQUssQ0FBQyxRQUFRLEtBQUssU0FBUyxDQUFBO0lBQ3JDLENBQUMsQ0FBQyxDQUFBO0lBRUYsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRTtRQUNwQixJQUFJLFVBQVUsQ0FBQyxLQUFLO1lBQUUsT0FBTTtRQUU1QixLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQTtRQUNwQixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ2xCLENBQUMsQ0FBQTtJQUVELE1BQU0sUUFBUSxHQUFHLEdBQUcsRUFBRTtRQUNwQixJQUFJLFVBQVUsQ0FBQyxLQUFLO1lBQUUsT0FBTTtRQUU1QixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDaEIsQ0FBQyxDQUFBO0lBRUQsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRTtRQUNuQixJQUFJLFVBQVUsQ0FBQyxLQUFLO1lBQUUsT0FBTTtRQUU1QixLQUFLLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQTtRQUNyQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ2pCLENBQUMsQ0FBQTtJQUVELE1BQU0sUUFBUSxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDdkIsS0FBSyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUE7UUFDckIsSUFBSSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBQzlCLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDbkIsUUFBUSxFQUFFLENBQUE7SUFDWixDQUFDLENBQUE7SUFFRCxPQUFPO1FBQ0wsS0FBSztRQUNMLFVBQVU7UUFDVixVQUFVO1FBQ1YsT0FBTztRQUNQLE1BQU07UUFDTixRQUFRO1FBQ1IsUUFBUTtLQUNULENBQUE7QUFDSCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb21wdXRlZCwgcmVhY3RpdmUgfSBmcm9tICd2dWUnXG5cbnR5cGUgU3RhdGUgPSB7XG4gIGZvY3VzZWQ6IGJvb2xlYW5cbn1cblxuZXhwb3J0IGNvbnN0IHVzZUlucHV0U3RhdGVzID0gKHByb3BzLCB7IGF0dHJzLCBlbWl0IH0pID0+IHtcbiAgY29uc3Qgc3RhdGUgPSByZWFjdGl2ZTxTdGF0ZT4oe1xuICAgIGZvY3VzZWQ6IGZhbHNlLFxuICB9KVxuXG4gIGNvbnN0IGlzRGlzYWJsZWQgPSBjb21wdXRlZDxib29sZWFuPigoKSA9PiB7XG4gICAgaWYgKHByb3BzLmRpc2FibGVkKSByZXR1cm4gdHJ1ZVxuXG4gICAgaWYgKHR5cGVvZiBhdHRycy5kaXNhYmxlZCA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gYXR0cnMuZGlzYWJsZWRcblxuICAgIHJldHVybiBhdHRycy5kaXNhYmxlZCAhPT0gdW5kZWZpbmVkXG4gIH0pXG5cbiAgY29uc3QgaXNSZWFkb25seSA9IGNvbXB1dGVkPGJvb2xlYW4+KCgpID0+IHtcbiAgICBpZiAocHJvcHMucmVhZG9ubHkpIHJldHVybiB0cnVlXG5cbiAgICBpZiAodHlwZW9mIGF0dHJzLnJlYWRvbmx5ID09PSAnYm9vbGVhbicpIHJldHVybiBhdHRycy5yZWFkb25seVxuXG4gICAgcmV0dXJuIGF0dHJzLnJlYWRvbmx5ICE9PSB1bmRlZmluZWRcbiAgfSlcblxuICBjb25zdCBvbkZvY3VzID0gKGUpID0+IHtcbiAgICBpZiAoaXNSZWFkb25seS52YWx1ZSkgcmV0dXJuXG5cbiAgICBzdGF0ZS5mb2N1c2VkID0gdHJ1ZVxuICAgIGVtaXQoJ2ZvY3VzJywgZSlcbiAgfVxuXG4gIGNvbnN0IG9uQ2hhbmdlID0gKCkgPT4ge1xuICAgIGlmIChpc1JlYWRvbmx5LnZhbHVlKSByZXR1cm5cblxuICAgIGVtaXQoJ2NoYW5nZScpXG4gIH1cblxuICBjb25zdCBvbkJsdXIgPSAoZSkgPT4ge1xuICAgIGlmIChpc1JlYWRvbmx5LnZhbHVlKSByZXR1cm5cblxuICAgIHN0YXRlLmZvY3VzZWQgPSBmYWxzZVxuICAgIGVtaXQoJ2JsdXInLCBlKVxuICB9XG5cbiAgY29uc3Qgb25TZWxlY3QgPSAodmFsKSA9PiB7XG4gICAgc3RhdGUuZm9jdXNlZCA9IGZhbHNlXG4gICAgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCB2YWwpXG4gICAgZW1pdCgnc2VsZWN0JywgdmFsKVxuICAgIG9uQ2hhbmdlKClcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc3RhdGUsXG4gICAgaXNSZWFkb25seSxcbiAgICBpc0Rpc2FibGVkLFxuICAgIG9uRm9jdXMsXG4gICAgb25CbHVyLFxuICAgIG9uQ2hhbmdlLFxuICAgIG9uU2VsZWN0LFxuICB9XG59XG4iXX0=