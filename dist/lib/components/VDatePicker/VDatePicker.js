import { computed, defineComponent, h, provide, reactive, ref } from 'vue';
import { useColors } from '../../composable/use-colors';
import { elevationProps, useElevation } from '../../composable/use-elevation';
import { useTransition } from '../../composable/use-transition';
import { VTextField } from '../VTextField';
import { VDatepickerHeader } from './VDatepickerHeader';
import { VDatePickerDates } from './VDatePickerDates';
import { VDatePickerYears } from './VDatePickerYears';
import { VDatePickerMonths } from './VDatePickerMonths';
import { VMenu } from '../VMenu';
import { parseDate } from './helpers';
import { addScopedSlot } from '../../helpers';
import { formatDate } from './utils';
import { locale } from '../../services/locale';
export default defineComponent({
    name: 'v-date-picker',
    props: {
        dark: Boolean,
        disabled: Boolean,
        clearable: Boolean,
        readonly: Boolean,
        typeable: Boolean,
        mondayFirst: Boolean,
        today: Boolean,
        useMls: Boolean,
        useUtc: Boolean,
        lang: {
            type: String,
            default: 'en',
        },
        label: String,
        prependIcon: String,
        format: {
            type: String,
            default: 'yyyy MM dd D',
        },
        rules: Array,
        value: [String, Date, Number],
        modelValue: [String, Date, Number],
        disabledDates: Object,
        highlighted: Object,
        contentColor: {
            type: String,
            default: 'primary',
        },
        color: {
            type: String,
            default: 'white',
        },
        ...elevationProps(),
    },
    emits: ['update:value', 'update:modelValue', 'selected'],
    setup(props, { emit, slots }) {
        const data = reactive({
            year: null,
            month: null,
            date: null,
            day: null,
            selected: null,
            tableMonth: null,
            tableYear: null,
            convertedDateString: null,
            isYears: false,
            isMonths: false,
            isDates: true,
            isActive: false,
        });
        const { setTextClassNameColor, setTextCssColor, setBackgroundClassNameColor, setBackgroundCssColor, } = useColors();
        const { elevationClasses } = useElevation(props);
        const localeMonths = locale[props.lang].monthsAbbr;
        const localeWeek = locale[props.lang].week;
        const contentColor = props.dark ? 'white' : props.contentColor;
        const handlers = ref({});
        const activator = ref(null);
        const closeConditional = ref(false);
        provide('handlers', handlers);
        const classes = computed(() => ({
            'v-date-picker': true,
            'v-date-picker--typeable': props.typeable,
            'v-date-picker--readonly': !props.typeable || props.readonly,
        }));
        const tableClasses = computed(() => ({
            'v-date-picker__table': true,
            ...elevationClasses.value,
            ...(props.color ? setBackgroundClassNameColor(props.color) : {}),
            ...(contentColor ? setTextClassNameColor(contentColor) : {}),
        }));
        const tableStyles = computed(() => ({
            ...(props.color ? setBackgroundCssColor(props.color) : {}),
            ...(contentColor ? setTextCssColor(contentColor) : {}),
        }));
        const headerValue = computed(() => {
            return data.isYears || data.isMonths
                ? `${data.tableYear}`
                : data.isDates
                    ? `${data.tableYear} ${localeMonths[data.tableMonth]}`
                    : '';
        });
        const displayDate = computed(() => {
            const { month, date, day } = data.selected;
            return `${localeMonths[month]} ${date} ${localeWeek[day]}`;
        });
        const computedValue = computed(() => {
            const { year, month, date } = data.selected;
            return new Date(year, month, date);
        });
        const setInitDate = () => {
            if (props.value)
                setParsedDate(props.value);
            else if (props.modelValue)
                setParsedDate(props.modelValue);
            else
                setParsedDate();
            if (props.today || props.value || props.modelValue) {
                data.convertedDateString = convertToFormat();
            }
        };
        const onTableChange = () => {
            if (data.isYears) {
                data.isYears = false;
                return (data.isMonths = true);
            }
            if (data.isMonths) {
                data.isMonths = false;
                return (data.isYears = true);
            }
            if (data.isDates) {
                data.isDates = false;
                return (data.isMonths = true);
            }
            return undefined;
        };
        const setDataDate = ({ year, month, date, day, }) => {
            data.tableMonth = month;
            data.tableYear = year;
            data.year = year;
            data.month = month;
            data.date = date;
            data.day = day;
        };
        const setParsedDate = (selectedDate = null) => {
            const dateForParsing = selectedDate || new Date();
            data.selected = parseDate(dateForParsing);
            !selectedDate && (data.selected.default = !selectedDate);
            setDataDate(data.selected);
        };
        const onYearUpdate = (year) => {
            data.tableYear = year;
            data.isMonths = true;
            data.isYears = false;
        };
        const onMonthUpdate = (month) => {
            data.tableMonth = month;
            data.isMonths = false;
            data.isYears = false;
            data.isDates = true;
        };
        const onDateUpdate = (date) => {
            if (!date)
                return;
            closeConditional.value = true;
            data.selected = date;
            data.tableMonth = date.month;
            data.tableYear = date.year;
            data.convertedDateString = convertToFormat();
            emit('update:value', computedValue.value);
            emit('update:modelValue', computedValue.value);
            emit('selected', computedValue.value);
            requestAnimationFrame(() => (closeConditional.value = false));
        };
        const onDateMonthUpdate = (dateObject) => {
            data.tableMonth = dateObject.month;
            if (dateObject.year)
                data.tableYear = dateObject.year;
        };
        const onDateInput = (date) => {
            onDateUpdate(stringToDate(date));
        };
        const stringToDate = (date) => {
            if (date.length === 10) {
                const dateArray = date.trim().split(/\W/);
                if (dateArray[0].length < 4) {
                    date = dateArray.reverse().join('.');
                }
                return parseDate(new Date(Date.parse(date)));
            }
            return null;
        };
        const convertToFormat = () => {
            if (!data.selected)
                return '';
            return formatDate(new Date(data.selected.year, data.selected.month, data.selected.date), props.format, locale[props.lang]);
        };
        const genDisplayValue = (value) => {
            const propsData = {
                class: 'v-date-picker__display-value',
            };
            return useTransition(h('span', propsData, value), 'scale-in-out', 'out-in');
        };
        const genDatepickerDisplayInner = () => {
            const propsData = {
                class: 'v-date-picker__display-inner',
            };
            return h('div', propsData, [
                genDisplayValue(data.selected?.year),
                genDisplayValue(displayDate.value),
            ]);
        };
        const genDatepickerDisplay = () => {
            const propsData = {
                class: {
                    'v-date-picker__display': true,
                    ...(contentColor ? setBackgroundClassNameColor(contentColor) : {}),
                    ...(props.color ? setTextClassNameColor(props.color) : {}),
                },
                style: {
                    ...(contentColor ? setBackgroundCssColor(contentColor) : {}),
                    ...(props.color ? setTextCssColor(props.color) : {}),
                },
            };
            return h('div', propsData, genDatepickerDisplayInner());
        };
        const genDatepickerHeader = () => {
            return h(VDatepickerHeader, {
                onNext: () => handlers.value.onNext(),
                onPrev: () => handlers.value.onPrev(),
                onTable: onTableChange,
            }, {
                default: () => headerValue.value,
            });
        };
        const genDatepickerYearsTable = () => {
            const propsData = {
                year: data.tableYear,
                ['onUpdate:year']: onYearUpdate,
            };
            return h(VDatePickerYears, propsData);
        };
        const genDatepickerMonthsTable = () => {
            return h(VDatePickerMonths, {
                lang: props.lang,
                month: data.tableMonth,
                year: data.tableYear,
                locale: localeMonths,
                ['onUpdate:month']: onMonthUpdate,
                ['onUpdate:year']: onYearUpdate,
            });
        };
        const genDatepickerDatesTable = () => {
            return h(VDatePickerDates, {
                locale: localeWeek,
                mondayFirst: props.mondayFirst,
                month: data.tableMonth,
                year: data.tableYear,
                value: data.selected,
                disabledDates: props.disabledDates,
                ['onUpdate:value']: onDateUpdate,
                ['onUpdate:month']: onDateMonthUpdate,
            }, {
                date: slots.date && addScopedSlot('date', slots),
            });
        };
        const genDatepickerBody = () => {
            const propsData = {
                class: {
                    'v-date-picker__body': true,
                },
            };
            return h('div', propsData, useTransition(((data.isYears && genDatepickerYearsTable()) ||
                (data.isMonths && genDatepickerMonthsTable()) ||
                (data.isDates && genDatepickerDatesTable())), 'slide-in-left', 'out-in'));
        };
        const genDatepickerInput = () => {
            return h(VTextField, {
                modelValue: data.convertedDateString,
                dark: props.dark,
                label: props.label,
                readonly: !props.typeable,
                disabled: props.disabled,
                prependIcon: props.prependIcon,
                rules: props.rules,
                clearable: props.clearable,
                ref: activator,
                onInput: onDateInput,
                onClear: () => {
                    data.convertedDateString = '';
                    emit('update:value', null);
                    emit('update:modelValue', null);
                    emit('selected', null);
                },
            });
        };
        const genDatepickerTable = () => {
            const propsData = {
                class: tableClasses.value,
                style: tableStyles.value,
            };
            return h('div', propsData, [
                genDatepickerDisplay(),
                genDatepickerHeader(),
                genDatepickerBody(),
            ]);
        };
        const genMenu = () => {
            return h(VMenu, {
                activator: activator.value,
                internalActivator: true,
                inputActivator: '.v-input__text-field',
                width: 'auto',
                maxHeight: 'auto',
                bottom: props.typeable,
                openOnClick: true,
                closeOnClick: closeConditional.value,
            }, {
                default: () => genDatepickerTable(),
            });
        };
        const genDatepicker = () => {
            const propsData = {
                class: classes.value,
            };
            return h('div', propsData, [
                genDatepickerInput(),
                activator.value && genMenu(),
            ]);
        };
        setInitDate();
        return () => genDatepicker();
    },
});
//# sourceMappingURL=data:application/json;base64,