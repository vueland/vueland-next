import { h, shallowRef, reactive, watch, withDirectives, defineComponent, computed, onMounted, vShow, } from 'vue';
import { useToggle } from '../../composables/use-toggle';
import { useColors } from '../../composables/use-colors';
import { useActivator } from '../../composables/use-activator';
import { useTransition } from '../../composables/use-transition';
import { elevationProps, useElevation } from '../../composables/use-elevation';
import { positionProps } from '../../composables/use-position';
import { convertToUnit } from '../../helpers';
import { transitions } from '../../services/transitions';
export default defineComponent({
    name: 'v-tooltip',
    props: {
        openOnHover: {
            type: Boolean,
            default: true,
        },
        color: {
            type: String,
            default: 'grey lighten-1',
        },
        zIndex: [Number, String],
        maxWidth: [Number, String],
        minWidth: [Number, String],
        modelValue: Boolean,
        offsetX: {
            type: [String, Number],
            default: 20,
        },
        offsetY: {
            type: [String, Number],
            default: 20,
        },
        ...elevationProps(),
        ...positionProps(),
    },
    setup(props, { slots }) {
        const tooltip = reactive({});
        const activator = reactive({});
        const tooltipRef = shallowRef(null);
        const { isActive } = useToggle(props);
        const { elevationClasses } = useElevation(props);
        const { setBackgroundClassNameColor, setBackgroundCssColor } = useColors();
        const { activatorRef, getActivatorSizes, genActivatorListeners } = useActivator(props);
        const handlers = {
            mouseenter: () => (isActive.value = true),
            mouseleave: () => (isActive.value = false),
        };
        const listeners = genActivatorListeners(props, handlers);
        const classes = computed(() => ({
            'v-tooltip': true,
            'v-tooltip--top': props.top,
            'v-tooltip--right': props.right,
            'v-tooltip--left': props.left,
            'v-tooltip--bottom': props.bottom,
            ...elevationClasses.value,
            ...(props.color ? setBackgroundClassNameColor(props.color) : {}),
        }));
        const computeTopPosition = computed(() => {
            return ((props.top
                ? activator.top - tooltip.height
                : props.bottom
                    ? activator.top + activator.height
                    : activator.top + (activator.height - tooltip.height) / 2) +
                +props.offsetY);
        });
        const computeLeftPosition = computed(() => {
            return ((props.left
                ? activator.left - tooltip.width
                : props.right
                    ? activator.left + activator.width
                    : activator.left + (activator.width - tooltip.width) / 2) +
                +props.offsetX);
        });
        const styles = computed(() => ({
            top: tooltip.top ? convertToUnit(tooltip.top) : '',
            left: tooltip.top ? convertToUnit(tooltip.left) : '',
            maxWidth: !!props.maxWidth ? `${props.maxWidth}px` : '',
            minWidth: !!props.minWidth ? `${props.minWidth}px` : '',
            zIndex: props.zIndex,
            ...(props.color ? setBackgroundCssColor(props.color) : {}),
        }));
        function genActivator() {
            const slotContent = slots.activator &&
                slots.activator({
                    on: listeners,
                });
            return h(slotContent[0], { ref: activatorRef });
        }
        function genContent() {
            const propsData = {
                class: classes.value,
                style: styles.value,
                ref: tooltipRef,
            };
            return withDirectives(h('span', propsData, slots.default && slots.default()), [[vShow, isActive.value]]);
        }
        function setTooltipPosition() {
            if (tooltipRef.value) {
                tooltip.width = tooltipRef.value.offsetWidth;
                tooltip.height = tooltipRef.value.offsetHeight;
                tooltip.top = computeTopPosition.value;
                tooltip.left = computeLeftPosition.value;
            }
        }
        onMounted(() => {
            watch(() => isActive.value, (to) => {
                if (to) {
                    const { left, top, height, width } = getActivatorSizes();
                    activator.left = left;
                    activator.top = top;
                    activator.height = height;
                    activator.width = width;
                    tooltip.top = 0;
                    tooltip.left = 0;
                    requestAnimationFrame(setTooltipPosition);
                }
            }, { immediate: true });
        });
        return () => {
            const content = useTransition(genContent(), isActive.value ? transitions.SCALE_IN : transitions.FADE);
            return [content, genActivator()];
        };
    },
});
//# sourceMappingURL=data:application/json;base64,