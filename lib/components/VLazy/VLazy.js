import { defineComponent, h, ref, unref, onMounted } from 'vue';
import './VLazy.scss';
export default defineComponent({
    props: {
        tag: {
            type: String,
            default: 'div'
        },
        rootMargin: {
            type: String,
            default: '0px'
        },
        threshold: {
            type: [Number, String],
            default: 0.1
        },
        transition: {
            type: String,
            default: 'fade-in-transition'
        }
    },
    setup(props, { slots }) {
        const LAZY_ATTR = 'data-src';
        const containerRef = ref(null);
        const observerOptions = {
            root: unref(containerRef),
            rootMargin: props.rootMargin,
            threshold: Number(props.threshold),
        };
        let observer;
        function onTransitionEnd() {
            this.classList.remove(`${props.transition}-enter-active`);
            this.removeEventListener('transitionend', onTransitionEnd);
        }
        const onEnter = (entries, observer) => {
            let duration = 0;
            entries.forEach((it) => {
                if (it.isIntersecting) {
                    it.target.classList.add(`${props.transition}-enter-from`);
                    requestAnimationFrame(() => {
                        it.target.src = it.target.dataset.src;
                        it.target.removeAttribute(LAZY_ATTR);
                        if (!duration) {
                            duration = parseFloat(getComputedStyle(it.target).transitionDuration) * 1000;
                        }
                        it.target.classList.add(`${props.transition}-enter-active`);
                        observer.unobserve(it.target);
                        setTimeout(() => {
                            it.target.classList.remove(`${props.transition}-enter-from`);
                        }, duration);
                        it.target.addEventListener('transitionend', onTransitionEnd);
                    });
                }
            });
        };
        onMounted(() => {
            const elems = unref(containerRef).querySelectorAll(`*[${LAZY_ATTR}]`);
            observer = new IntersectionObserver(onEnter, observerOptions);
            elems.forEach((el) => {
                observer.observe(el);
            });
        });
        return () => h(props.tag, {
            class: 'v-lazy',
            ref: containerRef,
        }, slots.default?.());
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkxhenkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy92dWVsYW5kL3NyYy9jb21wb25lbnRzL1ZMYXp5L1ZMYXp5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sS0FBSyxDQUFBO0FBQy9ELE9BQU8sY0FBYyxDQUFBO0FBRXJCLGVBQWUsZUFBZSxDQUFDO0lBQzdCLEtBQUssRUFBRTtRQUNMLEdBQUcsRUFBRTtZQUNILElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLEtBQUs7U0FDZjtRQUNELFVBQVUsRUFBRTtZQUNWLElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLEtBQUs7U0FDZjtRQUNELFNBQVMsRUFBRTtZQUNULElBQUksRUFBRSxDQUFFLE1BQU0sRUFBRSxNQUFNLENBQUU7WUFDeEIsT0FBTyxFQUFFLEdBQUc7U0FDYjtRQUNELFVBQVUsRUFBRTtZQUNWLElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLG9CQUFvQjtTQUM5QjtLQUNGO0lBRUQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRTtRQUNwQixNQUFNLFNBQVMsR0FBRyxVQUFVLENBQUE7UUFDNUIsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFxQixJQUFJLENBQUMsQ0FBQTtRQUVsRCxNQUFNLGVBQWUsR0FBRztZQUN0QixJQUFJLEVBQUUsS0FBSyxDQUFDLFlBQVksQ0FBRTtZQUMxQixVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsU0FBUyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDO1NBQ25DLENBQUE7UUFFRCxJQUFJLFFBQThCLENBQUE7UUFFbEMsU0FBUyxlQUFlO1lBQ3RCLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUksS0FBSyxDQUFDLFVBQVcsZUFBZSxDQUFDLENBQUE7WUFDM0QsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGVBQWUsRUFBRSxlQUFlLENBQUMsQ0FBQTtRQUM1RCxDQUFDO1FBRUQsTUFBTSxPQUFPLEdBQUcsQ0FBQyxPQUFvQyxFQUFFLFFBQThCLEVBQUUsRUFBRTtZQUN2RixJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUE7WUFFaEIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQU8sRUFBRSxFQUFFO2dCQUMxQixJQUFJLEVBQUUsQ0FBQyxjQUFjLEVBQUU7b0JBRXJCLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFJLEtBQUssQ0FBQyxVQUFXLGFBQWEsQ0FBQyxDQUFBO29CQUUzRCxxQkFBcUIsQ0FBQyxHQUFHLEVBQUU7d0JBQ3pCLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQTt3QkFDckMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUE7d0JBRXBDLElBQUksQ0FBQyxRQUFRLEVBQUU7NEJBQ2IsUUFBUSxHQUFHLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsa0JBQWtCLENBQUMsR0FBRyxJQUFJLENBQUE7eUJBQzdFO3dCQUVELEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFJLEtBQUssQ0FBQyxVQUFXLGVBQWUsQ0FBQyxDQUFBO3dCQUU3RCxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQTt3QkFFN0IsVUFBVSxDQUFDLEdBQUcsRUFBRTs0QkFDZCxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBSSxLQUFLLENBQUMsVUFBVyxhQUFhLENBQUMsQ0FBQTt3QkFDaEUsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFBO3dCQUVaLEVBQUUsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxFQUFFLGVBQWUsQ0FBQyxDQUFBO29CQUU5RCxDQUFDLENBQUMsQ0FBQTtpQkFDSDtZQUNILENBQUMsQ0FBQyxDQUFBO1FBQ0osQ0FBQyxDQUFBO1FBRUQsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUNiLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFNLFNBQVUsR0FBRyxDQUFDLENBQUE7WUFFeEUsUUFBUSxHQUFHLElBQUksb0JBQW9CLENBQUMsT0FBTyxFQUFFLGVBQWUsQ0FBQyxDQUFBO1lBRTdELEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFPLEVBQUUsRUFBRTtnQkFDeEIsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtZQUN0QixDQUFDLENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQyxDQUFBO1FBRUYsT0FBTyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtZQUN4QixLQUFLLEVBQUUsUUFBUTtZQUNmLEdBQUcsRUFBRSxZQUFZO1NBQ2xCLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUN2QixDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoLCByZWYsIHVucmVmLCBvbk1vdW50ZWQgfSBmcm9tICd2dWUnXG5pbXBvcnQgJy4vVkxhenkuc2NzcydcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgcHJvcHM6IHtcbiAgICB0YWc6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdkaXYnXG4gICAgfSxcbiAgICByb290TWFyZ2luOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnMHB4J1xuICAgIH0sXG4gICAgdGhyZXNob2xkOiB7XG4gICAgICB0eXBlOiBbIE51bWJlciwgU3RyaW5nIF0sXG4gICAgICBkZWZhdWx0OiAwLjFcbiAgICB9LFxuICAgIHRyYW5zaXRpb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdmYWRlLWluLXRyYW5zaXRpb24nXG4gICAgfVxuICB9LFxuXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pe1xuICAgIGNvbnN0IExBWllfQVRUUiA9ICdkYXRhLXNyYydcbiAgICBjb25zdCBjb250YWluZXJSZWYgPSByZWY8SFRNTEVsZW1lbnQgfCBudWxsPihudWxsKVxuXG4gICAgY29uc3Qgb2JzZXJ2ZXJPcHRpb25zID0ge1xuICAgICAgcm9vdDogdW5yZWYoY29udGFpbmVyUmVmKSEsXG4gICAgICByb290TWFyZ2luOiBwcm9wcy5yb290TWFyZ2luLFxuICAgICAgdGhyZXNob2xkOiBOdW1iZXIocHJvcHMudGhyZXNob2xkKSxcbiAgICB9XG5cbiAgICBsZXQgb2JzZXJ2ZXI6IEludGVyc2VjdGlvbk9ic2VydmVyXG5cbiAgICBmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQoKXtcbiAgICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZShgJHsgcHJvcHMudHJhbnNpdGlvbiB9LWVudGVyLWFjdGl2ZWApXG4gICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBvblRyYW5zaXRpb25FbmQpXG4gICAgfVxuXG4gICAgY29uc3Qgb25FbnRlciA9IChlbnRyaWVzOiBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5W10sIG9ic2VydmVyOiBJbnRlcnNlY3Rpb25PYnNlcnZlcikgPT4ge1xuICAgICAgbGV0IGR1cmF0aW9uID0gMFxuXG4gICAgICBlbnRyaWVzLmZvckVhY2goKGl0OiBhbnkpID0+IHtcbiAgICAgICAgaWYgKGl0LmlzSW50ZXJzZWN0aW5nKSB7XG5cbiAgICAgICAgICBpdC50YXJnZXQuY2xhc3NMaXN0LmFkZChgJHsgcHJvcHMudHJhbnNpdGlvbiB9LWVudGVyLWZyb21gKVxuXG4gICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIGl0LnRhcmdldC5zcmMgPSBpdC50YXJnZXQuZGF0YXNldC5zcmNcbiAgICAgICAgICAgIGl0LnRhcmdldC5yZW1vdmVBdHRyaWJ1dGUoTEFaWV9BVFRSKVxuXG4gICAgICAgICAgICBpZiAoIWR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgIGR1cmF0aW9uID0gcGFyc2VGbG9hdChnZXRDb21wdXRlZFN0eWxlKGl0LnRhcmdldCkudHJhbnNpdGlvbkR1cmF0aW9uKSAqIDEwMDBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaXQudGFyZ2V0LmNsYXNzTGlzdC5hZGQoYCR7IHByb3BzLnRyYW5zaXRpb24gfS1lbnRlci1hY3RpdmVgKVxuXG4gICAgICAgICAgICBvYnNlcnZlci51bm9ic2VydmUoaXQudGFyZ2V0KVxuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgaXQudGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoYCR7IHByb3BzLnRyYW5zaXRpb24gfS1lbnRlci1mcm9tYClcbiAgICAgICAgICAgIH0sIGR1cmF0aW9uKVxuXG4gICAgICAgICAgICBpdC50YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIG9uVHJhbnNpdGlvbkVuZClcblxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IGVsZW1zID0gdW5yZWYoY29udGFpbmVyUmVmKSEucXVlcnlTZWxlY3RvckFsbChgKlskeyBMQVpZX0FUVFIgfV1gKVxuXG4gICAgICBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihvbkVudGVyLCBvYnNlcnZlck9wdGlvbnMpXG5cbiAgICAgIGVsZW1zLmZvckVhY2goKGVsOiBhbnkpID0+IHtcbiAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShlbClcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIHJldHVybiAoKSA9PiBoKHByb3BzLnRhZywge1xuICAgICAgY2xhc3M6ICd2LWxhenknLFxuICAgICAgcmVmOiBjb250YWluZXJSZWYsXG4gICAgfSwgc2xvdHMuZGVmYXVsdD8uKCkpXG4gIH1cbn0pXG4iXX0=