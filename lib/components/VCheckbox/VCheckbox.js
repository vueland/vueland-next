import { h, ref, watch, defineComponent, inject, toRaw, computed, onBeforeMount, onBeforeUnmount, } from 'vue';
import { useValidation } from '../../composable/use-validation';
import { useIcons } from '../../composable/use-icons';
import { VIcon } from '../VIcon';
import { VLabel } from '../VLabel';
import { sizes } from '../../services/sizes';
export default defineComponent({
    name: 'v-checkbox',
    props: {
        modelValue: {
            type: [Array, Boolean],
            default: null,
        },
        label: {
            type: String,
            default: '',
        },
        disabled: Boolean,
        validate: Boolean,
        value: {
            type: [Array, Object, String, Number],
            default: null,
        },
        color: {
            type: String,
            default: 'primary',
        },
    },
    emits: ['checked', 'update:modelValue'],
    setup(props, { emit }) {
        const isChecked = ref(false);
        const form = inject('form', null);
        const valuesMap = new Map();
        const { validate } = useValidation(props);
        const { icons } = useIcons();
        const classes = computed(() => ({
            'v-checkbox': true,
            'v-checkbox--disabled': props.disabled,
            'v-checkbox--checked': isChecked.value,
            'v-validatable': props.validate,
        }));
        watch(() => props.modelValue, to => {
            if (Array.isArray(to)) {
                valuesMap.clear();
                to.forEach(it => valuesMap.set(toRaw(it), toRaw(it)));
                isChecked.value = !!valuesMap.get(toRaw(props.value));
            }
            else {
                isChecked.value = !!props.modelValue;
            }
        }, { immediate: true });
        const validateValue = () => {
            return validate(isChecked.value);
        };
        const genLabel = () => {
            const propsData = {
                absolute: false,
                disabled: props.disabled,
            };
            return h(VLabel, propsData, { default: () => props.label });
        };
        const genLabelWrapper = () => {
            return h('div', { class: 'v-checkbox__label' }, genLabel());
        };
        const genIcon = () => {
            const icon = isChecked.value ? icons.$checkbox : icons.$box;
            const propsData = {
                icon,
                size: sizes.sm,
                color: props.color,
                disabled: props.disabled,
            };
            return h(VIcon, propsData);
        };
        const genCheckbox = () => {
            return h('div', { class: 'v-checkbox__square' }, genIcon());
        };
        const computeValue = () => {
            if (Array.isArray(props.modelValue)) {
                if (isChecked.value) {
                    valuesMap.delete(toRaw(props.value));
                }
                else {
                    valuesMap.set(toRaw(props.value), toRaw(props.value));
                }
                return Array.from(valuesMap.values());
            }
            return (isChecked.value = !isChecked.value);
        };
        const onClick = () => {
            if (props.disabled)
                return;
            const value = computeValue();
            props.validate && validateValue();
            emit('update:modelValue', value);
            emit('checked', value);
        };
        onBeforeMount(() => {
            form?.add(validateValue);
        });
        onBeforeUnmount(() => {
            form?.remove(validateValue);
        });
        return () => h('div', { class: classes.value, onClick }, [genCheckbox(), props.label && genLabelWrapper()]);
    },
});
//# sourceMappingURL=data:application/json;base64,