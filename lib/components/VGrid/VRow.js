import { defineComponent, h, computed } from 'vue';
import { toCamelCase } from '../../helpers';
const breakpoints = ['sm', 'md', 'lg', 'xl'];
const positions = ['start', 'center', 'end'];
export default defineComponent({
    name: 'v-row',
    props: {
        align: {
            type: String,
            default: null,
            validator: (str) => [...positions, 'baseline', 'stretch'].includes(str),
        },
        alignContent: {
            type: String,
            default: null,
            validator: (str) => [...positions, 'space-between', 'space-around', 'stretch'].includes(str),
        },
        justify: {
            type: String,
            default: null,
            validator: (str) => [...positions, 'space-between', 'space-around'].includes(str),
        },
        noGutter: Boolean,
        ...breakpoints.reduce((props, bp) => {
            props[`justify-${bp}`] = {
                type: String,
                default: null,
                validator: (str) => [...positions, 'space-between', 'space-around'].includes(str),
            };
            props[`align-${bp}`] = {
                type: String,
                default: null,
                validator: (str) => [...positions, 'baseline', 'stretch'].includes(str),
            };
            props[`align-content-${bp}`] = {
                type: String,
                default: null,
                validator: (str) => [...positions, 'space-between', 'space-around', 'stretch'].includes(str),
            };
            return props;
        }, {}),
    },
    setup(props, { slots }) {
        const classes = computed(() => ({
            'v-row': true,
            'no-gutter': props.noGutter,
            [`justify-${props.justify}`]: !!props.justify,
            [`align-${props.align}`]: !!props.align,
            [`align-content-${props.alignContent}`]: !!props.alignContent,
            ...breakpoints.reduce((cls, bp) => {
                ;
                [...positions, 'space-between', 'space-around'].forEach((pos) => {
                    cls[`justify-${bp}-${pos}`] =
                        pos === props[toCamelCase('justify', bp)];
                });
                [...positions, 'baseline', 'stretch'].forEach((pos) => {
                    cls[`align-${bp}-${pos}`] =
                        pos === props[toCamelCase('align', bp)];
                });
                [...positions, 'space-between', 'space-around', 'stretch'].forEach((pos) => {
                    cls[`align-content-${bp}-${pos}`] =
                        pos === props[toCamelCase('align', 'content', bp)];
                });
                return cls;
            }, {}),
        }));
        return () => h('div', { class: classes.value }, { default: () => slots.default && slots.default() });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVlJvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3Z1ZWxhbmQvc3JjL2NvbXBvbmVudHMvVkdyaWQvVlJvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQVMsTUFBTSxLQUFLLENBQUE7QUFDekQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUUzQyxNQUFNLFdBQVcsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO0FBQzVDLE1BQU0sU0FBUyxHQUFHLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQTtBQUU1QyxlQUFlLGVBQWUsQ0FBQztJQUM3QixJQUFJLEVBQUUsT0FBTztJQUNiLEtBQUssRUFBRTtRQUNMLEtBQUssRUFBRTtZQUNMLElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLElBQUk7WUFDYixTQUFTLEVBQUUsQ0FBQyxHQUFXLEVBQUUsRUFBRSxDQUN6QixDQUFDLEdBQUcsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO1NBQ3REO1FBQ0QsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFLE1BQU07WUFDWixPQUFPLEVBQUUsSUFBSTtZQUNiLFNBQVMsRUFBRSxDQUFDLEdBQVcsRUFBRSxFQUFFLENBQ3pCLENBQUMsR0FBRyxTQUFTLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxTQUFTLENBQUMsQ0FBQyxRQUFRLENBQ2pFLEdBQUcsQ0FDSjtTQUNKO1FBQ0QsT0FBTyxFQUFFO1lBQ1AsSUFBSSxFQUFFLE1BQU07WUFDWixPQUFPLEVBQUUsSUFBSTtZQUNiLFNBQVMsRUFBRSxDQUFDLEdBQVcsRUFBRSxFQUFFLENBQ3pCLENBQUMsR0FBRyxTQUFTLEVBQUUsZUFB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d0JBQ25DLEdBQUcsS0FBTSxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQVksQ0FBQTtnQkFDbEUsQ0FBQyxDQUNGLENBQUE7Z0JBRUQsT0FBTyxHQUFHLENBQUE7WUFDWixDQUFDLEVBQUUsRUFBRSxDQUFDO1NBQ1AsQ0FBQyxDQUFDLENBQUE7UUFFSCxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FDWixLQUFLLEVBQ0wsRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUN4QixFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUNwRCxDQUFBO0lBQ0gsQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaCwgY29tcHV0ZWQsIFZOb2RlIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgdG9DYW1lbENhc2UgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG5jb25zdCBicmVha3BvaW50cyA9IFsnc20nLCAnbWQnLCAnbGcnLCAneGwnXVxuY29uc3QgcG9zaXRpb25zID0gWydzdGFydCcsICdjZW50ZXInLCAnZW5kJ11cblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3Ytcm93JyxcbiAgcHJvcHM6IHtcbiAgICBhbGlnbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgIHZhbGlkYXRvcjogKHN0cjogc3RyaW5nKSA9PlxuICAgICAgICBbLi4ucG9zaXRpb25zLCAnYmFzZWxpbmUnLCAnc3RyZXRjaCddLmluY2x1ZGVzKHN0ciksXG4gICAgfSxcbiAgICBhbGlnbkNvbnRlbnQ6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICB2YWxpZGF0b3I6IChzdHI6IHN0cmluZykgPT5cbiAgICAgICAgWy4uLnBvc2l0aW9ucywgJ3NwYWNlLWJldHdlZW4nLCAnc3BhY2UtYXJvdW5kJywgJ3N0cmV0Y2gnXS5pbmNsdWRlcyhcbiAgICAgICAgICBzdHIsXG4gICAgICAgICksXG4gICAgfSxcbiAgICBqdXN0aWZ5OiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgdmFsaWRhdG9yOiAoc3RyOiBzdHJpbmcpID0+XG4gICAgICAgIFsuLi5wb3NpdGlvbnMsICdzcGFjZS1iZXR3ZWVuJywgJ3NwYWNlLWFyb3VuZCddLmluY2x1ZGVzKHN0ciksXG4gICAgfSxcbiAgICBub0d1dHRlcjogQm9vbGVhbixcbiAgICAuLi5icmVha3BvaW50cy5yZWR1Y2UoKHByb3BzLCBicCkgPT4ge1xuICAgICAgcHJvcHNbYGp1c3RpZnktJHsgYnAgfWBdID0ge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgIHZhbGlkYXRvcjogKHN0cjogc3RyaW5nKSA9PlxuICAgICAgICAgIFsuLi5wb3NpdGlvbnMsICdzcGFjZS1iZXR3ZWVuJywgJ3NwYWNlLWFyb3VuZCddLmluY2x1ZGVzKHN0ciksXG4gICAgICB9XG4gICAgICBwcm9wc1tgYWxpZ24tJHsgYnAgfWBdID0ge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgIHZhbGlkYXRvcjogKHN0cjogc3RyaW5nKSA9PlxuICAgICAgICAgIFsuLi5wb3NpdGlvbnMsICdiYXNlbGluZScsICdzdHJldGNoJ10uaW5jbHVkZXMoc3RyKSxcbiAgICAgIH1cbiAgICAgIHByb3BzW2BhbGlnbi1jb250ZW50LSR7IGJwIH1gXSA9IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICB2YWxpZGF0b3I6IChzdHI6IHN0cmluZykgPT5cbiAgICAgICAgICBbLi4ucG9zaXRpb25zLCAnc3BhY2UtYmV0d2VlbicsICdzcGFjZS1hcm91bmQnLCAnc3RyZXRjaCddLmluY2x1ZGVzKFxuICAgICAgICAgICAgc3RyLFxuICAgICAgICAgICksXG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvcHNcbiAgICB9LCB7fSksXG4gIH0sXG5cbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSk6ICgpID0+IFZOb2RlIHtcbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQ8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KCgpID0+ICh7XG4gICAgICAndi1yb3cnOiB0cnVlLFxuICAgICAgJ25vLWd1dHRlcic6IHByb3BzLm5vR3V0dGVyLFxuICAgICAgW2BqdXN0aWZ5LSR7IHByb3BzLmp1c3RpZnkgfWBdOiAhIXByb3BzLmp1c3RpZnksXG4gICAgICBbYGFsaWduLSR7IHByb3BzLmFsaWduIH1gXTogISFwcm9wcy5hbGlnbixcbiAgICAgIFtgYWxpZ24tY29udGVudC0keyBwcm9wcy5hbGlnbkNvbnRlbnQgfWBdOiAhIXByb3BzLmFsaWduQ29udGVudCxcblxuICAgICAgLi4uYnJlYWtwb2ludHMucmVkdWNlKChjbHMsIGJwKSA9PiB7XG4gICAgICAgIDtbLi4ucG9zaXRpb25zLCAnc3BhY2UtYmV0d2VlbicsICdzcGFjZS1hcm91bmQnXS5mb3JFYWNoKChwb3MpID0+IHtcbiAgICAgICAgICBjbHNbYGp1c3RpZnktJHsgYnAgfS0keyBwb3MgfWBdID1cbiAgICAgICAgICAgIHBvcyA9PT0gKHByb3BzW3RvQ2FtZWxDYXNlKCdqdXN0aWZ5JywgYnApXSBhcyBzdHJpbmcpXG4gICAgICAgIH0pXG5cbiAgICAgICAgO1suLi5wb3NpdGlvbnMsICdiYXNlbGluZScsICdzdHJldGNoJ10uZm9yRWFjaCgocG9zKSA9PiB7XG4gICAgICAgICAgY2xzW2BhbGlnbi0keyBicCB9LSR7IHBvcyB9YF0gPVxuICAgICAgICAgICAgcG9zID09PSAocHJvcHNbdG9DYW1lbENhc2UoJ2FsaWduJywgYnApXSBhcyBzdHJpbmcpXG4gICAgICAgIH0pXG5cbiAgICAgICAgO1suLi5wb3NpdGlvbnMsICdzcGFjZS1iZXR3ZWVuJywgJ3NwYWNlLWFyb3VuZCcsICdzdHJldGNoJ10uZm9yRWFjaChcbiAgICAgICAgICAocG9zKSA9PiB7XG4gICAgICAgICAgICBjbHNbYGFsaWduLWNvbnRlbnQtJHsgYnAgfS0keyBwb3MgfWBdID1cbiAgICAgICAgICAgICAgcG9zID09PSAocHJvcHNbdG9DYW1lbENhc2UoJ2FsaWduJywgJ2NvbnRlbnQnLCBicCldIGFzIHN0cmluZylcbiAgICAgICAgICB9LFxuICAgICAgICApXG5cbiAgICAgICAgcmV0dXJuIGNsc1xuICAgICAgfSwge30pLFxuICAgIH0pKVxuXG4gICAgcmV0dXJuICgpID0+IGgoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgY2xhc3M6IGNsYXNzZXMudmFsdWUgfSxcbiAgICAgIHsgZGVmYXVsdDogKCkgPT4gc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCkgfSxcbiAgICApXG4gIH0sXG59KVxuIl19