import { h, defineComponent, ref, computed } from 'vue';
import { VInput } from '../VInput';
import { VChip } from '../VChip';
import { useIcons } from '../../composables/use-icons';
import { useInputStates } from '../../composables/use-input-states';
import { uniqueArray } from '../../helpers';
export default defineComponent({
    name: 'v-file-input',
    props: {
        disabled: Boolean,
        multiple: Boolean,
        chipColor: {
            type: String,
            default: 'primary',
        },
        value: {
            type: Array,
            default: () => [],
        },
    },
    emits: ['update:value', 'delete'],
    setup(props, { emit, attrs }) {
        const { icons } = useIcons();
        const { isDisabled, isReadonly } = useInputStates(props, { emit, attrs });
        const inputRef = ref(null);
        const srcRef = ref(null);
        const classes = computed(() => ({
            'v-file-input': true,
            'v-file-input--disabled': isDisabled.value,
            'v-file-input--readonly': isReadonly.value,
            'v-file-input--multiple': props.multiple,
        }));
        const onChange = (event) => {
            let files = Array.from(event.target.files);
            if (props.multiple) {
                files = uniqueArray(props.value.concat(files));
            }
            event.target.value = '';
            emit('update:value', files);
        };
        const onClose = (file) => {
            const files = props.value.filter(it => {
                return file.name !== it.name;
            });
            emit('update:value', files);
            emit('delete', file);
        };
        const onClick = ({ srcElement }) => {
            if (srcElement !== srcRef.value)
                return;
            inputRef.value.click();
        };
        const genFileInput = () => {
            return h('input', {
                class: 'v-file-input__field',
                type: 'file',
                multiple: props.multiple,
                ref: inputRef,
                style: {
                    position: 'absolute',
                    visibility: 'hidden',
                },
                onChange,
            });
        };
        const genChips = () => {
            return uniqueArray(props.value)
                .map(file => h(VChip, {
                title: file.name,
                class: 'ma-1',
                color: props.chipColor,
                onClose: () => onClose(file),
            }));
        };
        const genChipsContainer = () => {
            return h('div', {
                class: 'v-file-input__container',
                ref: srcRef,
            }, genChips());
        };
        const genComponent = () => h('div', {
            class: classes.value,
            onClick,
        }, [
            genFileInput(),
            genChipsContainer(),
        ]);
        return () => h(VInput, {
            prependIcon: icons.$paperclip,
            file: true,
            disabled: isDisabled.value,
        }, {
            'text-field': () => genComponent(),
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkZpbGVJbnB1dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZGaWxlSW5wdXQvVkZpbGVJbnB1dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsQ0FBQyxFQUFFLGVBQWUsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFZLE1BQU0sS0FBSyxDQUFBO0FBRWpFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFDbEMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUVoQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sNkJBQTZCLENBQUE7QUFDdEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9DQUFvQyxDQUFBO0FBRW5FLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFFM0MsZUFBZSxlQUFlLENBQUM7SUFDN0IsSUFBSSxFQUFFLGNBQWM7SUFDcEIsS0FBSyxFQUFFO1FBQ0wsUUFBUSxFQUFFLE9BQU87UUFDakIsUUFBUSxFQUFFLE9BQU87UUFDakIsU0FBUyxFQUFFO1lBQ1QsSUFBSSxFQUFFLE1BQU07WUFDWixPQUFPLEVBQUUsU0FBUztTQUNuQjtRQUNELEtBQUssRUFBRTtZQUNMLElBQUksRUFBRSxLQUE4QjtZQUNwQyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRTtTQUNsQjtLQUNGO0lBQ0QsS0FBSyxFQUFFLENBQUMsY0FBYyxFQUFFLFFBQVEsQ0FBQztJQUNqQyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRTtRQUMxQixNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsUUFBUSxFQUFFLENBQUE7UUFDNUIsTUFBTSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsR0FBRyxjQUFjLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUE7UUFF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QyxDQUFDLENBQUMsS0FBSyxFQUFFO1lBQ2xDLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSztZQUNwQixPQUFPO1NBQ1IsRUFBRTtZQUNELFlBQVksRUFBRTtZQUNkLGlCQUFpQixFQUFFO1NBQ3BCLENBQUMsQ0FBQTtRQUVGLE9BQU8sR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRTtZQUNyQixXQUFXLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDN0IsSUFBSSxFQUFFLElBQUk7WUFDVixRQUFRLEVBQUUsVUFBVSxDQUFDLEtBQUs7U0FDM0IsRUFBRTtZQUNELFlBQVksRUFBRSxHQUFHLEVBQUUsQ0FBQyxZQUFZLEVBQUU7U0FDbkMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGgsIGRlZmluZUNvbXBvbmVudCwgcmVmLCBjb21wdXRlZCwgUHJvcFR5cGUgfSBmcm9tICd2dWUnXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWSW5wdXQgfSBmcm9tICcuLi9WSW5wdXQnXG5pbXBvcnQgeyBWQ2hpcCB9IGZyb20gJy4uL1ZDaGlwJ1xuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZUljb25zIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvdXNlLWljb25zJ1xuaW1wb3J0IHsgdXNlSW5wdXRTdGF0ZXMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy91c2UtaW5wdXQtc3RhdGVzJ1xuLy8gSGVscGVyc1xuaW1wb3J0IHsgdW5pcXVlQXJyYXkgfSBmcm9tICcuLi8uLi9oZWxwZXJzJ1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1maWxlLWlucHV0JyxcbiAgcHJvcHM6IHtcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICBtdWx0aXBsZTogQm9vbGVhbixcbiAgICBjaGlwQ29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdwcmltYXJ5JyxcbiAgICB9LFxuICAgIHZhbHVlOiB7XG4gICAgICB0eXBlOiBBcnJheSBhcyBQcm9wVHlwZTxBcnJheTxGaWxlPj4sXG4gICAgICBkZWZhdWx0OiAoKSA9PiBbXSxcbiAgICB9LFxuICB9LFxuICBlbWl0czogWyd1cGRhdGU6dmFsdWUnLCAnZGVsZXRlJ10sXG4gIHNldHVwKHByb3BzLCB7IGVtaXQsIGF0dHJzIH0pIHtcbiAgICBjb25zdCB7IGljb25zIH0gPSB1c2VJY29ucygpXG4gICAgY29uc3QgeyBpc0Rpc2FibGVkLCBpc1JlYWRvbmx5IH0gPSB1c2VJbnB1dFN0YXRlcyhwcm9wcywgeyBlbWl0LCBhdHRycyB9KVxuXG4gICAgY29uc3QgaW5wdXRSZWYgPSByZWY8TWF5YmU8SFRNTElucHV0RWxlbWVudD4+KG51bGwpXG4gICAgY29uc3Qgc3JjUmVmID0gcmVmPE1heWJlPEhUTUxFbGVtZW50Pj4obnVsbClcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgJ3YtZmlsZS1pbnB1dCc6IHRydWUsXG4gICAgICAndi1maWxlLWlucHV0LS1kaXNhYmxlZCc6IGlzRGlzYWJsZWQudmFsdWUsXG4gICAgICAndi1maWxlLWlucHV0LS1yZWFkb25seSc6IGlzUmVhZG9ubHkudmFsdWUsXG4gICAgICAndi1maWxlLWlucHV0LS1tdWx0aXBsZSc6IHByb3BzLm11bHRpcGxlLFxuICAgIH0pKVxuXG4gICAgY29uc3Qgb25DaGFuZ2UgPSAoZXZlbnQpID0+IHtcbiAgICAgIGxldCBmaWxlcyA9IEFycmF5LmZyb20oZXZlbnQudGFyZ2V0LmZpbGVzKSBhcyBGaWxlW11cblxuICAgICAgaWYgKHByb3BzLm11bHRpcGxlKSB7XG4gICAgICAgIGZpbGVzID0gdW5pcXVlQXJyYXk8RmlsZT4ocHJvcHMudmFsdWUuY29uY2F0KGZpbGVzKSlcbiAgICAgIH1cblxuICAgICAgZXZlbnQudGFyZ2V0LnZhbHVlID0gJydcbiAgICAgIGVtaXQoJ3VwZGF0ZTp2YWx1ZScsIGZpbGVzKVxuICAgIH1cblxuICAgIGNvbnN0IG9uQ2xvc2UgPSAoZmlsZSkgPT4ge1xuICAgICAgY29uc3QgZmlsZXMgPSBwcm9wcy52YWx1ZS5maWx0ZXIoaXQgPT4ge1xuICAgICAgICByZXR1cm4gZmlsZS5uYW1lICE9PSBpdC5uYW1lXG4gICAgICB9KVxuXG4gICAgICBlbWl0KCd1cGRhdGU6dmFsdWUnLCBmaWxlcylcbiAgICAgIGVtaXQoJ2RlbGV0ZScsIGZpbGUpXG4gICAgfVxuXG4gICAgY29uc3Qgb25DbGljayA9ICh7IHNyY0VsZW1lbnQgfSkgPT4ge1xuICAgICAgaWYgKHNyY0VsZW1lbnQgIT09IHNyY1JlZi52YWx1ZSkgcmV0dXJuXG4gICAgICBpbnB1dFJlZi52YWx1ZSEuY2xpY2soKVxuICAgIH1cblxuICAgIGNvbnN0IGdlbkZpbGVJbnB1dCA9ICgpID0+IHtcbiAgICAgIHJldHVybiBoKCdpbnB1dCcsIHtcbiAgICAgICAgY2xhc3M6ICd2LWZpbGUtaW5wdXRfX2ZpZWxkJyxcbiAgICAgICAgdHlwZTogJ2ZpbGUnLFxuICAgICAgICBtdWx0aXBsZTogcHJvcHMubXVsdGlwbGUsXG4gICAgICAgIHJlZjogaW5wdXRSZWYsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2hhbmdlLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5DaGlwcyA9ICgpID0+IHtcbiAgICAgIHJldHVybiB1bmlxdWVBcnJheTxGaWxlPihwcm9wcy52YWx1ZSlcbiAgICAgICAgLm1hcChmaWxlID0+IGgoVkNoaXAsIHtcbiAgICAgICAgICAgIHRpdGxlOiBmaWxlLm5hbWUsXG4gICAgICAgICAgICBjbGFzczogJ21hLTEnLFxuICAgICAgICAgICAgY29sb3I6IHByb3BzLmNoaXBDb2xvcixcbiAgICAgICAgICAgIG9uQ2xvc2U6ICgpID0+IG9uQ2xvc2UoZmlsZSksXG4gICAgICAgICAgfSksXG4gICAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBnZW5DaGlwc0NvbnRhaW5lciA9ICgpID0+IHtcbiAgICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzOiAndi1maWxlLWlucHV0X19jb250YWluZXInLFxuICAgICAgICByZWY6IHNyY1JlZixcbiAgICAgIH0sIGdlbkNoaXBzKCkpXG4gICAgfVxuXG4gICAgY29uc3QgZ2VuQ29tcG9uZW50ID0gKCkgPT4gaCgnZGl2Jywge1xuICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICBvbkNsaWNrLFxuICAgIH0sIFtcbiAgICAgIGdlbkZpbGVJbnB1dCgpLFxuICAgICAgZ2VuQ2hpcHNDb250YWluZXIoKSxcbiAgICBdKVxuXG4gICAgcmV0dXJuICgpID0+IGgoVklucHV0LCB7XG4gICAgICBwcmVwZW5kSWNvbjogaWNvbnMuJHBhcGVyY2xpcCxcbiAgICAgIGZpbGU6IHRydWUsXG4gICAgICBkaXNhYmxlZDogaXNEaXNhYmxlZC52YWx1ZSxcbiAgICB9LCB7XG4gICAgICAndGV4dC1maWVsZCc6ICgpID0+IGdlbkNvbXBvbmVudCgpLFxuICAgIH0pXG4gIH0sXG59KVxuIl19