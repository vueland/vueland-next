import { defineComponent, h, computed, ref } from 'vue';
import { VInput } from '../VInput';
import { useInputStates } from '../../composables/use-input-states';
import { validationProps } from '../../composables/use-validation';
export default defineComponent({
    name: 'v-text-field',
    components: {
        VInput,
    },
    inheritAttrs: true,
    props: {
        modelValue: {
            type: [String, Number],
            default: '',
        },
        ...validationProps(),
    },
    emits: ['update:modelValue', 'input', 'blur', 'focus', 'change'],
    setup(props, { emit, attrs, slots }) {
        const inputRef = ref(null);
        const { isReadonly, isDisabled, onChange, } = useInputStates(props, { emit, attrs });
        const classes = computed(() => ({
            'v-text-field': true,
            'v-text-field--disabled': isDisabled.value,
            'v-text-field--readonly': isReadonly.value,
        }));
        const computedValue = computed({
            get: () => props.modelValue,
            set: (val) => {
                emit('input', val);
                emit('update:modelValue', val);
            },
        });
        const onFocus = () => {
            inputRef.value.onFocus();
        };
        const onBlur = () => {
            inputRef.value.onBlur();
        };
        const onInput = (e) => {
            computedValue.value = e.target.value;
        };
        const genInputField = (textClassColor, textCssColor) => {
            return h('input', {
                class: {
                    'v-text-field__input': true,
                    ...(!attrs.disabled && textClassColor),
                },
                style: {
                    ...(!attrs.disabled ? textCssColor : {}),
                },
                disabled: attrs.disabled,
                type: attrs.type || 'text',
                placeholder: attrs.placeholder,
                readonly: attrs.readonly,
                autocomplete: attrs.autocomplete,
                value: computedValue.value,
                onInput,
                onFocus,
                onBlur,
                onChange,
            });
        };
        const genTextFieldWrapper = (clsColor, cssColor) => {
            return h('div', {
                class: classes.value,
            }, genInputField(clsColor, cssColor));
        };
        return () => h(VInput, {
            value: computedValue.value,
            rules: props.rules,
            ref: inputRef,
        }, {
            ['text-field']: ({ textClassColor, textCssColor }) => {
                return genTextFieldWrapper(textClassColor, textCssColor);
            },
            ...(slots['prepend-icon'] ? { ['prepend-icon']: () => slots['prepend-icon']?.() } : {}),
            ...(slots['append-icon'] ? { ['append-icon']: () => slots['append-icon']?.() } : {}),
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVlRleHRGaWVsZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZUZXh0RmllbGQvVlRleHRGaWVsZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLE1BQU0sS0FBSyxDQUFBO0FBRXZELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFFbEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9DQUFvQyxDQUFBO0FBQ25FLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQTtBQUVsRSxlQUFlLGVBQWUsQ0FBQztJQUM3QixJQUFJLEVBQUUsY0FBYztJQUNwQixVQUFVLEVBQUU7UUFDVixNQUFNO0tBQ1A7SUFDRCxZQUFZLEVBQUUsSUFBSTtJQUNsQixLQUFLLEVBQUU7UUFDTCxVQUFVLEVBQUU7WUFDVixJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO1lBQ3RCLE9BQU8sRUFBRSxFQUFFO1NBQ1o7UUFDRCxHQUFHLGVBQWUsRUFBRTtLQUNyQjtJQUNELEtBQUssRUFBRSxDQUFDLG1CQUFtQixFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQztJQUVoRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUU7UUFDakMsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQzFCLE1BQU0sRUFDSixVQUFVLEVBQ1YsVUFBVSxFQUNWLFFBQVEsR0FDVCxHQUFHLGNBQWMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtRQUUxQyxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQTBCLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDdkQsY0FB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QUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsYUFBYSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7U0FDbkYsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFZ1ZSBBUElcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaCwgY29tcHV0ZWQsIHJlZiB9IGZyb20gJ3Z1ZSdcbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZJbnB1dCB9IGZyb20gJy4uL1ZJbnB1dCdcbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VJbnB1dFN0YXRlcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3VzZS1pbnB1dC1zdGF0ZXMnXG5pbXBvcnQgeyB2YWxpZGF0aW9uUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy91c2UtdmFsaWRhdGlvbidcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ3YtdGV4dC1maWVsZCcsXG4gIGNvbXBvbmVudHM6IHtcbiAgICBWSW5wdXQsXG4gIH0sXG4gIGluaGVyaXRBdHRyczogdHJ1ZSxcbiAgcHJvcHM6IHtcbiAgICBtb2RlbFZhbHVlOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogJycsXG4gICAgfSxcbiAgICAuLi52YWxpZGF0aW9uUHJvcHMoKSxcbiAgfSxcbiAgZW1pdHM6IFsndXBkYXRlOm1vZGVsVmFsdWUnLCAnaW5wdXQnLCAnYmx1cicsICdmb2N1cycsICdjaGFuZ2UnXSxcblxuICBzZXR1cChwcm9wcywgeyBlbWl0LCBhdHRycywgc2xvdHMgfSkge1xuICAgIGNvbnN0IGlucHV0UmVmID0gcmVmKG51bGwpXG4gICAgY29uc3Qge1xuICAgICAgaXNSZWFkb25seSxcbiAgICAgIGlzRGlzYWJsZWQsXG4gICAgICBvbkNoYW5nZSxcbiAgICB9ID0gdXNlSW5wdXRTdGF0ZXMocHJvcHMsIHsgZW1pdCwgYXR0cnMgfSlcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICAgICd2LXRleHQtZmllbGQnOiB0cnVlLFxuICAgICAgJ3YtdGV4dC1maWVsZC0tZGlzYWJsZWQnOiBpc0Rpc2FibGVkLnZhbHVlLFxuICAgICAgJ3YtdGV4dC1maWVsZC0tcmVhZG9ubHknOiBpc1JlYWRvbmx5LnZhbHVlLFxuICAgIH0pKVxuXG4gICAgY29uc3QgY29tcHV0ZWRWYWx1ZSA9IGNvbXB1dGVkKHtcbiAgICAgIGdldDogKCkgPT4gcHJvcHMubW9kZWxWYWx1ZSxcblxuICAgICAgc2V0OiAodmFsOiBzdHJpbmcpID0+IHtcbiAgICAgICAgZW1pdCgnaW5wdXQnLCB2YWwpXG4gICAgICAgIGVtaXQoJ3VwZGF0ZTptb2RlbFZhbHVlJywgdmFsKVxuICAgICAgfSxcbiAgICB9KVxuXG4gICAgY29uc3Qgb25Gb2N1cyA9ICgpID0+IHtcbiAgICAgIChpbnB1dFJlZi52YWx1ZSBhcyBhbnkpIS5vbkZvY3VzKClcbiAgICB9XG5cbiAgICBjb25zdCBvbkJsdXIgPSAoKSA9PiB7XG4gICAgICAoaW5wdXRSZWYudmFsdWUgYXMgYW55KSEub25CbHVyKClcbiAgICB9XG5cbiAgICBjb25zdCBvbklucHV0ID0gKGUpID0+IHtcbiAgICAgIGNvbXB1dGVkVmFsdWUudmFsdWUgPSBlLnRhcmdldC52YWx1ZVxuICAgIH1cblxuICAgIGNvbnN0IGdlbklucHV0RmllbGQgPSAodGV4dENsYXNzQ29sb3IsIHRleHRDc3NDb2xvcikgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2lucHV0Jywge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LXRleHQtZmllbGRfX2lucHV0JzogdHJ1ZSxcbiAgICAgICAgICAuLi4oIWF0dHJzLmRpc2FibGVkICYmIHRleHRDbGFzc0NvbG9yKSxcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAuLi4oIWF0dHJzLmRpc2FibGVkID8gdGV4dENzc0NvbG9yIDoge30pLFxuICAgICAgICB9LFxuICAgICAgICBkaXNhYmxlZDogYXR0cnMuZGlzYWJsZWQsXG4gICAgICAgIHR5cGU6IGF0dHJzLnR5cGUgfHwgJ3RleHQnLFxuICAgICAgICBwbGFjZWhvbGRlcjogYXR0cnMucGxhY2Vob2xkZXIsXG4gICAgICAgIHJlYWRvbmx5OiBhdHRycy5yZWFkb25seSxcbiAgICAgICAgYXV0b2NvbXBsZXRlOiBhdHRycy5hdXRvY29tcGxldGUsXG4gICAgICAgIHZhbHVlOiBjb21wdXRlZFZhbHVlLnZhbHVlLFxuICAgICAgICBvbklucHV0LFxuICAgICAgICBvbkZvY3VzLFxuICAgICAgICBvbkJsdXIsXG4gICAgICAgIG9uQ2hhbmdlLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnZW5UZXh0RmllbGRXcmFwcGVyID0gKGNsc0NvbG9yLCBjc3NDb2xvcikgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcbiAgICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgZ2VuSW5wdXRGaWVsZChjbHNDb2xvciwgY3NzQ29sb3IpLFxuICAgICAgKVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiBoKFZJbnB1dCwge1xuICAgICAgdmFsdWU6IGNvbXB1dGVkVmFsdWUudmFsdWUsXG4gICAgICBydWxlczogcHJvcHMucnVsZXMsXG4gICAgICByZWY6IGlucHV0UmVmLFxuICAgIH0sIHtcbiAgICAgIFsndGV4dC1maWVsZCddOiAoeyB0ZXh0Q2xhc3NDb2xvciwgdGV4dENzc0NvbG9yIH0pID0+IHtcbiAgICAgICAgcmV0dXJuIGdlblRleHRGaWVsZFdyYXBwZXIodGV4dENsYXNzQ29sb3IsIHRleHRDc3NDb2xvcilcbiAgICAgIH0sXG4gICAgICAuLi4oc2xvdHNbJ3ByZXBlbmQtaWNvbiddID8ge1sncHJlcGVuZC1pY29uJ106ICgpID0+IHNsb3RzWydwcmVwZW5kLWljb24nXT8uKCl9IDoge30pLFxuICAgICAgLi4uKHNsb3RzWydhcHBlbmQtaWNvbiddID8ge1snYXBwZW5kLWljb24nXTogKCkgPT4gc2xvdHNbJ2FwcGVuZC1pY29uJ10/LigpfSA6IHt9KSxcbiAgICB9KVxuICB9LFxufSlcbiJdfQ==