import { defineComponent, provide, reactive, h, withDirectives, onMounted, } from 'vue';
import { resize } from '../../directives';
import { breakpoints } from '../../services/breakpoints';
import { throttle } from '../../utils/throttle';
export default defineComponent({
    name: 'v-app',
    directives: {
        resize,
    },
    props: {
        global: {
            type: Object,
            default: null,
        },
    },
    setup(props, { slots }) {
        const THROTTLING_TIMEOUT = 60;
        const state = reactive({
            current: null,
            xlAndLess: false,
            lgAndLess: false,
            mdAndLess: false,
            smAndLess: false,
        });
        provide('$v_breakpoints', state);
        const setCurrentBreakpoint = (screen) => {
            if (screen >= breakpoints.xl) {
                return (state.current = 'xl');
            }
            if (screen >= breakpoints.lg && screen < breakpoints.xl) {
                return (state.current = 'lg');
            }
            if (screen >= breakpoints.md && screen < breakpoints.lg) {
                return (state.current = 'md');
            }
            if (screen >= breakpoints.sm && screen < breakpoints.md) {
                return (state.current = 'sm');
            }
            return (state.current = 'sm');
        };
        const setIntervals = (screen) => {
            const { xl, lg, md, sm } = breakpoints;
            state.xlAndLess = screen <= xl && screen > lg;
            state.lgAndLess = screen <= lg && screen > md;
            state.mdAndLess = screen <= md && screen > sm;
            state.smAndLess = screen <= sm;
        };
        const setSizes = () => {
            const { innerWidth } = props.global || window;
            setCurrentBreakpoint(innerWidth);
            setIntervals(innerWidth);
        };
        const throttledResizeListener = throttle(setSizes, THROTTLING_TIMEOUT);
        const genAppWrapper = () => {
            return h('div', { class: 'v-app--wrapper' }, {
                default: () => slots.default && slots.default(),
            });
        };
        onMounted(() => setSizes());
        return () => withDirectives(h('div', { class: 'v-app' }, genAppWrapper()), [[resize, throttledResizeListener]]);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkFwcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZBcHAvVkFwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsZUFBZSxFQUNmLE9BQU8sRUFDUCxRQUFRLEVBQ1IsQ0FBQyxFQUNELGNBQWMsRUFDZCxTQUFTLEdBQ1YsTUFBTSxLQUFLLENBQUE7QUFHWixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFHekMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDRCQUE0QixDQUFBO0FBR3hELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQVkvQyxlQUFlLGVBQWUsQ0FBQztJQUM3QixJQUFJLEVBQUUsT0FBTztJQUNiLFVBQVUsRUFBRTtRQUNWLE1BQU07S0FDUDtJQUNELEtBQUssRUFBRTtRQUNMLE1BQU0sRUFBRTtZQUNOLElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLElBQUk7U0FDZDtLQUNGO0lBQ0QsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRTtRQUNwQixNQUFNLGtCQUFrQixHQUFHLEVBQUUsQ0FBQTtRQUU3QixNQUFNLEtBQUssR0FBRyxRQUFRLENBQWlCO1lBQ3JDLE9BQU8sRUFBRSxJQUFJO1lBQ2IsU0FBUyxFQUFFLEtBQUs7WUFDaEIsU0FBUyxFQUFFLEtBQUs7WUFDaEIsU0FBUyxFQUFFLEtBQUs7WUFDaEIsU0FBUyxFQUFFLEtBQUs7U0FDakIsQ0FBQyxDQUFBO1FBRUYsT0FBTyxDQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxDQUFBO1FBRWhDLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUN0QyxJQUFJLE1BQU0sSUFBSSxXQUFXLENBQUMsRUFBRSxFQUFFO2dCQUM1QixPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQTthQUM5QjtZQUNELElBQUksTUFBTSxJQUFJLFdBQVcsQ0FBQyxFQUFFLElBQUksTUFBTSxHQUFHLFdBQVcsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZELE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFBO2FBQzlCO1lBQ0QsSUFBSSxNQUFNLElBQUksV0FBVyxDQUFDLEVBQUUsSUFBSSxNQUFNLEdBQUcsV0FBVyxDQUFDLEVBQUUsRUFBRTtnQkFDdkQsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUE7YUFDOUI7WUFDRCxJQUFJLE1BQU0sSUFBSSxXQUFXLENBQUMsRUFBRSxJQUFJLE1BQU0sR0FBRyxXQUFXLENBQUMsRUFBRSxFQUFFO2dCQUN2RCxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQTthQUM5QjtZQUVELE9BQVEsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFBO1FBQ2hDLENBQUMsQ0FBQTtRQUVELE1BQU0sWUFBWSxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDOUIsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLFdBQVcsQ0FBQTtZQUV0QyxLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU0sSUFBSSxFQUFFLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQTtZQUM3QyxLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU0sSUFBSSxFQUFFLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQTtZQUM3QyxLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU0sSUFBSSxFQUFFLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQTtZQUM3QyxLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU0sSUFBSSxFQUFFLENBQUE7UUFDaEMsQ0FBQyxDQUFBO1FBRUQsTUFBTSxRQUFRLEdBQUcsR0FBRyxFQUFFO1lBQ3BCLE1BQU0sRUFBRSxVQUFVLEVBQUUsR0FBRyxLQUFLLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQTtZQUU3QyxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsQ0FBQTtZQUNoQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDMUIsQ0FBQyxDQUFBO1FBRUQsTUFBTSx1QkFBdUIsR0FBRyxRQUFRLENBQ3RDLFFBQVEsRUFDUixrQkFBa0IsQ0FDTCxDQUFBO1FBRWYsTUFBTSxhQUFhLEdBQUcsR0FBRyxFQUFFO1lBQ3pCLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxFQUFFO2dCQUMzQyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFO2FBQ2hELENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQTtRQUVELFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBRTNCLE9BQU8sR0FBRyxFQUFFLENBQ1YsY0FBYyxDQUNaLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQUUsYUFBYSxFQUFFLENBQUMsRUFDN0MsQ0FBQyxDQUFDLE1BQU0sRUFBRSx1QkFBdUIsQ0FBQyxDQUFDLENBQ3BDLENBQUE7SUFDTCxDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgZGVmaW5lQ29tcG9uZW50LFxuICBwcm92aWRlLFxuICByZWFjdGl2ZSxcbiAgaCxcbiAgd2l0aERpcmVjdGl2ZXMsXG4gIG9uTW91bnRlZCxcbn0gZnJvbSAndnVlJ1xuXG4vLyBEaXJlY3RpdmVzXG5pbXBvcnQgeyByZXNpemUgfSBmcm9tICcuLi8uLi9kaXJlY3RpdmVzJ1xuXG4vLyBTZXJ2aWNlc1xuaW1wb3J0IHsgYnJlYWtwb2ludHMgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9icmVha3BvaW50cydcblxuLy8gVXRpbHNcbmltcG9ydCB7IHRocm90dGxlIH0gZnJvbSAnLi4vLi4vdXRpbHMvdGhyb3R0bGUnXG5cbi8vIFR5cGVzXG5cbmludGVyZmFjZSBBcHBCcmVha3BvaW50cyB7XG4gIGN1cnJlbnQ6IE1heWJlPCd4bCcgfCAnbGcnIHwgJ21kJyB8ICdzbSc+XG4gIHhsQW5kTGVzczogYm9vbGVhblxuICBsZ0FuZExlc3M6IGJvb2xlYW5cbiAgbWRBbmRMZXNzOiBib29sZWFuXG4gIHNtQW5kTGVzczogYm9vbGVhblxufVxuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAndi1hcHAnLFxuICBkaXJlY3RpdmVzOiB7XG4gICAgcmVzaXplLFxuICB9LFxuICBwcm9wczoge1xuICAgIGdsb2JhbDoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICB9LFxuICB9LFxuICBzZXR1cChwcm9wcywgeyBzbG90cyB9KSB7XG4gICAgY29uc3QgVEhST1RUTElOR19USU1FT1VUID0gNjBcblxuICAgIGNvbnN0IHN0YXRlID0gcmVhY3RpdmU8QXBwQnJlYWtwb2ludHM+KHtcbiAgICAgIGN1cnJlbnQ6IG51bGwsXG4gICAgICB4bEFuZExlc3M6IGZhbHNlLFxuICAgICAgbGdBbmRMZXNzOiBmYWxzZSxcbiAgICAgIG1kQW5kTGVzczogZmFsc2UsXG4gICAgICBzbUFuZExlc3M6IGZhbHNlLFxuICAgIH0pXG5cbiAgICBwcm92aWRlKCckdl9icmVha3BvaW50cycsIHN0YXRlKVxuXG4gICAgY29uc3Qgc2V0Q3VycmVudEJyZWFrcG9pbnQgPSAoc2NyZWVuKSA9PiB7XG4gICAgICBpZiAoc2NyZWVuID49IGJyZWFrcG9pbnRzLnhsKSB7XG4gICAgICAgIHJldHVybiAoc3RhdGUuY3VycmVudCA9ICd4bCcpXG4gICAgICB9XG4gICAgICBpZiAoc2NyZWVuID49IGJyZWFrcG9pbnRzLmxnICYmIHNjcmVlbiA8IGJyZWFrcG9pbnRzLnhsKSB7XG4gICAgICAgIHJldHVybiAoc3RhdGUuY3VycmVudCA9ICdsZycpXG4gICAgICB9XG4gICAgICBpZiAoc2NyZWVuID49IGJyZWFrcG9pbnRzLm1kICYmIHNjcmVlbiA8IGJyZWFrcG9pbnRzLmxnKSB7XG4gICAgICAgIHJldHVybiAoc3RhdGUuY3VycmVudCA9ICdtZCcpXG4gICAgICB9XG4gICAgICBpZiAoc2NyZWVuID49IGJyZWFrcG9pbnRzLnNtICYmIHNjcmVlbiA8IGJyZWFrcG9pbnRzLm1kKSB7XG4gICAgICAgIHJldHVybiAoc3RhdGUuY3VycmVudCA9ICdzbScpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiAgKHN0YXRlLmN1cnJlbnQgPSAnc20nKVxuICAgIH1cblxuICAgIGNvbnN0IHNldEludGVydmFscyA9IChzY3JlZW4pID0+IHtcbiAgICAgIGNvbnN0IHsgeGwsIGxnLCBtZCwgc20gfSA9IGJyZWFrcG9pbnRzXG5cbiAgICAgIHN0YXRlLnhsQW5kTGVzcyA9IHNjcmVlbiA8PSB4bCAmJiBzY3JlZW4gPiBsZ1xuICAgICAgc3RhdGUubGdBbmRMZXNzID0gc2NyZWVuIDw9IGxnICYmIHNjcmVlbiA+IG1kXG4gICAgICBzdGF0ZS5tZEFuZExlc3MgPSBzY3JlZW4gPD0gbWQgJiYgc2NyZWVuID4gc21cbiAgICAgIHN0YXRlLnNtQW5kTGVzcyA9IHNjcmVlbiA8PSBzbVxuICAgIH1cblxuICAgIGNvbnN0IHNldFNpemVzID0gKCkgPT4ge1xuICAgICAgY29uc3QgeyBpbm5lcldpZHRoIH0gPSBwcm9wcy5nbG9iYWwgfHwgd2luZG93XG5cbiAgICAgIHNldEN1cnJlbnRCcmVha3BvaW50KGlubmVyV2lkdGgpXG4gICAgICBzZXRJbnRlcnZhbHMoaW5uZXJXaWR0aClcbiAgICB9XG5cbiAgICBjb25zdCB0aHJvdHRsZWRSZXNpemVMaXN0ZW5lciA9IHRocm90dGxlKFxuICAgICAgc2V0U2l6ZXMsXG4gICAgICBUSFJPVFRMSU5HX1RJTUVPVVQsXG4gICAgKSBhcyAoKSA9PiB2b2lkXG5cbiAgICBjb25zdCBnZW5BcHBXcmFwcGVyID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGgoJ2RpdicsIHsgY2xhc3M6ICd2LWFwcC0td3JhcHBlcicgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKSxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgb25Nb3VudGVkKCgpID0+IHNldFNpemVzKCkpXG5cbiAgICByZXR1cm4gKCkgPT5cbiAgICAgIHdpdGhEaXJlY3RpdmVzKFxuICAgICAgICBoKCdkaXYnLCB7IGNsYXNzOiAndi1hcHAnIH0sIGdlbkFwcFdyYXBwZXIoKSksXG4gICAgICAgIFtbcmVzaXplLCB0aHJvdHRsZWRSZXNpemVMaXN0ZW5lcl1dLFxuICAgICAgKVxuICB9LFxufSlcbiJdfQ==